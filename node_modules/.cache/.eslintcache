[{"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/index.js":"1","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/reportWebVitals.js":"2","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/App.js":"3","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/NavBar/NavBar.js":"4","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/Container.js":"5","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftContent.js":"6","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftList/LeftList.js":"7","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftList/LeftListStyle.js":"8","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/LeftListActive.js":"9","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/LeftListActiveStyle.js":"10","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/RightContent/RightContent.js":"11","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/RightContent/RightContentStyle.js":"12","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/ContainerStyle.js":"13","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftContentStyle.js":"14","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/NavBar/NavBarStyle.js":"15","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContainer.js":"16","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContent.js":"17","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContainerStyle.js":"18","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContentStyle.js":"19","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/BottomContent/BottomContent.js":"20","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/BottomContent/BottomContentStyle.js":"21","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckBoxList.js":"22","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckBox.js":"23","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckboxStyle.js":"24","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/ListActive.js":"25","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/ListActiveStyle.js":"26","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListView.js":"27","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListItem.js":"28","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListItemStyle.js":"29","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/ListActiveContextProvider.js":"30","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/AppStyle.js":"31","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/device.js":"32","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/providers/MidleContextProvider.js":"33","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardAddOrder/CardAddOrder.js":"34","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardAddOrder/CardAddOrderStyle.js":"35","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardListOrder/CardListOrder.js":"36","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardListOrder/CardListOrderStyle.js":"37","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Time/Time.js":"38","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Time/TimeStyle.js":"39","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/DiagramViewBox.js":"40","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js":"41","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/SymbolPalette.js":"42","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/SVG/Triangle/Triangle.js":"43","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Buffer/Buffer.js":"44","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Buffer/BufferStyle.js":"45","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Etap/Etap.js":"46","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Etap/EtapStyle.js":"47"},{"size":500,"mtime":1621409803339,"results":"48","hashOfConfig":"49"},{"size":362,"mtime":1621409803340,"results":"50","hashOfConfig":"49"},{"size":940,"mtime":1623247856247,"results":"51","hashOfConfig":"49"},{"size":1051,"mtime":1623416780974,"results":"52","hashOfConfig":"49"},{"size":985,"mtime":1623248237704,"results":"53","hashOfConfig":"49"},{"size":2777,"mtime":1623700911539,"results":"54","hashOfConfig":"49"},{"size":1490,"mtime":1623701010236,"results":"55","hashOfConfig":"49"},{"size":445,"mtime":1621492771066,"results":"56","hashOfConfig":"49"},{"size":1250,"mtime":1622631271010,"results":"57","hashOfConfig":"49"},{"size":551,"mtime":1621597779217,"results":"58","hashOfConfig":"49"},{"size":488,"mtime":1623247836860,"results":"59","hashOfConfig":"49"},{"size":506,"mtime":1623248302701,"results":"60","hashOfConfig":"49"},{"size":235,"mtime":1621680104876,"results":"61","hashOfConfig":"49"},{"size":526,"mtime":1623248110853,"results":"62","hashOfConfig":"49"},{"size":466,"mtime":1623246917022,"results":"63","hashOfConfig":"49"},{"size":606,"mtime":1623248243904,"results":"64","hashOfConfig":"49"},{"size":15734,"mtime":1623249556567,"results":"65","hashOfConfig":"49"},{"size":410,"mtime":1623248196642,"results":"66","hashOfConfig":"49"},{"size":259,"mtime":1623245295603,"results":"67","hashOfConfig":"49"},{"size":462,"mtime":1622753135036,"results":"68","hashOfConfig":"49"},{"size":419,"mtime":1622753135052,"results":"69","hashOfConfig":"49"},{"size":6247,"mtime":1621701410016,"results":"70","hashOfConfig":"49"},{"size":562,"mtime":1621492848122,"results":"71","hashOfConfig":"49"},{"size":454,"mtime":1621670409484,"results":"72","hashOfConfig":"49"},{"size":486,"mtime":1621684927457,"results":"73","hashOfConfig":"49"},{"size":267,"mtime":1621670272941,"results":"74","hashOfConfig":"49"},{"size":3893,"mtime":1621701447503,"results":"75","hashOfConfig":"49"},{"size":426,"mtime":1621673567703,"results":"76","hashOfConfig":"49"},{"size":749,"mtime":1621670402396,"results":"77","hashOfConfig":"49"},{"size":529,"mtime":1621700736166,"results":"78","hashOfConfig":"49"},{"size":560,"mtime":1621682400925,"results":"79","hashOfConfig":"49"},{"size":564,"mtime":1621682262024,"results":"80","hashOfConfig":"49"},{"size":672,"mtime":1621684974574,"results":"81","hashOfConfig":"49"},{"size":7240,"mtime":1623701004296,"results":"82","hashOfConfig":"49"},{"size":528,"mtime":1622559423196,"results":"83","hashOfConfig":"49"},{"size":2464,"mtime":1622708197970,"results":"84","hashOfConfig":"49"},{"size":740,"mtime":1622626319817,"results":"85","hashOfConfig":"49"},{"size":4020,"mtime":1623241204412,"results":"86","hashOfConfig":"49"},{"size":399,"mtime":1623241107643,"results":"87","hashOfConfig":"49"},{"size":16694,"mtime":1622728637698,"results":"88","hashOfConfig":"49"},{"size":9791,"mtime":1622743206865,"results":"89","hashOfConfig":"49"},{"size":3089,"mtime":1620390724401,"results":"90","hashOfConfig":"49"},{"size":3799,"mtime":1623659733927,"results":"91","hashOfConfig":"49"},{"size":4050,"mtime":1623239300179,"results":"92","hashOfConfig":"49"},{"size":448,"mtime":1623232280091,"results":"93","hashOfConfig":"49"},{"size":3355,"mtime":1623242318301,"results":"94","hashOfConfig":"49"},{"size":448,"mtime":1623238781061,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"5pkmf",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"98"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/index.js",[],["201","202"],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/reportWebVitals.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/App.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/NavBar/NavBar.js",["203","204","205"],"import React from \"react\";\nimport  NavBarStyle from \"./NavBarStyle\"\n\n\nclass NavBar extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n        };\n      }\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n      hendlerOnClick =(e)=>{\n        this.api(\"localhost\",\"5000\",\"/api/phones\")\n        .then((results) =>{\n          console.log(results)\n        })\n          \n      }\n\n      render() {\n        return (\n        <NavBarStyle>\n            <a onClick={this.props.hendlerOnClickLeft}>Открыть левое меню </a>\n            <a onClick={this.hendlerOnClick}> Open</a>\n            <h3>NavBar</h3>\n            <a onClick={this.props.hendlerOnClickRight}>Открыть правое меню </a>\n        </NavBarStyle>\n        )\n      }\n}\n\n\nexport default NavBar;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/Container.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftContent.js",["206"],"import React from \"react\";\nimport LeftContentStyle from \"./LeftContentStyle\"\n\nimport LeftList from \"./LeftList/LeftList\"\n\nimport LeftListActive from \"./LeftListActive/LeftListActive\"\n\n\n\nclass LeftContent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          ListActive: [],\n          ListUpdate: false\n        };\n      }\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n      // Пример отправки POST запроса:\n      async  postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *client\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return await response.json(); // parses JSON response into native JavaScript objects\n      }\n\n\n\n\n\n\n     handleAdd = (id,title,count) => {\n         \n      let object = {\n        \"Production\": {\n          id: id,\n          name: title\n        },\n        \"Quantity\": count\n      }\n        \n        let result = this.postData('http://127.0.0.1:5000/api/order',object)\n\n        let  ListActive  = JSON.parse(JSON.stringify(this.state.ListActive))   \n        ListActive.push({title: title,count: count,focus: false})\n        this.setState({ListActive: ListActive})\n     }\n\n     Select = (keyIndex) => {\n      let  ListActive  = JSON.parse(JSON.stringify(this.state.ListActive))\n      ListActive.forEach((item,index) =>{\n        if(index === keyIndex)\n        {\n          item.focus = true;\n        }\n        else\n        {\n          item.focus = false;\n        } \n      })\n      this.setState({ListActive: ListActive})\n    }\n\n      render() {\n\n        let {ListActive} = this.state\n        return (\n            <LeftContentStyle LeftMenu={this.props.LeftMenu}>\n                <LeftList handleAdd={this.handleAdd} />\n                <LeftListActive handleSelect={this.Select} ListActive={ListActive}/>\n            </LeftContentStyle>\n        )\n      }\n}\n\n\nexport default LeftContent;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftList/LeftList.js",["207"],"import React from \"react\";\nimport LeftListStyle from \"./LeftListStyle\"\n\n//import CheckboxList from \"../../../CheckBox/CheckBoxList\"\n\nimport CardAddOrder from \"../../../CardAddOrder/CardAddOrder\"\n\nclass LeftList extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          ListCard: [{}]/*[{\n                id: 0,\n                name: \"Велосипед\"\n              },\n              {\n                id: 1,\n                name: \"Самокат\"\n              }]*/\n        };\n      }\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n      componentDidMount()\n      {\n        let list = this.api('127.0.0.1','5000','/api/production')\n        .then((ListCard) =>{\n          console.log(\"list = \",ListCard)\n          this.setState({ListCard: ListCard});\n        })\n      \n      }\n\n\n      OutputList = () => {\n        return this.state.ListCard.map((item,index) => {\n          return <CardAddOrder key={item.id} Id={item.id} Title={item.name} handleAdd={this.props.handleAdd}/>;\n        })\n      }\n\n\n      render() {\n        return (\n            <LeftListStyle>\n             {this.OutputList()}\n                {/*<CheckboxList/>*/}\n            </LeftListStyle>\n        )\n      }\n}\n\n\nexport default LeftList;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftList/LeftListStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/LeftListActive.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/LeftListActiveStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/RightContent/RightContent.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/RightContent/RightContentStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/ContainerStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftContentStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/NavBar/NavBarStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContainer.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContent.js",["208","209","210","211","212","213"],"import React from \"react\";\n\nimport MidleContentStyle from \"./MidleContentStyle\"\n\nimport DiagramViewBox from \"../../../Diagrams/DiagramViewBox\"\n\n//import  {ListActiveConxtext} from \"../../../../ListActiveContextProvider\"\n\nimport Triangle from \"../../../SVG/Triangle/Triangle\"\n\nimport Buffer from \"../../../Buffer/Buffer\"\n\nimport Etap from \"../../../Etap/Etap\"\n\nvar  savePositionOnMouseDown = {\n  x: 0,\n  y: 0\n};\n\nvar difference = {\n  x: 0,\n  y: 0\n}\n\nvar mouseZoomPosition = {\n  x:0,\n  y:0\n}\n\nvar pressTimer = undefined;\nvar longpress = { \n  countCLick: 0,\n  time: 0\n};\n\nclass MidleContent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          scale: 1,\n          x: 0,\n          y: 0,\n          originX: 0,\n          originY: 0,\n          DragPostion: {x: 0,y: 0},\n\n\n          divX: 0,\n          divY: 0,\n\n\n\n          mouseX: 0,\n          mouseY: 0,\n\n          drag: false\n        };\n      }\n\n      static MidleContentStyle;\n\n      static DIV;\n\n      \n\n      //static contextType = ListActiveConxtext;\n\n      _showCard = () =>\n      {\n          if(this.context.ListActive.length === 0)\n          {\n            return <h3>MidleContent</h3>\n          }\n\n          let object = this.context.ListActive.find(item => item.isSelected === true)\n\n          console.log(\"this._showCard(context)\",this.context)\n\n     \n\n          return <h3>{object.name}</h3>\n      }\n\n      getCoords = (elem) => {\n        let box = elem.getBoundingClientRect();\n        console.log(this.MidleContentStyle.pageYOffset)\n        return {\n          top: Math.round(box.top), //pageYOffset\n          left: Math.round(box.left)//pageXOffset\n        };\n      }\n\n      handleOnWhell = (e) =>\n      {\n        //let count = (e.deltaY/17)\n        let target = this.MidleContentStyle//e.target.closest('....'); // Здесь что-то уникальное, что может указать на род. блок\n        let targetCoords = target.getBoundingClientRect();\n\n        let originX;\n        let originY\n\n        let scale = this.state.scale\n\n\n        const wheel = e.deltaY < 0 ? 1 : -1;\n\n        //e.preventDefault()\n\n        // Compute zoom factor.\n        let zoom// = Math.exp(wheel * this.state.scale);\n        console.log(\"wheel = \",wheel)\n        if(wheel > 0)\n        {\n          zoom = scale-0.05\n          if(zoom < 0.7 )\n          {\n            zoom = 0.7;\n\n            //originX = 0;\n            //originY = 0;\n          }\n          else\n          {\n            originX = (e.clientX - targetCoords.left )/ scale;\n            originY = (e.clientY - targetCoords.top )/ scale;\n          }\n\n          \n        }\n        else\n        {\n          \n          zoom = scale+0.05\n\n          if(zoom > 2 )\n          {\n            zoom = 2\n          }\n          originX = (e.clientX - targetCoords.left )/ scale;\n          originY = (e.clientY - targetCoords.top )/ scale;\n\n        }\n\n\n      \n\n        this.setState({scale: zoom,originX: mouseZoomPosition.x ,originY: mouseZoomPosition.y  }) //,x: e.screenX, y: e.screenY\n\n       /* switch (e.deltaY > 0) {\n            case true:\n              console.log('positive',e.deltaY,count);\n              let plus = this.state.scale+0.05\n\n              this.setState({scale: zoom,originX: -originX, originY: -originY }) //,x: xCoord, y: yCoord\n              break;\n            default:\n              console.log('negative',e.deltaY,count);\n              count *=(-1)\n\n              let minus = this.state.scale-0.05\n              if(minus < 0 )\n              {\n                minus = 0\n              }\n              \n          }*/\n      }\n\n      handleOnMouseMove = (e) =>\n      {\n        let target = this.MidleContentStyle;\n        let position = this.getTransformedPoint(target,e.clientX,e.clientY,this.state.scale)\n        //let difference = 0;\n          switch(e.button)\n          {\n            case 1:\n              \n              difference = {\n                x : (savePositionOnMouseDown.x - position.x  ),\n                y : (savePositionOnMouseDown.y - position.y  )\n              }\n              //console.log(\"handleOnMouseMove = \",difference,e,e.buttons)\n              console.log(\"origin = \",savePositionOnMouseDown, \" newPosition = \",position, \" dif = \",difference,\"Scale = \", this.state.scale)\n              this.setState({DragPostion: {\n                x: this.state.DragPostion.x-difference.x,\n                y: this.state.DragPostion.y-difference.y},\n              },\n             );\n              break;\n            default:\n              this.setState({\n                //originX: position.x ,\n               // originY: position.y \n              });\n              break;\n          }\n\n          mouseZoomPosition = {\n            x: position.x,\n            y: position.y\n          }\n\n     \n        //console.log(target.getBoundingClientRect(),\"pos =\",position )\n        //this.setState({ mouseX: position.x, mouseY: position.y,originX: difference.x,originY: difference.y });\n      }\n\n      isMetaKey = (e) => {\n        return navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey\n      }\n\n      getTransformedPoint=(target,x, y,scale)=> {\n        let targetCoords = target.getBoundingClientRect();\n        const transformedX = (x  - targetCoords.left)/ scale; //target.firstChild.scrollLeft\n        const transformedY = (y  - targetCoords.top)/ scale; //target.firstChild.scrollTop\n        return { x: transformedX, y: transformedY };\n      }\n\n\n      handleOnClick = (e) =>{\n\n     \n        return;\n        let originX;\n        let originY;\n\n        let newX;\n        let newY;\n\n        let target = this.MidleContentStyle;\n\n        let position = this.getTransformedPoint(target,e.clientX,e.clientY,this.state.scale)\n       \n        let targetCoords = this.DIV.getBoundingClientRect();\n\n        console.log(target.getBoundingClientRect(),targetCoords)\n        let position2 = {\n          x: (e.clientX - targetCoords.left )/ this.state.scale,\n          y: (e.clientY - targetCoords.top )/ this.state.scale\n        }\n\n\n        console.log(position,position2,{x:e.clientX,y:e.clientY})\n        \n\n        newX = position.x;\n        newY = position.y;\n\n        originX = position2.x//*this.state.scale;\n        originY = position2.y//*this.state.scale;\n\n\n\n        this.setState({ x: newX, y: newY, originX: originX,originY: originY, divX: originX, divY: originY }); //\n      }\n\n\n      handleMouseDown = (e) =>{\n\n        switch(e.button)\n        {\n          case 1:\n            let target = this.MidleContentStyle;\n            savePositionOnMouseDown = this.getTransformedPoint(target,e.clientX,e.clientY,this.state.scale)\n            console.log(\"handleMouseDown = \",savePositionOnMouseDown,e)\n\n            longpress.time = 0;\n            pressTimer = window.setInterval(function(){\n              // your code here\n              longpress.time++;\n              },100)\n\n            this.setState({drag: !this.state.drag})\n            break;\n          default:\n            break;\n        }\n        \n       \n      }\n\n      handleMouseUp = (e) =>{\n        console.log(\"handleMouseUp\")\n        \n        clearTimeout(pressTimer); //clear time on mouseup\n        switch(e.button)\n        {\n          case 1:{\n            switch(longpress.countCLick)\n            {\n                case 0:\n                  if(longpress.time < 2)\n                    longpress.countCLick++;\n                  break;\n                case 1:\n                  if(longpress.time < 2)\n                  {\n                    longpress.countCLick = 0;\n                    longpress.time = 0;\n                    console.log(\"DOUBLE CLICK\")\n                    this.setState({scale: 1,originX: 0, originY: 0,\n                      DragPostion: {\n                        x: 0,\n                        y: 0},\n                    })\n                  }\n                  break;\n                default:\n                    break\n            }\n            longpress.time = 0;\n            \n            break;\n          }\n        }\n\n        this.setState({drag: !this.state.drag})\n\n      }\n\n      handleDoubleClick = (e)=>{\n        //console.log(\" handleDoubleClick click = \",e.button)\n      }\n\n      //translate(\"+this.state.x+\"px,\"+this.state.y+\"px)\n      //transformOrigin:this.state.xScale+\"px \"+this.state.yScale+\"px\"\n      //transformOrigin:this.state.originX+\"px \"+this.state.originY+\"px\",\n      //  \"scale(\"+this.state.scale+\")\"\n      //overflow: \"auto\"\n      render() {\n        const {drag} = this.state\n        return (\n            <MidleContentStyle >\n                <div style={{width: \"100%\", height: \"100%\",position: \"relative\",overflow: \"hidden\"}}   >\n                  {/*<div  onClick={this.handleOnClick}  onMouseMove={this.handleOnMouseMove} onWheel={this.handleOnWhell}  ref={(MidleContentStyle) => { this.MidleContentStyle = MidleContentStyle;}} style={{width: \"100%\", height: \"100%\",position: \"absolute\",transformOrigin: this.state.originX+\"px \"+this.state.originY+\"px\",transform:\"scale(\"+this.state.scale+\")\",boxShadow: \"rgba(0,0,0,0.2) 0px 3px 5px -1px,rgba(0,0,0,0.14) 0px 6px 10px 0px,rgba(0,0,0,0.12) 0px 1px 14px 0px\"}}>*/}\n                  <div  ref={(DIV) => { this.DIV = DIV;}} onDoubleClick={this.handleDoubleClick}   onClick={this.handleOnClick} onMouseDown={this.handleMouseDown} onMouseUp={this.handleMouseUp} onMouseMove={this.handleOnMouseMove} onWheel={this.handleOnWhell}    style={{width: \"100%\", height: \"100%\",position: \"absolute\"}}>\n                    <div  ref={(MidleContentStyle) => { this.MidleContentStyle = MidleContentStyle; }}  style={{position: \"absolute\",\n                        width: (1411)+\"px\",\n                        height: (1100)+\"px\",\n                        top: \"0px\",\n                        left: \"0px\",\n                        transformOrigin: this.state.originX+\"px \"+this.state.originY+\"px\",\n                        //transformOrigin:\"0px 0px\",\n                        cursor: drag ? 'grab': '',\n                        transform: \"translate(\"+this.state.DragPostion.x+\"px, \"+this.state.DragPostion.y+\"px) scale(\"+this.state.scale+\")\",\n                        pointerEvents: \"all\"}}>\n                      <div style={{\n                          width: \"500px\",\n                          top: (1411/2)+\"px\",\n                          left: (1100/2)+\"px\",\n                          pointerEvents: \"all\",\n                          position: \"absolute\",\n                          boxShadow: \"rgba(0,0,0,0.2) 0px 3px 5px -1px,rgba(0,0,0,0.14) 0px 6px 10px 0px,rgba(0,0,0,0.12) 0px 1px 14px 0px\",\n                          //transform: \"translate(\"+this.state.originX+\"px, \"+this.state.originY+\"px) scale(\"+this.state.scale+\")\"\n                        \n                          }}\n                          > \n\n                      <Triangle   left={200} top={200} width={100} height={100} min={50} max={100} value={0}/>\n                      <Triangle   left={200} top={0}  width={100} height={100} min={50} max={100} value={50}/>\n                      {/*\n                      <img id=\"crosshair\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/crosshair.svg\" style={{ backgroundColor:\"green\",position: \"absolute\",left: \"calc(\"+(this.state.originX-12)+\"px)\", top: \"calc(\"+(this.state.originY-12)+\"px)\",opacity: \"1\"}} width=\"24px\"></img>*/}\n                      <img id=\"crosshair\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/crosshair.svg\" style={{backgroundColor: \"red\", position: \"absolute\",left: \"calc(\"+(this.state.originX-12)+\"px)\", top: \"calc(\"+(this.state.originY-12)+\"px)\",opacity: \"1\"}} width=\"24px\"></img>\n                      </div>\n\n                      <Buffer x={100} y={50} triangle={{min: 20, max: 100, value: 0}}/>\n\n                      <Etap x={300} y={50}/>\n\n                      <Buffer x={570} y={50} triangle={{min: 60, max: 100, value: 0}}/>\n\n                    \n\n\n                      \n                      {/*<img id=\"crosshair\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/crosshair.svg\" style={{position: \"absolute\",left: \"calc(\"+(this.state.originX-12)+\"px)\", top: \"calc(\"+(this.state.originY-12)+\"px)\",opacity: \"1\"}} width=\"24px\"></img>\n                     <img id=\"crosshair\" src=\"https://interactive-examples.mdn.mozilla.net/media/examples/crosshair.svg\" style={{position: \"absolute\",left: \"calc(\"+(this.state.mouseX-12)+\"px)\", top:\"calc(\"+(this.state.mouseY-12)+\"px)\",opacity: \"1\"}} width=\"24px\"></img>*/}\n                    </div>\n                  </div>\n    \n         \n                 \n                </div>\n\n\n               {/* <DiagramViewBox/>\n\n              <ListActiveConxtext.Consumer>\n                {value => (\n                  <h3>MidleContent {console.log(value.ListActive)}</h3>\n                )}\n                \n                </ListActiveConxtext.Consumer>*/} \n            </MidleContentStyle>\n\n        )\n      }\n}\n\n\n\nexport default MidleContent;\n\n//<h3>{context.activeObject.name ? context.activeObject.name : \"MidleContent\"}</h3>\n\n/*\n\nЕсть \"Заказ\".... \nУ заказа есть время его выполнения. Актуальное (текущее) оно динамически изменяется и По дефелту то которое было измеренно как константа.\nНапирмер: \"Велосипеды 5 штук\" или \"Самокат 10 штук\"....  \nУ каждого заказа есть \"Карта\". \n\nБуферы и Этапы для 1 карты могут быть не уникальные. К примеру Этап Сварки может быть у карты Велосипедов 5 штук и у самокатов 10 штук.\n\nКарта состоит из \"Буферов\" и \"Этапов\". Они связанны друг с другом (в целом карта показывает полностью производство велосипеда или самоката) \nПеред каждым Этапом есть Буфер.\nБуфер имеет какое то число деталей \"максимальное\", \"текущее\" и \"минимум\" который нужно удерживать, число \"частоты пополнения\"...  \"Время ожидания\"\nБуфер состоит из Заказов находящикся в ожидании (в очереде), Самый 1 в очереде идет на выполнение в Этап. \n\nЭтап состоит из :\n1) Времени цикла актуального и дефолтного измеренного как константа ( это число показывающее за сколько деталь будет произведенна на этом этапе)\n2) Время подготовки так же актуальное и дефолтное - это время константное которое нужно на переподготовку для другого заказа ( допустим Делали велики теперь самокаты , надо перенастроить оборудование вот это время показывает его перенастройку)\n3) Доступность - Это процент доступности оборудования или человека... (к примеру )\n4) Количество Людей или оборудования работающего на этом этапе. (какое то число оборудования или людей которые работают и производят деталь)\n5) Количество смен ( пока не знаю что это такое но пусть будет)\n\n*/","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContainerStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContentStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/BottomContent/BottomContent.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/BottomContent/BottomContentStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckBoxList.js",[],["214","215"],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckBox.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CheckBox/CheckboxStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/ListActive.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/LeftContent/LeftListActive/ListActiveStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListView.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListItem.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/ListView/ListItemStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/ListActiveContextProvider.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/AppStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/device.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/providers/MidleContextProvider.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardAddOrder/CardAddOrder.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardAddOrder/CardAddOrderStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardListOrder/CardListOrder.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/CardListOrder/CardListOrderStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Time/Time.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Time/TimeStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/DiagramViewBox.js",["216","217","218","219","220","221"],"import React from \"react\";\n\nimport Diagram from './Diagram'\nimport SymbolPalette from './SymbolPalette'\n\nimport {PortVisibility\n} from \"@syncfusion/ej2-react-diagrams\";\n\n\n\nlet style =  { strokeColor: \"red\", strokeDashArray: \"3,3\", strokeWidth: 2 }\n\nlet customer = {\n  id:'Customer',\n  // Position of the node\n  offsetX: 500,\n  offsetY: 250,\n  // Size of the node\n  width: 100,\n  height: 70,\n  shape: { \n    type: 'Native',\n    content: \"<g id=\\\"Layer_1\\\" data-name=\\\"Layer 1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 84.96 67.16\\\">\"+\n    \"<defs><style>.cls-1{fill:#fcd1a5;}</style></defs>\"+\n    \"<title>customer-supplier</title>\"+\n    \"'<path class=\\\"cls-1\\\" d=\\\"M6.51,23.71A2.31,2.31,0,0,1,7.46,22L29.33,7c0.54-.36.94-0.13,0.94,0.49v14c0,0.63.4,0.86,0.94,0.49L53.09,7C53.63,6.65,54,6.88,54,7.51v14c0,0.63.4,0.86,0.95,0.49L77.57,7c0.54-.36.94-0.13,0.94,0.49V59.26a1.11,1.11,0,0,1-1.12,1.13H7.64a1.11,1.11,0,0,1-1.12-1.12V23.71Z\\\"/></g>\",\n    shape: 'Customer',\n    //scale: 'Meet'\n  },\n  //constraints: NodeConstraints.Default | NodeConstraints.Shadow,\n  style: {\n    fill: 'none',\n    ...style,\n    strokeWidth: 0,\n  },\n};\n\n\nlet process = {\n    id: 'Process',\n    // Position of the node\n    offsetX: 250,\n    offsetY: 250,\n    // Size of the node\n    width: 100,\n    height: 100,\n    annotations: [\n      { content: 'New \\n Process' },\n      { content: '0', offset:{\n          x: 0.5,\n          y:0.88\n      },\n    }],\n    shape: { \n      type: 'Native',\n      content: \"<g id=\\\"Layer_1\\\" data-name=\\\"Layer 1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 88.01 69.16\\\">\"+\n      \"<defs><style>.cls-1{fill:#fcd1a5;}.cls-2,.cls-3{fill:none;stroke-miterlimit:10;stroke-width:0.9px;}.cls-2{stroke:#fff;}.cls-3{stroke:#3d4752;}</style></defs>\"+\n      \"<title>dedicated-process</title>\"+\n      \"<rect class=\\\"cls-1\\\" x=\\\"6.48\\\" y=\\\"7.4\\\" width=\\\"72\\\" height=\\\"54\\\" rx=\\\"1.13\\\" ry=\\\"1.13\\\"/>\"+\n      \"<line class=\\\"cls-2\\\" x1=\\\"6.48\\\" y1=\\\"25.4\\\" x2=\\\"78.48\\\" y2=\\\"25.4\\\"/>\"+\n      \"<path class=\\\"cls-1\\\" d=\\\"M17.73,54.74A3.87,3.87,0,0,1,14,59a4.14,4.14,0,0,1-4-4V54.83\\\"/>\"+\n      \"<path class=\\\"cls-3\\\" d=\\\"M17.73,54.74A3.87,3.87,0,0,1,14,59a4.14,4.14,0,0,1-4-4V54.83\\\"/>\"+\n      \"<path class=\\\"cls-1\\\" d=\\\"M11.43,55.37A2.33,2.33,0,0,1,13.77,53a2.5,2.5,0,0,1,2.65,2.2,2.27,2.27,0,0,1-2.29,2.39A2.55,2.55,0,0,1,11.43,55.37Z\\\"/>\"+\n      \"<path class=\\\"cls-3\\\" d=\\\"M11.43,55.37A2.33,2.33,0,0,1,13.77,53a2.5,2.5,0,0,1,2.65,2.2,2.27,2.27,0,0,1-2.29,2.39A2.55,2.55,0,0,1,11.43,55.37Z\\\"/></g>\",\n      shape: 'Process',\n      //scale: 'Meet'\n    },\n    //constraints: NodeConstraints.Default | NodeConstraints.Shadow,\n    style: {\n      fill: 'none',\n      ...style,\n      strokeWidth: 0,\n    },\n  };\n\nlet external_shipment = {\n    id: 'External_Shipment',\n    // Position of the node\n    offsetX: 250,\n    offsetY: 250,\n    // Size of the node\n    width: 100,\n    height: 50,\n       // Sets the annotation for the node\n    /*annotations: [{\n      // Sets the horizontal alignment as left\n      // Sets the vertical alignment as Center\n      offset: {\n        x: 0.3,\n        y: 0.4\n      }\n    }],*/\n   // Sets the annotation for the connector\n    annotations: [{\n      content: 'New External shipment',\n      // Sets the margin for the content\n      margin: {\n          top: 5\n      },\n      horizontalAlignment: 'Center',\n      verticalAlignment: 'Top',\n      offset: {\n          x: 0.5,\n          y: 1\n      }\n    }],\n    shape: { \n      type: 'Native',\n      content: \"<g id=\\\"Layer_1\\\" data-name=\\\"Layer 1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 86.15 46.95\\\"><defs>\"+\n      \"<style>.external_shipment-1{fill:#abddf3;}.external_shipment-2{fill:none;stroke:#fff;stroke-miterlimit:10;stroke-width:0.9px;}.external_shipment-3{fill:#3d4752;}</style></defs>\"+\n      \"<title>external-shipment</title>\"+\n      \"<rect class=\\\"external_shipment-1\\\" x=\\\"1.76\\\" y=\\\"1.95\\\" width=\\\"47.21\\\" height=\\\"37.49\\\" rx=\\\"1.13\\\" ry=\\\"1.13\\\"/>\"+\n      \"<rect class=\\\"external_shipment-2\\\" x=\\\"1.76\\\" y=\\\"1.95\\\" width=\\\"47.21\\\" height=\\\"37.49\\\" rx=\\\"1.13\\\" ry=\\\"1.13\\\"/>\"+\n      \"<path class=\\\"external_shipment-1\\\" d=\\\"M49,39.44,55.81,13.2h9a1.91,1.91,0,0,1,1.58,1l4.09,9.18a0.68,0.68,0,0,1-.67,1H56.93a1.11,1.11,0,0,1-1.12-1.12V13.2M49,39.44H81.64a1.11,1.11,0,0,0,1.13-1.12V25.58a1.11,1.11,0,0,0-1.12-1.12H77.18a1.92,1.92,0,0,1-1.62-1L69.71,10.5a1.92,1.92,0,0,0-1.62-1h-18A1.14,1.14,0,0,0,49,10.59V39.44\\\"/>\"+\n      \"<path class=\\\"external_shipment-2\\\" d=\\\"M49,39.44,55.81,13.2h9a1.91,1.91,0,0,1,1.58,1l4.09,9.18a0.68,0.68,0,0,1-.67,1H56.93a1.11,1.11,0,0,1-1.12-1.12V13.2M49,39.44H81.64a1.11,1.11,0,0,0,1.13-1.12V25.58a1.11,1.11,0,0,0-1.12-1.12H77.18a1.92,1.92,0,0,1-1.62-1L69.71,10.5a1.92,1.92,0,0,0-1.62-1h-18A1.14,1.14,0,0,0,49,10.59V39.44\\\"/>\"+\n      \"<path class=\\\"external_shipment-3\\\" d=\\\"M24,39.44C24,43.58,21,47,17.33,47s-6.84-3.37-6.84-7.51S13.6,32,17.33,32,24,35.3,24,39.44Z/>\"+\n      \"<path class=\\\"external_shipment-2\\\" d=\\\"M24,39.44C24,43.58,21,47,17.33,47s-6.84-3.37-6.84-7.51S13.6,32,17.33,32,24,35.3,24,39.44Z/>\"+\n      \"<path class=\\\"external_shipment-3\\\" d=\\\"M69.22,39.44c0,4.14-3,7.51-6.71,7.51s-6.71-3.37-6.71-7.51,3-7.47,6.71-7.47S69.22,35.3,69.22,39.44Z\\\"/>\"+\n      \"<path class=\\\"external_shipment-3\\\" d=\\\"M69.22,39.44c0,4.14-3,7.51-6.71,7.51s-6.71-3.37-6.71-7.51,3-7.47,6.71-7.47S69.22,35.3,69.22,39.44Z\\\"/></g>\",\n      shape: 'External\\nShipment',\n      //scale: 'Meet'\n    },\n    //constraints: NodeConstraints.Default | NodeConstraints.Shadow,\n    style: {\n      fill: 'none',\n      ...style,\n      strokeWidth: 0,\n    },\n  };\n\nlet inventory = {\n    id: 'Inventory',\n    // Position of the node\n    offsetX: 250,\n    offsetY: 250,\n    // Size of the node\n   // Sets the annotation for the node\n    width: 50,\n    height: 50,\n    annotations: [{\n      content: 'New External shipment',\n      // Sets the margin for the content\n      margin: {\n          top: 5\n      },\n      horizontalAlignment: 'Center',\n      verticalAlignment: 'Top',\n      offset: {\n          x: 0.5,\n          y: 1\n      }\n    }],\n    shape: { \n      type: 'Native',\n      content: \"<g id=\\\"Layer_1\\\" data-name=\\\"Layer 1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 65.87 62.85\\\"><defs>\"+\n      \"<style>.Inventory-1{fill:#abddf3;}</style></defs>\"+\n      \"<title>inventory-customer-supplier</title>\"+\n      \"<path class=\\\"Inventory-1\\\" d=\\\"M36.23,6.39a0.56,0.56,0,0,0-1.08,0L7,58.41a0.61,0.61,0,0,0,.58,1H63.82a0.61,0.61,0,0,0,.58-1Z\\\"/></g>\",\n      shape: 'Inventory',\n      //scale: 'Meet'\n    },\n    //constraints: NodeConstraints.Default | NodeConstraints.Shadow,\n    style: {\n      fill: 'none',\n      ...style,\n      strokeWidth: 0,\n    },\n  };\n\nlet production_control = {\n    id: 'Production_control',\n    // Position of the node\n    offsetX: 250,\n    offsetY: 250,\n    // Size of the node\n   // Sets the annotation for the node\n    width: 300,\n    height: 100,\n    annotations: [{\n      content: 'New Production Control',\n      // Sets the margin for the content\n      horizontalAlignment: 'Center',\n      offset: {\n          x: 0.5,\n          y: 0.2\n      }\n    },\n    {\n      content: 'New Production Control',\n      // Sets the margin for the content\n      horizontalAlignment: 'Center',\n      offset: {\n          x: 0.5,\n          y: 0.7\n      }\n    }],\n    shape: { \n      type: 'Native',\n      content: \"<g id=\\\"production_control\\\" data-name=\\\"Layer 1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 83.33 65.36\\\">\"+\n      \"<defs><style>.production_control-1,.production_control-2{fill:#d2e5b3;}.production_control-2{stroke:#fff;stroke-miterlimit:10;stroke-width:0.9px;}</style></defs>\"+\n      \"<title>production-control</title>\"+\n      \"<rect class=\\\"production_control-1\\\" x=\\\"6.25\\\" y=\\\"5.7\\\" width=\\\"72\\\" height=\\\"54\\\" rx=\\\"1.13\\\" ry=\\\"1.13\\\"/>\"+\n      \"<line class=\\\"production_control-2\\\" x1=\\\"6.25\\\" y1=\\\"27.3\\\" x2=\\\"78.25\\\" y2=\\\"27.3\\\"/></g>\",\n      shape: 'Production\\ncontrol',\n      //scale: 'Meet'\n    },\n    //constraints: NodeConstraints.Default | NodeConstraints.Shadow,\n    style: {\n      fill: 'none',\n      ...style,\n      strokeWidth: 0,\n    },\n  };\n\n\nlet connector = {\n  // Name of the connector\n  id: \"connector\",\n  type: 'Bezier',\n  style: {\n      strokeColor: '#6BA5D7',\n      fill: '#6BA5D7',\n      strokeWidth: 2\n  },\n  targetDecorator: {\n      style: {\n          fill: '#6BA5D7',\n          strokeColor: '#6BA5D7',\n          strokeDashArray: '0'\n      }\n  },\n  // ID of the source and target nodes\n  sourceID: \"\",\n  targetID: \"\",\n  // Set Source Padding value\n  sourcePadding:20,\n  // Set Target Padding value\n  targetPadding:20\n  }\n\n  let stright_connector = {\n  id: \"stright_connector\",\n  // Defines the segment type of the connector\n  segments: [{\n      type: 'Straight',\n      // Defines the point of the segment\n      point: {\n          x: 100,\n          y: 150\n      }\n  },\n  {\n    type: 'Straight',\n    // Defines the point of the segment\n    point: {\n        x: 100,\n        y: 150\n    }\n  }],\n  annotations: [{\n    // Sets the text to be displayed\n    content: 'Annotation',\n}],\n  style: {\n      strokeColor: '#6BA5D7',\n      fill: '#6BA5D7',\n      strokeWidth: 2\n  },\n  targetDecorator: {\n      style: {\n          fill: '#6BA5D7',\n          strokeColor: '#6BA5D7'\n      }\n  },\n  type: 'Straight',\n  sourcePoint: {\n      x: 100,\n      y: 100\n  },\n  targetPoint: {\n      x: 200,\n      y: 200\n  }\n}\n\n\nlet port  = {\n  style: {\n      strokeColor: '#366F8C',\n      fill: '#366F8C'\n  }\n  }\n \n\n\nlet connectors = []\nlet diagram = []\n\n\nfunction clone(item)\n{\n  return JSON.parse(JSON.stringify(item))\n}\n\nlet shape = { type: \"HTML\" };\n\n\n\n\nclass DiagramViewBox extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          number: 1\n        };\n\n        diagram = []\n        connectors = []\n\n        diagram.push({\n          id: 'pie', offsetX: 100, offsetY: 450, width: 100, height: 50, shape: shape,\n        })\n\n        diagram.push({\n          id: 'pieCircl', offsetX: 600, offsetY: 450, width: 100, height: 50, shape: shape,\n          /*annotations: [{\n            content: 'New External shipment ',\n            // Sets the margin for the content\n            margin: {\n                top: 5\n            },\n            horizontalAlignment: 'Center',\n            verticalAlignment: 'Top',\n            offset: {\n                x: 0.5,\n                y: 1.5\n            }\n          }],*/\n        })\n\n        diagram.push({\n          id: 'datastore', offsetX: 300, offsetY: 450, width: 100, height: 50, shape: shape,\n          \n        })\n\n        let yPosition = 100\n\n        let obj_connector = clone(connector);\n\n\n        let obj = clone(customer);\n\n        obj = clone(inventory);\n        obj.annotations[0].content = 'Стальные листы 3 дня'\n        obj.id += \"_3\"\n        obj.offsetX = 100\n        obj.offsetY = yPosition\n        obj.height = 0\n        obj_connector.targetID = obj.id;\n\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_3\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 40\n        obj_connector.style.strokeDashArray = '0'\n        obj = clone(process);\n        obj.annotations[0].content = 'Штамповка'\n        obj.annotations[1].content = '15'\n        obj.id += \"_4\"\n        obj.offsetX = 280\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_4\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(inventory);\n        obj.annotations[0].content = 'Левых: 4600\\nПравых: 2400'\n        obj.id += \"_5\"\n        obj.offsetX = 400\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_5\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(process);\n        obj.annotations[0].content = 'Сварка'\n        obj.annotations[1].content = '10'\n        obj.id += \"_6\"\n        obj.offsetX = 520\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n        \n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_6\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(inventory);\n        obj.annotations[0].content = 'Левых: 1500\\nПравых: 600'\n        obj.id += \"_7\"\n        obj.offsetX = 650\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_7\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(process);\n        obj.annotations[0].content = 'Шлифовка'\n        obj.annotations[1].content = '10'\n        obj.id += \"_8\"\n        obj.offsetX = 780\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_8\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(inventory);\n        obj.annotations[0].content = 'Левых: 5600\\nПравых: 850'\n        obj.id += \"_9\"\n        obj.offsetX = 900\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_10\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(process);\n        obj.annotations[0].content = 'Покраска'\n        obj.annotations[1].content = '20'\n        obj.id += \"_11\"\n        obj.offsetX = 1030\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_11\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(inventory);\n        obj.annotations[0].content = 'Левых: 1440\\nПравых: 2700'\n        obj.id += \"_12\"\n        obj.offsetX = 1150\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n\n        obj_connector = clone(connector);\n        obj_connector.id += \"_12\"\n        obj_connector.sourceID = obj.id;\n        obj_connector.sourcePadding = 5\n        obj_connector.targetPadding = 0\n        obj_connector.style.strokeDashArray = '2,2'\n        obj = clone(process);\n        obj.annotations[0].content = 'Отгрузка'\n        obj.annotations[1].content = '5'\n        obj.id += \"_13\"\n        obj.offsetX = 1300\n        obj.offsetY = yPosition\n        obj_connector.targetID = obj.id;\n\n        connectors.push(obj_connector)\n        diagram.push(obj)\n       \n        console.log(\"CONSTRUCTOR\")\n       \n\n      }\n\n      render() {\n        return (\n            <div style={{\n                //display:'flex',\n                width:'100%',\n                height:'100%'\n                }}>\n            <Diagram \n              diagram={diagram}\n              connectors={connectors}\n            />\n            {/*<SymbolPalette       \n                myStyle={{\n                    flex: '1 1 200px'\n                }}\n                customer={customer}\n                process={process}\n                external_shipment={external_shipment}\n                inventory={inventory}\n                production_control={production_control}\n              />*/}\n\n            </div>\n        )\n      }\n}\n\n        \n\nexport default DiagramViewBox;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js",["222","223","224","225","226","227"],"import React from \"react\";\nimport { \n  DiagramComponent,\n  HierarchicalTree,\n  MindMap,\n  RadialTree,\n  ComplexHierarchicalTree,\n  DataBinding,\n  Snapping,\n  PrintAndExport,\n  BpmnDiagrams,\n  SymmetricLayout,\n  ConnectorBridging,\n  UndoRedo,\n  LayoutAnimation,\n  DiagramContextMenu,\n  ConnectorEditing,\n  Inject,\n  SnapConstraints,\n  DiagramTools,\n} from \"@syncfusion/ej2-react-diagrams\";\n\n//import { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationDataLabel, PieSeries, AccumulationLegend, AccumulationTooltip } from '@syncfusion/ej2-react-charts';\n\nimport MyTrinagle from \"../SVG/Triangle/Triangle\"\n\nlet diagramInstance = DiagramComponent;\n\n\n\nvar template = diagramTemplate;\n\n\nfunction findGIP(a,b)\n{\n  return Math.sqrt(a*a+b*b)\n}\n\nfunction findPixelProsent(need,heigh)\n{\n  return (need*heigh)/100\n}\n\nfunction sin(b,a)\n{\n  return b/a //  прилижайщий катит к другому катиту\n}\n\n\nfunction findPoint(percent,x,y)\n{\n   let H_pointPx = (y*percent)/100 // Нашли сколько же пикселей занимает по высоте наши проценты\n   let pointPx = H_pointPx // находим точку по высоте если считать снизу\n\n   return findPointSin(pointPx,x/2,y) // находим длину по X\n}\n\nfunction findPointSin(b,a1,b1)\n{\n   console.log(\"b= \",b,\"a1= \",a1,\"b1 = \",b1)\n   return (b*a1)/b1\n}\n\n\nfunction findA(c1,b)\n{\n  return Math.sqrt(c1*c1-b*b)\n}\n\n\n\n\nvar Triangle;\n\n\nfunction myTriangle()\n{\n  return <MyTrinagle width={100} height={100} value={20} max={100} min={50}/>\n}\n\nfunction diagramTemplate(props){\n  \n\n  //let points = \"0,100 \"+find+\",\"+point+\" \"+find+\",0 100,100\"\n  if (props.id === \"pie\") {\n      return (\n        <div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-database\">\n          {/*<path d=\"M 0 0 0 100 100 100 100 0 0 0 L\"></path>*/}\n          <polygon points=\"0,100 50,0 100,100\" fill=\"violet\" stroke=\"purple\" strokeWidth=\"1\"></polygon>\n          <g><path d=\"M0,100 50,0 100,100\" fill=\"gray\" ></path></g>\n          <g><path d=\"M0,100 40,20 60,20 100,100\" fill=\"red\" ></path></g>\n          <g><path d=\"M0,100 30,40 70,40 100,100\" fill=\"yellow\" ></path></g>\n          <g><path d=\"M0,100 20,60 80,60 100,100\" fill=\"blue\"></path></g>\n          <g><path d=\"M0,100 10,80 90,80 100,100\" fill=\"green\" ></path></g>\n          \n          \n         \n          {/*<polyline points=\"0,100 10,80 90,80 100,100\" fill=\"green\" stroke=\"purple\" stroke-width=\"1\"></polyline>\n          <polyline points=\"10,80 20,60 80,60 90,80\" fill=\"blue\" stroke=\"purple\" stroke-width=\"2\"></polyline>\n    <polyline points=\"20,60 30,40 70,40 80,60\" fill=\"yellow\" stroke=\"purple\" stroke-width=\"2\"></polyline>*/}\n\n          \n        </svg>\n      </div>\n      );\n  }\n\n  if (props.id === \"pieCircl\") {\n    Triangle = myTriangle()\n    return Triangle\n  }\n\n  if(props.id === \"datastore\")\n  {\n    return (\n      <div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-database\">\n          {/*<path d=\"M 0 0 0 100 100 100 100 0 0 0 L\"></path>*/}\n          <polygon points=\"0,100 50,0 100,100\" fill=\"violet\" stroke=\"purple\" strokeWidth=\"1\"></polygon>\n          <g><path d=\"M0,100 50,0 100,100\" fill=\"gray\" ></path></g>\n          <g><path d=\"M0,100 40,20 C 90,80  60,20 100,100\" fill=\"red\" ></path></g>\n          <g><path d=\"M0,100 30,40 C 90,100  70,40 100,100\" fill=\"yellow\" ></path></g>\n          <g><path d=\"M0,100 20,60 C 100,100  80,60 100,100\" fill=\"blue\"></path></g>\n          <g><path d=\"M0,100 10,80 C 90,100  90,80 100,100\" fill=\"green\" ></path></g>\n          \n         \n          {/*<polyline points=\"0,100 10,80 90,80 100,100\" fill=\"green\" stroke=\"purple\" stroke-width=\"1\"></polyline>\n          <polyline points=\"10,80 20,60 80,60 90,80\" fill=\"blue\" stroke=\"purple\" stroke-width=\"2\"></polyline>\n    <polyline points=\"20,60 30,40 70,40 80,60\" fill=\"yellow\" stroke=\"purple\" stroke-width=\"2\"></polyline>*/}\n\n          \n        </svg>\n      </div>\n      )\n  }\n}\n\nclass Diagram extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          myStyle: this.props.myStyle,\n          diagram: this.props.diagram,\n          connectors: this.props.connectors,\n          update: true,\n        };\n\n       \n      }\n      diagramInstance =  diagramInstance;\n      // A node is created and stored in nodes array.\n\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n\n      async create_customer(element)\n      {\n        //let http = \"http://\"+window.ip+\":\"+window.port\n        console.log(\"element\",element.oldProperties.id);\n\n        switch(element.oldProperties.id)\n        {\n          case \"Customer\":{\n            //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        \n            //const response = await fetch(http+\"/api/reason_customer/insert/\"+element.properties.id+\"/\"+element.properties.offsetX+\"/\"+element.properties.offsetY)\n            //const data = await response;\n            //return data\n            break;\n          }\n          case \"Process\":{\n            break;\n          }\n          case \"External_Shipment\":{\n            break;\n          }\n          case \"Inventory_customer_supplier\":\n          {\n              break;\n          }\n          case \"Production_control\":\n          {\n              break;\n          }\n          default:\n            break;\n        }\n\n        \n        \n      }\n\n     update_position(element)\n      {\n        var myData = []\n        element.forEach(item =>{\n          myData.push({\n            id: item.properties.id,\n            offsetX: item.properties.offsetX,\n            offsetY: item.properties.offsetY\n          })\n        })\n\n        //console.log(JSON.stringify(myData))\n        //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        //let http = \"http://\"+window.ip+\":\"+window.port\n        //fetch(http+\"/api/vsm/update_position/\")\n        //.then(response => response.json());\n      }\n\n     \n      /*componentDidMount() {\n        this.interval = setInterval(() => {\n          let rand = Math.floor(Math.random() * 60);\n          //diagramInstance.nodes[1].annotations[0].content = rand.toString()\n          this.setState({update: !this.state.update})\n        }, 1000);\n      }\n      \n      componentWillUnmount() {\n        console.log(\"DiagramViewBox componentWillUnmount\")\n        clearInterval(this.interval);\n      }*/\n\n      \n\n      render() {\n\n        const {myStyle,diagram} = this.state\n        console.log(\"DFSFA\")\n     \n\n        return (\n        <DiagramComponent  id=\"diagram\" ref={diagram => (diagramInstance = diagram)}\n        width = {'100%'}\n        height = {'100%'}\n        snapSettings={{ constraints: SnapConstraints.None }}\n        // Add node\n        nodes = {\n          diagram\n        }\n        connectors = {\n          this.state.connectors\n        }\n\n        drop={(e)=>{\n          //console.log(\"drop\",e)\n          //console.log(\"drop length\",e.element.annotations.length)\n          this.create_customer(e.element)\n          //e.element.annotations[0].content = \"#1\"\n        \n          //e.newValue[0].annotations[0].content = \"#1\"\n        }}\n\n        positionChange={(e)=>{\n\n          switch(e.state)\n          {\n            case \"Completed\":{\n              console.log(\"position\",e.source.nodes)\n              if(e.source.nodes !== undefined)\n                this.update_position(e.source.nodes)\n            \n            break;  }\n            case \"Progress\":{break;}\n            case \"Start\":{break;}\n            default:  break;\n          }\n          \n\n          \n        }}\n\n        dragTargetEnd={(e)=>{\n          console.log(\"dragTargetEnd\",e)\n        }}\n\n        \n        tool = {\n          DiagramTools.ZoomPan\n      }\n\n        \n       /* selectionChange={(e)=>{\n        \n          console.log(\"SELECT\",e.newValue)\n        }}*/\n        created = {\n          () => {\n            console.log(\"render Diagram = \",this.children)\n            //console.log(diagramInstance.getActiveLayer())\n            //this.diagramInstance.getActiveLayer();\n\n\n           // diagramInstance.tool = DiagramTools.ZoomPan;\n            //diagramInstance.dataBind();\n            diagramInstance.scrollChange = args => {\n            //Obtains the pan status\n            //let panStatus = args.panState;\n           }\n\n \n            //diagramInstance.tool = DiagramTools.ZoomPan;\n            //diagramInstance.dataBind();\n            /*diagramInstance.scrollChange = { args: IScrollChangeEventArgs => {\n            //Obtains the pan status\n            console.log(IScrollChangeEventArgs)\n            let panStatus = IScrollChangeEventArgs.panState;}}\n            }*/\n          }\n        }\n\n            //Disables mouse over tooltip at runtime\n            tooltip = {\n              null\n          }\n\n\n          style = {myStyle}\n          nodeTemplate={diagramTemplate.bind(this)}\n        \n\n       >\n         <Inject  width = {'200px'}\n        height = {'200px'}\n  services={[\n    HierarchicalTree,\n    MindMap,\n    RadialTree,\n    ComplexHierarchicalTree,\n    DataBinding,\n    Snapping,\n    PrintAndExport,\n    BpmnDiagrams,\n    SymmetricLayout,\n    ConnectorBridging,\n    UndoRedo,\n    LayoutAnimation,\n    DiagramContextMenu,\n    ConnectorEditing\n  ]}\n/>\n       </DiagramComponent>);\n      }\n}\n\n\nexport default Diagram;\n\n\n\n\n","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/SymbolPalette.js",["228"],"import React from \"react\";\nimport {\n    SymbolPaletteComponent\n} from \"@syncfusion/ej2-react-diagrams\";\n\n\nclass SymbolPalette extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            myStyle: props.myStyle,\n            handlerGetBasicShapes: props.handlerGetBasicShapes,\n            customer: props.customer,\n            process: props.process,\n            external_shipment: props.external_shipment,\n            inventory:props.inventory,\n            production_control: props.production_control,\n        };\n      }\n\n      // A node is created and stored in nodes array.\n\n      getSvgShapes()\n      {\n        let basicShapes = []\n        basicShapes.push(this.state.customer)\n        basicShapes.push(this.state.process)\n        basicShapes.push(this.state.external_shipment)\n        basicShapes.push(this.state.inventory)\n        basicShapes.push(this.state.production_control)\n        return basicShapes;\n      }\n\n      \n\n      render() {\n\n        const {myStyle,handlerGetBasicShapes} = this.state\n\n\n        return (< SymbolPaletteComponent id = \"pallete\" \n\n         //Defines how many palettes can be at expanded mode at a time\n         expandMode = {\n            \"Multiple\"\n        }\n        //onClick={(e,item)=>{console.log(\"onClick\",e,item)}}\n        //DragEnter={()=>console.log}\n    \n        palettes = {\n            [{\n                    //Sets the id of the palette\n                    id: 'flow',\n                    //Sets whether the palette expands/collapse its children\n                    expanded: true,\n                    //Adds the palette items to palette\n                    symbols: this.getSvgShapes(),\n                    //Sets the header text of the palette\n                    title: 'Flow Shapes',\n                    iconCss: 'e-ddb-icons e-flow'\n                }]\n            }\n        width = {\n            '100%'\n        }\n        height = {\n            '100%'\n        }\n        style = {\n            myStyle\n        }\n        \n\n         //Specifies the default size to render symbols\n         symbolHeight = {\n            80\n        }\n        symbolWidth = {\n            80\n        }\n\n        //Sets the size, appearance and description of a symbol\n        getSymbolInfo = {\n            (symbol: Node | Connector): SymbolInfo => {\n                if (symbol['text'] !== undefined) {\n                    return {\n                        //Add or Remove the Text for Symbol palette item.\n                        description: {\n                            //Defines the symbol description\n                            text: symbol['text'],\n                            //Defines how to handle the text when its size exceeds the given symbol size\n                            overflow: 'Wrap'\n                        }\n                    };\n                }\n                return {\n                    description: {\n                        text: symbol.shape['shape']\n                    }\n                };\n            }\n        }\n        />);\n      }\n}\n\n        \n\nexport default SymbolPalette;\n\n","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/SVG/Triangle/Triangle.js",["229"],"import React from \"react\";\n//import styled from 'styled-components'\n\n\nclass Triangle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n\t\t  width: this.props.width,\n\t\t  height: this.props.height,\n\t\t  percent: this.props.percent,\n\n\t\t  min: this.props.min,\n\t\t  max: this.props.max,\n\t\t  value: this.props.value,\n\n\t\t  left: this.props.left,\n\t\t  top: this.props.top,\n        };\n      }\n\n\t   findPoint =(percent,x,y)=>\n\t\t{\n\t\t\tlet H_pointPx = (y*percent)/100 // Нашли сколько же пикселей занимает по высоте наши проценты\n\t\t\tlet pointPx = H_pointPx // находим точку по высоте если считать снизу\n\n\t\t\treturn this.findPointSin(pointPx,x/2,y) // находим длину по X\n\t\t}\n\n\t\tfindPointSin = (b,a1,b1) =>\n\t\t{\n\t\t\treturn (b*a1)/b1\n\t\t}\n\n\t\treturnStr=()=>\n\t\t{\n\t\t\tlet newHeight = this.state.height\n\n\t\t\tlet x = this.state.width;\n\t\t\tlet y = newHeight-20; //let y = this.state.height\n\t\t\tlet percent = this.ValueToPercent(this.state.value)\n\t\t\tlet point_Y = y - (y*percent)/100;\n\t\t\tlet point_X = this.findPoint(percent,x,y)\n\t\t\tlet percentByze = 10;\n\n\t\t\tlet percentByze_new = percentByze*percent/100\n\t\t\t\n\t\t\tpercentByze -=percentByze_new;\t\n\n\t\t\tlet byze = point_Y+((y*percentByze)/100) // плюс 10%\n\t\t\t\n\n\t\t\tlet point_Y_2 = point_Y\n\t\t\tlet point_X_2 = x - point_X\n\n\t\t\treturn (\"M0,\"+y+\" \"+point_X+\",\"+point_Y+\" Q \"+x/2+\",\"+byze+\" \"+point_X_2+\",\"+point_Y_2+\" \"+point_X_2+\",\"+point_Y_2+\" \"+x+\",\"+y+\" Q 50,100 0,\"+y+\" 0,\"+y)\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\tthis.interval = setInterval(() => {\n\t\t\t\tlet newValue = this.state.value+1;\n\n\t\t\t\tif(newValue > this.state.max)\n\t\t\t\t{\n\t\t\t\t\tnewValue = 0;\n\t\t\t\t}\n\t\t\t\tthis.setState({value: newValue}) //Math.floor(Math.random() * this.state.height)\n\t\t\t},100)\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\tclearInterval(this.interval);\n\t\t  }\n\n\n\t\t  handleOnMouseMove = (e)=>{\n\t\t\t  //console.log(\"Trignale =\",this.state.percent)\n\t\t\t  //this.setState({left: this.state.left+1})\n\t\t  }\n\n\t\t  ValueToPercent = (value) =>\n\t\t  {\n\t\t\tlet percent = (value*100)/this.state.max\n\t\t\treturn percent\n\t\t  }\n\n\t\t  \n\n      render() {\n\t\tlet {width,height,value,min,max} = this.state\n\t\tlet viewBox = \"0 0 \"+width+\" \"+height;\n\t\tlet pointsPolygon = \"M0,\"+height+\" \"+width/2+\",0 \"+width+\" \"+height;\n\t\tlet D = this.returnStr()\n\n\t\tlet minPrecent = this.ValueToPercent(this.state.min)\n\n\t\tlet color = \"green\"\n\t\t\n\t\tif(value === 0)\n\t\t{\n\t\t\tcolor = \"lightgray\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(value < min)\n\t\t\t{\n\t\t\t\tcolor = \"red\"\n\t\t\t}\n\t\t}\n\n\t\tlet changeText = value > (max/2-max/15)\n\n\n\n\t\tlet PxMin_X = this.findPoint(minPrecent,width,height) \n\t\t//let D_min = \"M0,\"+PxMin\n\t\tlet newHeight = height-20\n\t\tpointsPolygon = \"M0,\"+newHeight+\" \"+width/2+\",0 \"+width+\" \"+newHeight+\" Q 50,100 0,\"+newHeight+\" 0,\"+newHeight;\n\t\n        return (\n\t\t\t<div onMouseMove={this.handleOnMouseMove} style={{left: this.state.left, top: this.state.top,position: 'relative'}}>\n\t\t\t\t<p>Минимум: {this.state.max}</p>\n\t\t\t\t<p style={{position: 'absolute',\n\t\t\t\t\tcolor: changeText ? 'white' : \"black\",\n\t\t\t\t\tfontWeight: 600,\n\t\t\t\t\tleft: 'calc(100%/2.2)',\n\t\t\t\t\ttop: 'calc(100%/2.3)'}}>\n\t\t\t\t\t{this.state.value}\n\t\t\t\t</p>\n\n\t\t\t\t<p style={{position: 'absolute',\n\t\t\t\t\tcolor: \"black\",\n\t\t\t\t\tleft: 'calc(100%/4.0)',\n\t\t\t\t\ttop: 'calc(100%/1.15)'}}>\n\t\t\t\t\tМаксимум: {this.state.min}\n\t\t\t\t</p>\n\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width={width} height={height} viewBox={viewBox} fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n\t\t\t\t  <path d={pointsPolygon} fill=\"lightgray\" stroke=\"lightgray\" strokeWidth=\"1\"></path>\n\t\t\t\t  <g><path d={D} fill={color} stroke={color}></path></g>\n\t\t\t\t</svg>\n\t\t\t</div>\n        )\n      }\n}\n\n\nexport default Triangle;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Buffer/Buffer.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Buffer/BufferStyle.js",[],"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Etap/Etap.js",["230"],"import React from \"react\"\nimport styled from 'styled-components'\n\nimport Time from '../Time/Time'\n\nimport EtapStyle from \"./EtapStyle\"\n\n\n\nconst EtapHeaderStyle = styled.div`\n`;\n\nconst CycleTimeContentStyle = styled.div`\n    display: flex;\n`;\n\n\nconst CycleTimeContentActyaleStyle = styled.div`\n    width: 50%;\n    border: 1px solid #808080;\n`;\n\nconst CycleTimeContentDefaultStyle = styled.div`\n    width: 50%;\n    border: 1px solid #808080;\n`;\n\n\n\n\nclass Etap extends React.PureComponent{\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          name: this.props.name !== undefined ? this.props.name : \"Title\",\n          position: {\n            x: this.props.x !== undefined ? this.props.x : 0,\n            y: this.props.y !== undefined ? this.props.y : 0\n          },\n\n          /*list: this.props.list !== undefined ? this.props.list : [],\n          currentItem: this.props.currentItem !== undefined ? this.props.currentItem : \"\",\n\n          triangle: {\n              min: this.props.triangle.min !== undefined ? this.props.triangle.min :  0,\n              max: this.props.triangle.min !== undefined ? this.props.triangle.max :  100,\n              value: this.props.triangle.min !== undefined ? this.props.triangle.value :  0,\n          }*/\n\n        };\n      }\n\n      render() {\n        const {position,triangle} = this.state\n        return (\n         <EtapStyle position={position}>\n             <EtapHeaderStyle>\n                 <p>{this.state.name}</p>\n             </EtapHeaderStyle>\n             <div>\n                <div style={{border: '1px solid black'}}>\n                    <p>Время цила</p>\n                </div>\n                <CycleTimeContentStyle>\n                    <CycleTimeContentActyaleStyle>\n                        <div style={{borderBottom: '1px solid black'}}>\n                            <p>Актуальное</p>\n                        </div>\n                        <Time padding={5}/>\n                    </CycleTimeContentActyaleStyle>\n                    <CycleTimeContentDefaultStyle>\n                        <div style={{borderBottom: '1px solid black'}}>\n                            <p>Идеальное</p>\n                        </div>\n                        <Time padding={5}/>\n                    </CycleTimeContentDefaultStyle>\n                </CycleTimeContentStyle>\n             </div>\n\n             <div>\n                <div style={{border: '1px solid black'}}>\n                    <p>Время Подготовки</p>\n                </div>\n                <CycleTimeContentStyle>\n                    <CycleTimeContentActyaleStyle>\n                        <div style={{borderBottom: '1px solid black'}}>\n                            <p>Актуальное</p>\n                        </div>\n                        <Time padding={5}/>\n                    </CycleTimeContentActyaleStyle>\n                    <CycleTimeContentDefaultStyle>\n                        <div style={{borderBottom: '1px solid black'}}>\n                            <p>Идеальное</p>\n                        </div>\n                        <Time padding={5}/>\n                    </CycleTimeContentDefaultStyle>\n                </CycleTimeContentStyle>\n             </div>\n         </EtapStyle>\n        )\n      }\n}\n\n\nexport default Etap;","/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Etap/EtapStyle.js",[],{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":32,"column":13,"nodeType":"237","endLine":32,"endColumn":56},{"ruleId":"235","severity":1,"message":"236","line":33,"column":13,"nodeType":"237","endLine":33,"endColumn":46},{"ruleId":"235","severity":1,"message":"236","line":35,"column":13,"nodeType":"237","endLine":35,"endColumn":57},{"ruleId":"238","severity":1,"message":"239","line":62,"column":13,"nodeType":"240","messageId":"241","endLine":62,"endColumn":19},{"ruleId":"238","severity":1,"message":"242","line":34,"column":13,"nodeType":"240","messageId":"241","endLine":34,"endColumn":17},{"ruleId":"238","severity":1,"message":"243","line":5,"column":8,"nodeType":"240","messageId":"241","endLine":5,"endColumn":22},{"ruleId":"238","severity":1,"message":"244","line":141,"column":11,"nodeType":"240","messageId":"241","endLine":141,"endColumn":18},{"ruleId":"238","severity":1,"message":"245","line":142,"column":11,"nodeType":"240","messageId":"241","endLine":142,"endColumn":18},{"ruleId":"246","severity":1,"message":"247","line":226,"column":9,"nodeType":"248","messageId":"249","endLine":256,"endColumn":110},{"ruleId":"250","severity":1,"message":"251","line":288,"column":9,"nodeType":"252","messageId":"253","endLine":317,"endColumn":10},{"ruleId":"254","severity":1,"message":"255","line":365,"column":23,"nodeType":"237","endLine":365,"endColumn":292},{"ruleId":"231","replacedBy":"256"},{"ruleId":"233","replacedBy":"257"},{"ruleId":"238","severity":1,"message":"258","line":4,"column":8,"nodeType":"240","messageId":"241","endLine":4,"endColumn":21},{"ruleId":"238","severity":1,"message":"259","line":6,"column":9,"nodeType":"240","messageId":"241","endLine":6,"endColumn":23},{"ruleId":"238","severity":1,"message":"260","line":76,"column":5,"nodeType":"240","messageId":"241","endLine":76,"endColumn":22},{"ruleId":"238","severity":1,"message":"261","line":170,"column":5,"nodeType":"240","messageId":"241","endLine":170,"endColumn":23},{"ruleId":"238","severity":1,"message":"262","line":241,"column":7,"nodeType":"240","messageId":"241","endLine":241,"endColumn":24},{"ruleId":"238","severity":1,"message":"263","line":287,"column":5,"nodeType":"240","messageId":"241","endLine":287,"endColumn":9},{"ruleId":"238","severity":1,"message":"264","line":31,"column":5,"nodeType":"240","messageId":"241","endLine":31,"endColumn":13},{"ruleId":"238","severity":1,"message":"265","line":34,"column":10,"nodeType":"240","messageId":"241","endLine":34,"endColumn":17},{"ruleId":"238","severity":1,"message":"266","line":39,"column":10,"nodeType":"240","messageId":"241","endLine":39,"endColumn":26},{"ruleId":"238","severity":1,"message":"267","line":44,"column":10,"nodeType":"240","messageId":"241","endLine":44,"endColumn":13},{"ruleId":"238","severity":1,"message":"268","line":50,"column":10,"nodeType":"240","messageId":"241","endLine":50,"endColumn":19},{"ruleId":"238","severity":1,"message":"269","line":65,"column":10,"nodeType":"240","messageId":"241","endLine":65,"endColumn":15},{"ruleId":"238","severity":1,"message":"270","line":38,"column":24,"nodeType":"240","messageId":"241","endLine":38,"endColumn":45},{"ruleId":"238","severity":1,"message":"271","line":117,"column":7,"nodeType":"240","messageId":"241","endLine":117,"endColumn":14},{"ruleId":"238","severity":1,"message":"272","line":56,"column":25,"nodeType":"240","messageId":"241","endLine":56,"endColumn":33},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","'list' is assigned a value but never used.","'DiagramViewBox' is defined but never used.","'originX' is assigned a value but never used.","'originY' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["273"],["274"],"'SymbolPalette' is defined but never used.","'PortVisibility' is defined but never used.","'external_shipment' is assigned a value but never used.","'production_control' is assigned a value but never used.","'stright_connector' is assigned a value but never used.","'port' is assigned a value but never used.","'template' is assigned a value but never used.","'findGIP' is defined but never used.","'findPixelProsent' is defined but never used.","'sin' is defined but never used.","'findPoint' is defined but never used.","'findA' is defined but never used.","'handlerGetBasicShapes' is assigned a value but never used.","'PxMin_X' is assigned a value but never used.","'triangle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]