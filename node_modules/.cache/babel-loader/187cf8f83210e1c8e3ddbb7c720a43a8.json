{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInDefault.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\nimport { IDataColorOrderInDefault } from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault';\nimport { useHistory, useLocation } from 'react-router';\nimport { useActionOrders } from '../../../hooks/useActionOrders';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar simulationEnum;\n\n(function (simulationEnum) {\n  simulationEnum[\"Start\"] = \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n  simulationEnum[\"Stop\"] = \"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n})(simulationEnum || (simulationEnum = {}));\n\nconst CardOrderInDefault = props => {\n  _s();\n\n  const {\n    Start,\n    Stop\n  } = simulationEnum;\n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  });\n  const [order, setOrder] = useState();\n\n  if (order === undefined) {\n    setOrder(props.data);\n\n    if (props.data.simulation) {\n      let sim = props.data.simulation;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Start\n      });\n    } else {\n      let sim = props.data.simulation;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Stop\n      });\n    }\n  }\n\n  const {\n    startSimulation,\n    updateInfoOrder\n  } = useActionOrders();\n\n  const onSimulation = () => {\n    if (simulation.work) {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Start\n      });\n      startSimulation(props.data, sim);\n    } else {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Stop\n      });\n      startSimulation(props.data, sim);\n    }\n  };\n\n  let flag = simulation.text === simulationEnum.Stop && simulation.work;\n  useEffect(() => {\n    (async () => {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder', JSON.stringify(order), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        let responseData = JSON.parse(JSON.stringify(response.data));\n        setOrder(responseData);\n        setSimulation({ ...simulation,\n          work: responseData.simulation,\n          text: Stop\n        });\n      }\n    })();\n  }, [order]);\n  const history = useHistory();\n  const location = useLocation();\n\n  const openInfo = () => {\n    history.push('/orderInfo', {\n      data: props.data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      minWidth: 200,\n      color: flag ? 'white' : 'black',\n      backgroundColor: props.OrderColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      titleTypographyProps: {\n        variant: \"h6\"\n      },\n      action: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"settings\",\n          onClick: openInfo,\n          children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 10\n      }, this),\n      title: \"Заказ номер: \" + (order === null || order === void 0 ? void 0 : order.name),\n      subheader: /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          color: flag ? 'white' : 'black'\n        },\n        children: order === null || order === void 0 ? void 0 : order.tActual\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: simulation.work ? \"success\" : \"info\",\n        variant: simulation.work ? \"contained\" : \"outlined\",\n        onClick: onSimulation,\n        children: simulation.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardOrderInDefault, \"R+YGZxPrhMDnZXqpl1LZlhtQMjM=\", false, function () {\n  return [useActionOrders, useHistory, useLocation];\n});\n\n_c = CardOrderInDefault;\nexport default CardOrderInDefault;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardOrderInDefault\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInDefault.tsx"],"names":["React","useEffect","useState","Card","CardActions","Button","Typography","CardHeader","IconButton","SettingsIcon","Divider","IDataColorOrderInDefault","useHistory","useLocation","useActionOrders","axios","simulationEnum","CardOrderInDefault","props","Start","Stop","simulation","setSimulation","text","color","NotWork","work","order","setOrder","undefined","data","sim","startSimulation","updateInfoOrder","onSimulation","flag","response","post","JSON","stringify","headers","status","responseData","parse","history","location","openInfo","push","minWidth","backgroundColor","OrderColor","variant","name","tActual"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\n\nimport {IDataColorOrderInDefault} from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault'\nimport IDataOrder from '../../Data/IDataOrder';\nimport { Redirect,useHistory, useLocation } from 'react-router'\nimport { useActionOrders } from '../../../hooks/useActionOrders';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\n\nimport axios from 'axios'\n\nenum simulationEnum{\n  Start = 'Запустить симуляцию',\n  Stop = 'Остановить симуляцию'\n}\nconst CardOrderInDefault = (props:{OrderColor: IDataColorOrderInDefault, data: IDataOrder}) => {\n\n  const {Start,Stop} = simulationEnum;\n\n\n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  });\n\n  const[order, setOrder] = useState<IDataOrder>();\n\n\n  if(order === undefined)\n  {\n    setOrder(props.data);\n    if(props.data.simulation)\n    {\n      let sim = props.data.simulation;\n      setSimulation({...simulation, work:sim, text: Start })\n    }\n    else\n    {\n      let sim = props.data.simulation;\n      setSimulation({...simulation, work:sim, text: Stop })\n    }\n  }\n\n  const {startSimulation, updateInfoOrder} = useActionOrders()\n\n  const onSimulation = () => {\n\n    if(simulation.work)\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Start })\n      startSimulation(props.data as IDataOrder, sim);\n    }\n    else\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Stop })\n      startSimulation(props.data as IDataOrder, sim);\n    }\n  }\n\n  let flag = (simulation.text === simulationEnum.Stop && simulation.work)\n\n\n  useEffect(() => {\n  \n    (async () => {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder',JSON.stringify(order),\n      {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n      })\n\n      if(response.status === 200)\n      {\n         let responseData =  JSON.parse(JSON.stringify(response.data)) as IDataOrder;\n         setOrder(responseData);\n         setSimulation({...simulation, work:responseData.simulation, text: Stop });\n      }\n   })();\n\n\n\n\n  },[order]);\n \n  const history = useHistory();\n  const location = useLocation();\n  \n  const openInfo = () => {\n    history.push('/orderInfo', { data: props.data});\n  }\n\n\n  return (\n    <Card sx={{ minWidth: 200,color: flag ? 'white':'black',  backgroundColor: props.OrderColor }}>\n      <CardHeader\n        titleTypographyProps={{ variant: \"h6\" }}\n        action={\n         <div>\n          <IconButton \n          aria-label=\"settings\"\n          onClick={openInfo}>\n            <SettingsIcon />\n          </IconButton>\n         </div>\n        }\n        title={\"Заказ номер: \"+order?.name}\n        subheader={<Typography style={{color: flag ? 'white':'black'}}>{order?.tActual}</Typography>}\n      />\n      <Divider/>\n      <CardActions>\n        <Button size=\"small\" color={simulation.work ? \"success\":\"info\"} variant={simulation.work ? \"contained\":\"outlined\"} onClick={onSimulation}>{simulation.text}</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default CardOrderInDefault;"]},"metadata":{},"sourceType":"module"}