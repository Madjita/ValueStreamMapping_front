{"ast":null,"code":"import { Size } from './../primitives/size';\nimport { Rect } from './../primitives/rect';\nimport { identityMatrix, rotateMatrix, transformPointByMatrix, scaleMatrix } from './../primitives/matrix';\nimport { DiagramElement } from './../core/elements/diagram-element';\nimport { Container } from './../core/containers/container';\nimport { StrokeStyle, Stop } from './../core/appearance';\nimport { Point } from './../primitives/point';\nimport { ConnectorConstraints, NodeConstraints, PortConstraints, DiagramConstraints, DiagramTools, Transform, BlazorAction } from './../enum/enum';\nimport { SelectorConstraints, ThumbsConstraints } from './../enum/enum';\nimport { PathElement } from './../core/elements/path-element';\nimport { DiagramNativeElement } from './../core/elements/native-element';\nimport { TextElement } from '../core/elements/text-element';\nimport { ImageElement } from '../core/elements/image-element';\nimport { PathAnnotation, ShapeAnnotation } from './../objects/annotation';\nimport { Node, FlowShape, BasicShape, Native, Html, UmlActivityShape, BpmnGateway, BpmnDataObject, BpmnEvent, BpmnSubEvent, BpmnActivity, BpmnAnnotation, MethodArguments, UmlClassAttribute, UmlClassMethod, UmlClass, UmlInterface, UmlEnumerationMember, UmlEnumeration, Lane, Phase, ChildContainer, SwimLane, Path, Image, Text, BpmnShape, UmlClassifierShape, Header } from './../objects/node';\nimport { Connector, bezierPoints, BezierSegment, StraightSegment, OrthogonalSegment } from './../objects/connector';\nimport { getBasicShape } from './../objects/dictionary/basic-shapes';\nimport { getFlowShape } from './../objects/dictionary/flow-shapes';\nimport { Diagram } from './../diagram';\nimport { findAngle } from './connector';\nimport { getContent, removeElement, hasClass, getDiagramElement } from './dom-util';\nimport { getBounds, cloneObject, rotatePoint, getFunction } from './base-util';\nimport { getPolygonPath } from './../utility/path-util';\nimport { DiagramHtmlElement } from '../core/elements/html-element';\nimport { getRulerSize } from '../ruler/ruler';\nimport { canResize } from './constraints-util';\nimport { UserHandle } from '../interaction/selector';\nimport { getUMLActivityShape } from '../objects/dictionary/umlactivity-shapes';\nimport { Canvas } from '../core/containers/canvas';\nimport { PointPort } from '../objects/port';\nimport { Command } from '../diagram/keyboard-commands';\nimport { pasteSwimLane } from './swim-lane-util';\nimport { isBlazor, Browser, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ConnectorFixedUserHandle } from '../objects/fixed-user-handle';\n/**\n * completeRegion method\\\n *\n * @returns {  void }    completeRegion method .\\\n * @param {Rect} region - provide the region value.\n * @param {(NodeModel | ConnectorModel)[]} selectedObjects - provide the selectedObjects value.\n * @private\n */\n\nexport function completeRegion(region, selectedObjects) {\n  var collection = [];\n\n  for (var i = 0; i < selectedObjects.length; i++) {\n    var obj = selectedObjects[i];\n\n    if (region.containsRect(obj.wrapper.bounds)) {\n      collection.push(obj);\n    }\n  }\n\n  return collection;\n}\n/**\n * findNodeByName method \\\n *\n * @returns {  boolean } findNodeByName method .\\\n * @param {(NodeModel | ConnectorModel)[]} nodes - provide the nodes  value.\n * @param {string} name - provide the orientation  value.\n * @private\n */\n\nexport function findNodeByName(nodes, name) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].id === name) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * findNodeByName method \\\n *\n * @returns {  string } findNodeByName method .\\\n * @param {(NodeModel | ConnectorModel)[]} drawingObject - provide the drawingObject  value.\n * @private\n */\n\nexport function findObjectType(drawingObject) {\n  var type;\n\n  if (drawingObject) {\n    if (drawingObject.type) {\n      type = 'Connector';\n    } else if (drawingObject.shape && !drawingObject.type) {\n      type = 'Node';\n    }\n  }\n\n  return type;\n}\n/**\n * setSwimLaneDefaults method \\\n *\n * @returns {  void } setSwimLaneDefaults method .\\\n * @param {NodeModel | ConnectorModel} child - provide the child  value.\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @private\n */\n\nexport function setSwimLaneDefaults(child, node) {\n  if (node instanceof Node) {\n    if (!child.shape.header) {\n      node.shape.hasHeader = false;\n    }\n  }\n}\n/**\n * getSpaceValue method \\\n *\n * @returns {  number } getSpaceValue method .\\\n * @param {number[]} intervals - provide the intervals  value.\n * @param {boolean} isLine - provide the isLine  value.\n * @param {number} i - provide the i  value.\n * @param {number} space - provide the space  value.\n * @private\n */\n\nexport function getSpaceValue(intervals, isLine, i, space) {\n  space = !isLine ? intervals[i - 1] !== undefined ? intervals[i - 1] + space : 0 : space;\n  return space;\n}\n/**\n * getInterval method \\\n *\n * @returns {  number[] } getInterval method .\\\n * @param {number[]} intervals - provide the intervals  value.\n * @param {boolean} isLine - provide the isLine  value.\n * @private\n */\n\nexport function getInterval(intervals, isLine) {\n  var newInterval = [];\n\n  if (!isLine) {\n    for (var k = 0; k < intervals.length; k++) {\n      newInterval.push(intervals[k]);\n    }\n\n    newInterval.push(intervals[newInterval.length - 2]);\n    newInterval.push(intervals[newInterval.length - 2]);\n  } else {\n    newInterval = intervals;\n  }\n\n  return newInterval;\n}\n/**\n * setPortsEdges method \\\n *\n * @returns {  Node } setPortsEdges method .\\\n * @param {Node} node - provide the node  value.\n * @private\n */\n\nexport function setPortsEdges(node) {\n  for (var k = 0; k < node.ports.length; k++) {\n    node.ports[k].inEdges = [];\n    node.ports[k].outEdges = [];\n  }\n\n  return node;\n}\n/**\n * setUMLActivityDefaults method \\\n *\n * @returns {  void } setUMLActivityDefaults method .\\\n * @param {NodeModel | ConnectorModel} child - provide the child  value.\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @private\n */\n\nexport function setUMLActivityDefaults(child, node) {\n  if (node instanceof Node) {\n    var shape = isBlazor() ? child.shape.umlActivityShape : child.shape.shape;\n\n    switch (shape) {\n      case 'JoinNode':\n        if (!child.width) {\n          node.width = 20;\n        }\n\n        if (!child.height) {\n          node.height = 90;\n        }\n\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'black';\n        }\n\n        break;\n\n      case 'ForkNode':\n        if (!child.width) {\n          node.width = 90;\n        }\n\n        if (!child.height) {\n          node.height = 20;\n        }\n\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'black';\n        }\n\n        break;\n\n      case 'InitialNode':\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'black';\n        }\n\n        break;\n\n      case 'FinalNode':\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'black';\n        }\n\n        break;\n    }\n  } else {\n    var flow = isBlazor() ? child.shape.umlActivityFlow : child.shape.flow;\n\n    switch (flow) {\n      case 'Object':\n        if (!child.style || !child.style.strokeDashArray) {\n          node.style.strokeDashArray = '8 4';\n        }\n\n        if (!child.style || !child.style.strokeWidth) {\n          node.style.strokeWidth = 2;\n        }\n\n        if (!child.targetDecorator || !child.targetDecorator.shape) {\n          node.targetDecorator.shape = 'OpenArrow';\n        }\n\n        break;\n\n      case 'Control':\n        if (!child.style || !child.style.strokeWidth) {\n          node.style.strokeWidth = 2;\n        }\n\n        if (!child.targetDecorator || !child.targetDecorator.shape) {\n          node.targetDecorator.shape = 'OpenArrow';\n        }\n\n        if (!child.sourceDecorator || !child.sourceDecorator.shape) {\n          node.sourceDecorator.shape = 'None';\n        }\n\n        break;\n    }\n  }\n}\n/* eslint-disable */\n\n/**\n * setConnectorDefaults method \\\n *\n * @returns {  void } setConnectorDefaults method .\\\n * @param {ConnectorModel} child - provide the child  value.\n * @param {ConnectorModel} node - provide the node  value.\n * @private\n */\n\nexport function setConnectorDefaults(child, node) {\n  switch (child.shape.type) {\n    case 'Bpmn':\n      var bpmnFlow = isBlazor() ? child.shape.bpmnFlow : child.shape.flow;\n\n      switch (bpmnFlow) {\n        case 'Sequence':\n          if (child.shape.sequence === 'Normal' && child.type !== 'Bezier' || child.shape.sequence === 'Default' || child.shape.sequence === 'Conditional') {\n            if (node.targetDecorator && node.targetDecorator.style) {\n              node.targetDecorator.style.fill = child.targetDecorator && child.targetDecorator.style && child.targetDecorator.style.fill || 'black';\n            }\n\n            if (child.shape.sequence === 'Conditional' && node.sourceDecorator) {\n              if (node.sourceDecorator.style) {\n                node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'white';\n              }\n\n              node.sourceDecorator.width = child.sourceDecorator && child.sourceDecorator.width || 20;\n              node.sourceDecorator.height = child.sourceDecorator && child.sourceDecorator.width || 10;\n            }\n          }\n\n          break;\n\n        case 'Association':\n          if (child.shape.association === 'Default' || child.shape.association === 'Directional' || child.shape.association === 'BiDirectional') {\n            if (node.targetDecorator && node.targetDecorator.style) {\n              node.targetDecorator.style.fill = child.targetDecorator && child.targetDecorator.style && child.targetDecorator.style.fill || 'black';\n            }\n\n            if (child.shape.association === 'BiDirectional') {\n              if (node.sourceDecorator && node.sourceDecorator.style) {\n                node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'white';\n                node.sourceDecorator.width = child.sourceDecorator && child.sourceDecorator.width || 5;\n                node.sourceDecorator.height = child.sourceDecorator && child.sourceDecorator.height || 10;\n              }\n            }\n          }\n\n          break;\n\n        case 'Message':\n          if (node.style && !node.style.strokeDashArray) {\n            node.style.strokeDashArray = child.style && child.style.strokeDashArray || '4 4';\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'UmlActivity':\n      var flow = isBlazor() ? child.shape.umlActivityFlow : child.shape.flow;\n\n      switch (flow) {\n        case 'Exception':\n          if (child.shape.association === 'Directional' || child.shape.association === 'BiDirectional') {\n            node.style.strokeDashArray = child.style && child.style.strokeDashArray || '2 2';\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'UmlClassifier':\n      var hasRelation = false;\n\n      if (child.shape.relationship === 'Association') {\n        hasRelation = true;\n      } else if (child.shape.relationship === 'Inheritance') {\n        if (node.targetDecorator && node.targetDecorator.style) {\n          node.targetDecorator.style.fill = child.targetDecorator && child.targetDecorator.style && child.targetDecorator.style.fill || 'white';\n        }\n\n        if (node.style) {\n          hasRelation = true;\n          node.style.strokeDashArray = child.style && child.style.strokeDashArray || '4 4';\n        }\n      } else if (child.shape.relationship === 'Composition') {\n        if (node.sourceDecorator && node.sourceDecorator.style) {\n          node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'black';\n        }\n\n        hasRelation = true;\n      } else if (child.shape.relationship === 'Aggregation' || child.shape.relationship === undefined) {\n        if (node.sourceDecorator && node.sourceDecorator.style) {\n          node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'white';\n        }\n\n        hasRelation = true;\n      } else if (child.shape.relationship === 'Dependency') {\n        if (node.sourceDecorator && node.sourceDecorator.style) {\n          node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'white';\n        }\n\n        hasRelation = true;\n        node.style.strokeDashArray = '4 4';\n      } else if (child.shape.relationship === 'Realization') {\n        if (node.sourceDecorator && node.sourceDecorator.style) {\n          node.sourceDecorator.style.fill = child.sourceDecorator && child.sourceDecorator.style && child.sourceDecorator.style.fill || 'white';\n        }\n\n        hasRelation = true;\n      }\n\n      if (hasRelation) {\n        node.style.strokeWidth = child.style && child.style.strokeWidth || 2;\n      }\n\n      break;\n  }\n}\n/* eslint-enable */\n\n/**\n * findNearestPoint method \\\n *\n * @returns {  PointModel } findNearestPoint method .\\\n * @param {PointModel} reference - provide the reference  value.\n * @param {PointModel} start - provide the start  value.\n * @param {PointModel} end - provide the end  value.\n * @private\n */\n\nexport function findNearestPoint(reference, start, end) {\n  var shortestPoint;\n  var shortest = Point.findLength(start, reference);\n  var shortest1 = Point.findLength(end, reference);\n\n  if (shortest > shortest1) {\n    shortestPoint = end;\n  } else {\n    shortestPoint = start;\n  }\n\n  var angleBWStAndEnd = Point.findAngle(start, end);\n  var angleBWStAndRef = Point.findAngle(shortestPoint, reference);\n  var r = Point.findLength(shortestPoint, reference);\n  var vaAngle = angleBWStAndRef + (angleBWStAndEnd - angleBWStAndRef) * 2;\n  return {\n    x: shortestPoint.x + r * Math.cos(vaAngle * Math.PI / 180),\n    y: shortestPoint.y + r * Math.sin(vaAngle * Math.PI / 180)\n  };\n}\n/**\n * pointsForBezier method \\\n *\n * @returns {   PointModel[] } pointsForBezier method .\\\n * @param {ConnectorModel} connector - provide the connector  value.\n * @private\n */\n\nfunction pointsForBezier(connector) {\n  var points = [];\n\n  if (connector.type === 'Bezier') {\n    var k = 0;\n\n    for (var i = 0; i < connector.segments.length; i++) {\n      var tolerance = 1.5;\n      var segment = connector.segments[i]; //const pt: PointModel = { x: 0, y: 0 };\n\n      var point1 = !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1;\n      var point2 = !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2;\n      var max = Number((connector.distance(point1, segment.points[0]) + connector.distance(point2, point1) + connector.distance(segment.points[1], point2)) / tolerance);\n\n      for (var j = 0; j < max - 1; j = j + 10) {\n        points[k] = bezierPoints(connector, segment.points[0], !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1, !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2, segment.points[1], j, max);\n        k++;\n      }\n    }\n  }\n\n  return points;\n}\n/**\n * isDiagramChild method \\\n *\n * @returns {  boolean } isDiagramChild method .\\\n * @param {HTMLElement} htmlLayer - provide the htmlLayer  value.\n * @private\n */\n\n\nexport function isDiagramChild(htmlLayer) {\n  var element = htmlLayer.parentElement;\n\n  do {\n    if (hasClass(element, 'e-diagram')) {\n      return true;\n    }\n\n    element = element.parentElement;\n  } while (element);\n\n  return false;\n}\n/**\n * groupHasType method \\\n *\n * @returns {  boolean } groupHasType method .\\\n * @param {NodeModel} node - provide the node  value.\n * @param {Shapes} type - provide the type  value.\n * @param {{}} nameTable - provide the nameTable  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function groupHasType(node, type, nameTable) {\n  var contains = false;\n\n  if (node && node.children && node.children.length > 0) {\n    var child = void 0;\n    var i = 0;\n\n    for (; i < node.children.length; i++) {\n      child = nameTable[node.children[i]];\n\n      if (child.shape.type === type) {\n        return true;\n      }\n\n      return groupHasType(child, type, nameTable);\n    }\n  }\n\n  return contains;\n}\n/**\n * groupHasType method \\\n *\n * @returns {  void } groupHasType method .\\\n * @param {NodeModel | ConnectorModel} actualNode - provide the actualNode  value.\n * @param { NodeModel | ConnectorModel} plainValue - provide the plainValue  value.\n * @param {object} defaultValue - provide the defaultValue  value.\n * @param {NodeModel | ConnectorModel} property - provide the property  value.\n * @param {string} oldKey - provide the oldKey  value.\n * @private\n */\n\nexport function updateDefaultValues(actualNode, plainValue, // eslint-disable-next-line @typescript-eslint/ban-types\ndefaultValue, property, oldKey) {\n  if (defaultValue && (actualNode instanceof Connector || actualNode && (actualNode.shape && actualNode.shape.type !== 'SwimLane' || actualNode.shape === undefined))) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    var keyObj = void 0;\n\n    for (var _i = 0, _a = Object.keys(defaultValue); _i < _a.length; _i++) {\n      var key = _a[_i];\n      keyObj = defaultValue[key];\n\n      if (key === 'shape' && keyObj.type) {\n        actualNode.shape = {\n          type: keyObj.type\n        };\n      }\n\n      if (keyObj) {\n        if (Array.isArray(keyObj) && keyObj.length && keyObj.length > 0 && oldKey !== 'annotations' && oldKey !== 'ports') {\n          if (actualNode[key].length > 0) {\n            for (var i = 0; i <= actualNode[key].length; i++) {\n              updateDefaultValues(actualNode[key], plainValue ? plainValue[key] : undefined, defaultValue[key], key === 'annotations' || key === 'ports' ? actualNode : undefined, key);\n            }\n          } else {\n            updateDefaultValues(actualNode[key], plainValue ? plainValue[key] : undefined, defaultValue[key], key === 'annotations' || key === 'ports' ? actualNode : undefined, key);\n          }\n        } else if (keyObj instanceof Object && plainValue && oldKey !== 'annotations' && oldKey !== 'ports') {\n          updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n        } else if (oldKey !== 'annotations' && oldKey !== 'ports' && plainValue && !plainValue[key] || !plainValue && actualNode && (actualNode[key] || actualNode[key] !== undefined)) {\n          actualNode[key] = defaultValue[key];\n        } else {\n          var createObject = void 0;\n\n          if (oldKey === 'annotations' || oldKey === 'ports') {\n            if (oldKey === 'annotations') {\n              if (actualNode[key]) {\n                updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n              }\n\n              if (!actualNode[key]) {\n                if (getObjectType(property) === Connector) {\n                  createObject = new PathAnnotation(property, 'annotations', defaultValue[key]);\n                  property.annotations.push(createObject);\n                } else {\n                  createObject = new ShapeAnnotation(property, 'annotations', defaultValue[key]);\n                  property.annotations.push(createObject);\n                }\n              }\n            } else {\n              if (actualNode[key]) {\n                updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n              } else {\n                createObject = new PointPort(property, 'ports', defaultValue[key]);\n                property.ports.push(createObject);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/* tslint:disable:no-string-literal */\n\n/**\n * updateLayoutValue method \\\n *\n * @returns {  void } updateLayoutValue method .\\\n * @param {TreeInfo} actualNode - provide the actualNode  value.\n * @param { object} defaultValue - provide the defaultValue  value.\n * @param {INode[]} nodes - provide the nodes  value.\n * @param {INode} node - provide the node  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function updateLayoutValue(actualNode, defaultValue, nodes, node) {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  var keyObj;\n\n  if (defaultValue) {\n    for (var _i = 0, _a = Object.keys(defaultValue); _i < _a.length; _i++) {\n      var key = _a[_i];\n      keyObj = defaultValue[key];\n\n      if (key === 'getAssistantDetails') {\n        if (node.data['Role'] === defaultValue[key]['root']) {\n          var assitants = defaultValue[key]['assistants'];\n\n          for (var i = 0; i < assitants.length; i++) {\n            for (var j = 0; j < nodes.length; j++) {\n              if (nodes[j].data['Role'] === assitants[i]) {\n                actualNode.assistants.push(nodes[j].id);\n                actualNode.children.splice(0, 1);\n              }\n            }\n          }\n        }\n      } else if (keyObj) {\n        actualNode[key] = defaultValue[key];\n      }\n    }\n  }\n\n  if (!actualNode.hasSubTree && defaultValue.canEnableSubTree) {\n    actualNode.orientation = node.layoutInfo.orientation;\n    actualNode.type = node.layoutInfo.type;\n\n    if (node.layoutInfo.offset !== actualNode.offset && node.layoutInfo.offset !== undefined) {\n      actualNode.offset = node.layoutInfo.offset;\n    }\n  }\n\n  node.layoutInfo.hasSubTree = actualNode.hasSubTree;\n}\n/* tslint:enable:no-string-literal */\n\n/**\n * isPointOverConnector method \\\n *\n * @returns {  boolean } isPointOverConnector method .\\\n * @param {ConnectorModel} connector - provide the connector  value.\n * @param { PointModel} reference - provide the reference  value.\n * @private\n */\n\nexport function isPointOverConnector(connector, reference) {\n  //let intermediatePoints: PointModel[];\n  var intermediatePoints = connector.type === 'Bezier' ? pointsForBezier(connector) : connector.intermediatePoints;\n\n  for (var i = 0; i < intermediatePoints.length - 1; i++) {\n    var start = intermediatePoints[i];\n    var end = intermediatePoints[i + 1];\n    var rect = Rect.toBounds([start, end]);\n    rect.Inflate(connector.hitPadding);\n\n    if (rect.containsPoint(reference)) {\n      var intersectinPt = findNearestPoint(reference, start, end);\n      var segment1 = {\n        x1: start.x,\n        x2: end.x,\n        y1: start.y,\n        y2: end.y\n      };\n      var segment2 = {\n        x1: reference.x,\n        x2: intersectinPt.x,\n        y1: reference.y,\n        y2: intersectinPt.y\n      };\n      var intersectDetails = intersect3(segment1, segment2);\n\n      if (intersectDetails.enabled) {\n        var distance = Point.findLength(reference, intersectDetails.intersectPt);\n\n        if (Math.abs(distance) < connector.hitPadding) {\n          return true;\n        }\n      } else {\n        var rect_1 = Rect.toBounds([reference, reference]);\n        rect_1.Inflate(3);\n\n        if (rect_1.containsPoint(start) || rect_1.containsPoint(end)) {\n          return true;\n        }\n      }\n\n      if (Point.equals(reference, intersectinPt)) {\n        return true;\n      }\n    }\n  }\n\n  if (connector.annotations.length > 0) {\n    var container = connector.wrapper.children;\n\n    for (var i = 3; i < container.length; i++) {\n      var textElement = container[i];\n\n      if (textElement.bounds.containsPoint(reference)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\n * intersect3 method \\\n *\n * @returns {  Intersection } intersect3 method .\\\n * @param {ConnectorModel} lineUtil1 - provide the lineUtil1  value.\n * @param { PointModel} lineUtil2 - provide the lineUtil2  value.\n * @private\n */\n\nexport function intersect3(lineUtil1, lineUtil2) {\n  var point = {\n    x: 0,\n    y: 0\n  };\n  var l1 = lineUtil1;\n  var l2 = lineUtil2;\n  var d = (l2.y2 - l2.y1) * (l1.x2 - l1.x1) - (l2.x2 - l2.x1) * (l1.y2 - l1.y1);\n  var na = (l2.x2 - l2.x1) * (l1.y1 - l2.y1) - (l2.y2 - l2.y1) * (l1.x1 - l2.x1);\n  var nb = (l1.x2 - l1.x1) * (l1.y1 - l2.y1) - (l1.y2 - l1.y1) * (l1.x1 - l2.x1);\n  /*( EJ2-42102 - Connector segments not update properly ) by sivakumar sekar - condition added to avoid bridging for\n   overlapping segments in the connectors and to validate whether the connector is intersecting over the other */\n\n  if (d === 0 || (lineUtil1.x1 === lineUtil2.x1 || lineUtil1.y1 === lineUtil2.y1) && (lineUtil1.x2 === lineUtil2.x2 || lineUtil1.y2 === lineUtil2.y2) && (na === 0 || nb === 0) && d > 0) {\n    return {\n      enabled: false,\n      intersectPt: point\n    };\n  }\n\n  var ua = na / d;\n  var ub = nb / d;\n\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    point.x = l1.x1 + ua * (l1.x2 - l1.x1);\n    point.y = l1.y1 + ua * (l1.y2 - l1.y1);\n    return {\n      enabled: true,\n      intersectPt: point\n    };\n  }\n\n  return {\n    enabled: false,\n    intersectPt: point\n  };\n}\n/**\n * intersect2 method \\\n *\n * @returns {  PointModel } intersect2 method .\\\n * @param {PointModel} start1 - provide the start1  value.\n * @param { PointModel} end1 - provide the end1  value.\n * @param { PointModel} start2 - provide the start2  value.\n * @param { PointModel} end2 - provide the end2  value.\n * @private\n */\n\nexport function intersect2(start1, end1, start2, end2) {\n  var point = {\n    x: 0,\n    y: 0\n  };\n  var lineUtil1 = getLineSegment(start1.x, start1.y, end1.x, end1.y);\n  var lineUtil2 = getLineSegment(start2.x, start2.y, end2.x, end2.y);\n  var line3 = intersect3(lineUtil1, lineUtil2);\n\n  if (line3.enabled) {\n    return line3.intersectPt;\n  } else {\n    return point;\n  }\n}\n/**\n * getLineSegment method \\\n *\n * @returns {  Segment } getLineSegment method .\\\n * @param {number} x1 - provide the x1  value.\n * @param { number} y1 - provide the y1  value.\n * @param { number} x2 - provide the x2  value.\n * @param { number} y2 - provide the y2  value.\n * @private\n */\n\nexport function getLineSegment(x1, y1, x2, y2) {\n  return {\n    'x1': Number(x1) || 0,\n    'y1': Number(y1) || 0,\n    'x2': Number(x2) || 0,\n    'y2': Number(y2) || 0\n  };\n}\n/**\n * getPoints method \\\n *\n * @returns {  PointModel[] } getPoints method .\\\n * @param {number} element - provide the element  value.\n * @param { number} corners - provide the corners  value.\n * @param { number} padding - provide the padding  value.\n * @private\n */\n\nexport function getPoints(element, corners, padding) {\n  var line = [];\n  padding = padding || 0;\n  var left = {\n    x: corners.topLeft.x - padding,\n    y: corners.topLeft.y\n  };\n  var right = {\n    x: corners.topRight.x + padding,\n    y: corners.topRight.y\n  };\n  var top = {\n    x: corners.bottomRight.x,\n    y: corners.bottomRight.y - padding\n  };\n  var bottom = {\n    x: corners.bottomLeft.x,\n    y: corners.bottomLeft.y + padding\n  };\n  line.push(left);\n  line.push(right);\n  line.push(top);\n  line.push(bottom);\n  return line;\n}\n/**\n * getTooltipOffset method \\\n *\n * @returns {  PointModel[] } getTooltipOffset method .\\\n * @param {number} diagram - provide the diagram  value.\n * @param { number} mousePosition - provide the mousePosition  value.\n * @param { NodeModel | ConnectorModel} node - provide the node  value.\n * @param { string} type - provide the type  value.\n * @private\n */\n\nexport function getTooltipOffset(diagram, mousePosition, node, type) {\n  //let offset: PointModel;\n  var inheritTooltip = node instanceof Node ? node.constraints & NodeConstraints.InheritTooltip : node.constraints & ConnectorConstraints.InheritTooltip;\n  var objectTooltip = node instanceof Node ? node.constraints & NodeConstraints.Tooltip : node.constraints & ConnectorConstraints.Tooltip;\n  var isMouseBased = (!inheritTooltip && objectTooltip ? node.tooltip.relativeMode : diagram.tooltip.relativeMode) === 'Mouse' ? true : false;\n\n  if (type === 'Mouse') {\n    isMouseBased = true;\n  } else if (type === 'Object') {\n    isMouseBased = false;\n  }\n\n  var offset = tooltipOffset(node, mousePosition, diagram, isMouseBased);\n  var rulerSize = getRulerSize(diagram);\n  return {\n    x: offset.x + rulerSize.width,\n    y: offset.y + rulerSize.height\n  };\n}\n/**\n * tooltipOffset method \\\n *\n * @returns { PointModel } tooltipOffset method .\\\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @param { PointModel} mousePosition - provide the mousePosition  value.\n * @param { Diagram } diagram - provide the diagram  value.\n * @param { boolean} isMouseBased - provide the isMouseBased  value.\n * @private\n */\n\nfunction tooltipOffset(node, mousePosition, diagram, isMouseBased) {\n  var point = {}; //let scale: number = diagram.scroller.transform.scale;\n\n  var element = document.getElementById(diagram.element.id);\n  var bounds = node.wrapper.bounds;\n  var rect = element.getBoundingClientRect();\n  /* eslint-enable */\n  //let horizontalOffset: number = diagram.scroller.horizontalOffset;\n  //let verticalOffset: number = diagram.scroller.verticalOffset;\n\n  switch (diagram.tooltipObject.position) {\n    case 'BottomCenter':\n      point = offsetPoint(mousePosition, bounds.bottomCenter, diagram, isMouseBased, rect.width / 2, rect.height);\n      break;\n\n    case 'BottomLeft':\n    case 'LeftBottom':\n      point = offsetPoint(mousePosition, bounds.bottomLeft, diagram, isMouseBased, 0, rect.height);\n      break;\n\n    case 'BottomRight':\n    case 'RightBottom':\n      point = offsetPoint(mousePosition, bounds.bottomRight, diagram, isMouseBased, rect.width, rect.height);\n      break;\n\n    case 'LeftCenter':\n      point = offsetPoint(mousePosition, bounds.middleLeft, diagram, isMouseBased, 0, rect.height / 2);\n      break;\n\n    case 'LeftTop':\n    case 'TopLeft':\n      point = offsetPoint(mousePosition, bounds.topLeft, diagram, isMouseBased, 0, 0);\n      break;\n\n    case 'RightCenter':\n      point = offsetPoint(mousePosition, bounds.middleRight, diagram, isMouseBased, rect.width, rect.height / 2);\n      break;\n\n    case 'RightTop':\n    case 'TopRight':\n      point = offsetPoint(mousePosition, bounds.topRight, diagram, isMouseBased, rect.width, 0);\n      break;\n\n    case 'TopCenter':\n      point = offsetPoint(mousePosition, bounds.topCenter, diagram, isMouseBased, rect.width / 2, 0);\n      break;\n  }\n\n  return point;\n}\n/**\n * offsetPoint method \\\n *\n * @returns { PointModel } offsetPoint method .\\\n * @param { PointModel} mousePosition - provide the mousePosition  value.\n * @param { PointModel } bound - provide the diagram  value.\n * @param { Diagram} diagram - provide the isMouseBased  value.\n * @param { boolean} isMouseBased - provide the isMouseBased  value.\n * @param { number} x - provide the isMouseBased  value.\n * @param { number} y - provide the isMouseBased  value.\n * @private\n */\n\n\nfunction offsetPoint(mousePosition, bound, diagram, isMouseBased, x, y) {\n  var point = {};\n  var scale = diagram.scroller.transform.scale;\n  var horizontalOffset = diagram.scroller.horizontalOffset;\n  var verticalOffset = diagram.scroller.verticalOffset;\n  point.x = (isMouseBased ? mousePosition.x : bound.x) * scale + horizontalOffset - x;\n  point.y = (isMouseBased ? mousePosition.y : bound.y) * scale + verticalOffset - y;\n  return point;\n}\n/**\n * Gets the fixed user handles symbol \\\n *\n * @returns { DiagramElement } Gets the fixed user handles symbol .\\\n * @param {ConnectorFixedUserHandleModel | NodeFixedUserHandleModel} options - provide the options  value.\n * @param { Canvas} fixedUserHandleContainer - provide the fixedUserHandleContainer  value.\n * @private\n */\n\n\nexport function initfixedUserHandlesSymbol(options, fixedUserHandleContainer) {\n  //let fixedUserHandleContent: PathElement | DiagramNativeElement;\n  var fixedUserHandleContent = new PathElement();\n  fixedUserHandleContent.data = options.pathData;\n  fixedUserHandleContent.height = options.height > 10 ? options.height - (options.padding.bottom + options.padding.top) : options.height;\n  fixedUserHandleContent.width = options.width > 10 ? options.width - (options.padding.left + options.padding.right) : options.width;\n  fixedUserHandleContent.visible = fixedUserHandleContainer.visible;\n  fixedUserHandleContent.id = fixedUserHandleContainer.id + '_shape';\n  fixedUserHandleContent.inversedAlignment = false;\n  fixedUserHandleContent.horizontalAlignment = 'Center';\n  fixedUserHandleContent.verticalAlignment = 'Center';\n  fixedUserHandleContent.style = {\n    fill: options.iconStrokeColor,\n    strokeColor: options.iconStrokeColor,\n    strokeWidth: options.iconStrokeWidth\n  };\n  fixedUserHandleContent.setOffsetWithRespectToBounds(0.5, 0.5, 'Fraction');\n  fixedUserHandleContent.relativeMode = 'Object';\n  fixedUserHandleContent.description = fixedUserHandleContainer.description || '';\n  return fixedUserHandleContent;\n}\n/**\n * sort method \\\n *\n * @returns { (NodeModel | ConnectorModel)[] } sort method .\\\n * @param {(NodeModel | ConnectorModel)[]} objects - provide the options  value.\n * @param { DistributeOptions} option - provide the fixedUserHandleContainer  value.\n * @private\n */\n\nexport function sort(objects, option) {\n  var i = 0;\n  var j = 0;\n  var temp;\n\n  for (i = 0; i < objects.length; i++) {\n    var b = getBounds(objects[i].wrapper);\n\n    for (j = 0; j < objects.length; j++) {\n      var bounds = getBounds(objects[j].wrapper);\n\n      if (option === 'Top' || option === 'Bottom' || option === 'BottomToTop' || option === 'Middle') {\n        if (b.center.y > bounds.center.y) {\n          temp = objects[i];\n          objects[i] = objects[j];\n          objects[j] = temp;\n        }\n      } else {\n        if (b.center.x > bounds.center.x) {\n          temp = objects[i];\n          objects[i] = objects[j];\n          objects[j] = temp;\n        }\n      }\n    }\n  }\n\n  return objects;\n}\n/**\n * getAnnotationPosition method \\\n *\n * @returns {SegmentInfo } getAnnotationPosition method .\\\n * @param {PointModel[]} pts - provide the pts  value.\n * @param { PathAnnotation | ConnectorFixedUserHandle} annotation - provide the annotation  value.\n * @param { Rect } bound - provide the bound  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function getAnnotationPosition(pts, annotation, bound) {\n  //let angle: number;\n  //let getloop: SegmentInfo;\n  //let point: PointModel;\n  var getloop = getOffsetOfConnector(pts, annotation);\n  var angle = Point.findAngle(pts[getloop.index], pts[getloop.index + 1]);\n  var alignednumber = getAlignedPosition(annotation);\n  var point = Point.transform(getloop.point, angle + 45, alignednumber);\n  getloop.point = point;\n  getloop.angle = angle;\n  return getloop;\n}\n/**\n * getOffsetOfConnector method \\\n *\n * @returns {SegmentInfo } getOffsetOfConnector method .\\\n * @param {PointModel[]} points - provide the pts  value.\n * @param { PathAnnotation | ConnectorFixedUserHandle} annotation - provide the annotation  value.\n * @private\n */\n\nexport function getOffsetOfConnector(points, annotation) {\n  // eslint-disable-next-line\n  var length = 0;\n  var offset = annotation.offset;\n  var point;\n  var angle;\n  var lengths = [];\n  var prevLength;\n  var kCount;\n\n  for (var j = 0; j < points.length - 1; j++) {\n    length += Point.distancePoints(points[j], points[j + 1]);\n    lengths.push(length);\n  }\n\n  var offsetLength = offset * length;\n\n  for (var k = 0; k < lengths.length; k++) {\n    if (lengths[k] >= offsetLength) {\n      angle = Point.findAngle(points[k], points[k + 1]);\n      point = Point.transform(points[k], angle, offsetLength - (prevLength || 0));\n      kCount = k;\n      return {\n        point: point,\n        index: kCount\n      };\n    }\n\n    prevLength = lengths[k];\n  }\n\n  return {\n    point: point,\n    index: kCount\n  };\n}\n/**\n * getAlignedPosition method \\\n *\n * @returns {number } getAlignedPosition method .\\\n * @param {PointModel[]} annotation - provide the annotation  value.\n * @private\n */\n\nexport function getAlignedPosition(annotation) {\n  var cnst;\n\n  if (annotation instanceof ConnectorFixedUserHandle) {\n    cnst = 0;\n  } else {\n    cnst = annotation.content === undefined ? 10 : 0;\n  }\n\n  var state = 0;\n\n  switch (annotation.alignment) {\n    case 'Center':\n      state = 0;\n      break;\n\n    case 'Before':\n      state = -(0 / 2 + cnst);\n      break;\n\n    case 'After':\n      state = 0 / 2 + cnst;\n      break;\n  }\n\n  return state;\n}\n/**\n * alignLabelOnSegments method \\\n *\n * @returns {Alignment } alignLabelOnSegments method .\\\n * @param {PathAnnotation | ConnectorFixedUserHandle} obj - provide the obj  value.\n * @param { number } ang - provide the ang  value.\n * @param { PointModel[] } pts - provide the pts  value.\n * @private\n */\n\nexport function alignLabelOnSegments(obj, ang, pts) {\n  //let angle: number = ang % 360;\n  ang %= 360;\n  var fourty5 = 45;\n  var one35 = 135;\n  var two25 = 225;\n  var three15 = 315;\n  var vAlign;\n  var hAlign;\n\n  switch (obj.alignment) {\n    case 'Before':\n      if (ang >= fourty5 && ang <= one35) {\n        hAlign = 'right';\n        vAlign = obj.offset === 0.5 ? 'center' : 'top';\n      } else if (ang >= two25 && ang <= three15) {\n        hAlign = 'left';\n        vAlign = obj.offset === 0.5 ? 'center' : 'bottom';\n      } else if (ang > fourty5 && ang < two25) {\n        vAlign = 'top';\n        hAlign = obj.offset === 0.5 ? 'center' : 'right';\n      } else {\n        vAlign = 'bottom';\n        hAlign = obj.offset === 0.5 ? 'center' : 'left';\n      }\n\n      break;\n\n    case 'After':\n      if (ang >= fourty5 && ang <= one35) {\n        hAlign = 'left';\n        vAlign = obj.offset === 0.5 ? 'center' : 'top';\n      } else if (ang >= two25 && ang <= three15) {\n        hAlign = 'right';\n        vAlign = obj.offset === 0.5 ? 'center' : 'bottom';\n      } else if (ang > fourty5 && ang < two25) {\n        vAlign = 'bottom';\n        hAlign = obj.offset === 0.5 ? 'center' : 'right';\n      } else {\n        vAlign = 'top';\n        hAlign = obj.offset === 0.5 ? 'center' : 'left';\n      }\n\n      break;\n\n    case 'Center':\n      hAlign = 'center';\n      vAlign = !isNullOrUndefined(obj.verticalAlignment) ? obj.verticalAlignment.toLowerCase() : \"center\";\n      break;\n  }\n\n  if (obj.offset === 0 || obj.offset === 1) {\n    //let direction: string;\n    var direction = getBezierDirection(pts[0], pts[1]);\n\n    switch (direction) {\n      case 'left':\n        hAlign = obj.offset === 0 ? 'right' : 'left';\n        break;\n\n      case 'right':\n        hAlign = obj.offset === 0 ? 'left' : 'right';\n        break;\n\n      case 'bottom':\n        vAlign = obj.offset === 0 ? 'top' : 'bottom';\n        break;\n\n      case 'top':\n        vAlign = obj.offset === 0 ? 'bottom' : 'top';\n        break;\n    }\n  }\n\n  return {\n    hAlign: hAlign,\n    vAlign: vAlign\n  };\n}\n/**\n * getBezierDirection method \\\n *\n * @returns {string } getBezierDirection method .\\\n * @param {PointModel} src - provide the src  value.\n * @param { PointModel } tar - provide the tar  value.\n * @private\n */\n\nexport function getBezierDirection(src, tar) {\n  if (Math.abs(tar.x - src.x) > Math.abs(tar.y - src.y)) {\n    return src.x < tar.x ? 'right' : 'left';\n  } else {\n    return src.y < tar.y ? 'bottom' : 'top';\n  }\n}\n/**\n * removeChildNodes method \\\n *\n * @returns {void } removeChildNodes method .\\\n * @param {NodeModel} node - provide the node  value.\n * @param { Diagram } diagram - provide the diagram  value.\n * @private\n */\n\nexport function removeChildNodes(node, diagram) {\n  if (node instanceof Node && node.children) {\n    for (var i = 0; i < node.children.length; i++) {\n      if (diagram.nameTable[node.children[i]].children) {\n        removeChildNodes(node, diagram);\n      }\n\n      diagram.removeFromAQuad(diagram.nameTable[node.children[i]]);\n      diagram.removeObjectsFromLayer(diagram.nameTable[node.children[i]]);\n      delete diagram.nameTable[node.children[i]];\n    }\n  }\n}\n/**\n * getChild method \\\n *\n * @returns {string[] } getChild method .\\\n * @param {Canvas} child - provide the child  value.\n * @param { string[] } children - provide the children  value.\n * @private\n */\n\nfunction getChild(child, children) {\n  if (child && child.children && child.children.length > 0) {\n    for (var j = 0; j < child.children.length; j++) {\n      var subChild = child.children[j];\n\n      if (subChild instanceof Canvas) {\n        getChild(subChild, children);\n      }\n    }\n  }\n\n  if (children.indexOf(child.id) === -1) {\n    children.push(child.id);\n  }\n\n  return children;\n}\n/**\n * getSwimLaneChildren method \\\n *\n * @returns {string[] } getSwimLaneChildren method .\\\n * @param {NodeModel[]} nodes - provide the nodes  value.\n * @private\n */\n\n\nfunction getSwimLaneChildren(nodes) {\n  var children = [];\n  var node;\n  var grid;\n  var childTable;\n  var child;\n  var gridChild = 'childTable';\n\n  for (var i = 0; i < nodes.length; i++) {\n    node = nodes[i];\n\n    if (node.shape.type === 'SwimLane') {\n      grid = node.wrapper.children[0];\n      childTable = grid[gridChild];\n\n      for (var _i = 0, _a = Object.keys(childTable); _i < _a.length; _i++) {\n        var key = _a[_i];\n        child = childTable[key];\n        children = getChild(child, children);\n      }\n    }\n  }\n\n  return children;\n}\n/**\n * removeUnnecessaryNodes method \\\n *\n * @returns {void } removeUnnecessaryNodes method .\\\n * @param {string[]} children - provide the children  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\n\n\nfunction removeUnnecessaryNodes(children, diagram) {\n  var nodes = diagram.nodes;\n\n  if (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      if (children.indexOf(nodes[i].id) !== -1) {\n        nodes.splice(i, 1);\n        i--;\n      }\n    }\n  }\n}\n/**\n * serialize method \\\n *\n * @returns {string } serialize method .\\\n * @param {Diagram} model - provide the model  value.\n * @private\n */\n\n\nexport function serialize(model) {\n  var removeNodes = getSwimLaneChildren(model.nodes);\n  var clonedObject = cloneObject(model, model.getCustomProperty);\n  clonedObject.selectedItems.nodes = [];\n  clonedObject.selectedItems.connectors = [];\n  clonedObject.selectedItems.wrapper = null;\n\n  if (model.serializationSettings.preventDefaults) {\n    clonedObject = preventDefaults(clonedObject, model);\n  }\n\n  removeUnnecessaryNodes(removeNodes, clonedObject);\n  return JSON.stringify(clonedObject);\n}\n/**\n * preventDefaults method \\\n *\n * @returns {string } preventDefaults method .\\\n * @param {Object} clonedObject - provide the clonedObject  value.\n * @param {object} model - provide the model  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @param {boolean} isNodeShape - provide the isNodeShape  value.\n * @private\n */\n// eslint-disable-next-line\n\nfunction preventDefaults(clonedObject, model, defaultObject, isNodeShape) {\n  defaultObject = getConstructor(model, defaultObject);\n  var properties = [];\n  properties = properties.concat(Object.keys(clonedObject));\n\n  for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n    var property = properties_1[_i];\n\n    if (model instanceof Node) {\n      isNodeShape = property === 'shape' ? true : false;\n    }\n\n    if (clonedObject[property] instanceof Array) {\n      preventArrayDefaults(clonedObject, defaultObject, model, property);\n    } else if (clonedObject[property] instanceof Object && defaultObject && defaultObject[property]) {\n      if (property !== 'wrapper') {\n        clonedObject[property] = preventDefaults(clonedObject[property], model[property], defaultObject[property], isNodeShape);\n      }\n    } else if (defaultObject && clonedObject[property] === defaultObject[property] || clonedObject[property] === undefined) {\n      if (!(isNodeShape && property === 'type') && !(model instanceof SwimLane && property === 'orientation')) {\n        delete clonedObject[property];\n      }\n    }\n\n    if (JSON.stringify(clonedObject[property]) === '[]' || JSON.stringify(clonedObject[property]) === '{}' || clonedObject[property] === undefined) {\n      delete clonedObject[property];\n    }\n  }\n\n  return clonedObject;\n}\n/**\n * preventArrayDefaults method \\\n *\n * @returns {void } preventArrayDefaults method .\\\n * @param {object} clonedObject - provide the clonedObject  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @param {object} model - provide the model  value.\n * @param {string} property - provide the property  value.\n * @private\n */\n// eslint-disable-next-line\n\n\nfunction preventArrayDefaults(clonedObject, defaultObject, model, property) {\n  if (clonedObject[property].length === 0) {\n    delete clonedObject[property]; // eslint-disable-next-line\n  } else if (clonedObject[property].every(function (element) {\n    return typeof element === 'number';\n  })) {\n    var i = void 0;\n    var isSameArray = true;\n\n    for (i = 0; i < clonedObject[property].length; i++) {\n      if (isSameArray && clonedObject[property][i] === defaultObject[property][i]) {\n        isSameArray = true;\n      } else {\n        isSameArray = false;\n      }\n    }\n\n    if (isSameArray) {\n      delete clonedObject[property];\n    }\n  } else {\n    var i = void 0;\n\n    if (property === 'layers') {\n      clonedObject[property].splice(0, 1);\n\n      if (clonedObject[property].length === 0) {\n        delete clonedObject[property];\n      }\n    }\n\n    if (clonedObject[property]) {\n      for (i = clonedObject[property].length - 1; i >= 0; i--) {\n        if (property === 'nodes' || property === 'connectors') {\n          clonedObject[property][i].wrapper = null;\n        }\n\n        if (property !== 'dataManager') {\n          clonedObject[property][i] = preventDefaults(clonedObject[property][i], model[property][i], defaultObject[property] !== undefined ? defaultObject[property][i] : []);\n\n          if (JSON.stringify(clonedObject[property][i]) === '[]' || JSON.stringify(clonedObject[property][i]) === '{}' || clonedObject[property][i] === undefined) {\n            clonedObject[property].splice(i, 1);\n          }\n        }\n      }\n    }\n  }\n}\n/* eslint-disable */\n\n/**\n * getConstructor method \\\n *\n * @returns {object } getConstructor method .\\\n * @param {object} model - provide the model  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @private\n */\n\n/* tslint:disable */\n\n\nfunction getConstructor(model, defaultObject) {\n  var obj = [];\n  var constructor;\n  var parent = new Diagram();\n  var getClassName = 'getClassName';\n\n  if (model[getClassName]) {\n    switch (model[getClassName]()) {\n      case 'Diagram':\n        constructor = new Diagram();\n        break;\n\n      case 'Node':\n        constructor = new Node(parent, '', obj);\n        break;\n\n      case 'Path':\n        constructor = new Path(parent, '', obj);\n        break;\n\n      case 'Native':\n        constructor = new Native(parent, '', obj);\n        break;\n\n      case 'Html':\n        constructor = new Html(parent, '', obj);\n        break;\n\n      case 'Image':\n        constructor = new Image(parent, '', obj);\n        break;\n\n      case 'Text':\n        constructor = new Text(parent, '', obj);\n        break;\n\n      case 'BasicShape':\n        constructor = new BasicShape(parent, '', obj);\n        break;\n\n      case 'FlowShape':\n        constructor = new FlowShape(parent, '', obj);\n        break;\n\n      case 'BpmnShape':\n        constructor = new BpmnShape(parent, '', obj);\n        break;\n\n      case 'UmlActivityShape':\n        constructor = new UmlActivityShape(parent, '', obj);\n        break;\n\n      case 'UmlClassifierShape':\n        constructor = new UmlClassifierShape(parent, '', obj);\n        break;\n\n      case 'SwimLane':\n        constructor = new SwimLane(parent, '', obj);\n\n        if (model.header) {\n          constructor.header = new Header(parent, '', obj);\n          constructor.header.style.fill = '';\n        }\n\n        break;\n\n      case 'ShapeAnnotation':\n        constructor = new ShapeAnnotation(parent, '', obj);\n        break;\n\n      case 'PointPort':\n        constructor = new PointPort(parent, '', obj);\n        break;\n\n      case 'BpmnGateway':\n        constructor = new BpmnGateway(parent, '', obj);\n        break;\n\n      case 'BpmnDataObject':\n        constructor = new BpmnDataObject(parent, '', obj);\n        break;\n\n      case 'BpmnEvent':\n        constructor = new BpmnEvent(parent, '', obj);\n        break;\n\n      case 'BpmnSubEvent':\n        constructor = new BpmnSubEvent(parent, '', obj);\n        break;\n\n      case 'BpmnActivity':\n        constructor = new BpmnActivity(parent, '', obj);\n        break;\n\n      case 'BpmnAnnotation':\n        constructor = new BpmnAnnotation(parent, '', obj);\n        break;\n\n      case 'MethodArguments':\n        constructor = new MethodArguments(parent, '', obj);\n        break;\n\n      case 'UmlClassAttribute':\n        constructor = new UmlClassAttribute(parent, '', obj);\n        break;\n\n      case 'UmlClassMethod':\n        constructor = new UmlClassMethod(parent, '', obj);\n        break;\n\n      case 'UmlClass':\n        constructor = new UmlClass(parent, '', obj);\n        break;\n\n      case 'UmlInterface':\n        constructor = new UmlInterface(parent, '', obj);\n        break;\n\n      case 'UmlEnumerationMember':\n        constructor = new UmlEnumerationMember(parent, '', obj);\n        break;\n\n      case 'UmlEnumeration':\n        constructor = new UmlEnumeration(parent, '', obj);\n        break;\n\n      case 'Lane':\n        constructor = new Lane(parent, '', obj);\n        break;\n\n      case 'Phase':\n        constructor = new Phase(parent, '', obj);\n        break;\n\n      case 'ChildContainer':\n        constructor = new ChildContainer();\n        break;\n\n      case 'Connector':\n        constructor = new Connector(parent, '', obj);\n        break;\n\n      case 'StraightSegment':\n        constructor = new StraightSegment(parent, '', obj);\n        break;\n\n      case 'BezierSegment':\n        constructor = new BezierSegment(parent, '', obj);\n        break;\n\n      case 'OrthogonalSegment':\n        constructor = new OrthogonalSegment(parent, '', obj);\n        break;\n\n      case 'PathAnnotation':\n        constructor = new PathAnnotation(parent, '', obj);\n        break;\n\n      case 'Stop':\n        constructor = new Stop(parent, '', obj);\n        break;\n\n      case 'Point':\n        if (!defaultObject) {\n          constructor = new Point(parent, '', obj);\n        } else {\n          constructor = defaultObject;\n        }\n\n        break;\n\n      case 'UserHandle':\n        constructor = new UserHandle(parent, '', obj);\n        break;\n\n      case 'Command':\n        constructor = new Command(parent, '', obj);\n        break;\n    }\n  } else {\n    constructor = defaultObject;\n  }\n\n  return constructor;\n}\n/* eslint-enable */\n\n/* eslint-disable */\n\n/** @private */\n\n\nexport function deserialize(model, diagram) {\n  diagram.enableServerDataBinding(false);\n  var blazorAction = diagram.blazorActions;\n  diagram.blazorActions = diagram.addConstraints(blazorAction, BlazorAction.ClearObject);\n  diagram.clear();\n  diagram.blazorActions = diagram.removeConstraints(blazorAction, BlazorAction.ClearObject);\n  diagram.protectPropertyChange(true);\n  var map = diagram.dataSourceSettings.doBinding;\n  var nodeTemp = diagram.setNodeTemplate;\n  var getDescription = diagram.getDescription;\n  var getCustomProperty = diagram.getCustomProperty;\n  var commands = {};\n\n  for (var _i = 0, _a = diagram.commandManager.commands; _i < _a.length; _i++) {\n    var command = _a[_i];\n    commands[command.name] = {\n      execute: command.execute,\n      canExecute: command.canExecute\n    };\n  }\n\n  var arrangeTickHorizontal = diagram.rulerSettings.horizontalRuler.arrangeTick;\n  var arrangeTickVertical = diagram.rulerSettings.verticalRuler.arrangeTick;\n  var getLayoutInfo = diagram.layout.getLayoutInfo;\n  var getBranch = diagram.layout.getBranch;\n  var nodeDefaults = diagram.getNodeDefaults;\n  var connectorDefaults = diagram.getConnectorDefaults;\n  var dataObj = JSON.parse(model);\n  dataObj = upgrade(dataObj);\n  diagram.contextMenuSettings = dataObj.contextMenuSettings || {};\n  diagram.constraints = dataObj.constraints || DiagramConstraints.Default;\n  diagram.tool = dataObj.tool || DiagramTools.Default;\n  diagram.bridgeDirection = dataObj.bridgeDirection || 'Top';\n  diagram.pageSettings = dataObj.pageSettings || {};\n  diagram.drawingObject = dataObj.drawingObject || undefined;\n  diagram.tooltip = dataObj.tooltip || {};\n  diagram.addInfo = dataObj.addInfo || undefined;\n  diagram.getDescription = getDescription;\n  diagram.scrollSettings = dataObj.scrollSettings || {};\n  diagram.commandManager = dataObj.commandManager || {};\n  diagram.layers = dataObj.layers || [];\n  diagram.rulerSettings.horizontalRuler.arrangeTick = arrangeTickHorizontal;\n  diagram.rulerSettings.verticalRuler.arrangeTick = arrangeTickVertical;\n\n  for (var _b = 0, _c = diagram.commandManager.commands; _b < _c.length; _b++) {\n    var cmd = _c[_b];\n\n    if (commands[cmd.name]) {\n      cmd.execute = commands[cmd.name].execute;\n      cmd.canExecute = commands[cmd.name].canExecute;\n    }\n  }\n\n  diagram.backgroundColor = dataObj.backgroundColor || 'transparent';\n  diagram.basicElements = dataObj.basicElements || [];\n  diagram.connectors = dataObj.connectors || [];\n  diagram.dataSourceSettings = dataObj.dataSourceSettings || {};\n  diagram.dataSourceSettings.doBinding = map;\n  diagram.height = dataObj.height || '100%';\n  diagram.setNodeTemplate = nodeTemp;\n  diagram.getConnectorDefaults = connectorDefaults;\n  diagram.getNodeDefaults = nodeDefaults;\n  diagram.getCustomProperty = getCustomProperty;\n  diagram.mode = dataObj.mode || 'SVG';\n\n  if (dataObj.nodes) {\n    for (var i = 0; i < dataObj.nodes.length; i++) {\n      if (dataObj.nodes[i].shape && dataObj.nodes[i].shape.type === 'SwimLane') {\n        if (dataObj.nodes[i].wrapper == null) {\n          {\n            dataObj.nodes[i].wrapper = {\n              actualSize: {\n                width: dataObj.nodes[i].width,\n                height: dataObj.nodes[i].height\n              },\n              offsetX: dataObj.nodes[i].offsetX,\n              offsetY: dataObj.nodes[i].offsetY\n            };\n          }\n        }\n\n        pasteSwimLane(dataObj.nodes[i], undefined, undefined, undefined, undefined, true);\n      }\n    }\n  }\n\n  diagram.nodes = dataObj.nodes || [];\n  diagram.rulerSettings = dataObj.rulerSettings || {};\n  diagram.snapSettings = dataObj.snapSettings || {};\n  diagram.width = dataObj.width || '100%';\n  diagram.layout = dataObj.layout || {};\n\n  if (dataObj.layout.type !== \"None\") {\n    diagram.canLayout = false;\n  }\n\n  diagram.layout.getLayoutInfo = getFunction(getLayoutInfo);\n  diagram.layout.getBranch = getFunction(getBranch);\n  diagram.diagramActions = 0;\n  diagram.isLoading = true;\n  diagram.protectPropertyChange(false);\n  var key = 'refresh';\n  var component;\n\n  for (var i = 0; i < diagram.views.length; i++) {\n    component = diagram.views[diagram.views[i]];\n    diagram.blazorActions = diagram.addConstraints(blazorAction, BlazorAction.ClearObject);\n    component.refresh();\n    diagram.blazorActions = diagram.removeConstraints(blazorAction, BlazorAction.ClearObject);\n\n    if (component instanceof Diagram) {\n      diagram.element.classList.add('e-diagram');\n    }\n  }\n\n  if (dataObj.selectedItems) {\n    dataObj.selectedItems.nodes = [];\n    dataObj.selectedItems.connectors = [];\n  }\n\n  diagram.selectedItems = dataObj.selectedItems;\n  diagram.enableServerDataBinding(true);\n  diagram.canLayout = true;\n  return dataObj;\n}\n/* eslint-enable */\n\n/**\n * upgrade method \\\n *\n * @returns {Diagram } upgrade method .\\\n * @param {Diagram} dataObj - provide the model  value.\n * @private\n */\n\nexport function upgrade(dataObj) {\n  if (dataObj && (dataObj.version === undefined || dataObj.version < 17.1) && dataObj.nodes) {\n    var nodes = dataObj.nodes;\n\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n\n      if (node && node.ports && node.ports.length > 0) {\n        for (var _a = 0, _b = node.ports; _a < _b.length; _a++) {\n          var port = _b[_a];\n\n          if (port && port.constraints && port.constraints === PortConstraints.None) {\n            port.constraints = PortConstraints.Default;\n          }\n        }\n      }\n    }\n  }\n\n  return dataObj;\n}\n/**\n * updateStyle method \\\n *\n * @returns {void } updateStyle method .\\\n * @param {TextStyleModel} changedObject - provide the changedObject  value.\n * @param {DiagramElement} target - provide the target  value.\n * @private\n */\n\nexport function updateStyle(changedObject, target) {\n  //since text style model is the super set of shape style model, we used text style model\n  var style = target.style;\n  var textElement = target;\n  target.canApplyStyle = true;\n\n  for (var _i = 0, _a = Object.keys(changedObject); _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    switch (key) {\n      case 'fill':\n        style.fill = changedObject.fill;\n\n        if (style instanceof StrokeStyle) {\n          /* tslint:disable:no-string-literal */\n          style['fill'] = 'transparent';\n        }\n\n        break;\n\n      case 'textOverflow':\n        style.textOverflow = changedObject.textOverflow;\n        break;\n\n      case 'opacity':\n        style.opacity = changedObject.opacity;\n        break;\n\n      case 'strokeColor':\n        style.strokeColor = changedObject.strokeColor;\n        break;\n\n      case 'strokeDashArray':\n        style.strokeDashArray = changedObject.strokeDashArray;\n        break;\n\n      case 'strokeWidth':\n        style.strokeWidth = changedObject.strokeWidth;\n        break;\n\n      case 'bold':\n        style.bold = changedObject.bold;\n        break;\n\n      case 'color':\n        style.color = changedObject.color;\n        break;\n\n      case 'textWrapping':\n        style.textWrapping = changedObject.textWrapping;\n        break;\n\n      case 'fontFamily':\n        style.fontFamily = changedObject.fontFamily;\n        break;\n\n      case 'fontSize':\n        style.fontSize = changedObject.fontSize;\n        break;\n\n      case 'italic':\n        style.italic = changedObject.italic;\n        break;\n\n      case 'textAlign':\n        style.textAlign = changedObject.textAlign;\n        break;\n\n      case 'whiteSpace':\n        style.whiteSpace = changedObject.whiteSpace;\n        break;\n\n      case 'textDecoration':\n        style.textDecoration = changedObject.textDecoration;\n        break;\n\n      case 'gradient':\n        if (style.gradient) {\n          updateGradient(changedObject.gradient, style.gradient);\n          break;\n        }\n\n    }\n  }\n\n  if (target instanceof TextElement) {\n    textElement.refreshTextElement();\n  }\n}\n/**\n * updateGradient method \\\n *\n * @returns {void } updateGradient method .\\\n * @param {GradientModel | LinearGradientModel | RadialGradientModel} changedGradient - provide the changedGradient  value.\n * @param {GradientModel | LinearGradientModel | RadialGradientModel} targetGradient - provide the targetGradient  value.\n * @private\n */\n\nfunction updateGradient(changedGradient, targetGradient) {\n  for (var _i = 0, _a = Object.keys(changedGradient); _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    switch (key) {\n      case 'type':\n        targetGradient.type = changedGradient.type;\n        break;\n\n      case 'x1':\n        targetGradient.x1 = changedGradient.x1;\n        break;\n\n      case 'x2':\n        targetGradient.x2 = changedGradient.x2;\n        break;\n\n      case 'y1':\n        targetGradient.y1 = changedGradient.y1;\n        break;\n\n      case 'y2':\n        targetGradient.y2 = changedGradient.y2;\n        break;\n\n      case 'cx':\n        targetGradient.cx = changedGradient.cx;\n        break;\n\n      case 'cy':\n        targetGradient.cy = changedGradient.cy;\n        break;\n\n      case 'fx':\n        targetGradient.fx = changedGradient.fx;\n        break;\n\n      case 'fy':\n        targetGradient.fy = changedGradient.fy;\n        break;\n\n      case 'r':\n        targetGradient.r = changedGradient.r;\n        break;\n\n      case 'stops':\n        targetGradient.stops = changedGradient.stops;\n        break;\n    }\n  }\n}\n/* eslint-disable */\n\n/**\n * updateHyperlink method \\\n *\n * @returns {void } updateHyperlink method .\\\n * @param {HyperlinkModel} changedObject - provide the changedObject  value.\n * @param {DiagramElement} target - provide the target  value.\n * @param {AnnotationModel} actualAnnotation - provide the actualAnnotation  value.\n * @private\n */\n\n\nexport function updateHyperlink(changedObject, target, actualAnnotation) {\n  var textElement = target;\n  var hyperlink = textElement.hyperlink;\n\n  for (var _i = 0, _a = Object.keys(changedObject); _i < _a.length; _i++) {\n    var key = _a[_i];\n\n    switch (key) {\n      case 'color':\n        textElement.style.color = hyperlink.color = changedObject.color;\n        break;\n\n      case 'content':\n        textElement.content = hyperlink.content = changedObject.content || hyperlink.link;\n        break;\n\n      case 'link':\n        var labelStyle = actualAnnotation.style;\n        textElement.style.color = changedObject.link ? hyperlink.color : labelStyle.color;\n        textElement.style.textDecoration = changedObject.link ? hyperlink.textDecoration : actualAnnotation.style.textDecoration;\n        textElement.content = changedObject.link ? hyperlink.content || changedObject.link : actualAnnotation.content;\n        hyperlink.link = changedObject.link;\n        break;\n\n      case 'textDecoration':\n        textElement.style.textDecoration = hyperlink.textDecoration = changedObject.textDecoration;\n        break;\n    }\n  }\n}\n/* eslint-enable */\n\n/**\n * updateShapeContent method \\\n *\n * @returns {void } updateShapeContent method .\\\n * @param {DiagramElement} content - provide the content  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function updateShapeContent(content, actualObject, diagram) {\n  content.width = actualObject.width;\n  content.height = actualObject.height;\n  content.minHeight = actualObject.minHeight;\n  content.maxHeight = actualObject.maxHeight;\n  content.minWidth = actualObject.minWidth;\n  content.maxWidth = actualObject.maxWidth;\n  content.horizontalAlignment = actualObject.wrapper.children[0].horizontalAlignment;\n  content.verticalAlignment = actualObject.wrapper.children[0].verticalAlignment;\n  content.relativeMode = actualObject.wrapper.children[0].relativeMode;\n  content.visible = actualObject.wrapper.children[0].visible;\n\n  if (actualObject.shape instanceof Text) {\n    content.margin = actualObject.shape.margin;\n  }\n\n  content.id = actualObject.wrapper.children[0].id;\n  content.style = actualObject.style; //let view: View;\n\n  for (var _i = 0, _a = diagram.views; _i < _a.length; _i++) {\n    var elementId = _a[_i];\n    removeElement(actualObject.id + '_groupElement', elementId);\n    removeElement(actualObject.id + '_content_groupElement', elementId);\n    removeElement(actualObject.id + '_html_element', elementId);\n  }\n\n  actualObject.wrapper.children.splice(0, 1);\n  actualObject.wrapper.children.splice(0, 0, content);\n}\n/* eslint-disable */\n\n/**\n * updateShape method \\\n *\n * @returns {void } updateShape method .\\\n * @param {Node} node - provide the node  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Node} oldObject - provide the oldObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\n\nexport function updateShape(node, actualObject, oldObject, diagram) {\n  var content = new DiagramElement();\n  var i; //let textStyle: TextStyleModel; let nodeStyle: TextStyleModel;\n\n  switch (node.shape.type) {\n    case 'Path':\n      var pathContent = new PathElement();\n      pathContent.data = actualObject.shape.data;\n      content = pathContent;\n      updateShapeContent(content, actualObject, diagram);\n      break;\n\n    case 'Image':\n      var imageContent = new ImageElement();\n      imageContent.source = actualObject.shape.source;\n      imageContent.imageAlign = actualObject.shape.align;\n      imageContent.imageScale = actualObject.shape.scale;\n      content = imageContent;\n      updateShapeContent(content, actualObject, diagram);\n      break;\n\n    case 'Text':\n      //issue\n      var textContent = new TextElement(); //  (textContent as TextElement).content = (node.shape as TextModel).content;\n\n      content = textContent;\n      updateShapeContent(content, actualObject, diagram);\n      break;\n\n    case 'Basic':\n      var element = (isBlazor() ? actualObject.shape.basicShape === 'Rectangle' : actualObject.shape.shape === 'Rectangle') ? new DiagramElement() : new PathElement();\n\n      if (!isBlazor() && actualObject.shape.shape === 'Polygon' || isBlazor() && actualObject.shape.basicShape === 'Polygon') {\n        element.data = getPolygonPath(actualObject.shape.points);\n      } else {\n        element.data = getBasicShape(isBlazor() ? actualObject.shape.basicShape : actualObject.shape.shape);\n      }\n\n      updateShapeContent(content, actualObject, diagram);\n\n      if (!isBlazor() && actualObject.shape.shape === 'Rectangle' || isBlazor() && actualObject.shape.basicShape === 'Rectangle') {\n        element.cornerRadius = actualObject.shape.cornerRadius;\n      }\n\n      content = element;\n      break;\n\n    case 'Flow':\n      /* eslint-disable */\n      var flowShapeElement = new PathElement();\n      var shape = isBlazor() ? actualObject.shape.flowShape : actualObject.shape.shape;\n      flowShapeElement.data = getFlowShape(shape);\n      content = flowShapeElement;\n      updateShapeContent(content, actualObject, diagram);\n      break;\n\n    case 'Native':\n      var nativeContent = new DiagramNativeElement(node.id, diagram.element.id);\n      nativeContent.content = actualObject.shape.content;\n      nativeContent.scale = actualObject.shape.scale;\n      content = nativeContent;\n      updateShapeContent(content, actualObject, diagram);\n      break;\n\n    case 'HTML':\n      var htmlContent = new DiagramHtmlElement(actualObject.id, diagram.element.id);\n      htmlContent.content = actualObject.shape.content;\n      content = htmlContent;\n      updateShapeContent(content, actualObject, diagram);\n  }\n\n  if (node.shape.type === undefined || node.shape.type === oldObject.shape.type || isBlazor() && node.shape.type === 'UmlActivity') {\n    updateContent(node, actualObject, diagram, oldObject);\n  } else {\n    content.width = actualObject.wrapper.children[0].width;\n    content.height = actualObject.wrapper.children[0].height;\n\n    if (actualObject.shape instanceof Text) {\n      content.margin = actualObject.shape.margin;\n    }\n\n    content.style = actualObject.style;\n    actualObject.wrapper.children[0] = content;\n  }\n}\n/* eslint-enable */\n\n/**\n * updateContent method \\\n *\n * @returns {void } updateContent method .\\\n * @param {Node} newValues - provide the newValues  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {Node} oldObject - provide the oldObject  value.\n * @private\n */\n\nexport function updateContent(newValues, actualObject, diagram, oldObject) {\n  if (Object.keys(newValues.shape).length > 0) {\n    if (actualObject.shape.type === 'Path' && newValues.shape.data !== undefined) {\n      actualObject.wrapper.children[0].data = newValues.shape.data;\n    } else if (actualObject.shape.type === 'Text' && newValues.shape.content !== undefined) {\n      actualObject.wrapper.children[0].content = newValues.shape.content;\n    } else if (actualObject.shape.type === 'Image' && newValues.shape.source !== undefined) {\n      actualObject.wrapper.children[0].source = newValues.shape.source;\n    } else if (actualObject.shape.type === 'Native') {\n      var nativeElement = void 0;\n\n      for (var i = 0; i < diagram.views.length; i++) {\n        nativeElement = getDiagramElement(actualObject.wrapper.children[0].id + '_native_element', diagram.views[i]);\n\n        if (newValues.shape.content !== undefined && nativeElement) {\n          nativeElement.removeChild(nativeElement.children[0]);\n          actualObject.wrapper.children[0].content = newValues.shape.content;\n          nativeElement.appendChild(getContent(actualObject.wrapper.children[0], false));\n        }\n      }\n\n      actualObject.wrapper.children[0].scale = newValues.shape.scale ? newValues.shape.scale : actualObject.wrapper.children[0].scale;\n    } else if (actualObject.shape.type === 'HTML') {\n      var htmlElement = void 0;\n\n      for (var i = 0; i < diagram.views.length; i++) {\n        htmlElement = getDiagramElement(actualObject.wrapper.children[0].id + '_html_element', diagram.views[i]);\n\n        if (htmlElement) {\n          htmlElement.removeChild(htmlElement.children[0]);\n          actualObject.wrapper.children[0].content = newValues.shape.content;\n          htmlElement.appendChild(getContent(actualObject.wrapper.children[0], true));\n        }\n      }\n    } else if (actualObject.shape.type === 'Flow' && (isBlazor() && newValues.shape.flowShape !== undefined || newValues.shape.shape !== undefined)) {\n      actualObject.shape.shape = isBlazor() ? newValues.shape.flowShape : newValues.shape.shape;\n      var shapes = actualObject.shape.shape;\n      var flowshapedata = getFlowShape(shapes.toString());\n      actualObject.wrapper.children[0].data = flowshapedata;\n    } else if (actualObject.shape.type === 'UmlActivity' && (isBlazor() && newValues.shape.umlActivityShape !== undefined || !isBlazor() && newValues.shape.shape !== undefined)) {\n      updateUmlActivityNode(actualObject, newValues);\n    } else if (newValues.shape.cornerRadius !== undefined) {\n      actualObject.wrapper.children[0].cornerRadius = newValues.shape.cornerRadius;\n    } else if (actualObject.shape.type === 'Basic' && oldObject && oldObject.shape.shape === 'Rectangle') {\n      var basicshape = new PathElement();\n      var basicshapedata = getBasicShape(isBlazor() ? actualObject.shape.basicShape : actualObject.shape.shape);\n      basicshape.data = basicshapedata;\n      var content = basicshape;\n      updateShapeContent(content, actualObject, diagram);\n    } else if (isBlazor() && newValues.shape.basicShape !== undefined || newValues.shape.shape !== undefined) {\n      actualObject.shape.shape = isBlazor() ? newValues.shape.basicShape : newValues.shape.shape;\n      var shapes = actualObject.shape.shape;\n      var basicShapeData = getBasicShape(shapes.toString());\n      actualObject.wrapper.children[0].data = basicShapeData;\n    }\n  }\n\n  actualObject.wrapper.children[0].canMeasurePath = true;\n}\n/**\n * updateUmlActivityNode method \\\n *\n * @returns {void } updateUmlActivityNode method .\\\n * @param {Node} actualObject - provide the newValues  value.\n * @param {Node} newValues - provide the actualObject  value.\n * @private\n */\n\nexport function updateUmlActivityNode(actualObject, newValues) {\n  if (!isBlazor()) {\n    actualObject.shape.shape = newValues.shape.shape;\n  } else {\n    actualObject.shape.umlActivityShape = newValues.shape.umlActivityShape;\n  }\n\n  var shapes = !isBlazor() ? actualObject.shape.shape : actualObject.shape.umlActivityShape;\n  var umlActivityShapeData = getUMLActivityShape(shapes.toString());\n\n  if (isBlazor() && actualObject.shape.umlActivityShape === 'InitialNode' || !isBlazor() && actualObject.shape.shape === 'InitialNode') {\n    actualObject.wrapper.children[0].style.fill = 'black';\n  } else if (!isBlazor() && (actualObject.shape.shape === 'ForkNode' || actualObject.shape.shape === 'JoinNode') || isBlazor() && (actualObject.shape.umlActivityShape === 'ForkNode' || actualObject.shape.umlActivityShape === 'JoinNode')) {\n    actualObject.wrapper.children[0].style.fill = 'black';\n  } else if (!isBlazor() && actualObject.shape.shape === 'FinalNode' || isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode') {\n    if (actualObject instanceof Node) {\n      actualObject.wrapper = getUMLFinalNode(actualObject);\n    }\n  }\n\n  if (umlActivityShapeData) {\n    actualObject.wrapper.children[0].data = umlActivityShapeData;\n  }\n}\n/**\n * getUMLFinalNode method \\\n *\n * @returns {Canvas } getUMLFinalNode method .\\\n * @param {Node} node - provide the newValues  value.\n * @private\n */\n\nexport function getUMLFinalNode(node) {\n  var finalNodeShape = new Canvas();\n  finalNodeShape.style.fill = 'transparent'; //childNode0\n\n  var pathData = 'M 25 50 C 11.21 50 0 38.79 0 25 C 0 11.21 11.21 0 25 0 C 38.78 0 50 11.21 50 25' + ' C 50 38.79 38.78 50 25 50';\n  var innerFinalNode = new PathElement();\n  innerFinalNode.data = pathData;\n  innerFinalNode.id = node.id + '_0_finalNode';\n  innerFinalNode.horizontalAlignment = 'Center';\n  innerFinalNode.verticalAlignment = 'Center';\n  innerFinalNode.relativeMode = 'Object';\n  innerFinalNode.style.strokeColor = node.style.strokeColor;\n  innerFinalNode.style.strokeWidth = node.style.strokeWidth; //childNode1\n\n  var outerFinalNode = new PathElement();\n  outerFinalNode.data = pathData;\n  outerFinalNode.id = node.id + '_1_finalNode';\n  outerFinalNode.horizontalAlignment = 'Center';\n  outerFinalNode.verticalAlignment = 'Center';\n  outerFinalNode.relativeMode = 'Object';\n  outerFinalNode.style.fill = node.style.fill;\n  outerFinalNode.style.strokeColor = node.style.strokeColor;\n  outerFinalNode.style.strokeWidth = node.style.strokeWidth; //append child and set style\n\n  finalNodeShape.children = [innerFinalNode, outerFinalNode];\n  finalNodeShape.children[0].width = node.width;\n  finalNodeShape.children[0].height = node.height;\n  finalNodeShape.children[1].height = node.height / 1.5;\n  finalNodeShape.children[1].width = node.width / 1.5;\n  finalNodeShape.style.strokeWidth = 0;\n  finalNodeShape.style.strokeColor = 'transparent';\n  return finalNodeShape;\n}\n/**\n * getUMLActivityShapes method \\\n *\n * @returns {DiagramElement } getUMLActivityShapes method .\\\n * @param {PathElement} umlActivityShape - provide the umlActivityShape  value.\n * @param {DiagramElement} content - provide the content  value.\n * @param {Node} node - provide the node  value.\n * @private\n */\n\nexport function getUMLActivityShapes(umlActivityShape, content, node) {\n  var shape = isBlazor() ? node.shape.umlActivityShape : node.shape.shape;\n  var umlActivityShapeData = getUMLActivityShape(shape);\n  umlActivityShape.data = umlActivityShapeData;\n  content = umlActivityShape;\n\n  switch (shape) {\n    case 'StructuredNode':\n      if (node.annotations) {\n        for (var i = 0; i < node.annotations.length; i++) {\n          node.annotations[i].content = '<<' + node.annotations[i].content + '>>';\n        }\n      }\n\n      content = umlActivityShape;\n      break;\n\n    case 'FinalNode':\n      content = getUMLFinalNode(node);\n      break;\n  }\n\n  return content;\n}\n/**\n * removeGradient method \\\n *\n * @returns {void } removeGradient method .\\\n * @param {string} svgId - provide the umlActivityShape  value.\n * @private\n */\n\nexport function removeGradient(svgId) {\n  removeElement(svgId + '_linear');\n  removeElement(svgId + '_radial');\n}\n/**\n * removeItem method \\\n *\n * @returns {void } removeItem method .\\\n * @param {string[]} array - provide the umlActivityShape  value.\n * @param {string} item - provide the umlActivityShape  value.\n * @private\n */\n\nexport function removeItem(array, item) {\n  var index = array.indexOf(item);\n\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n}\n/**\n * updateConnector method \\\n *\n * @returns {void } updateConnector method .\\\n * @param {Connector} connector - provide the connector  value.\n * @param {PointModel[]} points - provide the points  value.\n * @param {DiagramAction} diagramActions - provide the diagramActions  value.\n * @private\n */\n\nexport function updateConnector(connector, points, diagramActions) {\n  var anglePoint; //let srcDecorator: DecoratorModel;\n  //let targetPoint: PointModel;\n\n  connector.intermediatePoints = points;\n  connector.updateSegmentElement(connector, points, connector.wrapper.children[0], diagramActions);\n  var srcDecorator = connector.sourceDecorator;\n\n  if (connector.type === 'Bezier') {\n    var firstSegment = connector.segments[0];\n    var lastSegment = connector.segments[connector.segments.length - 1];\n    anglePoint = [!Point.isEmptyPoint(lastSegment.point2) ? lastSegment.point2 : lastSegment.bezierPoint2, !Point.isEmptyPoint(firstSegment.point1) ? firstSegment.point1 : firstSegment.bezierPoint1];\n  } else {\n    anglePoint = connector.intermediatePoints;\n  }\n\n  points = connector.clipDecorators(connector, points, diagramActions);\n  var element = connector.wrapper.children[0];\n  element.canMeasurePath = true;\n  element = connector.wrapper.children[1];\n  connector.updateDecoratorElement(element, points[0], anglePoint[1], srcDecorator); //const targetPoint: PointModel = connector.targetPoint;\n\n  var tarDecorator = connector.targetDecorator;\n  element = connector.wrapper.children[2];\n  connector.updateDecoratorElement(element, points[points.length - 1], anglePoint[anglePoint.length - 2], tarDecorator);\n  connector.updateShapeElement(connector);\n}\n/**\n * getUserHandlePosition method \\\n *\n * @returns {PointModel } getUserHandlePosition method .\\\n * @param {SelectorModel} selectorItem - provide the connector  value.\n * @param {UserHandleModel} handle - provide the handle  value.\n * @param {Transforms} transform - provide the transform  value.\n * @private\n */\n\nexport function getUserHandlePosition(selectorItem, handle, transform) {\n  var wrapper = selectorItem.wrapper; //let positionPoints: PointModel;\n\n  var bounds = wrapper.bounds;\n  var offset = handle.offset;\n  var size = handle.size / transform.scale;\n  var margin = handle.margin;\n  var point;\n  var left = wrapper.offsetX - wrapper.actualSize.width * wrapper.pivot.x;\n  var top = wrapper.offsetY - wrapper.actualSize.height * wrapper.pivot.y;\n  point = {\n    x: 0,\n    y: 0\n  };\n\n  if (selectorItem.nodes.length > 0) {\n    switch (handle.side) {\n      case 'Top':\n        point.x += left + bounds.width * offset;\n        point.y += top - (size / 2 + 12.5);\n        break;\n\n      case 'Bottom':\n        point.x += left + offset * bounds.width;\n        point.y += top + wrapper.actualSize.height + (size / 2 + 12.5);\n        break;\n\n      case 'Left':\n        point.x += left - (size / 2 + 12.5);\n        point.y += top + offset * bounds.height;\n        break;\n\n      case 'Right':\n        point.x += left + wrapper.actualSize.width + (size / 2 + 12.5);\n        point.y += top + offset * bounds.height;\n        break;\n    }\n\n    point.x += (margin.left - margin.right) / transform.scale + size / 2 * (handle.horizontalAlignment === 'Center' ? 0 : handle.horizontalAlignment === 'Right' ? -1 : 1);\n    point.y += (margin.top - margin.bottom) / transform.scale + size / 2 * (handle.verticalAlignment === 'Center' ? 0 : handle.verticalAlignment === 'Top' ? -1 : 1);\n  } else if (selectorItem.connectors.length > 0) {\n    var connector = selectorItem.connectors[0];\n    var annotation = {\n      offset: offset\n    };\n    var connectorOffset = getOffsetOfConnector(connector.intermediatePoints, annotation);\n    var index = connectorOffset.index;\n    point = connectorOffset.point;\n    var getPointloop = getAnnotationPosition(connector.intermediatePoints, annotation, bounds); //const points: PointModel[] = connector.intermediatePoints;\n    //const offsetLength: number;\n\n    var angle = getPointloop.angle;\n    var matrix = identityMatrix();\n    rotateMatrix(matrix, -angle, connector.intermediatePoints[index].x, connector.intermediatePoints[index].y);\n    point = transformPointByMatrix(matrix, point);\n    point.x += margin.left - margin.right + size / 2 * (handle.horizontalAlignment === 'Center' ? 0 : handle.horizontalAlignment === 'Right' ? -1 : 1);\n    point.y += margin.top - margin.bottom + size / 2 * (handle.verticalAlignment === 'Center' ? 0 : handle.verticalAlignment === 'Top' ? -1 : 1);\n    matrix = identityMatrix();\n    rotateMatrix(matrix, angle, connector.intermediatePoints[index].x, connector.intermediatePoints[index].y);\n    point = transformPointByMatrix(matrix, point);\n  }\n\n  if (wrapper.rotateAngle !== 0 || wrapper.parentTransform !== 0) {\n    var matrix = identityMatrix();\n    rotateMatrix(matrix, wrapper.rotateAngle + wrapper.parentTransform, wrapper.offsetX, wrapper.offsetY);\n    point = transformPointByMatrix(matrix, point);\n  }\n\n  return point;\n}\n/**\n * canResizeCorner method \\\n *\n * @returns {SelectorConstraints } canResizeCorner method .\\\n * @param {string} selectorConstraints - provide the selectorConstraints  value.\n * @param {string} action - provide the selectorConstraints  value.\n * @param {ThumbsConstraints} thumbsConstraints - provide the thumbsConstraints  value.\n * @param {Selector} selectedItems - provide the selectedItems  value.\n * @private\n */\n\nexport function canResizeCorner(selectorConstraints, action, thumbsConstraints, selectedItems) {\n  if (selectedItems.annotation) {\n    if (canResize(selectedItems.annotation)) {\n      return true;\n    }\n  } else if (SelectorConstraints[action] & selectorConstraints && ThumbsConstraints[action] & thumbsConstraints) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * canShowCorner method \\\n *\n * @returns {boolean } canShowCorner method .\\\n * @param {SelectorConstraints} selectorConstraints - provide the selectorConstraints  value.\n * @param {string} action - provide the thumbsConstraints  value.\n * @private\n */\n\nexport function canShowCorner(selectorConstraints, action) {\n  if (SelectorConstraints[action] & selectorConstraints) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * checkPortRestriction method \\\n *\n * @returns {number } checkPortRestriction method .\\\n * @param {PointPortModel} port - provide the port  value.\n * @param {PortVisibility} portVisibility - provide the portVisibility  value.\n * @private\n */\n\nexport function checkPortRestriction(port, portVisibility) {\n  return port.visibility & portVisibility;\n}\n/**\n * findAnnotation method \\\n *\n * @returns {ShapeAnnotationModel | PathAnnotationModel | TextModel } findAnnotation method .\\\n * @param { NodeModel | ConnectorModel} node - provide the port  value.\n * @param {string} id - provide the portVisibility  value.\n * @private\n */\n\nexport function findAnnotation(node, id) {\n  var annotation;\n\n  if (node.shape.type === 'Text') {\n    annotation = node.shape;\n  } else {\n    var annotationId = id.split('_');\n    id = annotationId[annotationId.length - 1];\n\n    for (var i = 0; i < node.annotations.length; i++) {\n      if (id === node.annotations[i].id) {\n        annotation = node.annotations[i];\n      }\n    }\n  }\n\n  return annotation;\n}\n/**\n * findPort method \\\n *\n * @returns {PointPortModel} findPort method .\\\n * @param { NodeModel | ConnectorModel} node - provide the port  value.\n * @param {string} id - provide the portVisibility  value.\n * @private\n */\n\nexport function findPort(node, id) {\n  var port;\n  var portId = id.split('_');\n  id = portId[portId.length - 1];\n\n  if (node) {\n    node = node;\n\n    for (var i = 0; i < node.ports.length; i++) {\n      if (id === node.ports[i].id) {\n        return node.ports[i];\n      }\n    }\n  }\n\n  return port;\n}\n/**\n * getInOutConnectPorts method \\\n *\n * @returns {PointPortModel} getInOutConnectPorts method .\\\n * @param { NodeModel} node - provide the port  value.\n * @param {boolean} isInConnect - provide the portVisibility  value.\n * @private\n */\n\nexport function getInOutConnectPorts(node, isInConnect) {\n  var port = {};\n  var i = 0;\n\n  if (node.ports) {\n    var ports = node.ports;\n\n    for (i = 0; i < ports.length; i++) {\n      if (isInConnect) {\n        if (ports[i].constraints & PortConstraints.InConnect) {\n          port = ports[i];\n        }\n      } else {\n        if (ports[i].constraints & PortConstraints.OutConnect) {\n          port = ports[i];\n        }\n      }\n    }\n  }\n\n  return port;\n}\n/**\n * findObjectIndex method \\\n *\n * @returns {PointPortModel} findObjectIndex method .\\\n * @param { NodeModel | ConnectorModel} node - provide the node  value.\n * @param {string} id - provide the string  value.\n * @param {boolean} annotation - provide the boolean  value.\n * @private\n */\n\nexport function findObjectIndex(node, id, annotation) {\n  //let index: number;\n  var collection = annotation ? node.annotations : node.ports;\n\n  for (var i = 0; i < collection.length; i++) {\n    if (collection[i].id === id) {\n      return i.toString();\n    }\n  }\n\n  return '-1';\n}\n/**\n * getObjectFromCollection method \\\n *\n * @returns {boolean} getObjectFromCollection method .\\\n * @param { (NodeModel | ConnectorModel)[] } obj - provide the node  value.\n * @param {string} id - provide the string  value.\n * @private\n */\n\nexport function getObjectFromCollection(obj, id) {\n  var i;\n\n  for (i = 0; i < obj.length; i++) {\n    if (id === obj[i].id) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * scaleElement method \\\n *\n * @returns {void} scaleElement method .\\\n * @param { DiagramElement } element - provide the element  value.\n * @param {number} sw - provide the string  value.\n * @param {number} sh - provide the string  value.\n * @param {DiagramElement} refObject - provide the refObject  value.\n * @private\n */\n\nexport function scaleElement(element, sw, sh, refObject) {\n  if (element.width !== undefined && element.height !== undefined) {\n    element.width *= sw;\n    element.height *= sh;\n  }\n\n  if (element instanceof Container) {\n    var matrix = identityMatrix();\n    var width = refObject.width || refObject.actualSize.width;\n    var height = refObject.height || refObject.actualSize.height;\n\n    if (width !== undefined && height !== undefined) {\n      var x = refObject.offsetX - width * refObject.pivot.x;\n      var y = refObject.offsetY - height * refObject.pivot.y;\n      var refPoint = {\n        x: x + width * refObject.pivot.x,\n        y: y + height * refObject.pivot.y\n      };\n      refPoint = rotatePoint(refObject.rotateAngle, refObject.offsetX, refObject.offsetY, refPoint);\n      rotateMatrix(matrix, -refObject.rotateAngle, refPoint.x, refPoint.y);\n      scaleMatrix(matrix, sw, sh, refPoint.x, refPoint.y);\n      rotateMatrix(matrix, refObject.rotateAngle, refPoint.x, refPoint.y);\n\n      for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (child.width !== undefined && child.height !== undefined) {\n          var newPosition = transformPointByMatrix(matrix, {\n            x: child.offsetX,\n            y: child.offsetY\n          });\n          child.offsetX = newPosition.x;\n          child.offsetY = newPosition.y;\n          scaleElement(child, sw, sh, refObject);\n        }\n      }\n    }\n  }\n}\n/**\n * scaleElement method \\\n *\n * @returns {void} scaleElement method .\\\n * @param { Node } obj - provide the obj  value.\n * @param {number} x - provide the x  value.\n * @param {number} y - provide the y  value.\n * @param {DiagramElement} nameTable - provide the refObject  value.\n * @param {DiagramElement} drop - provide the drop  value.\n * @param {DiagramElement} diagram - provide the diagram  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function arrangeChild(obj, x, y, nameTable, drop, diagram) {\n  var child = obj.children;\n  var node;\n\n  for (var i = 0; i < child.length; i++) {\n    node = nameTable[child[i]];\n\n    if (node) {\n      if (node.children) {\n        arrangeChild(node, x, y, nameTable, drop, diagram);\n      } else {\n        node.offsetX -= x;\n        node.offsetY -= y;\n\n        if (!drop) {\n          //let content: DiagramElement;\n          //let container: Container;\n          nameTable[node.id] = node;\n          var container = node.initContainer();\n\n          if (!container.children) {\n            container.children = [];\n          }\n\n          var content = node.init(diagram);\n          container.children.push(content);\n          container.measure(new Size(node.width, node.height));\n          container.arrange(container.desiredSize);\n        }\n      }\n    }\n  }\n}\n/**\n * insertObject method \\\n *\n * @returns {void} insertObject method .\\\n * @param { NodeModel | ConnectorModel } obj - provide the obj  value.\n * @param { string } key - provide the obj  value.\n * @param { Object[]} collection - provide the x  value.\n * @private\n */\n\nexport function insertObject(obj, key, collection) {\n  if (collection.length === 0) {\n    collection.push(obj);\n  } else if (collection.length === 1) {\n    if (collection[0][key] > obj[key]) {\n      collection.splice(0, 0, obj);\n    } else {\n      collection.push(obj);\n    }\n  } else if (collection.length > 1) {\n    var low = 0;\n    var high = collection.length - 1;\n    var mid = Math.floor((low + high) / 2);\n\n    while (mid !== low) {\n      if (collection[mid][key] < obj[key]) {\n        low = mid;\n        mid = Math.floor((low + high) / 2);\n      } else if (collection[mid][key] > obj[key]) {\n        high = mid;\n        mid = Math.floor((low + high) / 2);\n      } else {\n        break;\n      }\n    }\n\n    if (collection[high][key] < obj[key]) {\n      collection.push(obj);\n    } else if (collection[low][key] > obj[key]) {\n      collection.splice(low, 0, obj);\n    } else if (collection[low][key] < obj[key] && collection[high][key] > obj[key]) {\n      collection.splice(high, 0, obj);\n    }\n  }\n}\n/**\n * getElement method \\\n *\n * @returns {Object} getElement method .\\\n * @param { DiagramHtmlElement | DiagramNativeElement } element - provide the obj  value.\n * @private\n */\n\nexport function getElement(element) {\n  var diagramElement = document.getElementById(element.diagramId);\n  var instance = 'ej2_instances'; // eslint-disable-next-line\n\n  var node = {};\n  var nodes = diagramElement[instance][0].nodes;\n\n  if (nodes === undefined) {\n    nodes = getPaletteSymbols(diagramElement[instance][0]);\n  }\n\n  var length = 'length';\n\n  for (var i = 0; nodes && i < nodes[length]; i++) {\n    if (nodes[i].id === element.nodeId) {\n      return getAnnotation(nodes[i], element);\n    }\n  }\n\n  var connectors = diagramElement[instance][0].connectors;\n\n  for (var i = 0; connectors && i < connectors[length]; i++) {\n    if (connectors[i].id === element.nodeId) {\n      return getAnnotation(connectors[i], element);\n    }\n  } // eslint-disable-next-line\n\n\n  var enterObject = diagramElement[instance][0].enterObject;\n\n  if (enterObject && (enterObject['id'] === element.nodeId || enterObject['children'])) {\n    if (enterObject['children'] && groupHasType(enterObject, 'HTML', diagramElement[instance][0].enterTable)) {\n      return diagramElement[instance][0].enterTable[element.nodeId];\n    } else {\n      return enterObject;\n    }\n  }\n\n  return null;\n}\n/**\n * getAnnotation method \\\n *\n * @returns {Object} getAnnotation method .\\\n * @param { Object } obj - provide the obj  value.\n * @param {  DiagramHtmlElement | DiagramNativeElement } element - provide the obj  value.\n * @private\n */\n\nfunction getAnnotation(obj, element) {\n  var annotations = obj.annotations;\n  var length = 'length';\n  var j;\n\n  for (j = 0; annotations && j < annotations[length]; j++) {\n    if (element.annotationId && annotations[j].id === element.annotationId) {\n      return annotations[j];\n    }\n  }\n\n  return obj;\n}\n/**\n * getPaletteSymbols method \\\n *\n * @returns {NodeModel[]} getPaletteSymbols method .\\\n * @param { Object } symbolPalette - provide the symbolPalette  value.\n * @private\n */\n\n\nfunction getPaletteSymbols(symbolPalette) {\n  var nodes = [];\n\n  for (var i = 0; i < symbolPalette.palettes.length; i++) {\n    var symbols = symbolPalette.palettes[i].symbols;\n\n    for (var j = 0; j < symbols.length; j++) {\n      if (symbols[j] instanceof Node) {\n        nodes.push(symbols[j]);\n      }\n    }\n  }\n\n  return nodes;\n}\n/**\n * getCollectionChangeEventArguements method \\\n *\n * @returns {IBlazorCollectionChangeEventArgs} getCollectionChangeEventArguements method .\\\n * @param { IBlazorCollectionChangeEventArgs } args1 - provide the args1  value.\n * @param { NodeModel | ConnectorModel } obj - provide the obj  value.\n * @param { EventState } state - provide the state  value.\n * @param { ChangeType } type - provide the type  value.\n * @private\n */\n\n\nexport function getCollectionChangeEventArguements(args1, obj, state, type) {\n  if (isBlazor()) {\n    args1 = {\n      cause: args1.cause,\n      state: state,\n      type: type,\n      cancel: false,\n      element: getObjectType(obj) === Connector ? {\n        connector: cloneBlazorObject(obj)\n      } : {\n        node: cloneBlazorObject(obj)\n      }\n    };\n  }\n\n  return args1;\n}\n/**\n * getDropEventArguements method \\\n *\n * @returns {IBlazorDropEventArgs} getDropEventArguements method .\\\n * @param { MouseEventArgs } args - provide the args1  value.\n * @param { IBlazorDropEventArgs } arg - provide the obj  value.\n * @private\n */\n\nexport function getDropEventArguements(args, arg) {\n  if (isBlazor()) {\n    var connector = getObjectType(args.source) === Connector;\n    var object = cloneBlazorObject(args.source);\n    var target = cloneBlazorObject(args.target);\n    arg = {\n      element: connector ? {\n        connector: object.connectors[0],\n        connectorId: object.connectors[0].id\n      } : {\n        node: object.nodes[0],\n        nodeId: object.nodes[0].id\n      },\n      target: connector ? {\n        connector: target\n      } : {\n        node: target\n      },\n      position: arg.position,\n      cancel: arg.cancel\n    };\n  }\n\n  return arg;\n}\n/**\n * getPoint method \\\n *\n * @returns {PointModel} getPoint method .\\\n * @param { number } x - provide the x  value.\n * @param { number } y - provide the y  value.\n * @param { number } w - provide the w  value.\n * @param { number } h - provide the y  value.\n * @param { number } angle - provide the y  value.\n * @param { number } offsetX - provide the y  value.\n * @param { number } offsetY - provide the y  value.\n * @param { PointModel } cornerPoint - provide the y  value.\n * @private\n */\n\nexport function getPoint(x, y, w, h, angle, offsetX, offsetY, cornerPoint) {\n  var pivot = {\n    x: 0,\n    y: 0\n  };\n  var trans = identityMatrix();\n  rotateMatrix(trans, angle, offsetX, offsetY);\n\n  switch (cornerPoint.x) {\n    case 0:\n      switch (cornerPoint.y) {\n        case 0:\n          pivot = transformPointByMatrix(trans, {\n            x: x,\n            y: y\n          });\n          break;\n\n        case 0.5:\n          pivot = transformPointByMatrix(trans, {\n            x: x,\n            y: y + h / 2\n          });\n          break;\n\n        case 1:\n          pivot = transformPointByMatrix(trans, {\n            x: x,\n            y: y + h\n          });\n          break;\n      }\n\n      break;\n\n    case 0.5:\n      switch (cornerPoint.y) {\n        case 0:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w / 2,\n            y: y\n          });\n          break;\n\n        case 0.5:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w / 2,\n            y: y + h / 2\n          });\n          break;\n\n        case 1:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w / 2,\n            y: y + h\n          });\n          break;\n      }\n\n      break;\n\n    case 1:\n      switch (cornerPoint.y) {\n        case 0:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w,\n            y: y\n          });\n          break;\n\n        case 0.5:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w,\n            y: y + h / 2\n          });\n          break;\n\n        case 1:\n          pivot = transformPointByMatrix(trans, {\n            x: x + w,\n            y: y + h\n          });\n          break;\n      }\n\n      break;\n  }\n\n  return {\n    x: pivot.x,\n    y: pivot.y\n  };\n}\n/* eslint-disable */\n\n/**\n * Get the object as Node | Connector \\\n *\n * @returns {Object} Get the object as Node | Connector .\\\n * @param { number } obj - provide the x  value.\n * @private\n */\n\nexport var getObjectType = function (obj) {\n  if (obj) {\n    if (obj.sourceID !== undefined || obj.sourcePoint !== undefined || obj.targetID !== undefined || obj.targetPoint !== undefined || obj.type !== undefined) {\n      obj = Connector;\n    } else {\n      obj = Node;\n    }\n  }\n\n  return obj;\n};\n/** @private */\n\nexport var flipConnector = function (connector) {\n  if (!connector.sourceID && !connector.targetID) {\n    var source = {\n      x: connector.sourcePoint.x,\n      y: connector.sourcePoint.y\n    };\n    var target = {\n      x: connector.targetPoint.x,\n      y: connector.targetPoint.y\n    };\n\n    if (connector.flip === 'Horizontal') {\n      connector.sourcePoint.x = target.x;\n      connector.targetPoint.x = source.x;\n    } else if (connector.flip === 'Vertical') {\n      connector.sourcePoint.y = target.y;\n      connector.targetPoint.y = source.y;\n    } else if (connector.flip === 'Both') {\n      connector.sourcePoint = target;\n      connector.targetPoint = source;\n    }\n  }\n};\n/** @private */\n\nexport var updatePortEdges = function (portContent, flip, port) {\n  var offsetX = port.offset.x;\n  var offsetY = port.offset.y;\n\n  if (flip === 'Horizontal') {\n    offsetX = 1 - port.offset.x;\n    offsetY = port.offset.y;\n  } else if (flip === 'Vertical') {\n    offsetX = port.offset.x;\n    offsetY = 1 - port.offset.y;\n  } else if (flip === 'Both') {\n    offsetX = 1 - port.offset.x;\n    offsetY = 1 - port.offset.y;\n  }\n\n  portContent.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n  return portContent;\n};\n/** @private */\n\nexport var alignElement = function (element, offsetX, offsetY, diagram, flip) {\n  if (element.hasChildren()) {\n    for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n      var child = _a[_i];\n      var childX = offsetX - child.offsetX + offsetX;\n      var childY = offsetY - child.offsetY + offsetY;\n\n      if (flip === 'Horizontal' || flip === 'Both') {\n        child.offsetX = childX;\n        child.flipOffset.x = childX - child.desiredSize.width / 2;\n      }\n\n      if (flip === 'Vertical' || flip === 'Both') {\n        child.offsetY = childY;\n        child.flipOffset.y = childY - child.desiredSize.height / 2;\n      }\n\n      if (child instanceof Canvas || child instanceof Container) {\n        alignElement(child, offsetX, offsetY, diagram, flip);\n      }\n\n      child.measure(new Size(child.bounds.width, child.bounds.height));\n      child.arrange(child.desiredSize);\n      var node = diagram.nameTable[child.id];\n\n      if (node) {\n        diagram.updateConnectorEdges(node);\n      }\n    }\n  }\n};\n/** @private */\n\nexport var cloneSelectedObjects = function (diagram) {\n  var nodes = diagram.selectedItems.nodes;\n  var connectors = diagram.selectedItems.connectors;\n  var isProtectedOnChange = 'isProtectedOnChange';\n  var isEnableServerDatabind = diagram.allowServerDataBinding;\n  var isProtectedOnChangeValue = diagram[isProtectedOnChange];\n  diagram.protectPropertyChange(true);\n  diagram.allowServerDataBinding = false;\n  diagram.selectedItems.nodes = [];\n  diagram.selectedItems.connectors = [];\n  diagram.allowServerDataBinding = isEnableServerDatabind;\n  diagram.protectPropertyChange(isProtectedOnChangeValue);\n  var clonedSelectedItems = cloneObject(diagram.selectedItems);\n\n  for (var i = 0; i < nodes.length; i++) {\n    diagram.selectedItems.nodes.push(diagram.nameTable[nodes[i].id]);\n  }\n\n  for (var i = 0; i < connectors.length; i++) {\n    diagram.selectedItems.connectors.push(diagram.nameTable[connectors[i].id]);\n  }\n\n  return clonedSelectedItems;\n};\n/** @private */\n\nexport var updatePathElement = function (anglePoints, connector) {\n  var pathElement = new PathElement();\n  var pathseqData;\n\n  for (var j = 0; j < anglePoints.length - 1; j++) {\n    pathseqData = findPath(anglePoints[j], anglePoints[j + 1]);\n    pathElement.data = pathseqData[0];\n    pathElement.id = connector.id + '_' + connector.shape.sequence;\n    pathElement.offsetX = pathseqData[1].x;\n    pathElement.offsetY = pathseqData[1].y;\n    pathElement.rotateAngle = 45;\n    pathElement.transform = Transform.Self;\n  }\n\n  return pathElement;\n};\n/** @private */\n\nexport var checkPort = function (node, element) {\n  if (node instanceof Node) {\n    for (var i = 0; i < node.ports.length; i++) {\n      if (node.ports[i].id === element.id.split('_')[1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n/** @private */\n\nexport var findPath = function (sourcePoint, targetPoint) {\n  var beginningpoint = {\n    x: sourcePoint.x,\n    y: sourcePoint.y\n  };\n  var distance = findDistance(sourcePoint, targetPoint);\n  distance = Math.min(30, distance / 2);\n  var angle = findAngle(sourcePoint, targetPoint);\n  var transferpt = Point.transform({\n    x: beginningpoint.x,\n    y: beginningpoint.y\n  }, angle, distance);\n  var startpoint = Point.transform({\n    x: transferpt.x,\n    y: transferpt.y\n  }, angle, -12);\n  var endpoint = Point.transform({\n    x: startpoint.x,\n    y: startpoint.y\n  }, angle, 12 * 2);\n  var path = 'M' + startpoint.x + ' ' + startpoint.y + ' L' + endpoint.x + ' ' + endpoint.y;\n  return [path, transferpt];\n};\n/** @private */\n\nexport var getConnectorDirection = function (src, tar) {\n  if (Math.abs(tar.x - src.x) > Math.abs(tar.y - src.y)) {\n    return src.x < tar.x ? 'Right' : 'Left';\n  } else {\n    return src.y < tar.y ? 'Bottom' : 'Top';\n  }\n};\n/** @private */\n\nexport var findDistance = function (point1, point2) {\n  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n};\n/* eslint-enable */\n\n/**\n * cloneBlazorObject method \\\n *\n * @returns {Object} cloneBlazorObject method .\\\n * @param { object } args - provide the args  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport function cloneBlazorObject(args) {\n  if (isBlazor()) {\n    args = cloneObject(args);\n  }\n\n  return args;\n}\n/**\n * checkBrowserInfo method \\\n *\n * @returns {Object} checkBrowserInfo method .\\\n * @private\n */\n\nexport function checkBrowserInfo() {\n  if ((navigator.platform.indexOf('Mac') >= 0 || navigator.platform.indexOf('iPad') >= 0 || navigator.platform.indexOf('iPhone') >= 0 || navigator.platform.indexOf('MacIntel') >= 0) && (Browser.info.name === 'safari' || Browser.info.name === 'webkit')) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * canMeasureDecoratorPath method \\\n *\n * @returns {boolean} canMeasureDecoratorPath method .\\\n * @param { string[] } objects - provide the args  value.\n * @private\n */\n\nexport function canMeasureDecoratorPath(objects) {\n  if (objects.indexOf('shape') !== -1 || objects.indexOf('pathData') !== -1 || objects.indexOf('width') !== -1 || objects.indexOf('height') !== -1) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * getPreviewSize method \\\n *\n * @returns {Size} getPreviewSize method .\\\n * @param { SymbolPaletteModel } sourceElement - provide the args  value.\n * @param { Node } clonedObject - provide the args  value.\n * @param { DiagramElement } wrapper - provide the args  value.\n * @private\n */\n\nexport function getPreviewSize(sourceElement, clonedObject, wrapper) {\n  //let previewWidth: number;\n  //let previewHeight: number;\n  var previewWidth = getSymbolSize(sourceElement, clonedObject, wrapper, 'width');\n  var previewHeight = getSymbolSize(sourceElement, clonedObject, wrapper, 'height');\n  return new Size(previewWidth, previewHeight);\n}\n/**\n * getSymbolSize method \\\n *\n * @returns {number} getSymbolSize method .\\\n * @param { SymbolPaletteModel } sourceElement - provide the sourceElement  value.\n * @param { Node } clonedObject - provide the clonedObject  value.\n * @param { DiagramElement } wrapper - provide the wrapper  value.\n * @param { string } size - provide the size  value.\n * @private\n */\n\nexport function getSymbolSize(sourceElement, clonedObject, wrapper, size) {\n  var previewSize = 0;\n\n  if (clonedObject.previewSize[size] !== undefined) {\n    previewSize = clonedObject.previewSize[size];\n  } else if (sourceElement.symbolPreview[size] !== undefined) {\n    previewSize = sourceElement.symbolPreview[size];\n  } else {\n    previewSize = clonedObject[size] || wrapper.actualSize[size];\n  }\n\n  return previewSize;\n}\n/**\n * findParent method \\\n *\n * @returns {string} findParent method .\\\n * @param { Node } clonedObject - provide the clonedObject  value.\n * @param { Diagram } wrapper - provide the diagram  element.\n * @param { string } size - provide the parent id.\n * @private\n */\n\nexport function findParentInSwimlane(node, diagram, parent) {\n  if (node && node.parentId) {\n    node = diagram.nameTable[node.parentId];\n\n    if (node.parentId) {\n      parent = findParentInSwimlane(node, diagram, parent);\n    } else {\n      parent = node.id;\n    }\n  }\n\n  return parent;\n}","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/node_modules/@syncfusion/ej2-diagrams/src/diagram/utility/diagram-util.js"],"names":["Size","Rect","identityMatrix","rotateMatrix","transformPointByMatrix","scaleMatrix","DiagramElement","Container","StrokeStyle","Stop","Point","ConnectorConstraints","NodeConstraints","PortConstraints","DiagramConstraints","DiagramTools","Transform","BlazorAction","SelectorConstraints","ThumbsConstraints","PathElement","DiagramNativeElement","TextElement","ImageElement","PathAnnotation","ShapeAnnotation","Node","FlowShape","BasicShape","Native","Html","UmlActivityShape","BpmnGateway","BpmnDataObject","BpmnEvent","BpmnSubEvent","BpmnActivity","BpmnAnnotation","MethodArguments","UmlClassAttribute","UmlClassMethod","UmlClass","UmlInterface","UmlEnumerationMember","UmlEnumeration","Lane","Phase","ChildContainer","SwimLane","Path","Image","Text","BpmnShape","UmlClassifierShape","Header","Connector","bezierPoints","BezierSegment","StraightSegment","OrthogonalSegment","getBasicShape","getFlowShape","Diagram","findAngle","getContent","removeElement","hasClass","getDiagramElement","getBounds","cloneObject","rotatePoint","getFunction","getPolygonPath","DiagramHtmlElement","getRulerSize","canResize","UserHandle","getUMLActivityShape","Canvas","PointPort","Command","pasteSwimLane","isBlazor","Browser","isNullOrUndefined","ConnectorFixedUserHandle","completeRegion","region","selectedObjects","collection","i","length","obj","containsRect","wrapper","bounds","push","findNodeByName","nodes","name","id","findObjectType","drawingObject","type","shape","setSwimLaneDefaults","child","node","header","hasHeader","getSpaceValue","intervals","isLine","space","undefined","getInterval","newInterval","k","setPortsEdges","ports","inEdges","outEdges","setUMLActivityDefaults","umlActivityShape","width","height","style","fill","flow","umlActivityFlow","strokeDashArray","strokeWidth","targetDecorator","sourceDecorator","setConnectorDefaults","bpmnFlow","sequence","association","hasRelation","relationship","findNearestPoint","reference","start","end","shortestPoint","shortest","findLength","shortest1","angleBWStAndEnd","angleBWStAndRef","r","vaAngle","x","Math","cos","PI","y","sin","pointsForBezier","connector","points","segments","tolerance","segment","point1","isEmptyPoint","bezierPoint1","point2","bezierPoint2","max","Number","distance","j","isDiagramChild","htmlLayer","element","parentElement","groupHasType","nameTable","contains","children","updateDefaultValues","actualNode","plainValue","defaultValue","property","oldKey","keyObj","_i","_a","Object","keys","key","Array","isArray","createObject","getObjectType","annotations","updateLayoutValue","data","assitants","assistants","splice","hasSubTree","canEnableSubTree","orientation","layoutInfo","offset","isPointOverConnector","intermediatePoints","rect","toBounds","Inflate","hitPadding","containsPoint","intersectinPt","segment1","x1","x2","y1","y2","segment2","intersectDetails","intersect3","enabled","intersectPt","abs","rect_1","equals","container","textElement","lineUtil1","lineUtil2","point","l1","l2","d","na","nb","ua","ub","intersect2","start1","end1","start2","end2","getLineSegment","line3","getPoints","corners","padding","line","left","topLeft","right","topRight","top","bottomRight","bottom","bottomLeft","getTooltipOffset","diagram","mousePosition","inheritTooltip","constraints","InheritTooltip","objectTooltip","Tooltip","isMouseBased","tooltip","relativeMode","tooltipOffset","rulerSize","document","getElementById","getBoundingClientRect","tooltipObject","position","offsetPoint","bottomCenter","middleLeft","middleRight","topCenter","bound","scale","scroller","transform","horizontalOffset","verticalOffset","initfixedUserHandlesSymbol","options","fixedUserHandleContainer","fixedUserHandleContent","pathData","visible","inversedAlignment","horizontalAlignment","verticalAlignment","iconStrokeColor","strokeColor","iconStrokeWidth","setOffsetWithRespectToBounds","description","sort","objects","option","temp","b","center","getAnnotationPosition","pts","annotation","getloop","getOffsetOfConnector","angle","index","alignednumber","getAlignedPosition","lengths","prevLength","kCount","distancePoints","offsetLength","cnst","content","state","alignment","alignLabelOnSegments","ang","fourty5","one35","two25","three15","vAlign","hAlign","toLowerCase","direction","getBezierDirection","src","tar","removeChildNodes","removeFromAQuad","removeObjectsFromLayer","getChild","subChild","indexOf","getSwimLaneChildren","grid","childTable","gridChild","removeUnnecessaryNodes","serialize","model","removeNodes","clonedObject","getCustomProperty","selectedItems","connectors","serializationSettings","preventDefaults","JSON","stringify","defaultObject","isNodeShape","getConstructor","properties","concat","properties_1","preventArrayDefaults","every","isSameArray","constructor","parent","getClassName","deserialize","enableServerDataBinding","blazorAction","blazorActions","addConstraints","ClearObject","clear","removeConstraints","protectPropertyChange","map","dataSourceSettings","doBinding","nodeTemp","setNodeTemplate","getDescription","commands","commandManager","command","execute","canExecute","arrangeTickHorizontal","rulerSettings","horizontalRuler","arrangeTick","arrangeTickVertical","verticalRuler","getLayoutInfo","layout","getBranch","nodeDefaults","getNodeDefaults","connectorDefaults","getConnectorDefaults","dataObj","parse","upgrade","contextMenuSettings","Default","tool","bridgeDirection","pageSettings","addInfo","scrollSettings","layers","_b","_c","cmd","backgroundColor","basicElements","mode","actualSize","offsetX","offsetY","snapSettings","canLayout","diagramActions","isLoading","component","views","refresh","classList","add","version","nodes_1","port","None","updateStyle","changedObject","target","canApplyStyle","textOverflow","opacity","bold","color","textWrapping","fontFamily","fontSize","italic","textAlign","whiteSpace","textDecoration","gradient","updateGradient","refreshTextElement","changedGradient","targetGradient","cx","cy","fx","fy","stops","updateHyperlink","actualAnnotation","hyperlink","link","labelStyle","updateShapeContent","actualObject","minHeight","maxHeight","minWidth","maxWidth","margin","elementId","updateShape","oldObject","pathContent","imageContent","source","imageAlign","align","imageScale","textContent","basicShape","cornerRadius","flowShapeElement","flowShape","nativeContent","htmlContent","updateContent","newValues","nativeElement","removeChild","appendChild","htmlElement","shapes","flowshapedata","toString","updateUmlActivityNode","basicshape","basicshapedata","basicShapeData","canMeasurePath","umlActivityShapeData","getUMLFinalNode","finalNodeShape","innerFinalNode","outerFinalNode","getUMLActivityShapes","removeGradient","svgId","removeItem","array","item","updateConnector","anglePoint","updateSegmentElement","srcDecorator","firstSegment","lastSegment","clipDecorators","updateDecoratorElement","tarDecorator","updateShapeElement","getUserHandlePosition","selectorItem","handle","size","pivot","side","connectorOffset","getPointloop","matrix","rotateAngle","parentTransform","canResizeCorner","selectorConstraints","action","thumbsConstraints","canShowCorner","checkPortRestriction","portVisibility","visibility","findAnnotation","annotationId","split","findPort","portId","getInOutConnectPorts","isInConnect","InConnect","OutConnect","findObjectIndex","getObjectFromCollection","scaleElement","sw","sh","refObject","refPoint","newPosition","arrangeChild","drop","initContainer","init","measure","arrange","desiredSize","insertObject","low","high","mid","floor","getElement","diagramElement","diagramId","instance","getPaletteSymbols","nodeId","getAnnotation","enterObject","enterTable","symbolPalette","palettes","symbols","getCollectionChangeEventArguements","args1","cause","cancel","cloneBlazorObject","getDropEventArguements","args","arg","object","connectorId","getPoint","w","h","cornerPoint","trans","sourceID","sourcePoint","targetID","targetPoint","flipConnector","flip","updatePortEdges","portContent","alignElement","hasChildren","childX","childY","flipOffset","updateConnectorEdges","cloneSelectedObjects","isProtectedOnChange","isEnableServerDatabind","allowServerDataBinding","isProtectedOnChangeValue","clonedSelectedItems","updatePathElement","anglePoints","pathElement","pathseqData","findPath","Self","checkPort","beginningpoint","findDistance","min","transferpt","startpoint","endpoint","path","getConnectorDirection","sqrt","pow","checkBrowserInfo","navigator","platform","info","canMeasureDecoratorPath","getPreviewSize","sourceElement","previewWidth","getSymbolSize","previewHeight","previewSize","symbolPreview","findParentInSwimlane","parentId"],"mappings":"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","sourcesContent":["import { Size } from './../primitives/size';\nimport { Rect } from './../primitives/rect';\nimport { identityMatrix, rotateMatrix, transformPointByMatrix, scaleMatrix } from './../primitives/matrix';\nimport { DiagramElement } from './../core/elements/diagram-element';\nimport { Container } from './../core/containers/container';\nimport { StrokeStyle, Stop } from './../core/appearance';\nimport { Point } from './../primitives/point';\nimport { ConnectorConstraints, NodeConstraints, PortConstraints, DiagramConstraints, DiagramTools, Transform, BlazorAction } from './../enum/enum';\nimport { SelectorConstraints, ThumbsConstraints } from './../enum/enum';\nimport { PathElement } from './../core/elements/path-element';\nimport { DiagramNativeElement } from './../core/elements/native-element';\nimport { TextElement } from '../core/elements/text-element';\nimport { ImageElement } from '../core/elements/image-element';\nimport { PathAnnotation, ShapeAnnotation } from './../objects/annotation';\nimport { Node, FlowShape, BasicShape, Native, Html, UmlActivityShape, BpmnGateway, BpmnDataObject, BpmnEvent, BpmnSubEvent, BpmnActivity, BpmnAnnotation, MethodArguments, UmlClassAttribute, UmlClassMethod, UmlClass, UmlInterface, UmlEnumerationMember, UmlEnumeration, Lane, Phase, ChildContainer, SwimLane, Path, Image, Text, BpmnShape, UmlClassifierShape, Header } from './../objects/node';\nimport { Connector, bezierPoints, BezierSegment, StraightSegment, OrthogonalSegment } from './../objects/connector';\nimport { getBasicShape } from './../objects/dictionary/basic-shapes';\nimport { getFlowShape } from './../objects/dictionary/flow-shapes';\nimport { Diagram } from './../diagram';\nimport { findAngle } from './connector';\nimport { getContent, removeElement, hasClass, getDiagramElement } from './dom-util';\nimport { getBounds, cloneObject, rotatePoint, getFunction } from './base-util';\nimport { getPolygonPath } from './../utility/path-util';\nimport { DiagramHtmlElement } from '../core/elements/html-element';\nimport { getRulerSize } from '../ruler/ruler';\nimport { canResize } from './constraints-util';\nimport { UserHandle } from '../interaction/selector';\nimport { getUMLActivityShape } from '../objects/dictionary/umlactivity-shapes';\nimport { Canvas } from '../core/containers/canvas';\nimport { PointPort } from '../objects/port';\nimport { Command } from '../diagram/keyboard-commands';\nimport { pasteSwimLane } from './swim-lane-util';\nimport { isBlazor, Browser, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ConnectorFixedUserHandle } from '../objects/fixed-user-handle';\n/**\n * completeRegion method\\\n *\n * @returns {  void }    completeRegion method .\\\n * @param {Rect} region - provide the region value.\n * @param {(NodeModel | ConnectorModel)[]} selectedObjects - provide the selectedObjects value.\n * @private\n */\nexport function completeRegion(region, selectedObjects) {\n    var collection = [];\n    for (var i = 0; i < selectedObjects.length; i++) {\n        var obj = selectedObjects[i];\n        if (region.containsRect(obj.wrapper.bounds)) {\n            collection.push(obj);\n        }\n    }\n    return collection;\n}\n/**\n * findNodeByName method \\\n *\n * @returns {  boolean } findNodeByName method .\\\n * @param {(NodeModel | ConnectorModel)[]} nodes - provide the nodes  value.\n * @param {string} name - provide the orientation  value.\n * @private\n */\nexport function findNodeByName(nodes, name) {\n    for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].id === name) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * findNodeByName method \\\n *\n * @returns {  string } findNodeByName method .\\\n * @param {(NodeModel | ConnectorModel)[]} drawingObject - provide the drawingObject  value.\n * @private\n */\nexport function findObjectType(drawingObject) {\n    var type;\n    if (drawingObject) {\n        if (drawingObject.type) {\n            type = 'Connector';\n        }\n        else if (drawingObject.shape && !drawingObject.type) {\n            type = 'Node';\n        }\n    }\n    return type;\n}\n/**\n * setSwimLaneDefaults method \\\n *\n * @returns {  void } setSwimLaneDefaults method .\\\n * @param {NodeModel | ConnectorModel} child - provide the child  value.\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @private\n */\nexport function setSwimLaneDefaults(child, node) {\n    if (node instanceof Node) {\n        if (!child.shape.header) {\n            node.shape.hasHeader = false;\n        }\n    }\n}\n/**\n * getSpaceValue method \\\n *\n * @returns {  number } getSpaceValue method .\\\n * @param {number[]} intervals - provide the intervals  value.\n * @param {boolean} isLine - provide the isLine  value.\n * @param {number} i - provide the i  value.\n * @param {number} space - provide the space  value.\n * @private\n */\nexport function getSpaceValue(intervals, isLine, i, space) {\n    space = !isLine ? ((intervals[i - 1] !== undefined) ? intervals[i - 1] + space : 0) : space;\n    return space;\n}\n/**\n * getInterval method \\\n *\n * @returns {  number[] } getInterval method .\\\n * @param {number[]} intervals - provide the intervals  value.\n * @param {boolean} isLine - provide the isLine  value.\n * @private\n */\nexport function getInterval(intervals, isLine) {\n    var newInterval = [];\n    if (!isLine) {\n        for (var k = 0; k < intervals.length; k++) {\n            newInterval.push(intervals[k]);\n        }\n        newInterval.push(intervals[newInterval.length - 2]);\n        newInterval.push(intervals[newInterval.length - 2]);\n    }\n    else {\n        newInterval = intervals;\n    }\n    return newInterval;\n}\n/**\n * setPortsEdges method \\\n *\n * @returns {  Node } setPortsEdges method .\\\n * @param {Node} node - provide the node  value.\n * @private\n */\nexport function setPortsEdges(node) {\n    for (var k = 0; k < node.ports.length; k++) {\n        node.ports[k].inEdges = [];\n        node.ports[k].outEdges = [];\n    }\n    return node;\n}\n/**\n * setUMLActivityDefaults method \\\n *\n * @returns {  void } setUMLActivityDefaults method .\\\n * @param {NodeModel | ConnectorModel} child - provide the child  value.\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @private\n */\nexport function setUMLActivityDefaults(child, node) {\n    if (node instanceof Node) {\n        var shape = (isBlazor() ? child.shape.umlActivityShape :\n            child.shape.shape);\n        switch (shape) {\n            case 'JoinNode':\n                if (!child.width) {\n                    node.width = 20;\n                }\n                if (!child.height) {\n                    node.height = 90;\n                }\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'black';\n                }\n                break;\n            case 'ForkNode':\n                if (!child.width) {\n                    node.width = 90;\n                }\n                if (!child.height) {\n                    node.height = 20;\n                }\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'black';\n                }\n                break;\n            case 'InitialNode':\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'black';\n                }\n                break;\n            case 'FinalNode':\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'black';\n                }\n                break;\n        }\n    }\n    else {\n        var flow = (isBlazor() ?\n            child.shape.umlActivityFlow : child.shape.flow);\n        switch (flow) {\n            case 'Object':\n                if (!child.style || !child.style.strokeDashArray) {\n                    node.style.strokeDashArray = '8 4';\n                }\n                if (!child.style || !child.style.strokeWidth) {\n                    node.style.strokeWidth = 2;\n                }\n                if (!child.targetDecorator || !child.targetDecorator.shape) {\n                    node.targetDecorator.shape = 'OpenArrow';\n                }\n                break;\n            case 'Control':\n                if (!child.style || !child.style.strokeWidth) {\n                    node.style.strokeWidth = 2;\n                }\n                if (!child.targetDecorator || !child.targetDecorator.shape) {\n                    node.targetDecorator.shape = 'OpenArrow';\n                }\n                if (!child.sourceDecorator || !child.sourceDecorator.shape) {\n                    node.sourceDecorator.shape = 'None';\n                }\n                break;\n        }\n    }\n}\n/* eslint-disable */\n/**\n * setConnectorDefaults method \\\n *\n * @returns {  void } setConnectorDefaults method .\\\n * @param {ConnectorModel} child - provide the child  value.\n * @param {ConnectorModel} node - provide the node  value.\n * @private\n */\nexport function setConnectorDefaults(child, node) {\n    switch ((child.shape).type) {\n        case 'Bpmn':\n            var bpmnFlow = (isBlazor() ? child.shape.bpmnFlow : child.shape.flow);\n            switch (bpmnFlow) {\n                case 'Sequence':\n                    if ((((child.shape.sequence) === 'Normal' && child.type !== 'Bezier')) ||\n                        ((child.shape.sequence) === 'Default') || ((child.shape.sequence) === 'Conditional')) {\n                        if (node.targetDecorator && node.targetDecorator.style) {\n                            node.targetDecorator.style.fill = (child.targetDecorator && child.targetDecorator.style\n                                && child.targetDecorator.style.fill) || 'black';\n                        }\n                        if ((child.shape.sequence) === 'Conditional' && node.sourceDecorator) {\n                            if (node.sourceDecorator.style) {\n                                node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                                    child.sourceDecorator.style.fill) || 'white';\n                            }\n                            node.sourceDecorator.width = (child.sourceDecorator && child.sourceDecorator.width) || 20;\n                            node.sourceDecorator.height = (child.sourceDecorator && child.sourceDecorator.width) || 10;\n                        }\n                    }\n                    break;\n                case 'Association':\n                    if (((child.shape.association) === 'Default') ||\n                        ((child.shape.association) === 'Directional') ||\n                        ((child.shape.association) === 'BiDirectional')) {\n                        if (node.targetDecorator && node.targetDecorator.style) {\n                            node.targetDecorator.style.fill = (child.targetDecorator && child.targetDecorator.style &&\n                                child.targetDecorator.style.fill) || 'black';\n                        }\n                        if ((child.shape.association) === 'BiDirectional') {\n                            if (node.sourceDecorator && node.sourceDecorator.style) {\n                                node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                                    child.sourceDecorator.style.fill) || 'white';\n                                node.sourceDecorator.width = (child.sourceDecorator && child.sourceDecorator.width) || 5;\n                                node.sourceDecorator.height = (child.sourceDecorator && child.sourceDecorator.height) || 10;\n                            }\n                        }\n                    }\n                    break;\n                case 'Message':\n                    if (node.style && !node.style.strokeDashArray) {\n                        node.style.strokeDashArray = (child.style && child.style.strokeDashArray) || '4 4';\n                    }\n                    break;\n            }\n            break;\n        case 'UmlActivity':\n            var flow = (isBlazor() ?\n                child.shape.umlActivityFlow : child.shape.flow);\n            switch (flow) {\n                case 'Exception':\n                    if (((child.shape.association) === 'Directional') ||\n                        ((child.shape.association) === 'BiDirectional')) {\n                        node.style.strokeDashArray = (child.style && child.style.strokeDashArray) || '2 2';\n                    }\n                    break;\n            }\n            break;\n        case 'UmlClassifier':\n            var hasRelation = false;\n            if (child.shape.relationship === 'Association') {\n                hasRelation = true;\n            }\n            else if (child.shape.relationship === 'Inheritance') {\n                if (node.targetDecorator && node.targetDecorator.style) {\n                    node.targetDecorator.style.fill = (child.targetDecorator && child.targetDecorator.style &&\n                        child.targetDecorator.style.fill) || 'white';\n                }\n                if (node.style) {\n                    hasRelation = true;\n                    node.style.strokeDashArray = (child.style && child.style.strokeDashArray) || '4 4';\n                }\n            }\n            else if (child.shape.relationship === 'Composition') {\n                if (node.sourceDecorator && node.sourceDecorator.style) {\n                    node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                        child.sourceDecorator.style.fill) || 'black';\n                }\n                hasRelation = true;\n            }\n            else if (child.shape.relationship === 'Aggregation' ||\n                child.shape.relationship === undefined) {\n                if (node.sourceDecorator && node.sourceDecorator.style) {\n                    node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                        child.sourceDecorator.style.fill) || 'white';\n                }\n                hasRelation = true;\n            }\n            else if (child.shape.relationship === 'Dependency') {\n                if (node.sourceDecorator && node.sourceDecorator.style) {\n                    node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                        child.sourceDecorator.style.fill) || 'white';\n                }\n                hasRelation = true;\n                node.style.strokeDashArray = '4 4';\n            }\n            else if (child.shape.relationship === 'Realization') {\n                if (node.sourceDecorator && node.sourceDecorator.style) {\n                    node.sourceDecorator.style.fill = (child.sourceDecorator && child.sourceDecorator.style &&\n                        child.sourceDecorator.style.fill) || 'white';\n                }\n                hasRelation = true;\n            }\n            if (hasRelation) {\n                node.style.strokeWidth = (child.style && child.style.strokeWidth) || 2;\n            }\n            break;\n    }\n}\n/* eslint-enable */\n/**\n * findNearestPoint method \\\n *\n * @returns {  PointModel } findNearestPoint method .\\\n * @param {PointModel} reference - provide the reference  value.\n * @param {PointModel} start - provide the start  value.\n * @param {PointModel} end - provide the end  value.\n * @private\n */\nexport function findNearestPoint(reference, start, end) {\n    var shortestPoint;\n    var shortest = Point.findLength(start, reference);\n    var shortest1 = Point.findLength(end, reference);\n    if (shortest > shortest1) {\n        shortestPoint = end;\n    }\n    else {\n        shortestPoint = start;\n    }\n    var angleBWStAndEnd = Point.findAngle(start, end);\n    var angleBWStAndRef = Point.findAngle(shortestPoint, reference);\n    var r = Point.findLength(shortestPoint, reference);\n    var vaAngle = angleBWStAndRef + ((angleBWStAndEnd - angleBWStAndRef) * 2);\n    return {\n        x: (shortestPoint.x + r * Math.cos(vaAngle * Math.PI / 180)),\n        y: (shortestPoint.y + r * Math.sin(vaAngle * Math.PI / 180))\n    };\n}\n/**\n * pointsForBezier method \\\n *\n * @returns {   PointModel[] } pointsForBezier method .\\\n * @param {ConnectorModel} connector - provide the connector  value.\n * @private\n */\nfunction pointsForBezier(connector) {\n    var points = [];\n    if (connector.type === 'Bezier') {\n        var k = 0;\n        for (var i = 0; i < connector.segments.length; i++) {\n            var tolerance = 1.5;\n            var segment = connector.segments[i];\n            //const pt: PointModel = { x: 0, y: 0 };\n            var point1 = !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1;\n            var point2 = !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2;\n            var max = Number((connector.distance(point1, segment.points[0]) +\n                connector.distance(point2, point1) +\n                connector.distance(segment.points[1], point2)) / tolerance);\n            for (var j = 0; j < max - 1; j = j + 10) {\n                points[k] =\n                    bezierPoints(connector, segment.points[0], !Point.isEmptyPoint(segment.point1) ? segment.point1 : segment.bezierPoint1, !Point.isEmptyPoint(segment.point2) ? segment.point2 : segment.bezierPoint2, segment.points[1], j, max);\n                k++;\n            }\n        }\n    }\n    return points;\n}\n/**\n * isDiagramChild method \\\n *\n * @returns {  boolean } isDiagramChild method .\\\n * @param {HTMLElement} htmlLayer - provide the htmlLayer  value.\n * @private\n */\nexport function isDiagramChild(htmlLayer) {\n    var element = htmlLayer.parentElement;\n    do {\n        if (hasClass(element, 'e-diagram')) {\n            return true;\n        }\n        element = element.parentElement;\n    } while (element);\n    return false;\n}\n/**\n * groupHasType method \\\n *\n * @returns {  boolean } groupHasType method .\\\n * @param {NodeModel} node - provide the node  value.\n * @param {Shapes} type - provide the type  value.\n * @param {{}} nameTable - provide the nameTable  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function groupHasType(node, type, nameTable) {\n    var contains = false;\n    if (node && node.children && node.children.length > 0) {\n        var child = void 0;\n        var i = 0;\n        for (; i < node.children.length; i++) {\n            child = nameTable[node.children[i]];\n            if (child.shape.type === type) {\n                return true;\n            }\n            return groupHasType(child, type, nameTable);\n        }\n    }\n    return contains;\n}\n/**\n * groupHasType method \\\n *\n * @returns {  void } groupHasType method .\\\n * @param {NodeModel | ConnectorModel} actualNode - provide the actualNode  value.\n * @param { NodeModel | ConnectorModel} plainValue - provide the plainValue  value.\n * @param {object} defaultValue - provide the defaultValue  value.\n * @param {NodeModel | ConnectorModel} property - provide the property  value.\n * @param {string} oldKey - provide the oldKey  value.\n * @private\n */\nexport function updateDefaultValues(actualNode, plainValue, \n// eslint-disable-next-line @typescript-eslint/ban-types\ndefaultValue, property, oldKey) {\n    if (defaultValue && ((actualNode instanceof Connector) || actualNode\n        && ((actualNode.shape && actualNode.shape.type !== 'SwimLane') || actualNode.shape === undefined))) {\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        var keyObj = void 0;\n        for (var _i = 0, _a = Object.keys(defaultValue); _i < _a.length; _i++) {\n            var key = _a[_i];\n            keyObj = defaultValue[key];\n            if (key === 'shape' && keyObj.type) {\n                actualNode.shape = { type: keyObj.type };\n            }\n            if (keyObj) {\n                if (Array.isArray(keyObj) && keyObj.length && keyObj.length > 0 && (oldKey !== 'annotations' && oldKey !== 'ports')) {\n                    if (actualNode[key].length > 0) {\n                        for (var i = 0; i <= actualNode[key].length; i++) {\n                            updateDefaultValues(actualNode[key], plainValue ? plainValue[key] : undefined, defaultValue[key], (key === 'annotations' || key === 'ports') ? actualNode : undefined, key);\n                        }\n                    }\n                    else {\n                        updateDefaultValues(actualNode[key], plainValue ? plainValue[key] : undefined, defaultValue[key], (key === 'annotations' || key === 'ports') ? actualNode : undefined, key);\n                    }\n                }\n                else if (keyObj instanceof Object && plainValue && (oldKey !== 'annotations' && oldKey !== 'ports')) {\n                    updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n                }\n                else if ((oldKey !== 'annotations' && oldKey !== 'ports')\n                    && (plainValue && !plainValue[key]) || (!plainValue && actualNode\n                    && (actualNode[key] || actualNode[key] !== undefined))) {\n                    actualNode[key] = defaultValue[key];\n                }\n                else {\n                    var createObject = void 0;\n                    if (oldKey === 'annotations' || oldKey === 'ports') {\n                        if (oldKey === 'annotations') {\n                            if (actualNode[key]) {\n                                updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n                            }\n                            if (!actualNode[key]) {\n                                if (getObjectType(property) === Connector) {\n                                    createObject = new PathAnnotation(property, 'annotations', defaultValue[key]);\n                                    property.annotations.push(createObject);\n                                }\n                                else {\n                                    createObject = new ShapeAnnotation(property, 'annotations', defaultValue[key]);\n                                    property.annotations.push(createObject);\n                                }\n                            }\n                        }\n                        else {\n                            if (actualNode[key]) {\n                                updateDefaultValues(actualNode[key], plainValue[key], defaultValue[key]);\n                            }\n                            else {\n                                createObject = new PointPort(property, 'ports', defaultValue[key]);\n                                property.ports.push(createObject);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n/* tslint:disable:no-string-literal */\n/**\n * updateLayoutValue method \\\n *\n * @returns {  void } updateLayoutValue method .\\\n * @param {TreeInfo} actualNode - provide the actualNode  value.\n * @param { object} defaultValue - provide the defaultValue  value.\n * @param {INode[]} nodes - provide the nodes  value.\n * @param {INode} node - provide the node  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function updateLayoutValue(actualNode, defaultValue, nodes, node) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    var keyObj;\n    if (defaultValue) {\n        for (var _i = 0, _a = Object.keys(defaultValue); _i < _a.length; _i++) {\n            var key = _a[_i];\n            keyObj = defaultValue[key];\n            if (key === 'getAssistantDetails') {\n                if (node.data['Role'] === defaultValue[key]['root']) {\n                    var assitants = defaultValue[key]['assistants'];\n                    for (var i = 0; i < assitants.length; i++) {\n                        for (var j = 0; j < nodes.length; j++) {\n                            if (nodes[j].data['Role'] === assitants[i]) {\n                                actualNode.assistants.push(nodes[j].id);\n                                actualNode.children.splice(0, 1);\n                            }\n                        }\n                    }\n                }\n            }\n            else if (keyObj) {\n                actualNode[key] = defaultValue[key];\n            }\n        }\n    }\n    if (!actualNode.hasSubTree && defaultValue.canEnableSubTree) {\n        actualNode.orientation = node.layoutInfo.orientation;\n        actualNode.type = node.layoutInfo.type;\n        if (node.layoutInfo.offset !== actualNode.offset && (node.layoutInfo.offset) !== undefined) {\n            actualNode.offset = node.layoutInfo.offset;\n        }\n    }\n    node.layoutInfo.hasSubTree = actualNode.hasSubTree;\n}\n/* tslint:enable:no-string-literal */\n/**\n * isPointOverConnector method \\\n *\n * @returns {  boolean } isPointOverConnector method .\\\n * @param {ConnectorModel} connector - provide the connector  value.\n * @param { PointModel} reference - provide the reference  value.\n * @private\n */\nexport function isPointOverConnector(connector, reference) {\n    //let intermediatePoints: PointModel[];\n    var intermediatePoints = connector.type === 'Bezier' ? pointsForBezier(connector) :\n        connector.intermediatePoints;\n    for (var i = 0; i < intermediatePoints.length - 1; i++) {\n        var start = intermediatePoints[i];\n        var end = intermediatePoints[i + 1];\n        var rect = Rect.toBounds([start, end]);\n        rect.Inflate(connector.hitPadding);\n        if (rect.containsPoint(reference)) {\n            var intersectinPt = findNearestPoint(reference, start, end);\n            var segment1 = { x1: start.x, x2: end.x, y1: start.y, y2: end.y };\n            var segment2 = { x1: reference.x, x2: intersectinPt.x, y1: reference.y, y2: intersectinPt.y };\n            var intersectDetails = intersect3(segment1, segment2);\n            if (intersectDetails.enabled) {\n                var distance = Point.findLength(reference, intersectDetails.intersectPt);\n                if (Math.abs(distance) < connector.hitPadding) {\n                    return true;\n                }\n            }\n            else {\n                var rect_1 = Rect.toBounds([reference, reference]);\n                rect_1.Inflate(3);\n                if (rect_1.containsPoint(start) || rect_1.containsPoint(end)) {\n                    return true;\n                }\n            }\n            if (Point.equals(reference, intersectinPt)) {\n                return true;\n            }\n        }\n    }\n    if (connector.annotations.length > 0) {\n        var container = connector.wrapper.children;\n        for (var i = 3; i < container.length; i++) {\n            var textElement = container[i];\n            if (textElement.bounds.containsPoint(reference)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n/**\n * intersect3 method \\\n *\n * @returns {  Intersection } intersect3 method .\\\n * @param {ConnectorModel} lineUtil1 - provide the lineUtil1  value.\n * @param { PointModel} lineUtil2 - provide the lineUtil2  value.\n * @private\n */\nexport function intersect3(lineUtil1, lineUtil2) {\n    var point = { x: 0, y: 0 };\n    var l1 = lineUtil1;\n    var l2 = lineUtil2;\n    var d = (l2.y2 - l2.y1) * (l1.x2 - l1.x1) - (l2.x2 - l2.x1) * (l1.y2 - l1.y1);\n    var na = (l2.x2 - l2.x1) * (l1.y1 - l2.y1) - (l2.y2 - l2.y1) * (l1.x1 - l2.x1);\n    var nb = (l1.x2 - l1.x1) * (l1.y1 - l2.y1) - (l1.y2 - l1.y1) * (l1.x1 - l2.x1);\n    /*( EJ2-42102 - Connector segments not update properly ) by sivakumar sekar - condition added to avoid bridging for\n     overlapping segments in the connectors and to validate whether the connector is intersecting over the other */\n    if (d === 0 || ((lineUtil1.x1 === lineUtil2.x1 || lineUtil1.y1 === lineUtil2.y1) &&\n        (lineUtil1.x2 === lineUtil2.x2 || lineUtil1.y2 === lineUtil2.y2) && ((na === 0 || nb === 0) && d > 0))) {\n        return { enabled: false, intersectPt: point };\n    }\n    var ua = na / d;\n    var ub = nb / d;\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        point.x = l1.x1 + (ua * (l1.x2 - l1.x1));\n        point.y = l1.y1 + (ua * (l1.y2 - l1.y1));\n        return { enabled: true, intersectPt: point };\n    }\n    return { enabled: false, intersectPt: point };\n}\n/**\n * intersect2 method \\\n *\n * @returns {  PointModel } intersect2 method .\\\n * @param {PointModel} start1 - provide the start1  value.\n * @param { PointModel} end1 - provide the end1  value.\n * @param { PointModel} start2 - provide the start2  value.\n * @param { PointModel} end2 - provide the end2  value.\n * @private\n */\nexport function intersect2(start1, end1, start2, end2) {\n    var point = { x: 0, y: 0 };\n    var lineUtil1 = getLineSegment(start1.x, start1.y, end1.x, end1.y);\n    var lineUtil2 = getLineSegment(start2.x, start2.y, end2.x, end2.y);\n    var line3 = intersect3(lineUtil1, lineUtil2);\n    if (line3.enabled) {\n        return line3.intersectPt;\n    }\n    else {\n        return point;\n    }\n}\n/**\n * getLineSegment method \\\n *\n * @returns {  Segment } getLineSegment method .\\\n * @param {number} x1 - provide the x1  value.\n * @param { number} y1 - provide the y1  value.\n * @param { number} x2 - provide the x2  value.\n * @param { number} y2 - provide the y2  value.\n * @private\n */\nexport function getLineSegment(x1, y1, x2, y2) {\n    return { 'x1': Number(x1) || 0, 'y1': Number(y1) || 0, 'x2': Number(x2) || 0, 'y2': Number(y2) || 0 };\n}\n/**\n * getPoints method \\\n *\n * @returns {  PointModel[] } getPoints method .\\\n * @param {number} element - provide the element  value.\n * @param { number} corners - provide the corners  value.\n * @param { number} padding - provide the padding  value.\n * @private\n */\nexport function getPoints(element, corners, padding) {\n    var line = [];\n    padding = padding || 0;\n    var left = { x: corners.topLeft.x - padding, y: corners.topLeft.y };\n    var right = { x: corners.topRight.x + padding, y: corners.topRight.y };\n    var top = { x: corners.bottomRight.x, y: corners.bottomRight.y - padding };\n    var bottom = { x: corners.bottomLeft.x, y: corners.bottomLeft.y + padding };\n    line.push(left);\n    line.push(right);\n    line.push(top);\n    line.push(bottom);\n    return line;\n}\n/**\n * getTooltipOffset method \\\n *\n * @returns {  PointModel[] } getTooltipOffset method .\\\n * @param {number} diagram - provide the diagram  value.\n * @param { number} mousePosition - provide the mousePosition  value.\n * @param { NodeModel | ConnectorModel} node - provide the node  value.\n * @param { string} type - provide the type  value.\n * @private\n */\nexport function getTooltipOffset(diagram, mousePosition, node, type) {\n    //let offset: PointModel;\n    var inheritTooltip = (node instanceof Node) ? (node.constraints & NodeConstraints.InheritTooltip)\n        : (node.constraints & ConnectorConstraints.InheritTooltip);\n    var objectTooltip = (node instanceof Node) ? (node.constraints & NodeConstraints.Tooltip)\n        : (node.constraints & ConnectorConstraints.Tooltip);\n    var isMouseBased = ((!inheritTooltip && objectTooltip ? node.tooltip.relativeMode\n        : diagram.tooltip.relativeMode) === 'Mouse') ? true : false;\n    if (type === 'Mouse') {\n        isMouseBased = true;\n    }\n    else if (type === 'Object') {\n        isMouseBased = false;\n    }\n    var offset = tooltipOffset(node, mousePosition, diagram, isMouseBased);\n    var rulerSize = getRulerSize(diagram);\n    return { x: offset.x + rulerSize.width, y: offset.y + rulerSize.height };\n}\n/**\n * tooltipOffset method \\\n *\n * @returns { PointModel } tooltipOffset method .\\\n * @param {NodeModel | ConnectorModel} node - provide the node  value.\n * @param { PointModel} mousePosition - provide the mousePosition  value.\n * @param { Diagram } diagram - provide the diagram  value.\n * @param { boolean} isMouseBased - provide the isMouseBased  value.\n * @private\n */\nfunction tooltipOffset(node, mousePosition, diagram, isMouseBased) {\n    var point = {};\n    //let scale: number = diagram.scroller.transform.scale;\n    var element = document.getElementById(diagram.element.id);\n    var bounds = node.wrapper.bounds;\n    var rect = element.getBoundingClientRect();\n    /* eslint-enable */\n    //let horizontalOffset: number = diagram.scroller.horizontalOffset;\n    //let verticalOffset: number = diagram.scroller.verticalOffset;\n    switch (diagram.tooltipObject.position) {\n        case 'BottomCenter':\n            point = offsetPoint(mousePosition, bounds.bottomCenter, diagram, isMouseBased, (rect.width / 2), rect.height);\n            break;\n        case 'BottomLeft':\n        case 'LeftBottom':\n            point = offsetPoint(mousePosition, bounds.bottomLeft, diagram, isMouseBased, 0, rect.height);\n            break;\n        case 'BottomRight':\n        case 'RightBottom':\n            point = offsetPoint(mousePosition, bounds.bottomRight, diagram, isMouseBased, rect.width, rect.height);\n            break;\n        case 'LeftCenter':\n            point = offsetPoint(mousePosition, bounds.middleLeft, diagram, isMouseBased, 0, (rect.height / 2));\n            break;\n        case 'LeftTop':\n        case 'TopLeft':\n            point = offsetPoint(mousePosition, bounds.topLeft, diagram, isMouseBased, 0, 0);\n            break;\n        case 'RightCenter':\n            point = offsetPoint(mousePosition, bounds.middleRight, diagram, isMouseBased, rect.width, (rect.height / 2));\n            break;\n        case 'RightTop':\n        case 'TopRight':\n            point = offsetPoint(mousePosition, bounds.topRight, diagram, isMouseBased, rect.width, 0);\n            break;\n        case 'TopCenter':\n            point = offsetPoint(mousePosition, bounds.topCenter, diagram, isMouseBased, (rect.width / 2), 0);\n            break;\n    }\n    return point;\n}\n/**\n * offsetPoint method \\\n *\n * @returns { PointModel } offsetPoint method .\\\n * @param { PointModel} mousePosition - provide the mousePosition  value.\n * @param { PointModel } bound - provide the diagram  value.\n * @param { Diagram} diagram - provide the isMouseBased  value.\n * @param { boolean} isMouseBased - provide the isMouseBased  value.\n * @param { number} x - provide the isMouseBased  value.\n * @param { number} y - provide the isMouseBased  value.\n * @private\n */\nfunction offsetPoint(mousePosition, bound, diagram, isMouseBased, x, y) {\n    var point = {};\n    var scale = diagram.scroller.transform.scale;\n    var horizontalOffset = diagram.scroller.horizontalOffset;\n    var verticalOffset = diagram.scroller.verticalOffset;\n    point.x = (isMouseBased ? mousePosition.x : bound.x) * scale + horizontalOffset - x;\n    point.y = (isMouseBased ? mousePosition.y : bound.y) * scale + verticalOffset - y;\n    return point;\n}\n/**\n * Gets the fixed user handles symbol \\\n *\n * @returns { DiagramElement } Gets the fixed user handles symbol .\\\n * @param {ConnectorFixedUserHandleModel | NodeFixedUserHandleModel} options - provide the options  value.\n * @param { Canvas} fixedUserHandleContainer - provide the fixedUserHandleContainer  value.\n * @private\n */\nexport function initfixedUserHandlesSymbol(options, fixedUserHandleContainer) {\n    //let fixedUserHandleContent: PathElement | DiagramNativeElement;\n    var fixedUserHandleContent = new PathElement();\n    fixedUserHandleContent.data = options.pathData;\n    fixedUserHandleContent.height =\n        options.height > 10 ? options.height - (options.padding.bottom + options.padding.top) : options.height;\n    fixedUserHandleContent.width =\n        options.width > 10 ? options.width - (options.padding.left + options.padding.right) : options.width;\n    fixedUserHandleContent.visible = fixedUserHandleContainer.visible;\n    fixedUserHandleContent.id = fixedUserHandleContainer.id + '_shape';\n    fixedUserHandleContent.inversedAlignment = false;\n    fixedUserHandleContent.horizontalAlignment = 'Center';\n    fixedUserHandleContent.verticalAlignment = 'Center';\n    fixedUserHandleContent.style = {\n        fill: options.iconStrokeColor, strokeColor: options.iconStrokeColor,\n        strokeWidth: options.iconStrokeWidth\n    };\n    fixedUserHandleContent.setOffsetWithRespectToBounds(0.5, 0.5, 'Fraction');\n    fixedUserHandleContent.relativeMode = 'Object';\n    fixedUserHandleContent.description = fixedUserHandleContainer.description || '';\n    return fixedUserHandleContent;\n}\n/**\n * sort method \\\n *\n * @returns { (NodeModel | ConnectorModel)[] } sort method .\\\n * @param {(NodeModel | ConnectorModel)[]} objects - provide the options  value.\n * @param { DistributeOptions} option - provide the fixedUserHandleContainer  value.\n * @private\n */\nexport function sort(objects, option) {\n    var i = 0;\n    var j = 0;\n    var temp;\n    for (i = 0; i < objects.length; i++) {\n        var b = getBounds(objects[i].wrapper);\n        for (j = 0; j < objects.length; j++) {\n            var bounds = getBounds(objects[j].wrapper);\n            if (option === 'Top' || option === 'Bottom' || option === 'BottomToTop' || option === 'Middle') {\n                if (b.center.y > bounds.center.y) {\n                    temp = objects[i];\n                    objects[i] = objects[j];\n                    objects[j] = temp;\n                }\n            }\n            else {\n                if (b.center.x > bounds.center.x) {\n                    temp = objects[i];\n                    objects[i] = objects[j];\n                    objects[j] = temp;\n                }\n            }\n        }\n    }\n    return objects;\n}\n/**\n * getAnnotationPosition method \\\n *\n * @returns {SegmentInfo } getAnnotationPosition method .\\\n * @param {PointModel[]} pts - provide the pts  value.\n * @param { PathAnnotation | ConnectorFixedUserHandle} annotation - provide the annotation  value.\n * @param { Rect } bound - provide the bound  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function getAnnotationPosition(pts, annotation, bound) {\n    //let angle: number;\n    //let getloop: SegmentInfo;\n    //let point: PointModel;\n    var getloop = getOffsetOfConnector(pts, annotation);\n    var angle = Point.findAngle(pts[getloop.index], pts[getloop.index + 1]);\n    var alignednumber = getAlignedPosition(annotation);\n    var point = Point.transform(getloop.point, angle + 45, alignednumber);\n    getloop.point = point;\n    getloop.angle = angle;\n    return getloop;\n}\n/**\n * getOffsetOfConnector method \\\n *\n * @returns {SegmentInfo } getOffsetOfConnector method .\\\n * @param {PointModel[]} points - provide the pts  value.\n * @param { PathAnnotation | ConnectorFixedUserHandle} annotation - provide the annotation  value.\n * @private\n */\nexport function getOffsetOfConnector(points, annotation) {\n    // eslint-disable-next-line\n    var length = 0;\n    var offset = annotation.offset;\n    var point;\n    var angle;\n    var lengths = [];\n    var prevLength;\n    var kCount;\n    for (var j = 0; j < points.length - 1; j++) {\n        length += Point.distancePoints(points[j], points[j + 1]);\n        lengths.push(length);\n    }\n    var offsetLength = offset * length;\n    for (var k = 0; k < lengths.length; k++) {\n        if (lengths[k] >= offsetLength) {\n            angle = Point.findAngle(points[k], points[k + 1]);\n            point = Point.transform(points[k], angle, offsetLength - (prevLength || 0));\n            kCount = k;\n            return { point: point, index: kCount };\n        }\n        prevLength = lengths[k];\n    }\n    return { point: point, index: kCount };\n}\n/**\n * getAlignedPosition method \\\n *\n * @returns {number } getAlignedPosition method .\\\n * @param {PointModel[]} annotation - provide the annotation  value.\n * @private\n */\nexport function getAlignedPosition(annotation) {\n    var cnst;\n    if ((annotation instanceof ConnectorFixedUserHandle)) {\n        cnst = 0;\n    }\n    else {\n        cnst = annotation.content === undefined ? 10 : 0;\n    }\n    var state = 0;\n    switch (annotation.alignment) {\n        case 'Center':\n            state = 0;\n            break;\n        case 'Before':\n            state = -((0) / 2 + cnst);\n            break;\n        case 'After':\n            state = ((0) / 2 + cnst);\n            break;\n    }\n    return state;\n}\n/**\n * alignLabelOnSegments method \\\n *\n * @returns {Alignment } alignLabelOnSegments method .\\\n * @param {PathAnnotation | ConnectorFixedUserHandle} obj - provide the obj  value.\n * @param { number } ang - provide the ang  value.\n * @param { PointModel[] } pts - provide the pts  value.\n * @private\n */\nexport function alignLabelOnSegments(obj, ang, pts) {\n    //let angle: number = ang % 360;\n    ang %= 360;\n    var fourty5 = 45;\n    var one35 = 135;\n    var two25 = 225;\n    var three15 = 315;\n    var vAlign;\n    var hAlign;\n    switch (obj.alignment) {\n        case 'Before':\n            if (ang >= fourty5 && ang <= one35) {\n                hAlign = 'right';\n                vAlign = obj.offset === 0.5 ? 'center' : 'top';\n            }\n            else if (ang >= two25 && ang <= three15) {\n                hAlign = 'left';\n                vAlign = obj.offset === 0.5 ? 'center' : 'bottom';\n            }\n            else if (ang > fourty5 && ang < two25) {\n                vAlign = 'top';\n                hAlign = obj.offset === 0.5 ? 'center' : 'right';\n            }\n            else {\n                vAlign = 'bottom';\n                hAlign = (obj.offset === 0.5) ? 'center' : 'left';\n            }\n            break;\n        case 'After':\n            if (ang >= fourty5 && ang <= one35) {\n                hAlign = 'left';\n                vAlign = obj.offset === 0.5 ? 'center' : 'top';\n            }\n            else if (ang >= two25 && ang <= three15) {\n                hAlign = 'right';\n                vAlign = obj.offset === 0.5 ? 'center' : 'bottom';\n            }\n            else if (ang > fourty5 && ang < two25) {\n                vAlign = 'bottom';\n                hAlign = obj.offset === 0.5 ? 'center' : 'right';\n            }\n            else {\n                vAlign = 'top';\n                hAlign = obj.offset === 0.5 ? 'center' : 'left';\n            }\n            break;\n        case 'Center':\n            hAlign = 'center';\n            vAlign = !isNullOrUndefined(obj.verticalAlignment) ? obj.verticalAlignment.toLowerCase() : \"center\";\n            break;\n    }\n    if (obj.offset === 0 || obj.offset === 1) {\n        //let direction: string;\n        var direction = getBezierDirection(pts[0], pts[1]);\n        switch (direction) {\n            case 'left':\n                hAlign = obj.offset === 0 ? 'right' : 'left';\n                break;\n            case 'right':\n                hAlign = obj.offset === 0 ? 'left' : 'right';\n                break;\n            case 'bottom':\n                vAlign = obj.offset === 0 ? 'top' : 'bottom';\n                break;\n            case 'top':\n                vAlign = obj.offset === 0 ? 'bottom' : 'top';\n                break;\n        }\n    }\n    return { hAlign: hAlign, vAlign: vAlign };\n}\n/**\n * getBezierDirection method \\\n *\n * @returns {string } getBezierDirection method .\\\n * @param {PointModel} src - provide the src  value.\n * @param { PointModel } tar - provide the tar  value.\n * @private\n */\nexport function getBezierDirection(src, tar) {\n    if (Math.abs(tar.x - src.x) > Math.abs(tar.y - src.y)) {\n        return src.x < tar.x ? 'right' : 'left';\n    }\n    else {\n        return src.y < tar.y ? 'bottom' : 'top';\n    }\n}\n/**\n * removeChildNodes method \\\n *\n * @returns {void } removeChildNodes method .\\\n * @param {NodeModel} node - provide the node  value.\n * @param { Diagram } diagram - provide the diagram  value.\n * @private\n */\nexport function removeChildNodes(node, diagram) {\n    if (node instanceof Node && node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n            if (diagram.nameTable[node.children[i]].children) {\n                removeChildNodes(node, diagram);\n            }\n            diagram.removeFromAQuad(diagram.nameTable[node.children[i]]);\n            diagram.removeObjectsFromLayer(diagram.nameTable[node.children[i]]);\n            delete diagram.nameTable[node.children[i]];\n        }\n    }\n}\n/**\n * getChild method \\\n *\n * @returns {string[] } getChild method .\\\n * @param {Canvas} child - provide the child  value.\n * @param { string[] } children - provide the children  value.\n * @private\n */\nfunction getChild(child, children) {\n    if (child && child.children && child.children.length > 0) {\n        for (var j = 0; j < child.children.length; j++) {\n            var subChild = child.children[j];\n            if (subChild instanceof Canvas) {\n                getChild(subChild, children);\n            }\n        }\n    }\n    if (children.indexOf(child.id) === -1) {\n        children.push(child.id);\n    }\n    return children;\n}\n/**\n * getSwimLaneChildren method \\\n *\n * @returns {string[] } getSwimLaneChildren method .\\\n * @param {NodeModel[]} nodes - provide the nodes  value.\n * @private\n */\nfunction getSwimLaneChildren(nodes) {\n    var children = [];\n    var node;\n    var grid;\n    var childTable;\n    var child;\n    var gridChild = 'childTable';\n    for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        if (node.shape.type === 'SwimLane') {\n            grid = node.wrapper.children[0];\n            childTable = grid[gridChild];\n            for (var _i = 0, _a = Object.keys(childTable); _i < _a.length; _i++) {\n                var key = _a[_i];\n                child = childTable[key];\n                children = getChild(child, children);\n            }\n        }\n    }\n    return children;\n}\n/**\n * removeUnnecessaryNodes method \\\n *\n * @returns {void } removeUnnecessaryNodes method .\\\n * @param {string[]} children - provide the children  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\nfunction removeUnnecessaryNodes(children, diagram) {\n    var nodes = diagram.nodes;\n    if (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            if (children.indexOf(nodes[i].id) !== -1) {\n                nodes.splice(i, 1);\n                i--;\n            }\n        }\n    }\n}\n/**\n * serialize method \\\n *\n * @returns {string } serialize method .\\\n * @param {Diagram} model - provide the model  value.\n * @private\n */\nexport function serialize(model) {\n    var removeNodes = getSwimLaneChildren(model.nodes);\n    var clonedObject = cloneObject(model, model.getCustomProperty);\n    clonedObject.selectedItems.nodes = [];\n    clonedObject.selectedItems.connectors = [];\n    clonedObject.selectedItems.wrapper = null;\n    if (model.serializationSettings.preventDefaults) {\n        clonedObject = preventDefaults(clonedObject, model);\n    }\n    removeUnnecessaryNodes(removeNodes, clonedObject);\n    return JSON.stringify(clonedObject);\n}\n/**\n * preventDefaults method \\\n *\n * @returns {string } preventDefaults method .\\\n * @param {Object} clonedObject - provide the clonedObject  value.\n * @param {object} model - provide the model  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @param {boolean} isNodeShape - provide the isNodeShape  value.\n * @private\n */\n// eslint-disable-next-line\nfunction preventDefaults(clonedObject, model, defaultObject, isNodeShape) {\n    defaultObject = getConstructor(model, defaultObject);\n    var properties = [];\n    properties = properties.concat(Object.keys(clonedObject));\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n        var property = properties_1[_i];\n        if (model instanceof Node) {\n            isNodeShape = (property === 'shape') ? true : false;\n        }\n        if (clonedObject[property] instanceof Array) {\n            preventArrayDefaults(clonedObject, defaultObject, model, property);\n        }\n        else if ((clonedObject[property] instanceof Object) && defaultObject && defaultObject[property]) {\n            if (property !== 'wrapper') {\n                clonedObject[property] = preventDefaults(clonedObject[property], model[property], defaultObject[property], isNodeShape);\n            }\n        }\n        else if ((defaultObject && clonedObject[property] === defaultObject[property]) || clonedObject[property] === undefined) {\n            if (!(isNodeShape && property === 'type') && !(model instanceof SwimLane && property === 'orientation')) {\n                delete clonedObject[property];\n            }\n        }\n        if (JSON.stringify(clonedObject[property]) === '[]' ||\n            JSON.stringify(clonedObject[property]) === '{}' ||\n            clonedObject[property] === undefined) {\n            delete clonedObject[property];\n        }\n    }\n    return clonedObject;\n}\n/**\n * preventArrayDefaults method \\\n *\n * @returns {void } preventArrayDefaults method .\\\n * @param {object} clonedObject - provide the clonedObject  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @param {object} model - provide the model  value.\n * @param {string} property - provide the property  value.\n * @private\n */\n// eslint-disable-next-line\nfunction preventArrayDefaults(clonedObject, defaultObject, model, property) {\n    if (clonedObject[property].length === 0) {\n        delete clonedObject[property];\n        // eslint-disable-next-line\n    }\n    else if (clonedObject[property].every(function (element) { return typeof element === 'number'; })) {\n        var i = void 0;\n        var isSameArray = true;\n        for (i = 0; i < clonedObject[property].length; i++) {\n            if (isSameArray && clonedObject[property][i] === defaultObject[property][i]) {\n                isSameArray = true;\n            }\n            else {\n                isSameArray = false;\n            }\n        }\n        if (isSameArray) {\n            delete clonedObject[property];\n        }\n    }\n    else {\n        var i = void 0;\n        if (property === 'layers') {\n            clonedObject[property].splice(0, 1);\n            if (clonedObject[property].length === 0) {\n                delete clonedObject[property];\n            }\n        }\n        if (clonedObject[property]) {\n            for (i = clonedObject[property].length - 1; i >= 0; i--) {\n                if (property === 'nodes' || property === 'connectors') {\n                    clonedObject[property][i].wrapper = null;\n                }\n                if (property !== 'dataManager') {\n                    clonedObject[property][i] = preventDefaults(clonedObject[property][i], model[property][i], (defaultObject[property] !== undefined ? defaultObject[property][i] : []));\n                    if (JSON.stringify(clonedObject[property][i]) === '[]' ||\n                        JSON.stringify(clonedObject[property][i]) === '{}' ||\n                        clonedObject[property][i] === undefined) {\n                        clonedObject[property].splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n}\n/* eslint-disable */\n/**\n * getConstructor method \\\n *\n * @returns {object } getConstructor method .\\\n * @param {object} model - provide the model  value.\n * @param {object} defaultObject - provide the defaultObject  value.\n * @private\n */\n/* tslint:disable */\nfunction getConstructor(model, defaultObject) {\n    var obj = [];\n    var constructor;\n    var parent = new Diagram();\n    var getClassName = 'getClassName';\n    if (model[getClassName]) {\n        switch (model[getClassName]()) {\n            case 'Diagram':\n                constructor = new Diagram();\n                break;\n            case 'Node':\n                constructor = new Node(parent, '', obj);\n                break;\n            case 'Path':\n                constructor = new Path(parent, '', obj);\n                break;\n            case 'Native':\n                constructor = new Native(parent, '', obj);\n                break;\n            case 'Html':\n                constructor = new Html(parent, '', obj);\n                break;\n            case 'Image':\n                constructor = new Image(parent, '', obj);\n                break;\n            case 'Text':\n                constructor = new Text(parent, '', obj);\n                break;\n            case 'BasicShape':\n                constructor = new BasicShape(parent, '', obj);\n                break;\n            case 'FlowShape':\n                constructor = new FlowShape(parent, '', obj);\n                break;\n            case 'BpmnShape':\n                constructor = new BpmnShape(parent, '', obj);\n                break;\n            case 'UmlActivityShape':\n                constructor = new UmlActivityShape(parent, '', obj);\n                break;\n            case 'UmlClassifierShape':\n                constructor = new UmlClassifierShape(parent, '', obj);\n                break;\n            case 'SwimLane':\n                constructor = new SwimLane(parent, '', obj);\n                if (model.header) {\n                    constructor.header = new Header(parent, '', obj);\n                    constructor.header.style.fill = '';\n                }\n                break;\n            case 'ShapeAnnotation':\n                constructor = new ShapeAnnotation(parent, '', obj);\n                break;\n            case 'PointPort':\n                constructor = new PointPort(parent, '', obj);\n                break;\n            case 'BpmnGateway':\n                constructor = new BpmnGateway(parent, '', obj);\n                break;\n            case 'BpmnDataObject':\n                constructor = new BpmnDataObject(parent, '', obj);\n                break;\n            case 'BpmnEvent':\n                constructor = new BpmnEvent(parent, '', obj);\n                break;\n            case 'BpmnSubEvent':\n                constructor = new BpmnSubEvent(parent, '', obj);\n                break;\n            case 'BpmnActivity':\n                constructor = new BpmnActivity(parent, '', obj);\n                break;\n            case 'BpmnAnnotation':\n                constructor = new BpmnAnnotation(parent, '', obj);\n                break;\n            case 'MethodArguments':\n                constructor = new MethodArguments(parent, '', obj);\n                break;\n            case 'UmlClassAttribute':\n                constructor = new UmlClassAttribute(parent, '', obj);\n                break;\n            case 'UmlClassMethod':\n                constructor = new UmlClassMethod(parent, '', obj);\n                break;\n            case 'UmlClass':\n                constructor = new UmlClass(parent, '', obj);\n                break;\n            case 'UmlInterface':\n                constructor = new UmlInterface(parent, '', obj);\n                break;\n            case 'UmlEnumerationMember':\n                constructor = new UmlEnumerationMember(parent, '', obj);\n                break;\n            case 'UmlEnumeration':\n                constructor = new UmlEnumeration(parent, '', obj);\n                break;\n            case 'Lane':\n                constructor = new Lane(parent, '', obj);\n                break;\n            case 'Phase':\n                constructor = new Phase(parent, '', obj);\n                break;\n            case 'ChildContainer':\n                constructor = new ChildContainer();\n                break;\n            case 'Connector':\n                constructor = new Connector(parent, '', obj);\n                break;\n            case 'StraightSegment':\n                constructor = new StraightSegment(parent, '', obj);\n                break;\n            case 'BezierSegment':\n                constructor = new BezierSegment(parent, '', obj);\n                break;\n            case 'OrthogonalSegment':\n                constructor = new OrthogonalSegment(parent, '', obj);\n                break;\n            case 'PathAnnotation':\n                constructor = new PathAnnotation(parent, '', obj);\n                break;\n            case 'Stop':\n                constructor = new Stop(parent, '', obj);\n                break;\n            case 'Point':\n                if (!defaultObject) {\n                    constructor = new Point(parent, '', obj);\n                }\n                else {\n                    constructor = defaultObject;\n                }\n                break;\n            case 'UserHandle':\n                constructor = new UserHandle(parent, '', obj);\n                break;\n            case 'Command':\n                constructor = new Command(parent, '', obj);\n                break;\n        }\n    }\n    else {\n        constructor = defaultObject;\n    }\n    return constructor;\n}\n/* eslint-enable */\n/* eslint-disable */\n/** @private */\nexport function deserialize(model, diagram) {\n    diagram.enableServerDataBinding(false);\n    var blazorAction = diagram.blazorActions;\n    diagram.blazorActions = diagram.addConstraints(blazorAction, BlazorAction.ClearObject);\n    diagram.clear();\n    diagram.blazorActions = diagram.removeConstraints(blazorAction, BlazorAction.ClearObject);\n    diagram.protectPropertyChange(true);\n    var map = diagram.dataSourceSettings.doBinding;\n    var nodeTemp = diagram.setNodeTemplate;\n    var getDescription = diagram.getDescription;\n    var getCustomProperty = diagram.getCustomProperty;\n    var commands = {};\n    for (var _i = 0, _a = diagram.commandManager.commands; _i < _a.length; _i++) {\n        var command = _a[_i];\n        commands[command.name] = { execute: command.execute, canExecute: command.canExecute };\n    }\n    var arrangeTickHorizontal = diagram.rulerSettings.horizontalRuler.arrangeTick;\n    var arrangeTickVertical = diagram.rulerSettings.verticalRuler.arrangeTick;\n    var getLayoutInfo = diagram.layout.getLayoutInfo;\n    var getBranch = diagram.layout.getBranch;\n    var nodeDefaults = diagram.getNodeDefaults;\n    var connectorDefaults = diagram.getConnectorDefaults;\n    var dataObj = JSON.parse(model);\n    dataObj = upgrade(dataObj);\n    diagram.contextMenuSettings = dataObj.contextMenuSettings || {};\n    diagram.constraints = dataObj.constraints || DiagramConstraints.Default;\n    diagram.tool = dataObj.tool || DiagramTools.Default;\n    diagram.bridgeDirection = dataObj.bridgeDirection || 'Top';\n    diagram.pageSettings = dataObj.pageSettings || {};\n    diagram.drawingObject = dataObj.drawingObject || undefined;\n    diagram.tooltip = dataObj.tooltip || {};\n    diagram.addInfo = dataObj.addInfo || undefined;\n    diagram.getDescription = getDescription;\n    diagram.scrollSettings = dataObj.scrollSettings || {};\n    diagram.commandManager = dataObj.commandManager || {};\n    diagram.layers = dataObj.layers || [];\n    diagram.rulerSettings.horizontalRuler.arrangeTick = arrangeTickHorizontal;\n    diagram.rulerSettings.verticalRuler.arrangeTick = arrangeTickVertical;\n    for (var _b = 0, _c = diagram.commandManager.commands; _b < _c.length; _b++) {\n        var cmd = _c[_b];\n        if (commands[cmd.name]) {\n            cmd.execute = commands[cmd.name].execute;\n            cmd.canExecute = commands[cmd.name].canExecute;\n        }\n    }\n    diagram.backgroundColor = dataObj.backgroundColor || 'transparent';\n    diagram.basicElements = dataObj.basicElements || [];\n    diagram.connectors = dataObj.connectors || [];\n    diagram.dataSourceSettings = dataObj.dataSourceSettings || {};\n    diagram.dataSourceSettings.doBinding = map;\n    diagram.height = dataObj.height || '100%';\n    diagram.setNodeTemplate = nodeTemp;\n    diagram.getConnectorDefaults = connectorDefaults;\n    diagram.getNodeDefaults = nodeDefaults;\n    diagram.getCustomProperty = getCustomProperty;\n    diagram.mode = dataObj.mode || 'SVG';\n    if (dataObj.nodes) {\n        for (var i = 0; i < dataObj.nodes.length; i++) {\n            if (dataObj.nodes[i].shape && dataObj.nodes[i].shape.type === 'SwimLane') {\n                if (dataObj.nodes[i].wrapper == null) {\n                    {\n                        dataObj.nodes[i].wrapper = {\n                            actualSize: { width: dataObj.nodes[i].width, height: dataObj.nodes[i].height },\n                            offsetX: dataObj.nodes[i].offsetX, offsetY: dataObj.nodes[i].offsetY\n                        };\n                    }\n                }\n                pasteSwimLane(dataObj.nodes[i], undefined, undefined, undefined, undefined, true);\n            }\n        }\n    }\n    diagram.nodes = dataObj.nodes || [];\n    diagram.rulerSettings = dataObj.rulerSettings || {};\n    diagram.snapSettings = dataObj.snapSettings || {};\n    diagram.width = dataObj.width || '100%';\n    diagram.layout = dataObj.layout || {};\n    if (dataObj.layout.type !== \"None\") {\n        diagram.canLayout = false;\n    }\n    diagram.layout.getLayoutInfo = getFunction(getLayoutInfo);\n    diagram.layout.getBranch = getFunction(getBranch);\n    diagram.diagramActions = 0;\n    diagram.isLoading = true;\n    diagram.protectPropertyChange(false);\n    var key = 'refresh';\n    var component;\n    for (var i = 0; i < diagram.views.length; i++) {\n        component = diagram.views[diagram.views[i]];\n        diagram.blazorActions = diagram.addConstraints(blazorAction, BlazorAction.ClearObject);\n        component.refresh();\n        diagram.blazorActions = diagram.removeConstraints(blazorAction, BlazorAction.ClearObject);\n        if (component instanceof Diagram) {\n            diagram.element.classList.add('e-diagram');\n        }\n    }\n    if (dataObj.selectedItems) {\n        dataObj.selectedItems.nodes = [];\n        dataObj.selectedItems.connectors = [];\n    }\n    diagram.selectedItems = dataObj.selectedItems;\n    diagram.enableServerDataBinding(true);\n    diagram.canLayout = true;\n    return dataObj;\n}\n/* eslint-enable */\n/**\n * upgrade method \\\n *\n * @returns {Diagram } upgrade method .\\\n * @param {Diagram} dataObj - provide the model  value.\n * @private\n */\nexport function upgrade(dataObj) {\n    if (dataObj && (dataObj.version === undefined || (dataObj.version < 17.1)) && dataObj.nodes) {\n        var nodes = dataObj.nodes;\n        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n            var node = nodes_1[_i];\n            if (node && node.ports && node.ports.length > 0) {\n                for (var _a = 0, _b = node.ports; _a < _b.length; _a++) {\n                    var port = _b[_a];\n                    if (port && port.constraints && port.constraints === PortConstraints.None) {\n                        port.constraints = PortConstraints.Default;\n                    }\n                }\n            }\n        }\n    }\n    return dataObj;\n}\n/**\n * updateStyle method \\\n *\n * @returns {void } updateStyle method .\\\n * @param {TextStyleModel} changedObject - provide the changedObject  value.\n * @param {DiagramElement} target - provide the target  value.\n * @private\n */\nexport function updateStyle(changedObject, target) {\n    //since text style model is the super set of shape style model, we used text style model\n    var style = target.style;\n    var textElement = target;\n    target.canApplyStyle = true;\n    for (var _i = 0, _a = Object.keys(changedObject); _i < _a.length; _i++) {\n        var key = _a[_i];\n        switch (key) {\n            case 'fill':\n                style.fill = changedObject.fill;\n                if (style instanceof StrokeStyle) {\n                    /* tslint:disable:no-string-literal */\n                    style['fill'] = 'transparent';\n                }\n                break;\n            case 'textOverflow':\n                style.textOverflow = changedObject.textOverflow;\n                break;\n            case 'opacity':\n                style.opacity = changedObject.opacity;\n                break;\n            case 'strokeColor':\n                style.strokeColor = changedObject.strokeColor;\n                break;\n            case 'strokeDashArray':\n                style.strokeDashArray = changedObject.strokeDashArray;\n                break;\n            case 'strokeWidth':\n                style.strokeWidth = changedObject.strokeWidth;\n                break;\n            case 'bold':\n                style.bold = changedObject.bold;\n                break;\n            case 'color':\n                style.color = changedObject.color;\n                break;\n            case 'textWrapping':\n                style.textWrapping = changedObject.textWrapping;\n                break;\n            case 'fontFamily':\n                style.fontFamily = changedObject.fontFamily;\n                break;\n            case 'fontSize':\n                style.fontSize = changedObject.fontSize;\n                break;\n            case 'italic':\n                style.italic = changedObject.italic;\n                break;\n            case 'textAlign':\n                style.textAlign = changedObject.textAlign;\n                break;\n            case 'whiteSpace':\n                style.whiteSpace = changedObject.whiteSpace;\n                break;\n            case 'textDecoration':\n                style.textDecoration = changedObject.textDecoration;\n                break;\n            case 'gradient':\n                if (style.gradient) {\n                    updateGradient(changedObject.gradient, style.gradient);\n                    break;\n                }\n        }\n    }\n    if (target instanceof TextElement) {\n        textElement.refreshTextElement();\n    }\n}\n/**\n * updateGradient method \\\n *\n * @returns {void } updateGradient method .\\\n * @param {GradientModel | LinearGradientModel | RadialGradientModel} changedGradient - provide the changedGradient  value.\n * @param {GradientModel | LinearGradientModel | RadialGradientModel} targetGradient - provide the targetGradient  value.\n * @private\n */\nfunction updateGradient(changedGradient, targetGradient) {\n    for (var _i = 0, _a = Object.keys(changedGradient); _i < _a.length; _i++) {\n        var key = _a[_i];\n        switch (key) {\n            case 'type':\n                targetGradient.type = changedGradient.type;\n                break;\n            case 'x1':\n                targetGradient.x1 = changedGradient.x1;\n                break;\n            case 'x2':\n                targetGradient.x2 = changedGradient.x2;\n                break;\n            case 'y1':\n                targetGradient.y1 = changedGradient.y1;\n                break;\n            case 'y2':\n                targetGradient.y2 = changedGradient.y2;\n                break;\n            case 'cx':\n                targetGradient.cx = changedGradient.cx;\n                break;\n            case 'cy':\n                targetGradient.cy = changedGradient.cy;\n                break;\n            case 'fx':\n                targetGradient.fx = changedGradient.fx;\n                break;\n            case 'fy':\n                targetGradient.fy = changedGradient.fy;\n                break;\n            case 'r':\n                targetGradient.r = changedGradient.r;\n                break;\n            case 'stops':\n                targetGradient.stops = changedGradient.stops;\n                break;\n        }\n    }\n}\n/* eslint-disable */\n/**\n * updateHyperlink method \\\n *\n * @returns {void } updateHyperlink method .\\\n * @param {HyperlinkModel} changedObject - provide the changedObject  value.\n * @param {DiagramElement} target - provide the target  value.\n * @param {AnnotationModel} actualAnnotation - provide the actualAnnotation  value.\n * @private\n */\nexport function updateHyperlink(changedObject, target, actualAnnotation) {\n    var textElement = target;\n    var hyperlink = textElement.hyperlink;\n    for (var _i = 0, _a = Object.keys(changedObject); _i < _a.length; _i++) {\n        var key = _a[_i];\n        switch (key) {\n            case 'color':\n                textElement.style.color = hyperlink.color = changedObject.color;\n                break;\n            case 'content':\n                textElement.content = hyperlink.content = changedObject.content || hyperlink.link;\n                break;\n            case 'link':\n                var labelStyle = actualAnnotation.style;\n                textElement.style.color = changedObject.link ? hyperlink.color : labelStyle.color;\n                textElement.style.textDecoration = changedObject.link ? hyperlink.textDecoration : actualAnnotation.style.textDecoration;\n                textElement.content = changedObject.link ? hyperlink.content || changedObject.link : actualAnnotation.content;\n                hyperlink.link = changedObject.link;\n                break;\n            case 'textDecoration':\n                textElement.style.textDecoration = hyperlink.textDecoration = changedObject.textDecoration;\n                break;\n        }\n    }\n}\n/* eslint-enable */\n/**\n * updateShapeContent method \\\n *\n * @returns {void } updateShapeContent method .\\\n * @param {DiagramElement} content - provide the content  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function updateShapeContent(content, actualObject, diagram) {\n    content.width = actualObject.width;\n    content.height = actualObject.height;\n    content.minHeight = actualObject.minHeight;\n    content.maxHeight = actualObject.maxHeight;\n    content.minWidth = actualObject.minWidth;\n    content.maxWidth = actualObject.maxWidth;\n    content.horizontalAlignment = actualObject.wrapper.children[0].horizontalAlignment;\n    content.verticalAlignment = actualObject.wrapper.children[0].verticalAlignment;\n    content.relativeMode = actualObject.wrapper.children[0].relativeMode;\n    content.visible = actualObject.wrapper.children[0].visible;\n    if (actualObject.shape instanceof Text) {\n        content.margin = actualObject.shape.margin;\n    }\n    content.id = actualObject.wrapper.children[0].id;\n    content.style = actualObject.style;\n    //let view: View;\n    for (var _i = 0, _a = diagram.views; _i < _a.length; _i++) {\n        var elementId = _a[_i];\n        removeElement(actualObject.id + '_groupElement', elementId);\n        removeElement(actualObject.id + '_content_groupElement', elementId);\n        removeElement(actualObject.id + '_html_element', elementId);\n    }\n    actualObject.wrapper.children.splice(0, 1);\n    actualObject.wrapper.children.splice(0, 0, content);\n}\n/* eslint-disable */\n/**\n * updateShape method \\\n *\n * @returns {void } updateShape method .\\\n * @param {Node} node - provide the node  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Node} oldObject - provide the oldObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @private\n */\nexport function updateShape(node, actualObject, oldObject, diagram) {\n    var content = new DiagramElement();\n    var i;\n    //let textStyle: TextStyleModel; let nodeStyle: TextStyleModel;\n    switch (node.shape.type) {\n        case 'Path':\n            var pathContent = new PathElement();\n            pathContent.data = actualObject.shape.data;\n            content = pathContent;\n            updateShapeContent(content, actualObject, diagram);\n            break;\n        case 'Image':\n            var imageContent = new ImageElement();\n            imageContent.source = actualObject.shape.source;\n            imageContent.imageAlign = actualObject.shape.align;\n            imageContent.imageScale = actualObject.shape.scale;\n            content = imageContent;\n            updateShapeContent(content, actualObject, diagram);\n            break;\n        case 'Text':\n            //issue\n            var textContent = new TextElement();\n            //  (textContent as TextElement).content = (node.shape as TextModel).content;\n            content = textContent;\n            updateShapeContent(content, actualObject, diagram);\n            break;\n        case 'Basic':\n            var element = ((isBlazor() ? actualObject.shape.basicShape === 'Rectangle' :\n                actualObject.shape.shape === 'Rectangle')) ? new DiagramElement() : new PathElement();\n            if ((!isBlazor() && actualObject.shape.shape === 'Polygon') ||\n                (isBlazor() && actualObject.shape.basicShape === 'Polygon')) {\n                element.data = getPolygonPath(actualObject.shape.points);\n            }\n            else {\n                element.data = getBasicShape((isBlazor() ? actualObject.shape.basicShape :\n                    actualObject.shape.shape));\n            }\n            updateShapeContent(content, actualObject, diagram);\n            if ((!isBlazor() && actualObject.shape.shape === 'Rectangle') ||\n                (isBlazor() && actualObject.shape.basicShape === 'Rectangle')) {\n                element.cornerRadius = actualObject.shape.cornerRadius;\n            }\n            content = element;\n            break;\n        case 'Flow':\n            /* eslint-disable */\n            var flowShapeElement = new PathElement();\n            var shape = (isBlazor()) ? actualObject.shape.flowShape : actualObject.shape.shape;\n            flowShapeElement.data = getFlowShape(shape);\n            content = flowShapeElement;\n            updateShapeContent(content, actualObject, diagram);\n            break;\n        case 'Native':\n            var nativeContent = new DiagramNativeElement(node.id, diagram.element.id);\n            nativeContent.content = actualObject.shape.content;\n            nativeContent.scale = actualObject.shape.scale;\n            content = nativeContent;\n            updateShapeContent(content, actualObject, diagram);\n            break;\n        case 'HTML':\n            var htmlContent = new DiagramHtmlElement(actualObject.id, diagram.element.id);\n            htmlContent.content = actualObject.shape.content;\n            content = htmlContent;\n            updateShapeContent(content, actualObject, diagram);\n    }\n    if (node.shape.type === undefined || node.shape.type === oldObject.shape.type || (isBlazor() && node.shape.type === 'UmlActivity')) {\n        updateContent(node, actualObject, diagram, oldObject);\n    }\n    else {\n        content.width = actualObject.wrapper.children[0].width;\n        content.height = actualObject.wrapper.children[0].height;\n        if (actualObject.shape instanceof Text) {\n            content.margin = actualObject.shape.margin;\n        }\n        content.style = actualObject.style;\n        actualObject.wrapper.children[0] = content;\n    }\n}\n/* eslint-enable */\n/**\n * updateContent method \\\n *\n * @returns {void } updateContent method .\\\n * @param {Node} newValues - provide the newValues  value.\n * @param {Node} actualObject - provide the actualObject  value.\n * @param {Diagram} diagram - provide the diagram  value.\n * @param {Node} oldObject - provide the oldObject  value.\n * @private\n */\nexport function updateContent(newValues, actualObject, diagram, oldObject) {\n    if (Object.keys(newValues.shape).length > 0) {\n        if (actualObject.shape.type === 'Path' && newValues.shape.data !== undefined) {\n            actualObject.wrapper.children[0].data = newValues.shape.data;\n        }\n        else if (actualObject.shape.type === 'Text' && newValues.shape.content !== undefined) {\n            actualObject.wrapper.children[0].content = newValues.shape.content;\n        }\n        else if (actualObject.shape.type === 'Image' && newValues.shape.source !== undefined) {\n            actualObject.wrapper.children[0].source = newValues.shape.source;\n        }\n        else if (actualObject.shape.type === 'Native') {\n            var nativeElement = void 0;\n            for (var i = 0; i < diagram.views.length; i++) {\n                nativeElement = getDiagramElement(actualObject.wrapper.children[0].id + '_native_element', diagram.views[i]);\n                if (newValues.shape.content !== undefined && nativeElement) {\n                    nativeElement.removeChild(nativeElement.children[0]);\n                    actualObject.wrapper.children[0].content = newValues.shape.content;\n                    nativeElement.appendChild(getContent(actualObject.wrapper.children[0], false));\n                }\n            }\n            actualObject.wrapper.children[0].scale = newValues.shape.scale ?\n                newValues.shape.scale : actualObject.wrapper.children[0].scale;\n        }\n        else if (actualObject.shape.type === 'HTML') {\n            var htmlElement = void 0;\n            for (var i = 0; i < diagram.views.length; i++) {\n                htmlElement = getDiagramElement(actualObject.wrapper.children[0].id + '_html_element', diagram.views[i]);\n                if (htmlElement) {\n                    htmlElement.removeChild(htmlElement.children[0]);\n                    actualObject.wrapper.children[0].content = newValues.shape.content;\n                    htmlElement.appendChild(getContent(actualObject.wrapper.children[0], true));\n                }\n            }\n        }\n        else if (actualObject.shape.type === 'Flow' && ((isBlazor() && newValues.shape.flowShape !== undefined) ||\n            newValues.shape.shape !== undefined)) {\n            actualObject.shape.shape = isBlazor() ? newValues.shape.flowShape :\n                newValues.shape.shape;\n            var shapes = actualObject.shape.shape;\n            var flowshapedata = getFlowShape(shapes.toString());\n            actualObject.wrapper.children[0].data = flowshapedata;\n        }\n        else if (actualObject.shape.type === 'UmlActivity' &&\n            ((isBlazor() && newValues.shape.umlActivityShape !== undefined) ||\n                (!isBlazor() && newValues.shape.shape !== undefined))) {\n            updateUmlActivityNode(actualObject, newValues);\n        }\n        else if (newValues.shape.cornerRadius !== undefined) {\n            actualObject.wrapper.children[0].cornerRadius = newValues.shape.cornerRadius;\n        }\n        else if (actualObject.shape.type === 'Basic' && (oldObject && oldObject.shape.shape === 'Rectangle')) {\n            var basicshape = new PathElement();\n            var basicshapedata = getBasicShape((isBlazor()) ? actualObject.shape.basicShape :\n                actualObject.shape.shape);\n            basicshape.data = basicshapedata;\n            var content = basicshape;\n            updateShapeContent(content, actualObject, diagram);\n        }\n        else if (((isBlazor() && newValues.shape.basicShape !== undefined) ||\n            newValues.shape.shape !== undefined)) {\n            actualObject.shape.shape = isBlazor() ? newValues.shape.basicShape :\n                newValues.shape.shape;\n            var shapes = actualObject.shape.shape;\n            var basicShapeData = getBasicShape(shapes.toString());\n            actualObject.wrapper.children[0].data = basicShapeData;\n        }\n    }\n    actualObject.wrapper.children[0].canMeasurePath = true;\n}\n/**\n * updateUmlActivityNode method \\\n *\n * @returns {void } updateUmlActivityNode method .\\\n * @param {Node} actualObject - provide the newValues  value.\n * @param {Node} newValues - provide the actualObject  value.\n * @private\n */\nexport function updateUmlActivityNode(actualObject, newValues) {\n    if (!isBlazor()) {\n        actualObject.shape.shape = newValues.shape.shape;\n    }\n    else {\n        actualObject.shape.umlActivityShape = newValues.shape.umlActivityShape;\n    }\n    var shapes = !isBlazor() ? actualObject.shape.shape :\n        actualObject.shape.umlActivityShape;\n    var umlActivityShapeData = getUMLActivityShape(shapes.toString());\n    if ((isBlazor() && actualObject.shape.umlActivityShape === 'InitialNode') ||\n        (!isBlazor() && actualObject.shape.shape === 'InitialNode')) {\n        actualObject.wrapper.children[0].style.fill = 'black';\n    }\n    else if ((!isBlazor() && (actualObject.shape.shape === 'ForkNode' ||\n        actualObject.shape.shape === 'JoinNode')) ||\n        ((isBlazor() && (actualObject.shape.umlActivityShape === 'ForkNode' ||\n            actualObject.shape.umlActivityShape === 'JoinNode')))) {\n        actualObject.wrapper.children[0].style.fill = 'black';\n    }\n    else if ((!isBlazor() && actualObject.shape.shape === 'FinalNode') ||\n        (isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode')) {\n        if (actualObject instanceof Node) {\n            actualObject.wrapper = getUMLFinalNode(actualObject);\n        }\n    }\n    if (umlActivityShapeData) {\n        actualObject.wrapper.children[0].data = umlActivityShapeData;\n    }\n}\n/**\n * getUMLFinalNode method \\\n *\n * @returns {Canvas } getUMLFinalNode method .\\\n * @param {Node} node - provide the newValues  value.\n * @private\n */\nexport function getUMLFinalNode(node) {\n    var finalNodeShape = new Canvas();\n    finalNodeShape.style.fill = 'transparent';\n    //childNode0\n    var pathData = 'M 25 50 C 11.21 50 0 38.79 0 25 C 0 11.21 11.21 0 25 0 C 38.78 0 50 11.21 50 25' +\n        ' C 50 38.79 38.78 50 25 50';\n    var innerFinalNode = new PathElement();\n    innerFinalNode.data = pathData;\n    innerFinalNode.id = node.id + '_0_finalNode';\n    innerFinalNode.horizontalAlignment = 'Center';\n    innerFinalNode.verticalAlignment = 'Center';\n    innerFinalNode.relativeMode = 'Object';\n    innerFinalNode.style.strokeColor = node.style.strokeColor;\n    innerFinalNode.style.strokeWidth = node.style.strokeWidth;\n    //childNode1\n    var outerFinalNode = new PathElement();\n    outerFinalNode.data = pathData;\n    outerFinalNode.id = node.id + '_1_finalNode';\n    outerFinalNode.horizontalAlignment = 'Center';\n    outerFinalNode.verticalAlignment = 'Center';\n    outerFinalNode.relativeMode = 'Object';\n    outerFinalNode.style.fill = node.style.fill;\n    outerFinalNode.style.strokeColor = node.style.strokeColor;\n    outerFinalNode.style.strokeWidth = node.style.strokeWidth;\n    //append child and set style\n    finalNodeShape.children = [innerFinalNode, outerFinalNode];\n    finalNodeShape.children[0].width = node.width;\n    finalNodeShape.children[0].height = node.height;\n    finalNodeShape.children[1].height = node.height / 1.5;\n    finalNodeShape.children[1].width = node.width / 1.5;\n    finalNodeShape.style.strokeWidth = 0;\n    finalNodeShape.style.strokeColor = 'transparent';\n    return finalNodeShape;\n}\n/**\n * getUMLActivityShapes method \\\n *\n * @returns {DiagramElement } getUMLActivityShapes method .\\\n * @param {PathElement} umlActivityShape - provide the umlActivityShape  value.\n * @param {DiagramElement} content - provide the content  value.\n * @param {Node} node - provide the node  value.\n * @private\n */\nexport function getUMLActivityShapes(umlActivityShape, content, node) {\n    var shape = (isBlazor() ? node.shape.umlActivityShape : node.shape.shape);\n    var umlActivityShapeData = getUMLActivityShape(shape);\n    umlActivityShape.data = umlActivityShapeData;\n    content = umlActivityShape;\n    switch (shape) {\n        case 'StructuredNode':\n            if (node.annotations) {\n                for (var i = 0; i < node.annotations.length; i++) {\n                    node.annotations[i].content = '<<' + node.annotations[i].content + '>>';\n                }\n            }\n            content = umlActivityShape;\n            break;\n        case 'FinalNode':\n            content = getUMLFinalNode(node);\n            break;\n    }\n    return content;\n}\n/**\n * removeGradient method \\\n *\n * @returns {void } removeGradient method .\\\n * @param {string} svgId - provide the umlActivityShape  value.\n * @private\n */\nexport function removeGradient(svgId) {\n    removeElement(svgId + '_linear');\n    removeElement(svgId + '_radial');\n}\n/**\n * removeItem method \\\n *\n * @returns {void } removeItem method .\\\n * @param {string[]} array - provide the umlActivityShape  value.\n * @param {string} item - provide the umlActivityShape  value.\n * @private\n */\nexport function removeItem(array, item) {\n    var index = array.indexOf(item);\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\n/**\n * updateConnector method \\\n *\n * @returns {void } updateConnector method .\\\n * @param {Connector} connector - provide the connector  value.\n * @param {PointModel[]} points - provide the points  value.\n * @param {DiagramAction} diagramActions - provide the diagramActions  value.\n * @private\n */\nexport function updateConnector(connector, points, diagramActions) {\n    var anglePoint; //let srcDecorator: DecoratorModel;\n    //let targetPoint: PointModel;\n    connector.intermediatePoints = points;\n    connector.updateSegmentElement(connector, points, connector.wrapper.children[0], diagramActions);\n    var srcDecorator = connector.sourceDecorator;\n    if (connector.type === 'Bezier') {\n        var firstSegment = connector.segments[0];\n        var lastSegment = connector.segments[connector.segments.length - 1];\n        anglePoint = [!Point.isEmptyPoint(lastSegment.point2) ? lastSegment.point2 : lastSegment.bezierPoint2,\n            !Point.isEmptyPoint(firstSegment.point1) ? firstSegment.point1 : firstSegment.bezierPoint1];\n    }\n    else {\n        anglePoint = connector.intermediatePoints;\n    }\n    points = connector.clipDecorators(connector, points, diagramActions);\n    var element = connector.wrapper.children[0];\n    element.canMeasurePath = true;\n    element = connector.wrapper.children[1];\n    connector.updateDecoratorElement(element, points[0], anglePoint[1], srcDecorator);\n    //const targetPoint: PointModel = connector.targetPoint;\n    var tarDecorator = connector.targetDecorator;\n    element = connector.wrapper.children[2];\n    connector.updateDecoratorElement(element, points[points.length - 1], anglePoint[anglePoint.length - 2], tarDecorator);\n    connector.updateShapeElement(connector);\n}\n/**\n * getUserHandlePosition method \\\n *\n * @returns {PointModel } getUserHandlePosition method .\\\n * @param {SelectorModel} selectorItem - provide the connector  value.\n * @param {UserHandleModel} handle - provide the handle  value.\n * @param {Transforms} transform - provide the transform  value.\n * @private\n */\nexport function getUserHandlePosition(selectorItem, handle, transform) {\n    var wrapper = selectorItem.wrapper;\n    //let positionPoints: PointModel;\n    var bounds = wrapper.bounds;\n    var offset = handle.offset;\n    var size = handle.size / transform.scale;\n    var margin = handle.margin;\n    var point;\n    var left = wrapper.offsetX - wrapper.actualSize.width * wrapper.pivot.x;\n    var top = wrapper.offsetY - wrapper.actualSize.height * wrapper.pivot.y;\n    point = { x: 0, y: 0 };\n    if (selectorItem.nodes.length > 0) {\n        switch (handle.side) {\n            case 'Top':\n                point.x += left + bounds.width * offset;\n                point.y += top - (size / 2 + 12.5);\n                break;\n            case 'Bottom':\n                point.x += left + offset * bounds.width;\n                point.y += top + wrapper.actualSize.height + (size / 2 + 12.5);\n                break;\n            case 'Left':\n                point.x += left - (size / 2 + 12.5);\n                point.y += top + offset * bounds.height;\n                break;\n            case 'Right':\n                point.x += left + wrapper.actualSize.width + (size / 2 + 12.5);\n                point.y += top + offset * bounds.height;\n                break;\n        }\n        point.x += ((margin.left - margin.right) / transform.scale) +\n            (size / 2) * (handle.horizontalAlignment === 'Center' ? 0 : (handle.horizontalAlignment === 'Right' ? -1 : 1));\n        point.y += ((margin.top - margin.bottom) / transform.scale) +\n            (size / 2) * (handle.verticalAlignment === 'Center' ? 0 : (handle.verticalAlignment === 'Top' ? -1 : 1));\n    }\n    else if (selectorItem.connectors.length > 0) {\n        var connector = selectorItem.connectors[0];\n        var annotation = { offset: offset };\n        var connectorOffset = getOffsetOfConnector(connector.intermediatePoints, annotation);\n        var index = connectorOffset.index;\n        point = connectorOffset.point;\n        var getPointloop = getAnnotationPosition(connector.intermediatePoints, annotation, bounds);\n        //const points: PointModel[] = connector.intermediatePoints;\n        //const offsetLength: number;\n        var angle = getPointloop.angle;\n        var matrix = identityMatrix();\n        rotateMatrix(matrix, -angle, connector.intermediatePoints[index].x, connector.intermediatePoints[index].y);\n        point = transformPointByMatrix(matrix, point);\n        point.x += (margin.left - margin.right) +\n            (size / 2) * (handle.horizontalAlignment === 'Center' ? 0 : (handle.horizontalAlignment === 'Right' ? -1 : 1));\n        point.y += (margin.top - margin.bottom) +\n            (size / 2) * (handle.verticalAlignment === 'Center' ? 0 : (handle.verticalAlignment === 'Top' ? -1 : 1));\n        matrix = identityMatrix();\n        rotateMatrix(matrix, angle, connector.intermediatePoints[index].x, connector.intermediatePoints[index].y);\n        point = transformPointByMatrix(matrix, point);\n    }\n    if (wrapper.rotateAngle !== 0 || wrapper.parentTransform !== 0) {\n        var matrix = identityMatrix();\n        rotateMatrix(matrix, wrapper.rotateAngle + wrapper.parentTransform, wrapper.offsetX, wrapper.offsetY);\n        point = transformPointByMatrix(matrix, point);\n    }\n    return point;\n}\n/**\n * canResizeCorner method \\\n *\n * @returns {SelectorConstraints } canResizeCorner method .\\\n * @param {string} selectorConstraints - provide the selectorConstraints  value.\n * @param {string} action - provide the selectorConstraints  value.\n * @param {ThumbsConstraints} thumbsConstraints - provide the thumbsConstraints  value.\n * @param {Selector} selectedItems - provide the selectedItems  value.\n * @private\n */\nexport function canResizeCorner(selectorConstraints, action, thumbsConstraints, selectedItems) {\n    if (selectedItems.annotation) {\n        if (canResize(selectedItems.annotation)) {\n            return true;\n        }\n    }\n    else if ((SelectorConstraints[action] & selectorConstraints) && (ThumbsConstraints[action] & thumbsConstraints)) {\n        return true;\n    }\n    return false;\n}\n/**\n * canShowCorner method \\\n *\n * @returns {boolean } canShowCorner method .\\\n * @param {SelectorConstraints} selectorConstraints - provide the selectorConstraints  value.\n * @param {string} action - provide the thumbsConstraints  value.\n * @private\n */\nexport function canShowCorner(selectorConstraints, action) {\n    if (SelectorConstraints[action] & selectorConstraints) {\n        return true;\n    }\n    return false;\n}\n/**\n * checkPortRestriction method \\\n *\n * @returns {number } checkPortRestriction method .\\\n * @param {PointPortModel} port - provide the port  value.\n * @param {PortVisibility} portVisibility - provide the portVisibility  value.\n * @private\n */\nexport function checkPortRestriction(port, portVisibility) {\n    return port.visibility & portVisibility;\n}\n/**\n * findAnnotation method \\\n *\n * @returns {ShapeAnnotationModel | PathAnnotationModel | TextModel } findAnnotation method .\\\n * @param { NodeModel | ConnectorModel} node - provide the port  value.\n * @param {string} id - provide the portVisibility  value.\n * @private\n */\nexport function findAnnotation(node, id) {\n    var annotation;\n    if (node.shape.type === 'Text') {\n        annotation = (node.shape);\n    }\n    else {\n        var annotationId = id.split('_');\n        id = annotationId[annotationId.length - 1];\n        for (var i = 0; i < node.annotations.length; i++) {\n            if (id === node.annotations[i].id) {\n                annotation = node.annotations[i];\n            }\n        }\n    }\n    return annotation;\n}\n/**\n * findPort method \\\n *\n * @returns {PointPortModel} findPort method .\\\n * @param { NodeModel | ConnectorModel} node - provide the port  value.\n * @param {string} id - provide the portVisibility  value.\n * @private\n */\nexport function findPort(node, id) {\n    var port;\n    var portId = id.split('_');\n    id = portId[portId.length - 1];\n    if (node) {\n        node = node;\n        for (var i = 0; i < node.ports.length; i++) {\n            if (id === node.ports[i].id) {\n                return node.ports[i];\n            }\n        }\n    }\n    return port;\n}\n/**\n * getInOutConnectPorts method \\\n *\n * @returns {PointPortModel} getInOutConnectPorts method .\\\n * @param { NodeModel} node - provide the port  value.\n * @param {boolean} isInConnect - provide the portVisibility  value.\n * @private\n */\nexport function getInOutConnectPorts(node, isInConnect) {\n    var port = {};\n    var i = 0;\n    if (node.ports) {\n        var ports = node.ports;\n        for (i = 0; i < ports.length; i++) {\n            if (isInConnect) {\n                if ((ports[i].constraints & PortConstraints.InConnect)) {\n                    port = ports[i];\n                }\n            }\n            else {\n                if ((ports[i].constraints & PortConstraints.OutConnect)) {\n                    port = ports[i];\n                }\n            }\n        }\n    }\n    return port;\n}\n/**\n * findObjectIndex method \\\n *\n * @returns {PointPortModel} findObjectIndex method .\\\n * @param { NodeModel | ConnectorModel} node - provide the node  value.\n * @param {string} id - provide the string  value.\n * @param {boolean} annotation - provide the boolean  value.\n * @private\n */\nexport function findObjectIndex(node, id, annotation) {\n    //let index: number;\n    var collection = (annotation) ? node.annotations : node.ports;\n    for (var i = 0; i < collection.length; i++) {\n        if (collection[i].id === id) {\n            return (i).toString();\n        }\n    }\n    return '-1';\n}\n/**\n * getObjectFromCollection method \\\n *\n * @returns {boolean} getObjectFromCollection method .\\\n * @param { (NodeModel | ConnectorModel)[] } obj - provide the node  value.\n * @param {string} id - provide the string  value.\n * @private\n */\nexport function getObjectFromCollection(obj, id) {\n    var i;\n    for (i = 0; i < obj.length; i++) {\n        if (id === obj[i].id) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * scaleElement method \\\n *\n * @returns {void} scaleElement method .\\\n * @param { DiagramElement } element - provide the element  value.\n * @param {number} sw - provide the string  value.\n * @param {number} sh - provide the string  value.\n * @param {DiagramElement} refObject - provide the refObject  value.\n * @private\n */\nexport function scaleElement(element, sw, sh, refObject) {\n    if (element.width !== undefined && element.height !== undefined) {\n        element.width *= sw;\n        element.height *= sh;\n    }\n    if (element instanceof Container) {\n        var matrix = identityMatrix();\n        var width = refObject.width || refObject.actualSize.width;\n        var height = refObject.height || refObject.actualSize.height;\n        if (width !== undefined && height !== undefined) {\n            var x = refObject.offsetX - width * refObject.pivot.x;\n            var y = refObject.offsetY - height * refObject.pivot.y;\n            var refPoint = {\n                x: x + width * refObject.pivot.x,\n                y: y + height * refObject.pivot.y\n            };\n            refPoint = rotatePoint(refObject.rotateAngle, refObject.offsetX, refObject.offsetY, refPoint);\n            rotateMatrix(matrix, -refObject.rotateAngle, refPoint.x, refPoint.y);\n            scaleMatrix(matrix, sw, sh, refPoint.x, refPoint.y);\n            rotateMatrix(matrix, refObject.rotateAngle, refPoint.x, refPoint.y);\n            for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (child.width !== undefined && child.height !== undefined) {\n                    var newPosition = transformPointByMatrix(matrix, { x: child.offsetX, y: child.offsetY });\n                    child.offsetX = newPosition.x;\n                    child.offsetY = newPosition.y;\n                    scaleElement(child, sw, sh, refObject);\n                }\n            }\n        }\n    }\n}\n/**\n * scaleElement method \\\n *\n * @returns {void} scaleElement method .\\\n * @param { Node } obj - provide the obj  value.\n * @param {number} x - provide the x  value.\n * @param {number} y - provide the y  value.\n * @param {DiagramElement} nameTable - provide the refObject  value.\n * @param {DiagramElement} drop - provide the drop  value.\n * @param {DiagramElement} diagram - provide the diagram  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function arrangeChild(obj, x, y, nameTable, drop, diagram) {\n    var child = obj.children;\n    var node;\n    for (var i = 0; i < child.length; i++) {\n        node = nameTable[child[i]];\n        if (node) {\n            if (node.children) {\n                arrangeChild(node, x, y, nameTable, drop, diagram);\n            }\n            else {\n                node.offsetX -= x;\n                node.offsetY -= y;\n                if (!drop) {\n                    //let content: DiagramElement;\n                    //let container: Container;\n                    nameTable[node.id] = node;\n                    var container = node.initContainer();\n                    if (!container.children) {\n                        container.children = [];\n                    }\n                    var content = node.init(diagram);\n                    container.children.push(content);\n                    container.measure(new Size(node.width, node.height));\n                    container.arrange(container.desiredSize);\n                }\n            }\n        }\n    }\n}\n/**\n * insertObject method \\\n *\n * @returns {void} insertObject method .\\\n * @param { NodeModel | ConnectorModel } obj - provide the obj  value.\n * @param { string } key - provide the obj  value.\n * @param { Object[]} collection - provide the x  value.\n * @private\n */\nexport function insertObject(obj, key, collection) {\n    if (collection.length === 0) {\n        collection.push(obj);\n    }\n    else if (collection.length === 1) {\n        if (collection[0][key] > obj[key]) {\n            collection.splice(0, 0, obj);\n        }\n        else {\n            collection.push(obj);\n        }\n    }\n    else if (collection.length > 1) {\n        var low = 0;\n        var high = collection.length - 1;\n        var mid = Math.floor((low + high) / 2);\n        while (mid !== low) {\n            if (collection[mid][key] < obj[key]) {\n                low = mid;\n                mid = Math.floor((low + high) / 2);\n            }\n            else if (collection[mid][key] > obj[key]) {\n                high = mid;\n                mid = Math.floor((low + high) / 2);\n            }\n            else {\n                break;\n            }\n        }\n        if (collection[high][key] < obj[key]) {\n            collection.push(obj);\n        }\n        else if (collection[low][key] > obj[key]) {\n            collection.splice(low, 0, obj);\n        }\n        else if ((collection[low][key] < obj[key]) && collection[high][key] > obj[key]) {\n            collection.splice(high, 0, obj);\n        }\n    }\n}\n/**\n * getElement method \\\n *\n * @returns {Object} getElement method .\\\n * @param { DiagramHtmlElement | DiagramNativeElement } element - provide the obj  value.\n * @private\n */\nexport function getElement(element) {\n    var diagramElement = document.getElementById(element.diagramId);\n    var instance = 'ej2_instances';\n    // eslint-disable-next-line\n    var node = {};\n    var nodes = diagramElement[instance][0].nodes;\n    if (nodes === undefined) {\n        nodes = getPaletteSymbols(diagramElement[instance][0]);\n    }\n    var length = 'length';\n    for (var i = 0; nodes && i < nodes[length]; i++) {\n        if (nodes[i].id === element.nodeId) {\n            return getAnnotation(nodes[i], element);\n        }\n    }\n    var connectors = diagramElement[instance][0].connectors;\n    for (var i = 0; connectors && i < connectors[length]; i++) {\n        if (connectors[i].id === element.nodeId) {\n            return getAnnotation(connectors[i], element);\n        }\n    }\n    // eslint-disable-next-line\n    var enterObject = diagramElement[instance][0].enterObject;\n    if (enterObject && (enterObject['id'] === element.nodeId || enterObject['children'])) {\n        if (enterObject['children'] && groupHasType(enterObject, 'HTML', diagramElement[instance][0].enterTable)) {\n            return diagramElement[instance][0].enterTable[element.nodeId];\n        }\n        else {\n            return enterObject;\n        }\n    }\n    return null;\n}\n/**\n * getAnnotation method \\\n *\n * @returns {Object} getAnnotation method .\\\n * @param { Object } obj - provide the obj  value.\n * @param {  DiagramHtmlElement | DiagramNativeElement } element - provide the obj  value.\n * @private\n */\nfunction getAnnotation(obj, element) {\n    var annotations = obj.annotations;\n    var length = 'length';\n    var j;\n    for (j = 0; annotations && j < annotations[length]; j++) {\n        if (element.annotationId && annotations[j].id === element.annotationId) {\n            return annotations[j];\n        }\n    }\n    return obj;\n}\n/**\n * getPaletteSymbols method \\\n *\n * @returns {NodeModel[]} getPaletteSymbols method .\\\n * @param { Object } symbolPalette - provide the symbolPalette  value.\n * @private\n */\nfunction getPaletteSymbols(symbolPalette) {\n    var nodes = [];\n    for (var i = 0; i < symbolPalette.palettes.length; i++) {\n        var symbols = symbolPalette.palettes[i].symbols;\n        for (var j = 0; j < symbols.length; j++) {\n            if (symbols[j] instanceof Node) {\n                nodes.push(symbols[j]);\n            }\n        }\n    }\n    return nodes;\n}\n/**\n * getCollectionChangeEventArguements method \\\n *\n * @returns {IBlazorCollectionChangeEventArgs} getCollectionChangeEventArguements method .\\\n * @param { IBlazorCollectionChangeEventArgs } args1 - provide the args1  value.\n * @param { NodeModel | ConnectorModel } obj - provide the obj  value.\n * @param { EventState } state - provide the state  value.\n * @param { ChangeType } type - provide the type  value.\n * @private\n */\nexport function getCollectionChangeEventArguements(args1, obj, state, type) {\n    if (isBlazor()) {\n        args1 = {\n            cause: args1.cause, state: state, type: type, cancel: false,\n            element: getObjectType(obj) === Connector ?\n                { connector: cloneBlazorObject(obj) } : { node: cloneBlazorObject(obj) }\n        };\n    }\n    return args1;\n}\n/**\n * getDropEventArguements method \\\n *\n * @returns {IBlazorDropEventArgs} getDropEventArguements method .\\\n * @param { MouseEventArgs } args - provide the args1  value.\n * @param { IBlazorDropEventArgs } arg - provide the obj  value.\n * @private\n */\nexport function getDropEventArguements(args, arg) {\n    if (isBlazor()) {\n        var connector = (getObjectType(args.source) === Connector);\n        var object = cloneBlazorObject(args.source);\n        var target = cloneBlazorObject(args.target);\n        arg = {\n            element: connector ? { connector: object.connectors[0],\n                connectorId: object.connectors[0].id }\n                : { node: object.nodes[0], nodeId: object.nodes[0].id },\n            target: connector ? { connector: target } : { node: target },\n            position: arg.position, cancel: arg.cancel\n        };\n    }\n    return arg;\n}\n/**\n * getPoint method \\\n *\n * @returns {PointModel} getPoint method .\\\n * @param { number } x - provide the x  value.\n * @param { number } y - provide the y  value.\n * @param { number } w - provide the w  value.\n * @param { number } h - provide the y  value.\n * @param { number } angle - provide the y  value.\n * @param { number } offsetX - provide the y  value.\n * @param { number } offsetY - provide the y  value.\n * @param { PointModel } cornerPoint - provide the y  value.\n * @private\n */\nexport function getPoint(x, y, w, h, angle, offsetX, offsetY, cornerPoint) {\n    var pivot = { x: 0, y: 0 };\n    var trans = identityMatrix();\n    rotateMatrix(trans, angle, offsetX, offsetY);\n    switch (cornerPoint.x) {\n        case 0:\n            switch (cornerPoint.y) {\n                case 0:\n                    pivot = transformPointByMatrix(trans, ({ x: x, y: y }));\n                    break;\n                case 0.5:\n                    pivot = transformPointByMatrix(trans, ({ x: x, y: y + h / 2 }));\n                    break;\n                case 1:\n                    pivot = transformPointByMatrix(trans, ({ x: x, y: y + h }));\n                    break;\n            }\n            break;\n        case 0.5:\n            switch (cornerPoint.y) {\n                case 0:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w / 2, y: y }));\n                    break;\n                case 0.5:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w / 2, y: y + h / 2 }));\n                    break;\n                case 1:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w / 2, y: y + h }));\n                    break;\n            }\n            break;\n        case 1:\n            switch (cornerPoint.y) {\n                case 0:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w, y: y }));\n                    break;\n                case 0.5:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w, y: y + h / 2 }));\n                    break;\n                case 1:\n                    pivot = transformPointByMatrix(trans, ({ x: x + w, y: y + h }));\n                    break;\n            }\n            break;\n    }\n    return { x: pivot.x, y: pivot.y };\n}\n/* eslint-disable */\n/**\n * Get the object as Node | Connector \\\n *\n * @returns {Object} Get the object as Node | Connector .\\\n * @param { number } obj - provide the x  value.\n * @private\n */\nexport var getObjectType = function (obj) {\n    if (obj) {\n        if (obj.sourceID !== undefined || obj.sourcePoint !== undefined ||\n            obj.targetID !== undefined || obj.targetPoint !== undefined ||\n            obj.type !== undefined) {\n            obj = Connector;\n        }\n        else {\n            obj = Node;\n        }\n    }\n    return obj;\n};\n/** @private */\nexport var flipConnector = function (connector) {\n    if (!connector.sourceID && !connector.targetID) {\n        var source = { x: connector.sourcePoint.x, y: connector.sourcePoint.y };\n        var target = { x: connector.targetPoint.x, y: connector.targetPoint.y };\n        if (connector.flip === 'Horizontal') {\n            connector.sourcePoint.x = target.x;\n            connector.targetPoint.x = source.x;\n        }\n        else if (connector.flip === 'Vertical') {\n            connector.sourcePoint.y = target.y;\n            connector.targetPoint.y = source.y;\n        }\n        else if (connector.flip === 'Both') {\n            connector.sourcePoint = target;\n            connector.targetPoint = source;\n        }\n    }\n};\n/** @private */\nexport var updatePortEdges = function (portContent, flip, port) {\n    var offsetX = port.offset.x;\n    var offsetY = port.offset.y;\n    if (flip === 'Horizontal') {\n        offsetX = 1 - port.offset.x;\n        offsetY = port.offset.y;\n    }\n    else if (flip === 'Vertical') {\n        offsetX = port.offset.x;\n        offsetY = 1 - port.offset.y;\n    }\n    else if (flip === 'Both') {\n        offsetX = 1 - port.offset.x;\n        offsetY = 1 - port.offset.y;\n    }\n    portContent.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n    return portContent;\n};\n/** @private */\nexport var alignElement = function (element, offsetX, offsetY, diagram, flip) {\n    if (element.hasChildren()) {\n        for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childX = ((offsetX - child.offsetX) + offsetX);\n            var childY = ((offsetY - child.offsetY) + offsetY);\n            if (flip === 'Horizontal' || flip === 'Both') {\n                child.offsetX = childX;\n                child.flipOffset.x = childX - child.desiredSize.width / 2;\n            }\n            if (flip === 'Vertical' || flip === 'Both') {\n                child.offsetY = childY;\n                child.flipOffset.y = childY - child.desiredSize.height / 2;\n            }\n            if (child instanceof Canvas || child instanceof Container) {\n                alignElement(child, offsetX, offsetY, diagram, flip);\n            }\n            child.measure(new Size(child.bounds.width, child.bounds.height));\n            child.arrange(child.desiredSize);\n            var node = diagram.nameTable[child.id];\n            if (node) {\n                diagram.updateConnectorEdges(node);\n            }\n        }\n    }\n};\n/** @private */\nexport var cloneSelectedObjects = function (diagram) {\n    var nodes = diagram.selectedItems.nodes;\n    var connectors = diagram.selectedItems.connectors;\n    var isProtectedOnChange = 'isProtectedOnChange';\n    var isEnableServerDatabind = diagram.allowServerDataBinding;\n    var isProtectedOnChangeValue = diagram[isProtectedOnChange];\n    diagram.protectPropertyChange(true);\n    diagram.allowServerDataBinding = false;\n    diagram.selectedItems.nodes = [];\n    diagram.selectedItems.connectors = [];\n    diagram.allowServerDataBinding = isEnableServerDatabind;\n    diagram.protectPropertyChange(isProtectedOnChangeValue);\n    var clonedSelectedItems = cloneObject(diagram.selectedItems);\n    for (var i = 0; i < nodes.length; i++) {\n        diagram.selectedItems.nodes.push(diagram.nameTable[nodes[i].id]);\n    }\n    for (var i = 0; i < connectors.length; i++) {\n        diagram.selectedItems.connectors.push(diagram.nameTable[connectors[i].id]);\n    }\n    return clonedSelectedItems;\n};\n/** @private */\nexport var updatePathElement = function (anglePoints, connector) {\n    var pathElement = new PathElement();\n    var pathseqData;\n    for (var j = 0; j < anglePoints.length - 1; j++) {\n        pathseqData = findPath(anglePoints[j], anglePoints[j + 1]);\n        pathElement.data = pathseqData[0];\n        pathElement.id = connector.id + '_' + (connector.shape.sequence);\n        pathElement.offsetX = pathseqData[1].x;\n        pathElement.offsetY = pathseqData[1].y;\n        pathElement.rotateAngle = 45;\n        pathElement.transform = Transform.Self;\n    }\n    return pathElement;\n};\n/** @private */\nexport var checkPort = function (node, element) {\n    if (node instanceof Node) {\n        for (var i = 0; i < node.ports.length; i++) {\n            if (node.ports[i].id === element.id.split('_')[1]) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n/** @private */\nexport var findPath = function (sourcePoint, targetPoint) {\n    var beginningpoint = { x: sourcePoint.x, y: sourcePoint.y };\n    var distance = findDistance(sourcePoint, targetPoint);\n    distance = Math.min(30, distance / 2);\n    var angle = findAngle(sourcePoint, targetPoint);\n    var transferpt = Point.transform({ x: beginningpoint.x, y: beginningpoint.y }, angle, distance);\n    var startpoint = Point.transform({ x: transferpt.x, y: transferpt.y }, angle, -12);\n    var endpoint = Point.transform({ x: startpoint.x, y: startpoint.y }, angle, 12 * 2);\n    var path = 'M' + startpoint.x + ' ' + startpoint.y + ' L' + endpoint.x + ' ' + endpoint.y;\n    return [path, transferpt];\n};\n/** @private */\nexport var getConnectorDirection = function (src, tar) {\n    if (Math.abs(tar.x - src.x) > Math.abs(tar.y - src.y)) {\n        return src.x < tar.x ? 'Right' : 'Left';\n    }\n    else {\n        return src.y < tar.y ? 'Bottom' : 'Top';\n    }\n};\n/** @private */\nexport var findDistance = function (point1, point2) {\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n};\n/* eslint-enable */\n/**\n * cloneBlazorObject method \\\n *\n * @returns {Object} cloneBlazorObject method .\\\n * @param { object } args - provide the args  value.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function cloneBlazorObject(args) {\n    if (isBlazor()) {\n        args = cloneObject(args);\n    }\n    return args;\n}\n/**\n * checkBrowserInfo method \\\n *\n * @returns {Object} checkBrowserInfo method .\\\n * @private\n */\nexport function checkBrowserInfo() {\n    if ((navigator.platform.indexOf('Mac') >= 0 || navigator.platform.indexOf('iPad') >= 0\n        || navigator.platform.indexOf('iPhone') >= 0 || navigator.platform.indexOf('MacIntel') >= 0)\n        && (Browser.info.name === 'safari' || Browser.info.name === 'webkit')) {\n        return true;\n    }\n    return false;\n}\n/**\n * canMeasureDecoratorPath method \\\n *\n * @returns {boolean} canMeasureDecoratorPath method .\\\n * @param { string[] } objects - provide the args  value.\n * @private\n */\nexport function canMeasureDecoratorPath(objects) {\n    if (objects.indexOf('shape') !== -1 || objects.indexOf('pathData') !== -1 ||\n        objects.indexOf('width') !== -1 || objects.indexOf('height') !== -1) {\n        return true;\n    }\n    return false;\n}\n/**\n * getPreviewSize method \\\n *\n * @returns {Size} getPreviewSize method .\\\n * @param { SymbolPaletteModel } sourceElement - provide the args  value.\n * @param { Node } clonedObject - provide the args  value.\n * @param { DiagramElement } wrapper - provide the args  value.\n * @private\n */\nexport function getPreviewSize(sourceElement, clonedObject, wrapper) {\n    //let previewWidth: number;\n    //let previewHeight: number;\n    var previewWidth = getSymbolSize(sourceElement, clonedObject, wrapper, 'width');\n    var previewHeight = getSymbolSize(sourceElement, clonedObject, wrapper, 'height');\n    return new Size(previewWidth, previewHeight);\n}\n/**\n * getSymbolSize method \\\n *\n * @returns {number} getSymbolSize method .\\\n * @param { SymbolPaletteModel } sourceElement - provide the sourceElement  value.\n * @param { Node } clonedObject - provide the clonedObject  value.\n * @param { DiagramElement } wrapper - provide the wrapper  value.\n * @param { string } size - provide the size  value.\n * @private\n */\nexport function getSymbolSize(sourceElement, clonedObject, wrapper, size) {\n    var previewSize = 0;\n    if (clonedObject.previewSize[size] !== undefined) {\n        previewSize = clonedObject.previewSize[size];\n    }\n    else if (sourceElement.symbolPreview[size] !== undefined) {\n        previewSize = sourceElement.symbolPreview[size];\n    }\n    else {\n        previewSize = clonedObject[size] || wrapper.actualSize[size];\n    }\n    return previewSize;\n}\n/**\n * findParent method \\\n *\n * @returns {string} findParent method .\\\n * @param { Node } clonedObject - provide the clonedObject  value.\n * @param { Diagram } wrapper - provide the diagram  element.\n * @param { string } size - provide the parent id.\n * @private\n */\nexport function findParentInSwimlane(node, diagram, parent) {\n    if (node && node.parentId) {\n        node = diagram.nameTable[node.parentId];\n        if (node.parentId) {\n            parent = findParentInSwimlane(node, diagram, parent);\n        }\n        else {\n            parent = node.id;\n        }\n    }\n    return parent;\n}\n"]},"metadata":{},"sourceType":"module"}