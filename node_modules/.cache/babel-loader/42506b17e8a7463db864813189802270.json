{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js\";\nimport React from \"react\";\nimport { DiagramComponent, HierarchicalTree, MindMap, RadialTree, ComplexHierarchicalTree, DataBinding, Snapping, PrintAndExport, BpmnDiagrams, SymmetricLayout, ConnectorBridging, UndoRedo, LayoutAnimation, DiagramContextMenu, ConnectorEditing, Inject, SnapConstraints, DiagramTools } from \"@syncfusion/ej2-react-diagrams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet diagramInstance = DiagramComponent;\n\nclass Diagram extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.diagramInstance = diagramInstance;\n    this.state = {\n      myStyle: props.myStyle,\n      diagram: props.diagram,\n      connectors: props.connectors\n    };\n  }\n\n  // A node is created and stored in nodes array.\n  async api(ip, port, command) {\n    // GET request using fetch with async/await\n    const response = await fetch(\"http://\" + ip + \":\" + port + command);\n    const data = await response.json();\n    return data;\n  }\n\n  async create_customer(element) {\n    let http = \"http://\" + window.ip + \":\" + window.port;\n    console.log(\"element\", element.oldProperties.id);\n\n    switch (element.oldProperties.id) {\n      case \"Customer\":\n        {//api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n          //const response = await fetch(http+\"/api/reason_customer/insert/\"+element.properties.id+\"/\"+element.properties.offsetX+\"/\"+element.properties.offsetY)\n          //const data = await response;\n          //return data\n        }\n\n      case \"Process\":\n        {\n          break;\n        }\n\n      case \"External_Shipment\":\n        {\n          break;\n        }\n\n      case \"Inventory_customer_supplier\":\n        {\n          break;\n        }\n\n      case \"Production_control\":\n        {\n          break;\n        }\n    }\n  }\n\n  update_position(element) {\n    var myData = [];\n    element.map(item => {\n      myData.push({\n        id: item.properties.id,\n        offsetX: item.properties.offsetX,\n        offsetY: item.properties.offsetY\n      });\n    }); //console.log(JSON.stringify(myData))\n    //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n\n    let http = \"http://\" + window.ip + \":\" + window.port; //fetch(http+\"/api/vsm/update_position/\")\n    //.then(response => response.json());\n  }\n\n  render() {\n    const {\n      myStyle\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(DiagramComponent, {\n      id: \"diagram\",\n      ref: diagram => diagramInstance = diagram,\n      width: '100%',\n      height: '100%',\n      snapSettings: {\n        constraints: SnapConstraints.None\n      } // Add node\n      ,\n      nodes: this.state.diagram,\n      connectors: this.state.connectors,\n      drop: e => {\n        //console.log(\"drop\",e)\n        //console.log(\"drop length\",e.element.annotations.length)\n        this.create_customer(e.element); //e.element.annotations[0].content = \"#1\"\n        //e.newValue[0].annotations[0].content = \"#1\"\n      },\n      positionChange: e => {\n        switch (e.state) {\n          case \"Completed\":\n            {\n              console.log(\"position\", e.source.nodes);\n              if (e.source.nodes !== undefined) this.update_position(e.source.nodes);\n              break;\n            }\n\n          case \"Progress\":\n            {\n              break;\n            }\n\n          case \"Start\":\n            {\n              break;\n            }\n        }\n      },\n      dragTargetEnd: e => {\n        console.log(\"dragTargetEnd\", e);\n      }\n      /* selectionChange={(e)=>{\n       \n         console.log(\"SELECT\",e.newValue)\n       }}*/\n      ,\n      created: () => {\n        //console.log(diagramInstance.getActiveLayer())\n        //this.diagramInstance.getActiveLayer();\n        diagramInstance.tool = DiagramTools.Zoom;\n        diagramInstance.dataBind();\n\n        diagramInstance.scrollChange = args => {\n          //Obtains the pan status\n          let panStatus = args.panState;\n          console.log(panStatus);\n        }; //diagramInstance.tool = DiagramTools.ZoomPan;\n        //diagramInstance.dataBind();\n\n        /*diagramInstance.scrollChange = { args: IScrollChangeEventArgs => {\n        //Obtains the pan status\n        console.log(IScrollChangeEventArgs)\n        let panStatus = IScrollChangeEventArgs.panState;}}\n        }*/\n\n      } //Disables mouse over tooltip at runtime\n      ,\n      tooltip: null,\n      style: myStyle,\n      children: /*#__PURE__*/_jsxDEV(Inject, {\n        width: '200px',\n        height: '200px',\n        services: [HierarchicalTree, MindMap, RadialTree, ComplexHierarchicalTree, DataBinding, Snapping, PrintAndExport, BpmnDiagrams, SymmetricLayout, ConnectorBridging, UndoRedo, LayoutAnimation, DiagramContextMenu, ConnectorEditing]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Diagram;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js"],"names":["React","DiagramComponent","HierarchicalTree","MindMap","RadialTree","ComplexHierarchicalTree","DataBinding","Snapping","PrintAndExport","BpmnDiagrams","SymmetricLayout","ConnectorBridging","UndoRedo","LayoutAnimation","DiagramContextMenu","ConnectorEditing","Inject","SnapConstraints","DiagramTools","diagramInstance","Diagram","PureComponent","constructor","props","state","myStyle","diagram","connectors","api","ip","port","command","response","fetch","data","json","create_customer","element","http","window","console","log","oldProperties","id","update_position","myData","map","item","push","properties","offsetX","offsetY","render","constraints","None","e","source","nodes","undefined","tool","Zoom","dataBind","scrollChange","args","panStatus","panState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { \n  DiagramComponent,\n  HierarchicalTree,\n  MindMap,\n  RadialTree,\n  ComplexHierarchicalTree,\n  DataBinding,\n  Snapping,\n  PrintAndExport,\n  BpmnDiagrams,\n  SymmetricLayout,\n  ConnectorBridging,\n  UndoRedo,\n  LayoutAnimation,\n  DiagramContextMenu,\n  ConnectorEditing,\n  Inject,\n  SnapConstraints,\n  DiagramTools\n} from \"@syncfusion/ej2-react-diagrams\";\n\n\nlet diagramInstance = DiagramComponent;\n\nclass Diagram extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          myStyle: props.myStyle,\n          diagram: props.diagram,\n          connectors: props.connectors,\n        };\n\n       \n      }\n      diagramInstance =  diagramInstance;\n      // A node is created and stored in nodes array.\n\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n\n      async create_customer(element)\n      {\n        let http = \"http://\"+window.ip+\":\"+window.port\n        console.log(\"element\",element.oldProperties.id);\n\n        switch(element.oldProperties.id)\n        {\n          case \"Customer\":{\n            //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        \n            //const response = await fetch(http+\"/api/reason_customer/insert/\"+element.properties.id+\"/\"+element.properties.offsetX+\"/\"+element.properties.offsetY)\n            //const data = await response;\n            //return data\n          }\n          case \"Process\":{\n            break;\n          }\n          case \"External_Shipment\":{\n            break;\n          }\n          case \"Inventory_customer_supplier\":\n          {\n              break;\n          }\n          case \"Production_control\":\n          {\n              break;\n          }\n        }\n\n        \n        \n      }\n\n     update_position(element)\n      {\n        var myData = []\n        element.map(item =>{\n          myData.push({\n            id: item.properties.id,\n            offsetX: item.properties.offsetX,\n            offsetY: item.properties.offsetY\n          })\n        })\n\n        //console.log(JSON.stringify(myData))\n        //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        let http = \"http://\"+window.ip+\":\"+window.port\n        //fetch(http+\"/api/vsm/update_position/\")\n        //.then(response => response.json());\n      }\n\n       \n      \n\n      render() {\n\n        const {myStyle} = this.state\n\n\n        return (\n        <DiagramComponent  id=\"diagram\" ref={diagram => (diagramInstance = diagram)}\n        width = {'100%'}\n        height = {'100%'}\n        snapSettings={{ constraints: SnapConstraints.None }}\n        // Add node\n        nodes = {\n          this.state.diagram\n        }\n        connectors = {\n          this.state.connectors\n        }\n\n        drop={(e)=>{\n          //console.log(\"drop\",e)\n          //console.log(\"drop length\",e.element.annotations.length)\n          this.create_customer(e.element)\n          //e.element.annotations[0].content = \"#1\"\n        \n          //e.newValue[0].annotations[0].content = \"#1\"\n        }}\n\n        positionChange={(e)=>{\n\n          switch(e.state)\n          {\n            case \"Completed\":{\n              console.log(\"position\",e.source.nodes)\n              if(e.source.nodes !== undefined)\n                this.update_position(e.source.nodes)\n            \n            break;  }\n            case \"Progress\":{break;}\n            case \"Start\":{break;}\n          }\n          \n\n          \n        }}\n\n        dragTargetEnd={(e)=>{\n          console.log(\"dragTargetEnd\",e)\n        }}\n\n        \n\n\n        \n       /* selectionChange={(e)=>{\n        \n          console.log(\"SELECT\",e.newValue)\n        }}*/\n        created = {\n          () => {\n\n            //console.log(diagramInstance.getActiveLayer())\n            //this.diagramInstance.getActiveLayer();\n\n\n            diagramInstance.tool = DiagramTools.Zoom;\n            diagramInstance.dataBind();\n            diagramInstance.scrollChange = args => {\n            //Obtains the pan status\n            let panStatus = args.panState;\n            console.log(panStatus)\n           }\n\n \n            //diagramInstance.tool = DiagramTools.ZoomPan;\n            //diagramInstance.dataBind();\n            /*diagramInstance.scrollChange = { args: IScrollChangeEventArgs => {\n            //Obtains the pan status\n            console.log(IScrollChangeEventArgs)\n            let panStatus = IScrollChangeEventArgs.panState;}}\n            }*/\n          }\n        }\n\n            //Disables mouse over tooltip at runtime\n            tooltip = {\n              null\n          }\n\n\n          style = {myStyle}\n\n        \n\n       >\n         <Inject  width = {'200px'}\n        height = {'200px'}\n  services={[\n    HierarchicalTree,\n    MindMap,\n    RadialTree,\n    ComplexHierarchicalTree,\n    DataBinding,\n    Snapping,\n    PrintAndExport,\n    BpmnDiagrams,\n    SymmetricLayout,\n    ConnectorBridging,\n    UndoRedo,\n    LayoutAnimation,\n    DiagramContextMenu,\n    ConnectorEditing\n  ]}\n/>\n       </DiagramComponent>);\n      }\n}\n\n\nexport default Diagram;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}