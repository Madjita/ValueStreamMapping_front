{"ast":null,"code":"import axios from \"axios\";\nimport { fetch_orders, fetch_orders_success, fetch_orders_error, fetch_orders_add, fetch_orders_update } from '../reducers/useOrdersReducer';\nimport ip from '../../global';\nexport const ordersLoading = () => {\n  return async dispatch => {\n    try {\n      dispatch(fetch_orders());\n      const response = await axios.get('http://' + ip + ':5001/api/manufacture/orders', {\n        withCredentials: false,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n      let data = response.data;\n      setTimeout(() => {\n        /* data.map((item:IDataOrder )=>{\n             if(item.tActual != 0)\n             {\n                 //console.log(\"fetch_orders_update = \" +item.tActual);\n                 dispatch(fetch_orders_update(item))\n             }\n         })*/\n        dispatch(fetch_orders_success(data));\n      }, 0);\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const ordersLoading2 = () => {\n  return async dispatch => {\n    try {\n      dispatch(fetch_orders());\n      const response = await axios.get('http://' + ip + ':5001/api/manufacture/orders2', {\n        withCredentials: false,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      });\n      let df = response.data;\n      let data = response.data;\n      setTimeout(() => {\n        /* data.map((item:IDataOrder )=>{\n             if(item.tActual != 0)\n             {\n                 //console.log(\"fetch_orders_update = \" +item.tActual);\n                 dispatch(fetch_orders_update(item))\n             }\n         })*/\n        dispatch(fetch_orders_success(data));\n      }, 0);\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderAdd = newOrder => {\n  return async dispatch => {\n    console.log(\"Add\");\n    console.log(newOrder);\n    console.log(JSON.stringify(newOrder));\n\n    try {\n      //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n      const response = await axios.post('http://' + ip + ':5001/api/manufacture/addOrder', JSON.stringify(newOrder), {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_add(newOrder));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderUpdate = (updateOrder, oldOrder) => {\n  return async dispatch => {\n    let obj = {\n      newOrder: updateOrder,\n      oldOrder: oldOrder\n    };\n\n    try {\n      const response = await axios.post('http://' + ip + ':5001/api/manufacture/updateOrder', JSON.stringify(obj), {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const startSimulation = item => {\n  return async dispatch => {\n    let copyObjet = { ...item\n    };\n\n    try {\n      const response = await axios.post('http://' + ip + ':5001/api/manufacture/startSimulationOrder', JSON.stringify(copyObjet), {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        //dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const updateInfoOrder = item => {\n  return async dispatch => {\n    //let copyObjet = {...item}\n    try {\n      const response = await axios.post('http://' + ip + ':5001/api/manufacture/updateInfoOrder', item, {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        let data = response.data;\n        console.log(\"Update item =\", data.tActual);\n        dispatch(fetch_orders_update(data));\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/action-creator/useActionOrders.tsx"],"names":["axios","fetch_orders","fetch_orders_success","fetch_orders_error","fetch_orders_add","fetch_orders_update","ip","ordersLoading","dispatch","response","get","withCredentials","headers","data","setTimeout","e","ordersLoading2","df","orderAdd","newOrder","console","log","JSON","stringify","post","status","orderUpdate","updateOrder","oldOrder","obj","startSimulation","item","copyObjet","updateInfoOrder","tActual"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,SAASC,YAAT,EAAuBC,oBAAvB,EAA6CC,kBAA7C,EAAgEC,gBAAhE,EAAiFC,mBAAjF,QAA4G,8BAA5G;AAKA,OAAOC,EAAP,MAAe,cAAf;AAIA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAE/B,SAAO,MAAOC,QAAP,IAAyB;AAE5B,QAAG;AACCA,MAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AAEA,YAAMQ,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,YAAUJ,EAAV,GAAa,8BAAvB,EAAsD;AACzEK,QAAAA,eAAe,EAAE,KADwD;AAEzEC,QAAAA,OAAO,EAAE;AACP,yCAA+B;AADxB;AAFgE,OAAtD,CAAvB;AAQA,UAAIC,IAAI,GAAGJ,QAAQ,CAACI,IAApB;AACAC,MAAAA,UAAU,CAAC,MAAM;AAEd;AACf;AACA;AACA;AACA;AACA;AACA;AAEgBN,QAAAA,QAAQ,CAACN,oBAAoB,CAACW,IAAD,CAArB,CAAR;AACH,OAXS,EAWP,CAXO,CAAV;AAYH,KAxBD,CAwBE,OAAME,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GA7BD;AA8BH,CAhCM;AA4CP,OAAO,MAAMa,cAAc,GAAG,MAAM;AAChC,SAAO,MAAOR,QAAP,IAAyB;AAE5B,QAAG;AACCA,MAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AAEA,YAAMQ,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,YAAUJ,EAAV,GAAa,+BAAvB,EAAuD;AAC1EK,QAAAA,eAAe,EAAE,KADyD;AAE1EC,QAAAA,OAAO,EAAE;AACP,yCAA+B;AADxB;AAFiE,OAAvD,CAAvB;AASA,UAAIK,EAAE,GAAIR,QAAQ,CAACI,IAAnB;AAEA,UAAIA,IAAI,GAAGJ,QAAQ,CAACI,IAApB;AACAC,MAAAA,UAAU,CAAC,MAAM;AAEd;AACf;AACA;AACA;AACA;AACA;AACA;AAEgBN,QAAAA,QAAQ,CAACN,oBAAoB,CAACW,IAAD,CAArB,CAAR;AACH,OAXS,EAWP,CAXO,CAAV;AAYH,KA3BD,CA2BE,OAAME,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAhCD;AAiCH,CAlCM;AAqCP,OAAO,MAAMe,QAAQ,GAAIC,QAAD,IAA+B;AACnD,SAAO,MAAOX,QAAP,IAAyB;AAE5BY,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAZ;;AACA,QAAG;AAEC;AAEA,YAAMV,QAAQ,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAUlB,EAAV,GAAa,gCAAxB,EAAyDgB,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAzD,EAAkF;AACrGP,QAAAA,OAAO,EAAE;AACP;AACA,yCAA+B,GAFxB;AAGP,0BAAgB;AAHT;AAD4F,OAAlF,CAAvB;;AAQA,UAAGH,QAAQ,CAACgB,MAAT,KAAoB,GAAvB,EACA;AACIjB,QAAAA,QAAQ,CAACJ,gBAAgB,CAACe,QAAD,CAAjB,CAAR;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KAjBD,CAiBE,OAAMN,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAzBD;AA0BH,CA3BM;AA6BP,OAAO,MAAMuB,WAAW,GAAG,CAACC,WAAD,EAA0BC,QAA1B,KAAmD;AAC1E,SAAO,MAAOpB,QAAP,IAAyB;AAC5B,QAAIqB,GAAG,GAAG;AAACV,MAAAA,QAAQ,EAAEQ,WAAX;AAAyBC,MAAAA,QAAQ,EAAEA;AAAnC,KAAV;;AACA,QAAG;AACC,YAAMnB,QAAQ,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAUlB,EAAV,GAAa,mCAAxB,EAA4DgB,IAAI,CAACC,SAAL,CAAeM,GAAf,CAA5D,EAAgF;AACnGjB,QAAAA,OAAO,EAAE;AACP,yCAA+B,GADxB;AAEP,0BAAgB;AAFT;AAD0F,OAAhF,CAAvB;;AAOA,UAAGH,QAAQ,CAACgB,MAAT,KAAoB,GAAvB,EACA;AACIjB,QAAAA,QAAQ,CAACH,mBAAmB,CAACwB,GAAD,CAApB,CAAR;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KAbD,CAaE,OAAMN,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAlBD;AAmBH,CApBM;AAuBP,OAAO,MAAM2B,eAAe,GAAIC,IAAD,IAAsB;AACjD,SAAO,MAAOvB,QAAP,IAAyB;AAE5B,QAAIwB,SAAS,GAAG,EAAC,GAAGD;AAAJ,KAAhB;;AACA,QACA;AACI,YAAMtB,QAAQ,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAUlB,EAAV,GAAa,4CAAxB,EAAqEgB,IAAI,CAACC,SAAL,CAAeS,SAAf,CAArE,EACvB;AACIpB,QAAAA,OAAO,EAAE;AACN,yCAA+B,GADzB;AAEP,0BAAgB;AAFT;AADb,OADuB,CAAvB;;AAQA,UAAGH,QAAQ,CAACgB,MAAT,KAAoB,GAAvB,EACA;AACI;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KAfD,CAeE,OAAMN,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GArBD;AAsBH,CAvBM;AA0BP,OAAO,MAAM8B,eAAe,GAAIF,IAAD,IAAsB;AACjD,SAAO,MAAOvB,QAAP,IAAyB;AAE5B;AACA,QACA;AACI,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACwB,IAAN,CAAW,YAAUlB,EAAV,GAAa,uCAAxB,EAAgEyB,IAAhE,EACvB;AACInB,QAAAA,OAAO,EAAE;AACP,yCAA+B,GADxB;AAEP,0BAAgB;AAFT;AADb,OADuB,CAAvB;;AAQA,UAAGH,QAAQ,CAACgB,MAAT,KAAoB,GAAvB,EACA;AAGI,YAAIZ,IAAI,GAAGJ,QAAQ,CAACI,IAApB;AAEAO,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,IAAI,CAACqB,OAAlC;AACA1B,QAAAA,QAAQ,CAACH,mBAAmB,CAACQ,IAAD,CAApB,CAAR;AACH;AACJ,KAnBD,CAmBE,OAAME,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACL,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAzBD;AA0BH,CA3BM","sourcesContent":["import axios from \"axios\"\nimport { Dispatch } from \"react\"\nimport IDataOrder from \"../../Component/Data/IDataOrder\"\nimport { useOrdersActionType,useLeftMenuAction } from \"../../type/useOrdersType\"\n\nimport { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } from '../reducers/useOrdersReducer'\n\n\nimport IDialogAddOrder from '../../Component/Data/Dialog/IDialogAddOrder'\n\nimport ip from '../../global'\nimport IDataCardVSM from \"../../Component/Data/IDataCardVSM\"\nimport IDataProduction from \"../../Component/Data/IDataProduction\"\n\nexport const ordersLoading = () => {\n\n    return async (dispatch: any) => {\n\n        try{\n            dispatch(fetch_orders());\n\n            const response = await axios.get('http://'+ip+':5001/api/manufacture/orders',{\n                withCredentials: false,\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n\n            \n            let data = response.data as IDataOrder[];\n            setTimeout(() => {\n\n               /* data.map((item:IDataOrder )=>{\n                    if(item.tActual != 0)\n                    {\n                        //console.log(\"fetch_orders_update = \" +item.tActual);\n                        dispatch(fetch_orders_update(item))\n                    }\n                })*/\n\n                dispatch(fetch_orders_success(data));\n            }, 0)\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\ninterface MyCards {\n    sections: IDataCardVSM[]\n} \n\ninterface OrderMy{\n    order: IDataOrder,\n    cards: MyCards[]\n}\n\nexport const ordersLoading2 = () => {\n    return async (dispatch: any) => {\n\n        try{\n            dispatch(fetch_orders());\n\n            const response = await axios.get('http://'+ip+':5001/api/manufacture/orders2',{\n                withCredentials: false,\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                },\n            })\n\n\n\n            let df  = response.data;\n            \n            let data = response.data as IDataOrder[];\n            setTimeout(() => {\n\n               /* data.map((item:IDataOrder )=>{\n                    if(item.tActual != 0)\n                    {\n                        //console.log(\"fetch_orders_update = \" +item.tActual);\n                        dispatch(fetch_orders_update(item))\n                    }\n                })*/\n\n                dispatch(fetch_orders_success(data));\n            }, 0)\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const orderAdd = (newOrder: IDialogAddOrder) => {\n    return async (dispatch: any) => {\n\n        console.log(\"Add\")\n        console.log(newOrder)\n        console.log(JSON.stringify(newOrder))\n        try{\n\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.post('http://'+ip+':5001/api/manufacture/addOrder',JSON.stringify(newOrder),{\n                headers: {\n                  // Overwrite Axios's automatically set Content-Type\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_add(newOrder));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\nexport const orderUpdate = (updateOrder: IDataOrder, oldOrder: IDataOrder) => {\n    return async (dispatch: any) => {\n        let obj = {newOrder: updateOrder , oldOrder: oldOrder}\n        try{\n            const response = await axios.post('http://'+ip+':5001/api/manufacture/updateOrder',JSON.stringify(obj),{\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const startSimulation = (item: IDataOrder) => {\n    return async (dispatch: any) => {\n\n        let copyObjet = {...item}\n        try\n        {\n            const response = await axios.post('http://'+ip+':5001/api/manufacture/startSimulationOrder',JSON.stringify(copyObjet),\n            {\n                headers: {\n                   \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n                //dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const updateInfoOrder = (item: IDataOrder) => {\n    return async (dispatch: any) => {\n\n        //let copyObjet = {...item}\n        try\n        {\n            const response = await axios.post('http://'+ip+':5001/api/manufacture/updateInfoOrder',item,\n            {\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n\n               \n                let data = response.data as IDataOrder;\n\n                console.log(\"Update item =\", data.tActual)\n                dispatch(fetch_orders_update(data));\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}