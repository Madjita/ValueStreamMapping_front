{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable prefer-spread */\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable jsdoc/require-returns */\n\n\nimport { Component, Property, Complex, Collection, EventHandler, L10n, Droppable, remove, Ajax, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Browser, Event } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { CanvasRenderer } from './rendering/canvas-renderer';\nimport { SvgRenderer } from './rendering/svg-renderer';\nimport { DiagramRenderer } from './rendering/renderer';\nimport { PageSettings, ScrollSettings } from './diagram/page-settings';\nimport { ServiceLocator } from './objects/service';\nimport { Container } from './core/containers/container';\nimport { Node, BpmnShape } from './objects/node';\nimport { cloneBlazorObject, cloneSelectedObjects, findObjectIndex } from './utility/diagram-util';\nimport { checkBrowserInfo } from './utility/diagram-util';\nimport { updateDefaultValues, getCollectionChangeEventArguements } from './utility/diagram-util';\nimport { flipConnector, updatePortEdges, alignElement, setConnectorDefaults, getPreviewSize } from './utility/diagram-util';\nimport { Connector } from './objects/connector';\nimport { SnapSettings } from './diagram/grid-lines';\nimport { RulerSettings } from './diagram/ruler-settings';\nimport { removeRulerElements, updateRuler, getRulerSize } from './ruler/ruler';\nimport { renderRuler, renderOverlapElement } from './ruler/ruler';\nimport { Size } from './primitives/size';\nimport { Keys, KeyModifiers, DiagramTools, AnnotationConstraints, NodeConstraints, ScrollActions } from './enum/enum';\nimport { RendererAction } from './enum/enum';\nimport { BlazorAction } from './enum/enum';\nimport { DiagramConstraints, SelectorConstraints, PortVisibility, DiagramEvent } from './enum/enum';\nimport { DiagramAction, ThumbsConstraints } from './enum/enum';\nimport { RealAction, ElementAction, PortConstraints } from './enum/enum';\nimport { PathElement } from './core/elements/path-element';\nimport { TextElement } from './core/elements/text-element';\nimport { updateStyle, removeItem, updateConnector, updateShape, setUMLActivityDefaults, findNodeByName } from './utility/diagram-util';\nimport { setSwimLaneDefaults } from './utility/diagram-util';\nimport { checkPortRestriction, serialize, deserialize, updateHyperlink, getObjectType, removeGradient } from './utility/diagram-util';\nimport { Rect } from './primitives/rect';\nimport { getPortShape } from './objects/dictionary/common';\nimport { ShapeAnnotation, PathAnnotation } from './objects/annotation';\nimport { Canvas } from './core/containers/canvas';\nimport { GridPanel, ColumnDefinition } from './core/containers/grid';\nimport { DataSource } from './diagram/data-source';\nimport { Layout } from './layout/layout-base';\nimport { Selector, Text } from './objects/node';\nimport { DiagramEventHandler } from './interaction/event-handlers';\nimport { CommandHandler } from './interaction/command-manager';\nimport { DiagramScroller } from './interaction/scroller';\nimport { isSelected } from './interaction/actions';\nimport { SpatialSearch } from './interaction/spatial-search/spatial-search';\nimport { setAttributeSvg, setAttributeHtml, measureHtmlText, removeElement, createMeasureElements, getDomIndex } from './utility/dom-util';\nimport { getDiagramElement, getScrollerWidth, getHTMLLayer, createUserHandleTemplates } from './utility/dom-util';\nimport { getBackgroundLayer, createHtmlElement, createSvgElement, getNativeLayerSvg, getUserHandleLayer } from './utility/dom-util';\nimport { getPortLayerSvg, getDiagramLayerSvg, applyStyleAgainstCsp } from './utility/dom-util';\nimport { getAdornerLayerSvg, getSelectorElement, getGridLayerSvg, getBackgroundLayerSvg } from './utility/dom-util';\nimport { CommandManager, ContextMenuSettings } from './diagram/keyboard-commands';\nimport { canDelete, canInConnect, canOutConnect, canRotate, canVitualize, canDrawThumbs } from './utility/constraints-util';\nimport { canPortInConnect, canPortOutConnect } from './utility/constraints-util';\nimport { canResize, canSingleSelect, canZoomPan, canZoomTextEdit, canMultiSelect } from './utility/constraints-util';\nimport { canDragSourceEnd, canDragTargetEnd, canDragSegmentThumb, enableReadOnly, canMove } from './utility/constraints-util';\nimport { findAnnotation, arrangeChild, getInOutConnectPorts, removeChildNodes, canMeasureDecoratorPath } from './utility/diagram-util';\nimport { randomId, cloneObject, extendObject, getFunction, getBounds } from './utility/base-util';\nimport { DiagramTooltip, initTooltip } from './objects/tooltip';\nimport { PointPort } from './objects/port';\nimport { canShadow } from './utility/constraints-util';\nimport { Layer } from './diagram/layer';\nimport { DiagramNativeElement } from './core/elements/native-element';\nimport { DiagramHtmlElement } from './core/elements/html-element';\nimport { canAllowDrop } from './utility/constraints-util';\nimport { checkParentAsContainer, addChildToContainer, updateLaneBoundsAfterAddChild } from './interaction/container-interaction';\nimport { getConnectors, updateConnectorsProperties, phaseDefine } from './utility/swim-lane-util';\nimport { swimLaneMeasureAndArrange } from './utility/swim-lane-util';\nimport { arrangeChildNodesInSwimLane, updateHeaderMaxWidth, updatePhaseMaxWidth } from './utility/swim-lane-util';\nimport { addLane, addPhase } from './utility/swim-lane-util';\nimport { SerializationSettings } from './diagram/serialization-settings';\nimport { removeSwimLane, removeLane, removePhase, removeLaneChildNode } from './utility/swim-lane-util';\nimport { RowDefinition } from './core/containers/grid';\nimport { CustomCursorAction } from './diagram/custom-cursor';\nimport { DiagramSettings } from '../diagram/diagram-settings';\nimport { StackPanel } from './core/containers/stack-panel';\nimport { ConnectorFixedUserHandle, NodeFixedUserHandle } from './objects/fixed-user-handle';\n/**\n * Represents the Diagram control\n * ```html\n * <div id='diagram'/>\n * ```\n * ```typescript\n * let diagram: Diagram = new Diagram({\n * width:'1000px', height:'500px' });\n * diagram.appendTo('#diagram');\n * ```\n */\n\nvar Diagram =\n/** @class */\nfunction (_super) {\n  __extends(Diagram, _super);\n  /**\n   * Constructor for creating the widget\n   */\n\n\n  function Diagram(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /** @private */\n\n\n    _this.version = 17.1;\n    /** @private */\n\n    _this.checkMenu = false;\n    /** @private */\n\n    _this.isServerUpdate = false;\n    /** @private */\n\n    _this.oldNodeObjects = [];\n    /** @private */\n\n    _this.oldDiagramObject = {};\n    /** @private */\n\n    _this.oldConnectorObjects = [];\n    /** @private */\n\n    _this.canEnableBlazorObject = false;\n    /** @private */\n\n    _this.connectorTable = {};\n    /** @private */\n\n    _this.groupTable = {};\n    /** @private */\n\n    _this.scrollActions = ScrollActions.None;\n    /** @private */\n\n    _this.blazorActions = BlazorAction.Default;\n    /** @private */\n\n    _this.activeLabel = {\n      id: '',\n      parentId: '',\n      isGroup: false,\n      text: undefined\n    };\n    /** @private */\n\n    _this.textEditing = false;\n    /** @private */\n\n    _this.isTriggerEvent = false;\n    /** @private */\n\n    _this.preventNodesUpdate = false;\n    /** @private */\n\n    _this.preventConnectorsUpdate = false;\n    /** @private */\n\n    _this.callBlazorModel = true;\n    /** @private */\n\n    _this.selectionConnectorsList = [];\n    /** @private */\n\n    _this.deleteVirtualObject = false;\n    _this.canLayout = true;\n    _this.changedConnectorCollection = [];\n    _this.changedNodesCollection = [];\n    _this.previousNodeCollection = [];\n    _this.previousConnectorCollection = [];\n    _this.crudDeleteNodes = []; // Group update to server when BlazorAction is isGroupAction;\n\n    _this.blazorAddorRemoveCollection = [];\n    _this.blazorRemoveIndexCollection = [];\n    _this.diagramid = 88123;\n    /** @private */\n\n    _this.selectedObject = {\n      helperObject: undefined,\n      actualObject: undefined\n    };\n    _this.renderTimer = null;\n    var child;\n    var node;\n    var blazor = 'Blazor';\n    var canCloneObject = isBlazor() && window && window[blazor] && !_this.dataSourceSettings.dataSource;\n    _this.ignoreCollectionWatch = true;\n\n    for (var i = 0; options && options.nodes && i < options.nodes.length; i++) {\n      child = options.nodes[i];\n      node = _this.nodes[i];\n\n      if (child.children && child.children.length > 0) {\n        if (!child.style || !child.style.fill) {\n          node.style.fill = 'transparent';\n        }\n\n        if (!child.style || !child.style.strokeColor) {\n          node.style.strokeColor = 'transparent';\n        }\n      }\n\n      if (child.shape && child.shape.type === 'UmlActivity') {\n        setUMLActivityDefaults(child, node);\n      }\n\n      if (child.shape && child.shape.type === 'SwimLane') {\n        setSwimLaneDefaults(child, node);\n      }\n\n      if (canCloneObject) {\n        _this.previousNodeCollection.push(cloneObject(node, undefined, undefined, true));\n      }\n\n      if (_this.nodeDefaults) {\n        updateDefaultValues(node, child, _this.nodeDefaults);\n      }\n\n      _this.updateAnnotationText(node.annotations);\n    }\n\n    if (options && options.connectors) {\n      for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n        child = options.connectors[i];\n        node = _this.connectors[i];\n\n        if (canCloneObject) {\n          _this.previousConnectorCollection.push(cloneObject(node, undefined, undefined, true));\n        }\n\n        if (_this.connectorDefaults) {\n          updateDefaultValues(node, child, _this.connectorDefaults);\n        }\n\n        _this.updateAnnotationText(node.annotations);\n      }\n    }\n\n    for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n      var defaultConnector = options.connectors[i];\n      var connector = _this.connectors[i];\n\n      if (defaultConnector.shape && defaultConnector.shape.type !== 'None') {\n        setConnectorDefaults(defaultConnector, connector);\n      }\n\n      if (isBlazor()) {\n        var defaultPropChanges = cloneObject(_this.bulkChanges);\n\n        _this.enableServerDataBinding(true);\n\n        _this.protectPropertyChange(true);\n\n        var keys = Object.keys(defaultPropChanges);\n\n        for (var i_1 = 0; i_1 < keys.length; i_1++) {\n          var key = keys[i_1];\n          var split = key.split('-');\n\n          if (split && split[0]) {\n            if (split[0] === 'nodes') {\n              defaultPropChanges[key].sfIndex = Number(split[1]);\n\n              _this.changedNodesCollection.push(defaultPropChanges[key]);\n            }\n\n            if (split[0] === 'connectors') {\n              defaultPropChanges[key].sfIndex = Number(split[1]);\n\n              _this.changedConnectorCollection.push(defaultPropChanges[key]);\n            }\n          }\n        }\n      }\n    }\n\n    return _this;\n  }\n\n  Diagram.prototype.updateAnnotationText = function (annotations) {\n    if (isBlazor() && annotations.length > 0) {\n      for (var i = 0; annotations && i < annotations.length; i++) {\n        var label = annotations[i];\n        label.content = label.content.split('\\\\n').join('\\n');\n      }\n    }\n  };\n\n  Diagram.prototype.callFromServer = function (arg) {\n    var methodName = 'methodName';\n    var mId = 'id';\n\n    if (arg[methodName] === 'getParentID') {\n      var id = arg[mId];\n      return this.nameTable[id].parentId;\n    } else if (arg[methodName] === 'getEdges') {\n      var outEdge = 'outEdge';\n      var isOutEdge = arg[outEdge];\n      var id = arg[mId];\n\n      if (isOutEdge) {\n        return this.nameTable[id].outEdges;\n      } else {\n        return this.nameTable[id].inEdges;\n      }\n    } else if (arg[methodName] === 'updateDiagramObjects') {\n      var obj = 'obj';\n      var isAdding = 'IsAdding';\n      var args = arg[obj];\n      this.isServerUpdate = true;\n\n      if (arg[isAdding]) {\n        var add = 'add';\n        this[add].apply(this, args);\n      } else {\n        var remove_1 = 'remove';\n        this[remove_1].apply(this, args);\n      }\n\n      this.isServerUpdate = false;\n    } else if (arg[methodName] === 'invokeLoadDiagramMethod') {\n      var data = 'data';\n      this.loadDiagram(arg[data]);\n    }\n  };\n\n  Diagram.prototype.clearCollection = function (isConnector) {\n    var collection = [];\n    var obj;\n\n    for (var _i = 0, _a = Object.keys(this.nameTable); _i < _a.length; _i++) {\n      var key = _a[_i];\n      obj = this.nameTable[key];\n\n      if (obj && (isConnector && obj instanceof Connector || !isConnector && obj instanceof Node)) {\n        collection.push(obj);\n      }\n    }\n\n    this.clearObjects(collection);\n  };\n  /**\n   * Updates the diagram control when the objects are changed\n   *\n   * @param {DiagramModel} newProp - Lists the new values of the changed properties\n   * @param {DiagramModel} oldProp - Lists the old values of the changed properties\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.onPropertyChanged = function (newProp, oldProp) {\n    // Model Changed\n    var newValue;\n    var oldValue;\n    var isPropertyChanged = true;\n    var refreshLayout = false;\n    var refereshColelction = false;\n\n    if (this.diagramActions & DiagramAction.Render) {\n      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n        var prop = _a[_i];\n\n        switch (prop) {\n          case 'width':\n          case 'height':\n            this.element.style.width = this.getSizeValue(this.width);\n            this.element.style.height = this.getSizeValue(this.height);\n            this.eventHandler.updateViewPortSize(this.element);\n\n            for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n              var view = _c[_b];\n              var temp = this.views[view];\n\n              if (!(temp instanceof Diagram)) {\n                temp.updateView(temp);\n              }\n            }\n\n            break;\n\n          case 'nodes':\n            if (newProp.nodes.length > 0 && oldProp.nodes.length === 0) {\n              this.clearCollection();\n              refereshColelction = true;\n            } else {\n              for (var _d = 0, _e = Object.keys(newProp.nodes); _d < _e.length; _d++) {\n                var key = _e[_d];\n                var index = Number(key);\n                var actualObject = this.nodes[index];\n                var changedProp = newProp.nodes[index];\n                refreshLayout = refreshLayout || changedProp.excludeFromLayout !== undefined;\n                this.nodePropertyChange(actualObject, oldProp.nodes[index], changedProp, undefined, true, true);\n                var args = {\n                  element: cloneBlazorObject(actualObject),\n                  cause: this.diagramActions,\n                  oldValue: cloneBlazorObject(oldProp.nodes[index]),\n                  newValue: cloneBlazorObject(newProp.nodes[index])\n                };\n\n                if (isBlazor()) {\n                  args.element = {\n                    node: cloneBlazorObject(actualObject)\n                  };\n                  args.oldValue = {\n                    node: cloneBlazorObject(oldValue)\n                  };\n                  args.newValue = {\n                    node: cloneBlazorObject(newValue)\n                  };\n                }\n\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n\n                if (isPropertyChanged) {\n                  isPropertyChanged = false;\n                }\n              }\n\n              if (this.mode === 'Canvas') {\n                this.refreshDiagramLayer();\n              }\n            }\n\n            break;\n\n          case 'connectors':\n            // eslint-disable-next-line no-case-declarations\n            var oldObject = void 0;\n\n            if (newProp.connectors.length > 0 && oldProp.connectors.length === 0) {\n              this.clearCollection(true);\n              refereshColelction = true;\n            } else {\n              for (var _f = 0, _g = Object.keys(newProp.connectors); _f < _g.length; _f++) {\n                var key = _g[_f];\n                var index = Number(key);\n                var actualObject = this.connectors[index];\n                var changedProp = newProp.connectors[index];\n\n                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                  this.diagramActions |= DiagramAction.DecoratorPropertyChange;\n                }\n\n                this.connectorPropertyChange(actualObject, oldProp.connectors[index], changedProp, true, true);\n\n                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                  this.diagramActions = this.diagramActions & ~DiagramAction.DecoratorPropertyChange;\n                }\n\n                var args = {\n                  element: cloneBlazorObject(actualObject),\n                  cause: this.diagramActions,\n                  oldValue: cloneBlazorObject(oldProp.connectors[index]),\n                  newValue: cloneBlazorObject(newProp.connectors[index])\n                };\n\n                if (isBlazor()) {\n                  args.element = {\n                    connector: cloneBlazorObject(actualObject)\n                  };\n                  args.oldValue = {\n                    connector: cloneBlazorObject(oldValue)\n                  };\n                  args.newValue = {\n                    connector: cloneBlazorObject(newValue)\n                  };\n                }\n\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n\n                if (actualObject && actualObject.parentId && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n                  this.updateConnectorEdges(this.nameTable[actualObject.parentId] || actualObject);\n                }\n\n                if (isPropertyChanged) {\n                  isPropertyChanged = false;\n                }\n              }\n\n              this.updateBridging();\n\n              if (this.mode === 'Canvas') {\n                this.refreshDiagramLayer();\n              }\n            }\n\n            break;\n\n          case 'bridgeDirection':\n            this.updateBridging();\n\n            if (this.mode === 'Canvas') {\n              this.refreshDiagramLayer();\n            }\n\n            break;\n\n          case 'backgroundColor':\n            this.intOffPageBackground();\n            break;\n\n          case 'pageSettings':\n            this.validatePageSize();\n            this.updatePage();\n            break;\n\n          case 'selectedItems':\n            if (newProp.selectedItems.userHandles && this.selectedItems.wrapper && this.selectedItems.userHandles) {\n              if (this.selectedItems.userHandles.length > 0) {\n                this.renderSelector(true);\n                break;\n              }\n            }\n\n            if (newProp.selectedItems.constraints) {\n              this.renderSelector(true);\n              break;\n            }\n\n            break;\n\n          case 'snapSettings':\n            this.updateSnapSettings(newProp);\n            break;\n\n          case 'commandManager':\n            this.initCommands();\n            break;\n\n          case 'layout':\n            refreshLayout = true;\n            break;\n\n          case 'dataSourceSettings':\n            this.clear();\n            this.initObjects();\n\n            if (this.layout.type === 'None') {\n              refereshColelction = true;\n            } else {\n              refreshLayout = true;\n            }\n\n            break;\n\n          case 'tooltip':\n            initTooltip(this);\n            break;\n\n          case 'rulerSettings':\n            this.updateRulerSettings(newProp);\n            break;\n\n          case 'layers':\n            this.updateLayer(newProp);\n            break;\n\n          case 'scrollSettings':\n            this.scrollActions |= ScrollActions.PropertyChange;\n            this.updateScrollSettings(newProp);\n            this.scrollActions &= ~ScrollActions.PropertyChange;\n            break;\n\n          case 'locale':\n            if (newProp.locale !== oldProp.locale) {\n              this.realActions |= RealAction.PreventDataInit;\n\n              _super.prototype.refresh.call(this);\n\n              this.realActions &= ~RealAction.PreventDataInit;\n            }\n\n            break;\n\n          case 'contextMenuSettings':\n            if (newProp.contextMenuSettings.showCustomMenuOnly !== undefined) {\n              this.contextMenuSettings.showCustomMenuOnly = newProp.contextMenuSettings.showCustomMenuOnly;\n            }\n\n            if (newProp.contextMenuSettings.show !== undefined) {\n              this.contextMenuSettings.show = newProp.contextMenuSettings.show;\n            }\n\n            if (newProp.contextMenuSettings.items) {\n              var items = newProp.contextMenuSettings.items;\n\n              for (var _h = 0, _j = Object.keys(items); _h < _j.length; _h++) {\n                var key = _j[_h];\n                var index = Number(key);\n                this.contextMenuSettings.items[index] = items[index];\n              }\n\n              if (this.contextMenuModule) {\n                this.contextMenuModule.refreshItems();\n              }\n            }\n\n            break;\n\n          case 'serializationSettings':\n            if (newProp.serializationSettings.preventDefaults !== undefined) {\n              this.serializationSettings.preventDefaults = newProp.serializationSettings.preventDefaults;\n            }\n\n            break;\n        }\n      }\n\n      if (refreshLayout && !refereshColelction) {\n        if (oldProp.layout && oldProp.layout.connectionPointOrigin === 'DifferentPoint' && newProp.layout.connectionPointOrigin === 'SamePoint' || oldProp.layout && newProp.layout && !newProp.layout.enableRouting && oldProp.layout.enableRouting) {\n          for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n\n            if (node.ports && node.ports.length > 0) {\n              var ports = [];\n\n              for (var j = node.ports.length - 1; j >= 0; j--) {\n                if (node.ports[j].id.split('_')[1] === 'LineDistribution') {\n                  ports.push(node.ports[j]);\n                }\n              }\n\n              this.removePorts(node, ports);\n            }\n          }\n\n          for (var j = 0; j < this.connectors.length; j++) {\n            var connector = this.connectors[j];\n            var sourcePortid = connector.sourcePortID;\n            var targetPortId = connector.targetPortID; //const oldSegment: OrthogonalSegmentModel = (connector.segments as OrthogonalSegmentModel);\n\n            connector.sourcePortID = '';\n            connector.targetPortID = '';\n            connector.sourcePortWrapper = undefined;\n            connector.targetPortWrapper = undefined;\n            connector.segments = [];\n            this.connectorPropertyChange(connector, {\n              sourcePortID: sourcePortid,\n              targetPortID: targetPortId\n            }, {\n              sourcePortID: '',\n              targetPortID: ''\n            });\n          }\n        }\n\n        this.doLayout();\n        this.renderReactTemplates();\n      }\n\n      if (isPropertyChanged && this.propertyChange) {\n        var args = {\n          element: cloneBlazorObject(this),\n          cause: this.diagramActions,\n          oldValue: cloneBlazorObject(oldProp),\n          newValue: cloneBlazorObject(newProp)\n        };\n\n        if (isBlazor()) {\n          args.element = {\n            diagram: cloneBlazorObject(this)\n          };\n          args.oldValue = {\n            diagram: cloneBlazorObject(oldValue)\n          };\n          args.newValue = {\n            diagram: cloneBlazorObject(newValue)\n          };\n        }\n\n        this.triggerEvent(DiagramEvent.propertyChange, args);\n      }\n\n      if (!refereshColelction && this.canLogChange() && this.modelChanged(newProp, oldProp)) {\n        var entry = {\n          type: 'PropertyChanged',\n          undoObject: oldProp,\n          redoObject: newProp,\n          category: 'Internal'\n        };\n\n        if (this.historyManager) {\n          this.addHistoryEntry(entry);\n        }\n      }\n\n      this.resetDiagramActions();\n\n      if (refereshColelction) {\n        this.initObjects(true);\n        this.refreshDiagramLayer();\n\n        if (refreshLayout) {\n          this.doLayout();\n        }\n      }\n\n      var scrollAlone = Object.keys(newProp).length === 1 && newProp.scrollSettings !== undefined;\n\n      if (!refereshColelction) {\n        for (var _k = 0, _l = this.views; _k < _l.length; _k++) {\n          var temp = _l[_k];\n          var view = this.views[temp];\n\n          if (!(view instanceof Diagram)) {\n            if (newProp.scrollSettings && newProp.scrollSettings.currentZoom !== oldProp.scrollSettings.currentZoom) {\n              view.updateHtmlLayer(view);\n            }\n\n            if (!scrollAlone) {\n              this.refreshCanvasDiagramLayer(view);\n            }\n          }\n        }\n      }\n\n      this.resetTemplate();\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateSnapSettings = function (newProp) {\n    if (newProp.snapSettings.constraints !== undefined || newProp.snapSettings.horizontalGridlines || newProp.snapSettings.verticalGridlines || newProp.snapSettings.gridType) {\n      this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    }\n  };\n\n  Diagram.prototype.updateRulerSettings = function (newProp) {\n    if (newProp.rulerSettings.dynamicGrid !== undefined) {\n      this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    }\n\n    if (newProp.rulerSettings.showRulers !== undefined) {\n      this.intOffPageBackground();\n      this.scroller.setSize();\n      this.renderRulers();\n    } else if (newProp.rulerSettings.horizontalRuler !== undefined || newProp.rulerSettings.verticalRuler !== undefined) {\n      if (newProp.rulerSettings.horizontalRuler.thickness !== undefined || newProp.rulerSettings.verticalRuler.thickness !== undefined) {\n        removeRulerElements(this);\n        this.intOffPageBackground();\n        this.scroller.setSize();\n        this.renderRulers();\n      } else {\n        updateRuler(this);\n      }\n    }\n\n    this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string}\n   */\n\n\n  Diagram.prototype.getPersistData = function () {\n    var keyEntity = ['loaded'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * Initialize nodes, connectors and renderer\n   */\n\n\n  Diagram.prototype.preRender = function () {\n    this.initializePrivateVariables();\n    this.isProtectedOnChange = true;\n    this.serviceLocator = new ServiceLocator();\n    this.initializeServices();\n    this.setCulture();\n    var measureWindowElement = 'measureElement';\n\n    if (window[measureWindowElement]) {\n      window[measureWindowElement] = null;\n    }\n\n    this.initDiagram();\n    this.initViews();\n    this.unWireEvents();\n    this.wireEvents();\n    this.element.classList.add('e-diagram');\n  };\n\n  Diagram.prototype.initializePrivateVariables = function () {\n    if (this.element.id === '') {\n      var collection = document.getElementsByClassName('e-diagram').length;\n      this.element.id = 'diagram_' + this.diagramid + '_' + collection;\n    }\n\n    this.defaultLocale = {\n      Copy: 'Copy',\n      Cut: 'Cut',\n      Paste: 'Paste',\n      Undo: 'Undo',\n      Redo: 'Redo',\n      SelectAll: 'Select All',\n      Grouping: 'Grouping',\n      Group: 'Group',\n      UnGroup: 'Un Group',\n      Order: 'Order',\n      BringToFront: 'Bring To Front',\n      MoveForward: 'Move Forward',\n      SendToBack: 'Send To Back',\n      SendBackward: 'Send Backward'\n    };\n    this.layerZIndex = -1;\n    this.layerZIndexTable = {};\n    this.nameTable = {};\n    this.pathTable = {};\n    this.groupTable = {};\n    this.commands = {};\n\n    if (!this.isLoading) {\n      this.views = [];\n    }\n\n    this.commandHandler = new CommandHandler(this);\n    this.eventHandler = new DiagramEventHandler(this, this.commandHandler);\n    this.spatialSearch = new SpatialSearch(this.nameTable);\n    this.scroller = new DiagramScroller(this);\n  };\n\n  Diagram.prototype.initializeServices = function () {\n    this.serviceLocator.register('localization', this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));\n  };\n  /**\n   * Method to set culture for chart\n   */\n\n\n  Diagram.prototype.setCulture = function () {\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n  };\n  /* tslint:disable */\n\n  /**\n   * Renders the diagram control with nodes and connectors\n   */\n\n\n  Diagram.prototype.render = function () {\n    if (this.refreshing && this.dataSourceSettings.dataSource && !this.isLoading) {\n      this.nodes = [];\n      this.connectors = [];\n    }\n\n    this.ignoreCollectionWatch = true;\n    var domTable = 'domTable';\n    window[domTable] = {};\n    var collapsedNode = [];\n\n    if (isBlazor()) {\n      var changedNodes = [];\n      var changedConnectors = [];\n\n      for (var i = 0; i < this.changedNodesCollection.length; i++) {\n        changedNodes.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedNodesCollection[i]));\n      }\n\n      for (var i = 0; i < this.changedConnectorCollection.length; i++) {\n        changedConnectors.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedConnectorCollection[i]));\n      }\n\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n      var diagramObject = {\n        nodes: changedNodes,\n        connectors: changedConnectors\n      };\n\n      if (window && window[blazor] && !this.dataSourceSettings.dataSource && (changedNodes.length > 0 || changedConnectors.length > 0)) {\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n\n    if (this.dataSourceSettings.crudAction.read) {\n      this.renderInitialCrud();\n    }\n\n    this.initHistory();\n    this.diagramRenderer = new DiagramRenderer(this.element.id, new SvgRenderer(), this.mode === 'SVG');\n    this.initLayers();\n    this.initializeDiagramLayers();\n    this.diagramRenderer.setLayers();\n    this.initObjects(true);\n    var isLayout = false;\n\n    if (isBlazor() && !this.dataSourceSettings.dataSource && this.layout.type !== 'None') {\n      for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n        var obj = _a[_i];\n        this.insertValue(cloneObject(obj), true);\n      }\n\n      for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n        var obj = _c[_b];\n        this.insertValue(cloneObject(obj), false);\n      }\n\n      isLayout = true;\n    }\n\n    var nodes = this.nodes;\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (!nodes[i].isExpanded) {\n        collapsedNode.push(nodes[i]);\n      }\n    }\n\n    if (collapsedNode.length) {\n      for (var i = collapsedNode.length - 1; i >= 0; i--) {\n        this.commandHandler.expandNode(collapsedNode[i], this);\n      }\n    }\n\n    if (this.canLayout) {\n      this.doLayout();\n    }\n\n    if (isLayout) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    if (this.lineRoutingModule) {\n      var previousConnectorObject = [];\n      var updateConnectorObject = [];\n      var changeConnectors = [];\n\n      if (isBlazor()) {\n        for (var _d = 0, _e = this.connectors; _d < _e.length; _d++) {\n          var obj = _e[_d];\n          previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n        }\n      }\n\n      this.lineRoutingModule.lineRouting(this);\n\n      if (isBlazor()) {\n        for (var _f = 0, _g = this.connectors; _f < _g.length; _f++) {\n          var obj = _g[_f];\n          updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n        }\n\n        this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n\n        if (!(this.blazorActions & BlazorAction.ClearObject)) {\n          var blazorInterop = 'sfBlazor';\n          var blazor = 'Blazor';\n          var diagramObject = {\n            nodes: [],\n            connectors: changeConnectors\n          };\n\n          if (window && window[blazor]) {\n            var obj = {\n              'methodName': 'UpdateBlazorProperties',\n              'diagramobj': diagramObject\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n          }\n        }\n      }\n    }\n\n    this.validatePageSize();\n    this.renderPageBreaks();\n    this.diagramRenderer.renderSvgGridlines(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    this.commandHandler.initSelectorWrapper();\n    /**\n     * Used to render context menu\n     */\n\n    this.notify('initial-load', {});\n    /**\n     * Used to load context menu\n     */\n\n    this.trigger('load');\n    this.scroller.setSize();\n    this.scroller.updateScrollOffsets();\n    this.refreshDiagramLayer();\n\n    if (this.scrollSettings.verticalOffset > 0 || this.scrollSettings.horizontalOffset > 0) {\n      this.updateScrollOffset();\n    }\n    /**\n     * Used to end the context menu rendering\n     */\n\n\n    if (Browser.isDevice) {\n      this.tool = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n    }\n\n    this.notify('initial-end', {});\n    this.isProtectedOnChange = false;\n    this.tooltipObject = initTooltip(this);\n    this.diagramActions = DiagramAction.Render;\n    this.initCommands();\n    var hiddenUserHandleTemplate = document.getElementsByClassName(this.element.id + '_hiddenUserHandleTemplate');\n    createUserHandleTemplates(this.userHandleTemplate, hiddenUserHandleTemplate, this.selectedItems, this.element.id);\n    this.updateTemplate();\n    this.isLoading = false;\n    this.renderComplete();\n    this.updateFitToPage();\n\n    if (this.refreshing) {\n      this.renderReactTemplates();\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateFitToPage = function () {\n    if (this.pageSettings && this.pageSettings.fitOptions && this.pageSettings.fitOptions.canFit) {\n      this.fitToPage(this.pageSettings.fitOptions);\n    }\n  };\n\n  Diagram.prototype.updateTemplate = function () {\n    var node;\n    var annotation;\n    var pathAnnotation;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      node = this.nodes[i];\n\n      if (node.shape.type === 'HTML' || node.shape.type === 'Native') {\n        updateBlazorTemplate('diagramsf_node_template', 'NodeTemplate', this, false);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      node = this.nodes[i];\n      annotation = node.annotations[0];\n\n      if (annotation && annotation.annotationType === 'Template') {\n        updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      pathAnnotation = this.connectors[i].annotations[0];\n\n      if (pathAnnotation && pathAnnotation.annotationType === 'Template') {\n        updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n      if (this.selectedItems.userHandles[i].template) {\n        updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n        break;\n      }\n    }\n  };\n\n  Diagram.prototype.resetTemplate = function () {\n    var htmlNode;\n    var templateAnnotation;\n    var path;\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      htmlNode = this.nodes[i];\n\n      if (htmlNode.shape.type === 'HTML' && htmlNode.shape.content instanceof HTMLElement) {\n        resetBlazorTemplate('diagramsf_node_template', 'NodeTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.nodes.length; i++) {\n      htmlNode = this.nodes[i];\n      templateAnnotation = htmlNode.annotations[0];\n\n      if (templateAnnotation && templateAnnotation.annotationType === 'Template' && templateAnnotation.content instanceof HTMLElement) {\n        resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      path = this.connectors[i].annotations[0];\n\n      if (path && path.annotationType === 'Template' && path.content instanceof HTMLElement) {\n        resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n      if (this.selectedItems.userHandles[i].template) {\n        updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n        break;\n      }\n    }\n  }; //Call back function to the node template\n  // private measureNode(node: NodeModel): void {\n  //     if (node.shape.type === 'Native' && isBlazor()) {\n  //         node.wrapper.measure(new Size(node.width, node.height));\n  //         node.wrapper.arrange(node.wrapper.desiredSize);\n  //     }\n  // }\n\n\n  Diagram.prototype.renderInitialCrud = function () {\n    /* eslint-disable */\n    var tempObj = this;\n    /* eslint-enable */\n\n    if (tempObj.dataSourceSettings.crudAction.read) {\n      var callback = new Ajax(tempObj.dataSourceSettings.crudAction.read, 'GET', false);\n\n      callback.onSuccess = function (data) {\n        if (tempObj.dataSourceSettings.dataManager) {\n          tempObj.dataSourceSettings.dataManager = JSON.parse(data);\n        } else {\n          tempObj.dataSourceSettings.dataSource = JSON.parse(data);\n        }\n\n        tempObj.dataBind();\n      };\n\n      callback.send().then();\n    }\n\n    if (tempObj.dataSourceSettings.connectionDataSource.crudAction.read) {\n      var callback = new Ajax(tempObj.dataSourceSettings.connectionDataSource.crudAction.read, 'GET', false);\n\n      callback.onSuccess = function (data) {\n        tempObj.dataSourceSettings.connectionDataSource.dataManager = JSON.parse(data);\n        tempObj.dataBind();\n      };\n\n      callback.send().then();\n    }\n  };\n  /**\n   * Returns the module name of the diagram\n   *\n   * @returns {string}  Returns the module name of the diagram\n   */\n\n\n  Diagram.prototype.getModuleName = function () {\n    return 'diagram';\n  };\n  /**\n   *\n   * Returns the name of class Diagram\n   * @returns {string}  Returns the module name of the diagram\n   * @private\n   */\n\n\n  Diagram.prototype.getClassName = function () {\n    return 'Diagram';\n  };\n  /* tslint:disable */\n\n  /**\n   * To provide the array of modules needed for control rendering\n   *\n   * @returns {ModuleDeclaration[]} To provide the array of modules needed for control rendering .\\\n   * @private\n   */\n\n\n  Diagram.prototype.requiredModules = function () {\n    var modules = [];\n    modules.push({\n      member: 'Bpmn',\n      args: []\n    });\n    modules.push({\n      member: 'Bridging',\n      args: []\n    });\n    modules.push({\n      member: 'ConnectorEditingTool',\n      args: []\n    });\n\n    if (isBlazor()) {\n      modules.push({\n        member: 'BlazorTooltip',\n        args: []\n      });\n    }\n\n    if (this.constraints & DiagramConstraints.UndoRedo) {\n      modules.push({\n        member: 'UndoRedo',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' || this.layout.enableAnimation) {\n      modules.push({\n        member: 'LayoutAnimate',\n        args: []\n      });\n    }\n\n    if (this.snapSettings.constraints) {\n      modules.push({\n        member: 'Snapping',\n        args: [this]\n      });\n    }\n\n    modules.push({\n      member: 'PrintandExport',\n      args: [this]\n    });\n\n    if (this.contextMenuSettings.show) {\n      modules.push({\n        member: 'contextMenu',\n        args: [this, this.serviceLocator]\n      });\n    }\n\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree') {\n      modules.push({\n        member: 'OrganizationalChart',\n        args: [this]\n      });\n    }\n\n    if (this.layout.type === 'ComplexHierarchicalTree') {\n      modules.push({\n        member: 'ComplexHierarchicalTree',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'MindMap') {\n      modules.push({\n        member: 'MindMapChart',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'RadialTree') {\n      modules.push({\n        member: 'RadialTree',\n        args: []\n      });\n    }\n\n    if (this.layout.type === 'SymmetricalLayout') {\n      modules.push({\n        member: 'SymmetricalLayout',\n        args: []\n      });\n    }\n\n    if (this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource || this.dataSourceSettings.crudAction.read || this.dataSourceSettings.connectionDataSource.crudAction.read) {\n      modules.push({\n        member: 'DataBinding',\n        args: []\n      });\n    }\n\n    if (this.constraints & DiagramConstraints.LineRouting) {\n      modules.push({\n        member: 'LineRouting',\n        args: []\n      });\n    }\n\n    if (this.layout && this.layout.connectionPointOrigin === 'DifferentPoint' || this.layout.arrangement === 'Linear' || this.layout.enableRouting) {\n      modules.push({\n        member: 'LineDistribution',\n        args: []\n      });\n    }\n\n    return modules;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.removeUserHandlesTemplate = function () {\n    if (this.selectedItems.userHandles.length) {\n      for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n          var elementId = _a[_i];\n          removeElement(this.selectedItems.userHandles[i].name + '_template_hiddenUserHandle', elementId);\n        }\n      }\n    }\n  };\n  /**\n   *To destroy the diagram\n   *\n   * @returns {void} To destroy the diagram\n   */\n\n\n  Diagram.prototype.destroy = function () {\n    clearInterval(this.renderTimer);\n    this.renderTimer = null;\n\n    if (this.hRuler && this.vRuler) {\n      this.hRuler.destroy();\n      this.vRuler.destroy();\n    }\n\n    this.tooltipObject.destroy();\n    this.droppable.destroy();\n    this.unWireEvents();\n    this.notify('destroy', {});\n\n    _super.prototype.destroy.call(this);\n\n    this.removeUserHandlesTemplate();\n    this.clearTemplate();\n\n    if (document.getElementById(this.element.id)) {\n      this.element.classList.remove('e-diagram');\n      var tooltipelement = document.getElementsByClassName('e-diagram-tooltip');\n\n      while (tooltipelement.length > 0) {\n        tooltipelement[0].parentNode.removeChild(tooltipelement[0]);\n      }\n\n      var content = document.getElementById(this.element.id + 'content');\n\n      if (content) {\n        this.element.removeChild(content);\n      }\n\n      var measureWindowElement = 'measureElement';\n\n      if (window[measureWindowElement]) {\n        window[measureWindowElement].usageCount -= 1;\n        var measureElementCount = 'measureElementCount';\n        window[measureElementCount]--;\n\n        if (window[measureElementCount] === 0) {\n          window[measureWindowElement].parentNode.removeChild(window[measureWindowElement]);\n          window[measureWindowElement] = null;\n        }\n      }\n    }\n\n    var domTable = 'domTable';\n    window[domTable] = {};\n\n    for (var i = 0; i < this.layers.length; i++) {\n      var currentLayer = this.layers[i];\n      currentLayer.zIndexTable = {};\n    }\n\n    this.diagramActions = undefined;\n  }; //Wires the mouse events with diagram control\n\n\n  Diagram.prototype.wireEvents = function () {\n    var startEvent = Browser.touchStartEvent;\n    var stopEvent = Browser.touchEndEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    var isIE11Pointer = Browser.isPointer;\n    var wheelEvent = Browser.info.name === 'mozilla' ? isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll' : 'mousewheel';\n    EventHandler.add(this.diagramCanvas, startEvent, this.eventHandler.mouseDown, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'keydown', this.eventHandler.keyDown, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'keyup', this.eventHandler.keyUp, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, 'scroll', this.eventHandler.scrolled, this.eventHandler);\n    EventHandler.add(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel, this.eventHandler);\n    EventHandler.add(window, 'resize', this.eventHandler.windowResize, this.eventHandler);\n    this.initDroppables();\n  }; //Unwires the mouse events from diagram control\n\n\n  Diagram.prototype.unWireEvents = function () {\n    var startEvent = Browser.touchStartEvent;\n    var moveEvent = Browser.touchMoveEvent;\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    var isIE11Pointer = Browser.isPointer;\n    var wheelEvent = Browser.info.name === 'mozilla' ? isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll' : 'mousewheel';\n    var stopEvent = Browser.touchEndEvent;\n    EventHandler.remove(this.diagramCanvas, startEvent, this.eventHandler.mouseDown);\n    EventHandler.remove(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove);\n    EventHandler.remove(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp);\n    EventHandler.remove(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave);\n    EventHandler.remove(this.diagramCanvas, 'keydown', this.eventHandler.keyDown);\n    EventHandler.remove(this.diagramCanvas, 'keyup', this.eventHandler.keyUp);\n    EventHandler.remove(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick);\n    EventHandler.remove(this.diagramCanvas, 'scroll', this.eventHandler.scrolled);\n    EventHandler.remove(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel);\n    EventHandler.remove(window, 'resize', this.eventHandler.windowResize);\n  }; //public methods - start region\n\n  /**\n   * Selects the given collection of objects \\\n   *\n   * @returns { void } Selects the given collection of objects .\\\n   * @param {NodeModel | ConnectorModel} objects - Defines the collection of nodes and connectors to be selected\n   * @param {boolean} multipleSelection -Defines whether the existing selection has to be cleared or not\n   *\n   */\n\n\n  Diagram.prototype.select = function (objects, multipleSelection) {\n    if (isBlazor()) {\n      for (var i = 0; i < objects.length; i++) {\n        objects[i] = this.nameTable[objects[i].id];\n      }\n\n      objects = this.nameTable[objects.id] || objects;\n    }\n\n    if (objects != null) {\n      this.commandHandler.selectObjects(objects, multipleSelection);\n    }\n  };\n  /**\n   *  Selects the all the objects. \\\n   *\n   * @returns { void }  Selects the all the objects. .\\\n   *\n   */\n\n\n  Diagram.prototype.selectAll = function () {\n    var selectedItems = [];\n    selectedItems = this.getObjectsOfLayer(this.activeLayer.objects);\n    this.select(selectedItems);\n  };\n  /**\n   * Removes the given object from selection list \\\n   *\n   * @returns { void } Selects the given collection of objects .\\\n   * @param {NodeModel | ConnectorModel} obj -  Removes the given object from selection list\n   *\n   */\n\n\n  Diagram.prototype.unSelect = function (obj) {\n    if (isBlazor()) {\n      this.commandHandler.oldSelectedObjects = cloneObject(this.selectedItems);\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj && isSelected(this, obj)) {\n      this.commandHandler.unSelect(obj);\n      this.commandHandler.updateBlazorSelector();\n    }\n  };\n  /**\n   * Removes all elements from the selection list\\\n   *\n   * @returns { void } Removes all elements from the selection list .\\\n   *\n   */\n\n\n  Diagram.prototype.clearSelection = function () {\n    this.commandHandler.clearSelection(true);\n  };\n  /**\n   *  Update the diagram clipboard dimension \\\n   *\n   * @returns { void }  Update the diagram clipboard dimension .\\\n   *\n   */\n\n\n  Diagram.prototype.updateViewPort = function () {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.eventHandler.updateViewPortSize(this.element);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n\n  Diagram.prototype.cutCommand = function () {\n    this.cut();\n  };\n  /**\n   *  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard \\\n   *\n   * @returns { void }  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard .\\\n   *\n   */\n\n\n  Diagram.prototype.cut = function () {\n    this.commandHandler.cut();\n  };\n  /**\n   *   Add a process into the sub-process \\\n   *\n   * @returns { void }  Add a process into the sub-process.\\\n   * @param {NodeModel | ConnectorModel} process - provide the process value.\n   * @param {boolean} parentId - provide the parentId value.\n   * @blazorArgsType process|DiagramNode\n   *\n   */\n\n\n  Diagram.prototype.addProcess = function (process, parentId) {\n    if (this.bpmnModule) {\n      this.bpmnModule.addProcess(process, parentId, this);\n    }\n  };\n  /**\n   *  Remove a process from the sub-processs \\\n   *\n   * @returns { void }  Remove a process from the sub-process.\\\n   * @param {string} id - provide the id value.\n   *\n   */\n\n\n  Diagram.prototype.removeProcess = function (id) {\n    if (this.bpmnModule) {\n      this.bpmnModule.removeProcess(id, this);\n    }\n  };\n\n  Diagram.prototype.pasteCommand = function () {\n    this.paste();\n  };\n  /**\n   *  Adds the given objects/ the objects in the diagram clipboard to diagram control \\\n   *\n   * @returns { void }  Remove a process from the sub-process.\\\n   * @param {NodeModel[] | ConnectorModel[]} obj - Defines the objects to be added to diagram\n    *\n   */\n\n\n  Diagram.prototype.paste = function (obj) {\n    this.commandHandler.paste(obj);\n  };\n  /**\n   *  fit the diagram to the page with respect to mode and region \\\n   *\n   * @returns { void }  fit the diagram to the page with respect to mode and region.\\\n   * @param {IFitOptions} options - provide the options value.\n   *\n   */\n\n\n  Diagram.prototype.fitToPage = function (options) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.fitToPage(options);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * bring the specified bounds into the viewport \\\n   *\n   * @returns { void }  bring the specified bounds into the viewport.\\\n   * @param {Rect} bound - provide the bound value.\n   *\n   */\n\n\n  Diagram.prototype.bringIntoView = function (bound) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.bringIntoView(bound);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * bring the specified bounds to the center of the viewport \\\n   *\n   * @returns { void }  bring the specified bounds to the center of the viewport.\\\n   * @param {Rect} bound - provide the bound value.\n   *\n   */\n\n\n  Diagram.prototype.bringToCenter = function (bound) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.bringToCenter(bound);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n\n  Diagram.prototype.copyCommand = function () {\n    this.copy();\n  };\n  /**\n   * Copies the selected nodes and connectors to diagram clipboard \\\n   *\n   * @returns { Object } Copies the selected nodes and connectors to diagram clipboard.\\\n   *\n   */\n\n\n  Diagram.prototype.copy = function () {\n    var obj = this.commandHandler.copy();\n    return obj;\n  };\n  /**\n   *  Group the selected nodes and connectors in diagram \\\n   *\n   * @returns { void }   Group the selected nodes and connectors in diagram.\\\n   *\n   */\n\n\n  Diagram.prototype.group = function () {\n    if (this.selectedItems.nodes.length > 1) {\n      this.callBlazorModel = false;\n      this.insertBlazorDiagramObjects(this.selectedItems);\n      this.commandHandler.group();\n      this.callBlazorModel = true;\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   *  UnGroup the selected nodes and connectors in diagram \\\n   *\n   * @returns { void }   UnGroup the selected nodes and connectors in diagram.\\\n   *\n   */\n\n\n  Diagram.prototype.unGroup = function () {\n    this.callBlazorModel = false;\n    this.insertBlazorDiagramObjects(this.selectedItems);\n    this.commandHandler.unGroup();\n    this.callBlazorModel = true;\n    this.commandHandler.getBlazorOldValues();\n  };\n  /**\n   *  send the selected nodes or connectors back \\\n   *\n   * @returns { void }   send the selected nodes or connectors back.\\\n   *\n   */\n\n\n  Diagram.prototype.sendToBack = function () {\n    this.commandHandler.sendToBack();\n  };\n  /**\n   * set the active layer\\\n   *\n   * @returns { void } set the active layer.\\\n   * @param {string} layerName - defines the name of the layer which is to be active layer.\n   *\n   */\n\n\n  Diagram.prototype.setActiveLayer = function (layerName) {\n    var layer = this.commandHandler.getLayer(layerName);\n    this.activeLayer = layer;\n  };\n  /**\n   * add the layer into diagram\\\n   *\n   * @returns { void } add the layer into diagram.\\\n   * @param {LayerModel} layer - defines the layer model which is to be added\n   * @param {Object[]} layerObject - defines the object of the layer\n   * @blazorArgsType layer|DiagramLayer\n    *\n   */\n\n\n  Diagram.prototype.addLayer = function (layer, layerObject) {\n    this.commandHandler.addLayer(layer, layerObject);\n  };\n  /* eslint-disable */\n\n  /**\n   *  @private\n   */\n\n\n  Diagram.prototype.addDiagramLayer = function (layer, layerObject) {\n    this.commandHandler.addLayer(layer, layerObject, false);\n  };\n  /**\n   * remove the layer from diagram \\\n   *\n   * @returns { void } remove the layer from diagram.\\\n   * @param {string} layerId - provide the bound value.\n    *\n   */\n\n\n  Diagram.prototype.removeLayer = function (layerId) {\n    this.commandHandler.removeLayer(layerId, isBlazor());\n  };\n  /**\n   *  @private\n   */\n\n\n  Diagram.prototype.removeDiagramLayer = function (layerId) {\n    this.commandHandler.removeLayer(layerId, false);\n  };\n  /* eslint-enable */\n\n  /**\n   * move objects from the layer to another layer from diagram\\\n   *\n   * @returns { void } move objects from the layer to another layer from diagram.\\\n   * @param {string[]} objects - define the objects id of string array\n   * @param {string} targetLayer - define the objects id of string array\n   *\n   */\n\n\n  Diagram.prototype.moveObjects = function (objects, targetLayer) {\n    var oldValues = cloneObject(this.layers);\n    this.enableServerDataBinding(false);\n    this.commandHandler.moveObjects(objects, targetLayer);\n    var result = this.commandHandler.deepDiffer.map(oldValues, cloneObject(this.layers));\n    var diffValue = this.commandHandler.deepDiffer.frameObject({}, result);\n    this.oldDiagramObject = {\n      layers: diffValue\n    };\n    this.commandHandler.updateBlazorProperties();\n  };\n  /* tslint:disable */\n\n\n  Diagram.prototype.layerObjectUpdate = function () {\n    if (isBlazor()) {\n      this.enableServerDataBinding(false);\n      this.oldDiagramObject['layers'] = [];\n\n      for (var i = 0; i < this.layers.length; i++) {\n        // tslint:disable-next-line:no-any\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var leyerObject = cloneObject(this.layers[i]);\n        leyerObject.sfIndex = this.layers[i].zIndex;\n        this.oldDiagramObject['layers'].push(leyerObject);\n      }\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * move the layer backward \\\n   *\n   * @returns { void } move the layer backward .\\\n   * @param {string} layerName - define the name of the layer\n   * @param {string} targetLayer - define the objects id of string array\n   *\n   */\n\n\n  Diagram.prototype.sendLayerBackward = function (layerName) {\n    this.layerObjectUpdate();\n    this.commandHandler.sendLayerBackward(layerName);\n    this.commandHandler.updateLayerObject(this.oldDiagramObject, true);\n  };\n  /**\n   * move the layer forward \\\n   *\n   * @returns { void } move the layer forward.\\\n   * @param {string} layerName - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.bringLayerForward = function (layerName) {\n    this.layerObjectUpdate();\n    this.commandHandler.bringLayerForward(layerName);\n    this.commandHandler.updateLayerObject(this.oldDiagramObject);\n  };\n  /**\n   *clone a layer with its object \\\n   *\n   * @returns { void } move the layer forward.\\\n   * @param {string} layerName - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.cloneLayer = function (layerName) {\n    this.commandHandler.cloneLayer(layerName);\n  };\n  /**\n   *bring the selected nodes or connectors to front \\\n   *\n   * @returns { void } move the layer forward.\\\n   *\n   */\n\n\n  Diagram.prototype.bringToFront = function () {\n    this.commandHandler.bringToFront();\n  };\n  /**\n   *send the selected nodes or connectors forward \\\n   *\n   * @returns { void } send the selected nodes or connectors forward.\\\n   *\n   */\n\n\n  Diagram.prototype.moveForward = function () {\n    this.commandHandler.sendForward();\n  };\n  /**\n   *send the selected nodes or connectors back\\\n   *\n   * @returns { void } send the selected nodes or connectors back.\\\n   *\n   */\n\n\n  Diagram.prototype.sendBackward = function () {\n    this.commandHandler.sendBackward();\n  };\n  /**\n   *gets the node or connector having the given name \\\n   *\n   * @returns { void } gets the node or connector having the given name.\\\n   * @param {string} name - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getObject = function (name) {\n    return this.nameTable[name];\n  };\n  /**\n   * gets the node object for the given node ID \\\n   *\n   * @returns { void } gets the node object for the given node ID.\\\n   * @param {string} id - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getNodeObject = function (id) {\n    return cloneObject(this.nameTable[id]);\n  };\n  /**\n   *gets the connector object for the given node ID \\\n   *\n   * @returns { void } gets the connector object for the given node ID.\\\n   * @param {string} id - define the name of the layer\n   *\n   */\n\n\n  Diagram.prototype.getConnectorObject = function (id) {\n    return cloneObject(this.nameTable[id]);\n  };\n  /**\n   * gets the active layer back \\\n   *\n   * @returns { void } gets the active layer back.\\\n   *\n   */\n\n\n  Diagram.prototype.getActiveLayer = function () {\n    return this.activeLayer;\n  };\n\n  Diagram.prototype.nudgeCommand = function (direction, x, y) {\n    if (typeof direction !== 'object' && (this.selectedItems.nodes.length || this.selectedItems.connectors.length) > 0) {\n      this.nudge(direction);\n    }\n  };\n  /**\n   * Moves the selected objects towards the given direction\n   *\n   * @returns { void }  Moves the selected objects towards the given direction .\\\n   * @param {NudgeDirection} direction -  Defines the direction by which the objects have to be moved\n   * @param {number} x - Defines the distance by which the selected objects have to be horizontally moved\n   * @param {number} y -  Defines the distance by which the selected objects have to be vertically moved\n   */\n\n\n  Diagram.prototype.nudge = function (direction, x, y) {\n    var tx = 0;\n    var ty = 0;\n    var negativeDirection;\n\n    if (direction === 'Left' || direction === 'Right') {\n      negativeDirection = direction === 'Left';\n      tx = (negativeDirection ? -1 : 1) * (x ? x : 1);\n    } else {\n      negativeDirection = direction === 'Up';\n      ty = (negativeDirection ? -1 : 1) * (y ? y : 1);\n    }\n\n    var obj = this.selectedItems;\n    var annotation = this.selectedItems.wrapper.children[0];\n\n    if (annotation instanceof TextElement) {\n      this.commandHandler.labelDrag(obj.nodes[0], annotation, tx, ty);\n    } else {\n      var undoObject = cloneObject(this.selectedItems);\n      this.protectPropertyChange(true);\n      this.drag(obj, tx, ty);\n      this.protectPropertyChange(false);\n      var entry = {\n        type: 'PositionChanged',\n        redoObject: cloneObject(this.selectedItems),\n        undoObject: undoObject,\n        category: 'Internal'\n      };\n      this.addHistoryEntry(entry);\n    }\n\n    this.refreshCanvasLayers();\n  };\n\n  Diagram.prototype.insertBlazorDiagramObjects = function (actualObject) {\n    if (isBlazor() && !(this.blazorActions & BlazorAction.interaction)) {\n      this.enableServerDataBinding(false);\n\n      if (actualObject instanceof Selector) {\n        for (var i = 0; i < actualObject.nodes.length; i++) {\n          this.insertBlazorDiagramObjects(actualObject.nodes[i]);\n        }\n\n        for (var i = 0; i < actualObject.connectors.length; i++) {\n          this.insertBlazorDiagramObjects(actualObject.connectors[i]);\n        }\n      }\n\n      if (!(actualObject instanceof Selector)) {\n        //let object: object;\n        if (actualObject && actualObject.children && actualObject.children.length > 0) {\n          for (var i = 0; i < actualObject.children.length; i++) {\n            this.insertBlazorDiagramObjects(this.nameTable[actualObject.children[i]]);\n          }\n        }\n\n        var object = cloneObject(this.nameTable[actualObject.id]);\n        this.insertValue(object, !(getObjectType(actualObject) === Connector));\n      }\n    }\n  };\n  /**\n   * Drags the given object by the specified pixels\n   *\n   * @returns { void }  Drags the given object by the specified pixels .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the nodes/connectors to be dragged\n   * @param {number} tx - Defines the distance by which the given objects have to be horizontally moved\n   * @param {number} ty - Defines the distance by which the given objects have to be vertically moved\n   */\n\n\n  Diagram.prototype.drag = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n\n    if (isBlazor() && obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (this.bpmnModule && obj instanceof Node) {\n      var updated = this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n\n      if (updated) {\n        return;\n      }\n    }\n\n    if (obj instanceof Selector) {\n      this.preventConnectorsUpdate = true;\n\n      if (obj.nodes && obj.nodes.length) {\n        for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n          var node = _a[_i];\n          this.callBlazorModel = false;\n          this.drag(node, tx, ty);\n\n          if (node.parentId) {\n            var parent_1 = this.nameTable[node.parentId];\n\n            if (parent_1.isLane) {\n              var swimlane = this.nameTable[parent_1.parentId];\n              updateLaneBoundsAfterAddChild(parent_1, swimlane, node, this);\n            }\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      if (obj.connectors && obj.connectors.length) {\n        this.callBlazorModel = false;\n\n        for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b];\n          this.drag(conn, tx, ty);\n\n          if (this.selectionConnectorsList.indexOf(conn) === -1) {\n            this.selectionConnectorsList.push(conn);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      this.updateSelector();\n\n      if (this.diagramActions & DiagramAction.DragUsingMouse) {\n        this.updatePage();\n      }\n    } else {\n      if (obj instanceof Node) {\n        if (this.bpmnModule) {\n          this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n        }\n      }\n\n      this.commandHandler.drag(obj, tx, ty);\n    }\n\n    if (obj instanceof Selector) {\n      this.preventConnectorsUpdate = false;\n\n      for (var _d = 0, _e = this.selectionConnectorsList; _d < _e.length; _d++) {\n        var connectors = _e[_d];\n        this.updateConnectorProperties(this.nameTable[connectors.id]);\n\n        if (connectors.shape.type === 'Bpmn' && connectors.shape.sequence === 'Default') {\n          this.commandHandler.updatePathElementOffset(connectors);\n        }\n      }\n\n      this.selectionConnectorsList = [];\n    }\n\n    if (!(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.updateSelector();\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n\n  Diagram.prototype.disableStackContainerPadding = function (wrapper, disable) {\n    if (wrapper instanceof StackPanel) {\n      wrapper.considerPadding = disable;\n    }\n\n    if (wrapper.children) {\n      for (var _i = 0, _a = wrapper.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        this.disableStackContainerPadding(child, false);\n      }\n    }\n  };\n  /**\n   * Scales the given objects by the given ratio\n   *\n   * @returns { void } Scales the given objects by the given ratio .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be resized\n   * @param {number} sx - Defines the ratio by which the objects have to be horizontally scaled\n   * @param {number} sy - Defines the ratio by which the objects have to be vertically scaled\n   * @param {PointModel} pivot - Defines the reference point with respect to which the objects will be resized\n   */\n\n\n  Diagram.prototype.scale = function (obj, sx, sy, pivot) {\n    this.disableStackContainerPadding(obj.wrapper, false);\n    this.insertBlazorDiagramObjects(obj);\n    var checkBoundaryConstraints = true;\n\n    if (obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj instanceof Selector) {\n      if (obj.nodes && obj.nodes.length) {\n        this.callBlazorModel = false;\n\n        for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n          var node = _a[_i];\n          checkBoundaryConstraints = this.commandHandler.scale(node, sx, sy, pivot, obj);\n\n          if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n            this.commandHandler.scale(node, 1 / sx, 1 / sy, pivot, obj);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      if (obj.connectors && obj.connectors.length) {\n        this.callBlazorModel = false;\n\n        for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b];\n          this.commandHandler.scale(conn, sx, sy, pivot, obj);\n\n          if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n            this.commandHandler.scale(conn, 1 / sx, 1 / sy, pivot, obj);\n          }\n        }\n\n        this.callBlazorModel = true;\n      }\n\n      this.updateSelector();\n      this.refreshCanvasLayers();\n    } else {\n      this.commandHandler.scale(obj, sx, sy, pivot, obj.children ? obj : undefined);\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    this.disableStackContainerPadding(obj.wrapper, true);\n    return checkBoundaryConstraints;\n  };\n  /**\n   * Rotates the given nodes/connectors by the given angle\n   *\n   * @returns { void } Rotates the given nodes/connectors by the given angle .\\\n   * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be rotated\n   * @param {number} angle - Defines the angle by which the objects have to be rotated\n   * @param {PointModel} pivot - Defines the reference point with reference to which the objects have to be rotated\n   */\n\n\n  Diagram.prototype.rotate = function (obj, angle, pivot) {\n    this.insertBlazorDiagramObjects(obj);\n    var checkBoundaryConstraints;\n\n    if (obj.id) {\n      obj = this.nameTable[obj.id] || obj;\n    }\n\n    if (obj) {\n      pivot = pivot || {\n        x: obj.wrapper.offsetX,\n        y: obj.wrapper.offsetY\n      };\n\n      if (obj instanceof Selector) {\n        this.callBlazorModel = false;\n        obj.rotateAngle += angle;\n        obj.wrapper.rotateAngle += angle;\n        var bounds = getBounds(obj.wrapper);\n        checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bounds);\n\n        if (!checkBoundaryConstraints) {\n          obj.rotateAngle -= angle;\n          obj.wrapper.rotateAngle -= angle;\n          return checkBoundaryConstraints;\n        }\n\n        var objects = [];\n        objects = objects.concat(obj.nodes);\n        objects = objects.concat(obj.connectors);\n        this.commandHandler.rotateObjects(obj, objects, angle, pivot);\n        this.callBlazorModel = true;\n      } else {\n        this.commandHandler.rotateObjects(obj, [obj], angle, pivot);\n      }\n    }\n\n    if (this.callBlazorModel && !(this.blazorActions & BlazorAction.interaction)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n\n    return checkBoundaryConstraints;\n  };\n  /**\n   * Moves the source point of the given connector\n   *\n   * @returns { void }  Moves the source point of the given connector .\\\n   * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n   * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n   * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n   */\n\n\n  Diagram.prototype.dragSourceEnd = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n    this.commandHandler.dragSourceEnd(obj, tx, ty);\n\n    if (this.callBlazorModel) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Moves the target point of the given connector\n   *\n   * @returns { void }   Moves the target point of the given connector.\\\n   * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n   * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n   * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n   */\n\n\n  Diagram.prototype.dragTargetEnd = function (obj, tx, ty) {\n    this.insertBlazorDiagramObjects(obj);\n    this.commandHandler.dragTargetEnd(obj, tx, ty);\n\n    if (this.callBlazorModel) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Finds all the objects that is under the given mouse position\n   *\n   * @returns { void }   Finds all the objects that is under the given mouse position.\\\n   * @param {PointModel} position - Defines the position, the objects under which has to be found\n   * @param {IElement} source - Defines the object, the objects under which has to be found\n   */\n\n\n  Diagram.prototype.findObjectsUnderMouse = function (position, source) {\n    return this.eventHandler.findObjectsUnderMouse(position, source);\n  };\n  /**\n   * Finds the object that is under the given mouse position\n   *\n   * @returns { void }   Finds the object that is under the given mouse position.\\\n   * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects, from which the object has to be found.\n   * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n   * @param {boolean} inAction - Defines the active state of the action.\n   */\n\n\n  Diagram.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n    return this.eventHandler.findObjectUnderMouse(objects, action, inAction);\n  };\n  /**\n   * Finds the object that is under the given active object (Source)\n   *\n   * @returns { void } Finds the object that is under the given active object (Source) .\\\n   * @param {NodeModel[] | ConnectorModel[]} objects - Defines the collection of objects, from which the object has to be found.\n   * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n   * @param {boolean} inAction - Defines the active state of the action.\n   * @param {PointModel} position - Defines the position.\n   * @param {IElement} source - Defines the source.\n   */\n\n\n  Diagram.prototype.findTargetObjectUnderMouse = function (objects, action, inAction, position, source) {\n    return this.eventHandler.findTargetUnderMouse(objects, action, inAction, position, source);\n  };\n  /**\n   * Finds the child element of the given object at the given position\n   *\n   * @returns { void } Finds the child element of the given object at the given position .\\\n   * @param {IElement} obj - Defines the object, the child element of which has to be found\n   * @param {PointModel} position - Defines the position, the child element under which has to be found\n   * @param {number} padding - Defines the padding, the child element under which has to be found\n   */\n\n\n  Diagram.prototype.findElementUnderMouse = function (obj, position, padding) {\n    return this.eventHandler.findElementUnderMouse(obj, position, padding);\n  };\n  /**\n   * Defines the action to be done, when the mouse hovers the given element of the given object\n   *\n   * @returns { void } Defines the action to be done, when the mouse hovers the given element of the given object .\\\n   * @param {NodeModel | ConnectorModel} obj - Defines the object under mouse\n   * @param {DiagramElement} wrapper - Defines the target element of the object under mouse\n   * @param {PointModel} position - Defines the current mouse position\n   * @param { NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - Defines the target\n   * @private\n   */\n\n\n  Diagram.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n    return this.eventHandler.findActionToBeDone(obj, wrapper, position, target);\n  };\n  /**\n   * Returns the tool that handles the given action\n   *\n   * @returns { ToolBase } Returns the tool that handles the given action \\\n   * @param {string} action - Defines the action that is going to be performed\n   */\n\n\n  Diagram.prototype.getTool = function (action) {\n    var tool;\n    var getCustomTool = getFunction(this.getCustomTool);\n\n    if (getCustomTool) {\n      tool = getCustomTool(action);\n\n      if (tool) {\n        return tool;\n      }\n    }\n\n    return this.eventHandler.getTool(action);\n  };\n  /**\n   * Defines the cursor that corresponds to the given action\n   *\n   * @returns { string } Defines the cursor that corresponds to the given action \\\n   * @param {string} action - Defines the action that is going to be performed\n   * @param {boolean} active - Defines the active\n   */\n\n\n  Diagram.prototype.getCursor = function (action, active) {\n    var cursor;\n    var getCustomCursor = getFunction(this.getCustomCursor);\n\n    if (getCustomCursor) {\n      cursor = getCustomCursor(action, active);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    if (this.customCursor.length) {\n      for (var i = 0; i < this.customCursor.length; i++) {\n        if (this.customCursor[i].action === action) {\n          return this.customCursor[i].cursor;\n        }\n      }\n    }\n\n    return this.eventHandler.getCursor(action);\n  };\n  /**\n   * Initializes the undo redo actions\n   *\n   * @returns { void } Initializes the undo redo actions \\\n   * @private\n   */\n\n\n  Diagram.prototype.initHistory = function () {\n    if (this.undoRedoModule) {\n      this.undoRedoModule.initHistory(this);\n    }\n  };\n  /**\n   * Adds the given change in the diagram control to the track\n   *\n   * @returns { void } Adds the given change in the diagram control to the track \\\n   * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n   */\n\n\n  Diagram.prototype.addHistoryEntry = function (entry) {\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo && (!this.currentSymbol || this.checkCurrentSymbol(this.currentSymbol, entry))) {\n      if (entry.undoObject && entry.undoObject.id === 'helper') {\n        return;\n      }\n\n      this.undoRedoModule.addHistoryEntry(entry, this);\n\n      if (entry.type !== 'StartGroup' && entry.type !== 'EndGroup') {\n        this.historyChangeTrigger(entry, 'CustomAction');\n      }\n    }\n  };\n\n  Diagram.prototype.checkCurrentSymbol = function (currentSymbol, entry) {\n    var check = false;\n\n    if (entry.undoObject && entry.redoObject) {\n      var undoObjects = entry.undoObject;\n      var redoObject = entry.undoObject;\n\n      if (redoObject.id && undoObjects.id && redoObject.id !== currentSymbol.id && undoObjects.id !== currentSymbol.id) {\n        return check = true;\n      } else {\n        return check;\n      }\n    }\n\n    return check;\n  };\n  /**\n   * Adds the given custom change in the diagram control to the track\n   *\n   * @returns { void } Adds the given custom change in the diagram control to the track \\\n   * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n   */\n\n\n  Diagram.prototype.addCustomHistoryEntry = function (entry) {\n    if (isBlazor() && this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      entry.type = undefined;\n      entry.category = 'External';\n      this.undoRedoModule.addHistoryEntry(entry, this);\n    }\n  };\n  /* eslint-disable */\n\n  /** @private */\n\n\n  Diagram.prototype.historyChangeTrigger = function (entry, action) {\n    var change = {};\n    /* eslint-enable */\n\n    var oldValue = 'oldValue';\n    var newValue = 'newValue';\n    var type = 'type';\n    var entryType = 'entryType';\n    var source = [];\n\n    if (entry.category === 'Internal') {\n      if (entry && entry.redoObject && entry.redoObject.nodes instanceof Array && entry.redoObject.connectors instanceof Array) {\n        source = entry.redoObject.nodes.concat(entry.redoObject.connectors);\n      } else {\n        if (entry.redoObject) {\n          source.push(entry.redoObject);\n        }\n      }\n\n      change[type] = entry.type;\n\n      if (isBlazor()) {\n        change[entryType] = entry.type;\n      }\n\n      switch (entry.type) {\n        case 'PositionChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY\n          };\n          break;\n\n        case 'RotationChanged':\n          change[oldValue] = {\n            rotateAngle: entry.undoObject.rotateAngle\n          };\n          change[newValue] = {\n            rotateAngle: entry.redoObject.rotateAngle\n          };\n          break;\n\n        case 'SizeChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY,\n            width: entry.undoObject.width,\n            height: entry.undoObject.height\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY,\n            width: entry.redoObject.width,\n            height: entry.redoObject.height\n          };\n          break;\n\n        case 'CollectionChanged':\n          change[entry.changeType] = source;\n          break;\n\n        case 'ConnectionChanged':\n          change[oldValue] = {\n            offsetX: entry.undoObject.offsetX,\n            offsetY: entry.undoObject.offsetY\n          };\n          change[newValue] = {\n            offsetX: entry.redoObject.offsetX,\n            offsetY: entry.redoObject.offsetY\n          };\n          break;\n      }\n\n      var arg = void 0;\n      arg = {\n        cause: entry.category,\n        source: cloneBlazorObject(source),\n        change: cloneBlazorObject(change),\n        action: action\n      };\n\n      if (isBlazor()) {\n        arg = {\n          cause: entry.category,\n          change: cloneBlazorObject(change),\n          source: {\n            connectors: undefined,\n            nodes: undefined\n          },\n          action: action\n        };\n        var sourceValue = arg.source;\n        sourceValue.connectors = [];\n        sourceValue.nodes = [];\n        var object = void 0;\n\n        for (var i = 0; i < source.length; i++) {\n          object = cloneBlazorObject(source[i]); // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n          getObjectType(source[i]) === Connector ? // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n          sourceValue.connectors.push(object) : sourceValue.nodes.push(object);\n        }\n\n        arg.source = sourceValue;\n      }\n\n      if (source.length) {\n        this.triggerEvent(DiagramEvent.historyChange, arg);\n      }\n    }\n  };\n  /**\n   * Starts grouping the actions that will be undone/restored as a whole\n   *\n   * @returns { void } Starts grouping the actions that will be undone/restored as a whole\\\n   */\n\n\n  Diagram.prototype.startGroupAction = function () {\n    var entry = {\n      type: 'StartGroup',\n      category: 'Internal'\n    };\n\n    if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n      this.addHistoryEntry(entry);\n    }\n  };\n  /**\n   * Closes grouping the actions that will be undone/restored as a whole\n   *\n   * @returns { void } Closes grouping the actions that will be undone/restored as a whole .\\\n   */\n\n\n  Diagram.prototype.endGroupAction = function () {\n    var entry = {\n      type: 'EndGroup',\n      category: 'Internal'\n    };\n\n    if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n      this.addHistoryEntry(entry);\n    }\n  };\n  /**\n   * Restores the last action that is performed\n   *\n   * @returns { void } Restores the last action that is performed .\\\n   */\n\n\n  Diagram.prototype.undo = function () {\n    this.canEnableBlazorObject = true;\n    this.callBlazorModel = false;\n\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      this.undoRedoModule.undo(this);\n    }\n\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n  /**\n   * Restores the last undone action\n   *\n   * @returns { void } Restores the last undone action .\\\n   */\n\n\n  Diagram.prototype.redo = function () {\n    this.canEnableBlazorObject = true;\n    this.callBlazorModel = false;\n\n    if (this.undoRedoModule && this.constraints & DiagramConstraints.UndoRedo) {\n      this.undoRedoModule.redo(this);\n    }\n\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n\n  Diagram.prototype.getBlazorDiagramObjects = function (objects) {\n    if (objects) {\n      for (var j = 0; j < objects.length; j++) {\n        this.insertBlazorDiagramObjects(objects[j]);\n      }\n    } else {\n      this.insertBlazorDiagramObjects(this.selectedItems);\n    }\n\n    this.callBlazorModel = false;\n    this.canEnableBlazorObject = true;\n  };\n  /**\n   * Aligns the group of objects to with reference to the first object in the group\n   *\n   * @returns { void } Aligns the group of objects to with reference to the first object in the group .\\\n   * @param {AlignmentOptions}option - Defines the factor, by which the objects have to be aligned\n   * @param {NodeModel[] | ConnectorModel[]} objects - Defines the objects that have to be aligned\n   * @param {AlignmentMode} type - Defines the type to be aligned\n   */\n\n\n  Diagram.prototype.align = function (option, objects, type) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.align(objects, option, type ? type : 'Object');\n    this.commandHandler.getBlazorOldValues();\n    this.callBlazorModel = true;\n    this.canEnableBlazorObject = false;\n  };\n  /**\n   * Arranges the group of objects with equal intervals, but within the group of objects\n   *\n   * @returns { void } Arranges the group of objects with equal intervals, but within the group of objects .\\\n   * @param {NodeModel[] | ConnectorModel[]} option - Defines the factor to distribute the shapes\n   * @param {DistributeOptions} objects - Defines the objects that have to be equally spaced\n   */\n\n\n  Diagram.prototype.distribute = function (option, objects) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.distribute(objects, option);\n    this.commandHandler.getBlazorOldValues();\n    this.canEnableBlazorObject = false;\n    this.callBlazorModel = true;\n  };\n  /**\n   * Scales the given objects to the size of the first object in the group\n   *\n   * @returns { void } Scales the given objects to the size of the first object in the group .\\\n   * @param {SizingOptions} option - Defines whether the node has to be horizontally scaled, vertically scaled or both\n   * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects that have to be scaled\n   */\n\n\n  Diagram.prototype.sameSize = function (option, objects) {\n    this.getBlazorDiagramObjects(objects);\n\n    if (!objects) {\n      objects = [];\n      objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n    this.commandHandler.sameSize(objects, option);\n    this.commandHandler.getBlazorOldValues();\n    this.canEnableBlazorObject = false;\n    this.callBlazorModel = true;\n  };\n\n  Diagram.prototype.updateBlazorDiagramProperties = function (attribute, canCall) {\n    if (isBlazor() && !canCall) {\n      //Need to send the client changes into server side for public APIs changes.\n      var isServerDataBindEnabled = this.allowServerDataBinding;\n      this.enableServerDataBinding(true);\n\n      for (var i = 0; i < attribute.length; i++) {\n        this.oldDiagramObject[attribute[i]] = cloneObject(this[attribute[i]]);\n      }\n\n      this.enableServerDataBinding(isServerDataBindEnabled);\n    }\n\n    if (canCall) {\n      this.commandHandler.getDiagramOldValues(this.oldDiagramObject, attribute);\n    }\n  };\n\n  Diagram.prototype.getZoomingAttribute = function () {\n    var attribute = [];\n    attribute.push('scrollSettings');\n    attribute.push('snapSettings');\n    return attribute;\n  };\n  /**\n   * Scales the diagram control by the given factor\n   *\n   * @returns { void } Scales the diagram control by the given factor .\\\n   * @param {number} factor - Defines the factor by which the diagram is zoomed\n   * @param {PointModel} focusedPoint - Defines the point with respect to which the diagram has to be zoomed\n   */\n\n\n  Diagram.prototype.zoom = function (factor, focusedPoint) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.zoom(factor, 0, 0, focusedPoint);\n\n    if (!(this.blazorActions & BlazorAction.interaction)) {\n      this.updateBlazorDiagramProperties(attribute, true);\n    }\n  };\n  /**\n   * Scales the diagram control by the given factor\n   *\n   * @returns { void }  Scales the diagram control by the given factor .\\\n   * @param {ZoomOptions} options - used to define the zoom factor, focus point and zoom type.\n   *\n   */\n\n\n  Diagram.prototype.zoomTo = function (options) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    var factor = options.zoomFactor ? options.zoomFactor : 0.2;\n    factor = options.type === 'ZoomOut' ? 1 / (1 + factor) : 1 + factor;\n    this.scroller.zoom(factor, 0, 0, options.focusPoint);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Pans the diagram control to the given horizontal and vertical offsets\n   *\n   * @returns { void } Pans the diagram control to the given horizontal and vertical offsets .\\\n   * @param {number} horizontalOffset - Defines the horizontal distance to which the diagram has to be scrolled\n   * @param {number} verticalOffset - Defines the vertical distance to which the diagram has to be scrolled\n   * @param {PointModel} focusedPoint - Provide the focusedPoint value\n   */\n\n\n  Diagram.prototype.pan = function (horizontalOffset, verticalOffset, focusedPoint) {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.setCursor('grabbing');\n    this.scroller.zoom(1, horizontalOffset, verticalOffset, focusedPoint);\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Resets the zoom and scroller offsets to default values\n   *\n   * @returns { void } Resets the zoom and scroller offsets to default values .\\\n   */\n\n\n  Diagram.prototype.reset = function () {\n    var attribute = this.getZoomingAttribute();\n    this.updateBlazorDiagramProperties(attribute);\n    this.scroller.zoom(1 / this.scroller.currentZoom, -this.scroller.horizontalOffset, -this.scroller.verticalOffset, {\n      x: 0,\n      y: 0\n    });\n    this.updateBlazorDiagramProperties(attribute, true);\n  };\n  /**\n   * Resets the segments of the connectors\n   *\n   * @returns { void } Resets the segments of the connectors .\\\n   */\n\n\n  Diagram.prototype.resetSegments = function () {\n    var previousConnectorObject = [];\n    var updateConnectorObject = [];\n    var changeConnectors = [];\n\n    if (isBlazor()) {\n      for (var _i = 0, _a = this.connectors; _i < _a.length; _i++) {\n        var obj = _a[_i];\n        previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n    }\n\n    if (this.constraints & DiagramConstraints.LineRouting && this.lineRoutingModule) {\n      this.lineRoutingModule.lineRouting(this);\n    } else {\n      this.protectPropertyChange(true);\n      var connector = void 0;\n\n      for (var i = 0; i < this.connectors.length; i++) {\n        connector = this.connectors[i];\n        connector.segments = [];\n        this.connectorPropertyChange(connector, {}, {\n          segments: connector.segments\n        });\n      }\n\n      this.protectPropertyChange(false);\n    }\n\n    if (isBlazor()) {\n      for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n        var obj = _c[_b];\n        updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n      var diagramObject = {\n        nodes: [],\n        connectors: changeConnectors\n      };\n\n      if (window && window[blazor]) {\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n  };\n  /**\n   * setBlazorDiagramProps method\n   *\n   * @returns {void} setBlazorDiagramProps method .\\\n   * @param {boolean} arg - provide the eventName value.\n   * @private\n   */\n\n\n  Diagram.prototype.setBlazorDiagramProps = function (arg) {\n    var attribute = this.getZoomingAttribute();\n\n    if (arg) {\n      this.updateBlazorDiagramProperties(attribute);\n    } else {\n      this.updateBlazorDiagramProperties(attribute, true);\n    }\n  };\n  /**\n   * getDirection method\n   *\n   * @returns { Promise<void | object> } getDirection method .\\\n   * @param {DiagramEvent} eventName - provide the eventName value.\n   * @param {Object} args - provide the args value.\n   * @private\n   */\n\n\n  Diagram.prototype.triggerEvent = function (eventName, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventArgs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (args) {\n              this.updateEventValue(args);\n            }\n\n            return [4\n            /*yield*/\n            , this.trigger(DiagramEvent[eventName], args)];\n\n          case 1:\n            eventArgs = _a.sent();\n\n            if (isBlazor() && typeof eventArgs === 'string') {\n              eventArgs = JSON.parse(eventArgs);\n            }\n\n            return [2\n            /*return*/\n            , eventArgs];\n        }\n      });\n    });\n  };\n\n  Diagram.prototype.updateEventValue = function (args) {\n    var element = args.element;\n\n    if (args.element && element instanceof Selector && element.nodes.length + element.connectors.length === 1) {\n      args.element = element.nodes.length === 1 ? element.nodes[0] : element.connectors[0];\n    }\n  };\n  /**\n   * Adds the given node to the lane\n   *\n   * @returns { void }     Adds the given node to the lane .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string} swimLane - provide the swimLane value.\n   * @param {string} lane - provide the lane value.\n    */\n\n\n  Diagram.prototype.addNodeToLane = function (node, swimLane, lane) {\n    if (this.nameTable[swimLane]) {\n      var swimlaneNode = this.nameTable[swimLane];\n      this.protectPropertyChange(true);\n\n      if (this.undoRedoModule) {\n        this.historyManager.startGroupAction();\n      }\n\n      if (!this.nameTable[node.id]) {\n        node.offsetX = swimlaneNode.wrapper.bounds.width + swimlaneNode.wrapper.bounds.x;\n        node.offsetY = swimlaneNode.wrapper.bounds.height + swimlaneNode.wrapper.bounds.y;\n        node = this.add(node);\n      }\n\n      node.parentId = '';\n\n      if (!swimlaneNode.shape.phases.length) {\n        var laneId = swimLane + lane + '0';\n\n        if (this.nameTable[laneId]) {\n          addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n          updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n        }\n      } else {\n        for (var i = 0; i < swimlaneNode.shape.phases.length; i++) {\n          var laneId = swimLane + lane + i;\n\n          if (this.nameTable[laneId] && this.nameTable[laneId].isLane) {\n            var laneNode = this.nameTable[laneId].wrapper.bounds;\n            var focusPoint = {\n              x: laneNode.x + (laneNode.x - swimlaneNode.wrapper.bounds.x + node.margin.left + node.wrapper.bounds.width / 2),\n              y: laneNode.y + swimlaneNode.wrapper.bounds.y - node.margin.top\n            };\n\n            if (swimlaneNode.shape.orientation === 'Horizontal') {\n              focusPoint.y = laneNode.y;\n            } else {\n              focusPoint.x = laneNode.x;\n              var laneHeaderId = this.nameTable[laneId].parentId + swimlaneNode.shape.lanes[0].id + '_0_header';\n              focusPoint.y = laneNode.y + (swimlaneNode.wrapper.bounds.y - this.nameTable[laneHeaderId].wrapper.bounds.height + node.margin.top + node.wrapper.bounds.height / 2);\n            }\n\n            if (laneNode.containsPoint(focusPoint) || laneId === swimLane + lane + (swimlaneNode.shape.phases.length - 1)) {\n              addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n              updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.undoRedoModule) {\n        this.historyManager.endGroupAction();\n      }\n\n      this.protectPropertyChange(false);\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   * Shows tooltip for corresponding diagram object\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be shown\n   */\n\n\n  Diagram.prototype.showTooltip = function (obj) {\n    if (obj && obj.id && !obj.wrapper) {\n      obj = this.nameTable[obj.id];\n    }\n\n    var bounds = getBounds(obj.wrapper);\n    var position = {\n      x: 0,\n      y: 0\n    };\n    var content = obj.tooltip.content ? obj.tooltip.content : 'X:' + Math.round(bounds.x) + ' ' + 'Y:' + Math.round(bounds.y);\n\n    if (obj && obj.tooltip.openOn === 'Custom') {\n      if (obj instanceof Node) {\n        position = {\n          x: obj.offsetX + obj.width / 2,\n          y: obj.offsetY + obj.height / 2\n        };\n      } else {\n        position = {\n          x: obj.targetPoint.x,\n          y: obj.targetPoint.x\n        };\n      }\n\n      this.commandHandler.showTooltip(obj, position, content, 'SelectTool', true);\n    }\n  };\n  /**\n   * hides tooltip for corresponding diagram object\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be hide\n   */\n\n\n  Diagram.prototype.hideTooltip = function (obj) {\n    if (obj && obj.tooltip.openOn === 'Custom') {\n      this.tooltipObject.close();\n    }\n  };\n  /**\n   * Adds the given node to diagram control\n   *\n   * @returns { Node }     getDirection method .\\\n   * @param {NodeModel} obj - Defines the node that has to be added to diagram\n   * @param {boolean} group - Defines the node that has to be added to diagram\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addNode = function (obj, group) {\n    return this.add(obj, group);\n  };\n  /**\n   * Adds the given diagram object to the group.\n   *\n   * @returns { void }     Adds the given diagram object to the group.\\\n   * @param {NodeModel} group - defines where the diagram object to be added.\n   * @param {string | NodeModel | ConnectorModel} child - defines the diagram object to be added to the group\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addChildToGroup = function (group, child) {\n    var severDataBind = this.allowServerDataBinding;\n    this.enableServerDataBinding(false);\n    var propChange = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n    group = this.getObject(group.id);\n\n    if (isBlazor()) {\n      this.insertValue(group, true);\n    }\n\n    var isHistoryAdded = !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) && !(this.diagramActions & DiagramAction.PreventHistory);\n\n    if (isHistoryAdded) {\n      this.startGroupAction();\n    }\n\n    var id = this.addChild(group, child);\n\n    if (isHistoryAdded) {\n      var childTable = {};\n      childTable[id] = cloneObject(this.getObject(id));\n      var entry = {\n        type: 'AddChildToGroupNode',\n        changeType: 'Insert',\n        undoObject: cloneObject(group),\n        redoObject: cloneObject(group),\n        category: 'Internal',\n        objectId: id,\n        childTable: childTable\n      };\n      this.addHistoryEntry(entry);\n      this.endGroupAction();\n    }\n\n    this.protectPropertyChange(propChange);\n    this.enableServerDataBinding(severDataBind);\n    this.updateSelector();\n\n    if (isBlazor() && isHistoryAdded) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /**\n   * Will return the history stack values\n   *\n   * @returns { void } Will return the history stack values .\\\n   * @param {boolean} isUndoStack - returns the history stack values\n   */\n\n\n  Diagram.prototype.getHistoryStack = function (isUndoStack) {\n    //let temp: HistoryEntry[];\n    var historyEntry = [];\n    var temp = isUndoStack ? this.historyManager.undoStack : this.historyManager.redoStack;\n\n    if (this.historyManager.stackLimit !== undefined) {\n      for (var i = temp.length - 1; i >= 0; i--) {\n        historyEntry.push(temp[i]);\n\n        if (historyEntry.length > this.historyManager.stackLimit) {\n          return historyEntry;\n        }\n      }\n    } else {\n      historyEntry = temp;\n    }\n\n    return historyEntry;\n  };\n  /* tslint:disable */\n\n  /**\n   * Return the edges for the given node\n   *\n   * @returns { string[] } Return the edges for the given node .\\\n    * @param {Object} args - return the edge of the given node\n   */\n\n\n  Diagram.prototype.getEdges = function (args) {\n    return args['outEdge'] ? this.nameTable[args['id']].outEdges : this.nameTable[args['id']].inEdges;\n  };\n  /* tslint:enable */\n\n  /**\n   * Returns the parent id for the node\n   *\n   * @returns { string }Returns the parent id for the node .\\\n    * @param {string} id - returns the parent id\n   */\n\n\n  Diagram.prototype.getParentId = function (id) {\n    return this.nameTable[id].parentId;\n  };\n  /**\n   * Adds the given connector to diagram control\n   * @returns { Connector } Adds the given connector to diagram control .\\\n   *\n   * @param {ConnectorModel} obj - Defines the connector that has to be added to diagram\n   * @blazorArgsType obj|DiagramConnector\n   */\n\n\n  Diagram.prototype.addConnector = function (obj) {\n    return this.add(obj);\n  };\n  /* eslint-disable */\n\n  /** @private */\n\n\n  Diagram.prototype.UpdateBlazorDiagramModelCollection = function (obj, copiedObject, multiSelectDelete, isBlazorGroupUpdate) {\n    /* eslint-enable */\n    if (!(this.blazorActions & BlazorAction.ClearObject)) {\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n\n      if (window && window[blazor]) {\n        var updatedModel = void 0;\n        var connectorModelCollection = [];\n        var updatedModelCollection = [];\n        var objectTypeCollection = [];\n        var removalIndexCollection = [];\n\n        if (isBlazorGroupUpdate && !copiedObject) {\n          for (var i = 0; i < this.blazorAddorRemoveCollection.length; i++) {\n            objectTypeCollection.push(getObjectType(this.blazorAddorRemoveCollection[i]) === Connector ? 'Connector' : 'Node');\n            updatedModel = cloneBlazorObject(this.blazorAddorRemoveCollection[i]);\n            updatedModelCollection.push(updatedModel);\n            removalIndexCollection = this.blazorRemoveIndexCollection;\n          }\n        } else if (!this.isServerUpdate || multiSelectDelete) {\n          this.isServerUpdate = true;\n          var updatedModel_1 = cloneBlazorObject(obj);\n          var elements = [];\n          var removalIndex = void 0;\n          var tempNode = [];\n\n          if (!copiedObject) {\n            if (!multiSelectDelete) {\n              tempNode = this.commandHandler.getChildren(obj, elements);\n            } else {\n              tempNode = multiSelectDelete;\n            }\n\n            for (var i = 0; i < tempNode.length; i++) {\n              updatedModel_1 = cloneBlazorObject(tempNode[i]);\n              updatedModelCollection.push(updatedModel_1);\n\n              if (getObjectType(tempNode[i]) === Connector) {\n                removalIndex = this.connectors.indexOf(tempNode[i]);\n              } else {\n                removalIndex = this.nodes.indexOf(tempNode[i]);\n              }\n\n              removalIndexCollection.push(removalIndex);\n              objectTypeCollection.push(getObjectType(tempNode[i]) === Connector ? 'Connector' : 'Node');\n            }\n\n            if (!multiSelectDelete) {\n              updatedModelCollection.push(cloneBlazorObject(obj));\n              removalIndexCollection.push(this.nodes.indexOf(obj));\n              objectTypeCollection.push(getObjectType(obj) === Connector ? 'Connector' : 'Node');\n            }\n          }\n\n          if (copiedObject && copiedObject.length > 0) {\n            for (var i = 0; i < copiedObject.length; i++) {\n              updatedModel_1 = cloneBlazorObject(copiedObject[i]);\n              var isNode = copiedObject[i] instanceof Node ? true : false;\n              /* eslint-disable */\n\n              isNode ? updatedModelCollection.push(updatedModel_1) : connectorModelCollection.push(updatedModel_1);\n              /* eslint-enable */\n\n              objectTypeCollection.push(getObjectType(copiedObject[i]) === Connector ? 'Connector' : 'Node');\n            }\n          }\n\n          this.isServerUpdate = false;\n        }\n\n        var dgmObj = {\n          'methodName': 'UpdateBlazorDiagramObjects',\n          'diagramobj': {\n            'nodeObj': JSON.stringify(updatedModelCollection),\n            'ObjectType': objectTypeCollection,\n            'removalIndex': copiedObject ? undefined : removalIndexCollection,\n            'isMultipleObjects': true,\n            'annotationIndex': undefined,\n            'connectorObj': JSON.stringify(connectorModelCollection)\n          }\n        };\n        window[blazorInterop].updateBlazorProperties(dgmObj, this);\n\n        if (isBlazorGroupUpdate && !copiedObject) {\n          this.blazorAddorRemoveCollection = [];\n          this.blazorRemoveIndexCollection = [];\n        }\n      }\n    }\n  };\n  /**\n   *  UpdateBlazorDiagramModel method\n   *\n   * @returns { void }  UpdateBlazorDiagramModel method .\\\n   * @param {Node | Connector | ShapeAnnotation | PathAnnotation} obj - provide the obj value.\n   * @param {string} objectType - provide the objectType value.\n   * @param {number} removalIndex - provide the removalIndex value.\n   * @param {number} annotationNodeIndex - provide the annotationNodeIndex value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.UpdateBlazorDiagramModel = function (obj, objectType, removalIndex, annotationNodeIndex) {\n    if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      var blazorInterop = 'sfBlazor';\n      var blazor = 'Blazor';\n\n      if (window && window[blazor] && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n        var updatedModel = cloneBlazorObject(obj);\n        var dgmObj = {\n          'methodName': 'UpdateBlazorDiagramObjects',\n          'diagramobj': {\n            'nodeObj': JSON.stringify(updatedModel),\n            'ObjectType': objectType,\n            'removalIndex': removalIndex,\n            'isMultipleObjects': false,\n            'annotationIndex': annotationNodeIndex,\n            'connectorObj': undefined\n          }\n        };\n        window[blazorInterop].updateBlazorProperties(dgmObj, this);\n      }\n    }\n  }; // eslint-disable-next-line max-len\n\n\n  Diagram.prototype.UpdateBlazorLabelOrPortObjects = function (obj, objectType, removalIndex, nodeIndex) {\n    var blazorInterop = 'sfBlazor';\n    var blazor = 'Blazor';\n\n    if (window && window[blazor] && obj.length > 0 && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n      // eslint-disable-next-line max-len\n      var updatedModelCollection = [];\n      var objectTypeCollection = [];\n      var nodeIndexCollection = [];\n\n      for (var i = 0; i < obj.length; i++) {\n        updatedModelCollection.push(cloneBlazorObject(obj[i]));\n        objectTypeCollection.push(objectType);\n        nodeIndexCollection.push(nodeIndex);\n      }\n\n      var dgmObj = {\n        'methodName': 'UpdateBlazorDiagramObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(updatedModelCollection),\n          'ObjectType': objectTypeCollection,\n          'removalIndex': removalIndex,\n          'isMultipleObjects': true,\n          'annotationIndex': nodeIndexCollection,\n          'connectorObj': null,\n          'portIndex': objectType === 'Port' ? nodeIndexCollection : []\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(dgmObj, this);\n    }\n  };\n  /**\n   *  addBlazorDiagramObjects method\n   *\n   * @returns { void }  addBlazorDiagramObjects method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.addBlazorDiagramObjects = function () {\n    var nodesCollection = [];\n    var connectorCollection = [];\n\n    if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        nodesCollection.push(cloneObject(this.nodes[i], undefined, undefined, true));\n      }\n\n      for (var i = 0; i < this.connectors.length; i++) {\n        connectorCollection.push(cloneObject(this.connectors[i], undefined, undefined, true));\n      }\n    }\n\n    var blazorInterop = 'sfBlazor';\n    var blazor = 'Blazor';\n\n    if (window && window[blazor]) {\n      var obj = {\n        'methodName': 'AddBlazorObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(nodesCollection),\n          'isConnector': false\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(obj, this);\n      obj = {\n        'methodName': 'AddBlazorObjects',\n        'diagramobj': {\n          'nodeObj': JSON.stringify(connectorCollection),\n          'isConnector': true\n        }\n      };\n      window[blazorInterop].updateBlazorProperties(obj, this);\n    }\n  };\n\n  Diagram.prototype.removeNodeEdges = function (elementId, id, isOutEdges) {\n    var node = this.nameTable[elementId];\n    var edges = isOutEdges ? node.outEdges : node.inEdges;\n\n    if (edges.length > 0) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i] === id) {\n          edges.splice(i, 1);\n        }\n      }\n    }\n  };\n  /**\n   *  insertBlazorConnector method\n   *\n   * @returns { void }  insertBlazorConnector method .\\\n   * @param {Connector} obj - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.insertBlazorConnector = function (obj) {\n    if (isBlazor() && obj instanceof Connector) {\n      if (obj.sourceID && this.nameTable[obj.sourceID]) {\n        this.insertValue(cloneObject(this.nameTable[obj.sourceID]), true);\n      }\n\n      if (obj.targetID && this.nameTable[obj.targetID]) {\n        this.insertValue(cloneObject(this.nameTable[obj.targetID]), true);\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * Adds the given object to diagram control\n   *\n   * @returns { Node | Connector }     getDirection method .\\\n   * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be added to diagram\n   * @param {boolean} group - provide the group value.\n   */\n\n\n  Diagram.prototype.add = function (obj, group) {\n    var newObj;\n    var propertyChangeValue = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n\n    if (obj) {\n      obj = cloneObject(obj);\n      var args = void 0;\n      args = {\n        element: obj,\n        cause: this.diagramActions,\n        state: 'Changing',\n        type: 'Addition',\n        cancel: false\n      };\n\n      if (this.parentObject) {\n        args.parentId = this.parentObject.id;\n      }\n\n      if (isBlazor()) {\n        args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Addition');\n      }\n\n      if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n        this.triggerEvent(DiagramEvent.collectionChange, args);\n      }\n\n      if (args.cancel && this.drawingObject) {\n        this.removeElements(args.element);\n        this.tooltipObject.close();\n\n        if (getObjectType(args.element) === Connector) {\n          if (args.element.sourceID) {\n            this.removeNodeEdges(args.element.sourceID, args.element.id, true);\n          }\n\n          if (args.element.targetID) {\n            this.removeNodeEdges(args.element.targetID, args.element.id, false);\n          }\n        }\n      }\n\n      this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n      obj.id = obj.id || randomId();\n      var layers = this.activeLayer;\n\n      if (!args.cancel && !layers.lock) {\n        if (layers.objects.indexOf(obj.id) < 0 && !layers.lock) {\n          if (!layers.visible) {\n            layers.visible = true;\n            this.dataBind();\n          }\n\n          layers.objects.push(obj.id);\n        }\n\n        if (getObjectType(obj) === Connector) {\n          newObj = new Connector(this, 'connectors', obj, true);\n          newObj.status = 'New';\n          updateDefaultValues(newObj, obj, this.connectorDefaults);\n          this.connectors.push(newObj);\n          this.initObject(newObj);\n\n          if (isBlazor()) {\n            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n              this.blazorAddorRemoveCollection.push(newObj);\n            } else if (this.blazorAddorRemoveCollection.length > 0) {\n              this.isServerUpdate = false;\n              this.blazorAddorRemoveCollection.push(newObj);\n              this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n              this.blazorAddorRemoveCollection = [];\n              this.commandHandler.getBlazorOldValues();\n            } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n              this.UpdateBlazorDiagramModel(newObj, 'Connector');\n              this.commandHandler.getBlazorOldValues();\n            }\n          }\n\n          if (obj.visible === false) {\n            this.updateElementVisibility(newObj.wrapper, newObj, obj.visible);\n          }\n\n          this.updateEdges(newObj);\n          this.insertBlazorConnector(newObj);\n        } else {\n          newObj = new Node(this, 'nodes', obj, true);\n          updateDefaultValues(newObj, obj, this.nodeDefaults);\n          newObj.parentId = obj.parentId ? obj.parentId : newObj.parentId;\n          newObj.umlIndex = obj.umlIndex;\n          newObj.status = 'New';\n          this.nodes.push(newObj);\n          this.initObject(newObj, layers, undefined, group);\n\n          if (isBlazor()) {\n            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n              this.blazorAddorRemoveCollection.push(newObj);\n            } else if (this.blazorAddorRemoveCollection.length > 0) {\n              this.blazorAddorRemoveCollection.push(newObj);\n              this.isServerUpdate = false;\n              this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n              this.commandHandler.getBlazorOldValues();\n              this.blazorAddorRemoveCollection = [];\n            } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n              this.UpdateBlazorDiagramModel(newObj, 'Node');\n              this.commandHandler.getBlazorOldValues();\n            }\n          }\n\n          this.updateTemplate();\n\n          if (this.bpmnModule) {\n            if (newObj.shape.annotations && newObj.shape.annotations.length !== 0) {\n              for (var _i = 0, _a = this.bpmnModule.getTextAnnotationConn(newObj); _i < _a.length; _i++) {\n                var obj_1 = _a[_i];\n                this.initConnectors(obj_1, layers, false);\n              }\n            }\n\n            if (newObj.shape.activity && newObj.shape.activity.subProcess.processes && newObj.shape.activity.subProcess.processes.length) {\n              this.bpmnModule.updateDocks(newObj, this);\n            }\n          }\n\n          if (this.lineRoutingModule && this.constraints & DiagramConstraints.LineRouting) {\n            var objects = this.spatialSearch.findObjects(newObj.wrapper.outerBounds);\n\n            for (var i = 0; i < objects.length; i++) {\n              var object = objects[i];\n\n              if (object instanceof Connector) {\n                this.connectorPropertyChange(object, {}, {\n                  sourceID: object.sourceID,\n                  targetID: object.targetID,\n                  sourcePortID: object.sourcePortID,\n                  targetPortID: object.targetPortID,\n                  sourcePoint: object.sourcePoint,\n                  targetPoint: object.targetPoint\n                });\n              }\n            }\n          }\n\n          if (newObj.umlIndex > -1 && obj.parentId && this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n            var parent_2 = this.nameTable[obj.parentId];\n            parent_2.children.splice(newObj.umlIndex, 0, newObj.id);\n            parent_2.wrapper.children.splice(newObj.umlIndex, 0, newObj.wrapper);\n            parent_2.wrapper.measure(new Size());\n            parent_2.wrapper.arrange(parent_2.wrapper.desiredSize);\n            this.updateDiagramObject(parent_2);\n          }\n        }\n\n        args = {\n          element: newObj,\n          cause: this.diagramActions,\n          state: 'Changed',\n          type: 'Addition',\n          cancel: false\n        };\n\n        if (this.parentObject) {\n          args.parentId = this.parentObject.id;\n        }\n\n        if (isBlazor()) {\n          args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Addition');\n        }\n\n        if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n          this.triggerEvent(DiagramEvent.collectionChange, args);\n        }\n\n        if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) && !(this.diagramActions & DiagramAction.PreventHistory)) {\n          var entry = {\n            type: 'CollectionChanged',\n            changeType: 'Insert',\n            undoObject: cloneObject(obj),\n            redoObject: cloneObject(obj),\n            category: 'Internal'\n          };\n          this.addHistoryEntry(entry);\n        }\n\n        this.parentObject = undefined;\n\n        if (this.mode === 'SVG') {\n          this.updateSvgNodes(newObj);\n          this.updateTextElementValue(newObj);\n          this.updateDiagramObject(newObj);\n\n          if (newObj.shape.activity && newObj.shape.activity.subProcess.processes && newObj.shape.activity.subProcess.processes.length) {\n            this.updateProcesses(newObj);\n          }\n\n          this.updateBridging();\n        }\n      }\n    }\n\n    this.protectPropertyChange(propertyChangeValue);\n    this.resetDiagramActions(DiagramAction.PublicMethod);\n\n    if (newObj && this.layers.length > 1) {\n      this.moveNode(newObj);\n    }\n\n    for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n      var temp = _c[_b];\n      var view = this.views[temp];\n\n      if (!(view instanceof Diagram)) {\n        this.refreshCanvasDiagramLayer(view);\n      }\n    }\n\n    this.renderReactTemplates();\n    return newObj;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateSvgNodes = function (node) {\n    if (node.children) {\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var j = _a[_i];\n\n        if (this.nameTable[j] && this.nameTable[j].parentId) {\n          var child = getDiagramElement(j + '_groupElement', this.element.id);\n\n          if (child) {\n            child.parentNode.removeChild(child);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  updateProcesses method\n   *\n   * @returns { void }  updateProcesses method .\\\n   * @param {(Node | Connector)} node - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateProcesses = function (node) {\n    if (this.bpmnModule && node && node.shape && node.shape.activity && node.shape.activity.subProcess.processes && node.shape.activity.subProcess.processes.length) {\n      var processes = node.shape.activity.subProcess.processes;\n      this.moveSvgNode(node.id);\n\n      for (var _i = 0, processes_1 = processes; _i < processes_1.length; _i++) {\n        var j = processes_1[_i];\n        this.moveSvgNode(j);\n        var edges = [];\n        edges = edges.concat(this.nameTable[j].outEdges, this.nameTable[j].inEdges);\n\n        for (var i = edges.length - 1; i >= 0; i--) {\n          this.moveSvgNode(edges[i]);\n        }\n      }\n\n      for (var _a = 0, processes_2 = processes; _a < processes_2.length; _a++) {\n        var j = processes_2[_a];\n\n        if (this.nameTable[j].shape.activity.subProcess.processes && this.nameTable[j].shape.activity.subProcess.processes.length) {\n          this.updateProcesses(this.nameTable[j]);\n        }\n      }\n    } else {\n      this.moveSvgNode(node.id);\n    }\n  };\n  /**\n   *  moveSvgNode method\n   *\n   * @returns { void }  moveSvgNode method .\\\n   * @param {string} nodeId - provide the nodeId value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.moveSvgNode = function (nodeId) {\n    var child = getDiagramElement(nodeId + '_groupElement', this.element.id);\n    var parent = child.parentElement;\n    child.parentNode.removeChild(child);\n    parent.appendChild(child);\n  };\n  /**\n   * Adds the given annotation to the given node\n   *\n   * @returns { void } Adds the given annotation to the given node .\\\n   * @param {BpmnAnnotationModel} annotation - Defines the annotation to be added\n   * @param {NodeModel} node - Defines the node to which the annotation has to be added\n   */\n\n\n  Diagram.prototype.addTextAnnotation = function (annotation, node) {\n    if (this.bpmnModule) {\n      var connector = this.bpmnModule.addAnnotation(node, annotation, this);\n      this.initConnectors(connector, this.commandHandler.getObjectLayer(node.id), false);\n      this.updateDiagramObject(node);\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'CollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(annotation),\n          redoObject: cloneObject(annotation),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n  }; //Splice the InEdge and OutEdge of the for the node with respect to corresponding connectors that is deleting\n\n\n  Diagram.prototype.spliceConnectorEdges = function (connector, isSource) {\n    //let node: Node;\n    var edges = []; //let isInEdge: boolean;\n\n    var node = isSource ? this.nameTable[connector.sourceID] : this.nameTable[connector.targetID];\n\n    if (node) {\n      edges = isSource ? node.outEdges : node.inEdges;\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        if (edges[i] === connector.id) {\n          edges.splice(i, 1);\n        }\n      }\n\n      for (var j = 0; node.ports && j < node.ports.length; j++) {\n        var isInEdge = isSource ? false : true;\n        this.removePortEdges(node, node.ports[j].id, connector.id, isInEdge);\n      }\n    }\n  };\n  /**\n   * Remove the dependent connectors if the node is deleted\n   * @returns { void } Remove the dependent connectors if the node is deleted .\\\n   * @param {Node} node - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeDependentConnector = function (node) {\n    var connector;\n    var edges = [];\n    edges = edges.concat(node.outEdges, node.inEdges);\n\n    for (var i = edges.length - 1; i >= 0; i--) {\n      connector = this.nameTable[edges[i]];\n\n      if (connector) {\n        this.connectorTable[connector.id] = cloneObject(connector);\n        this.remove(connector);\n      }\n    }\n  };\n  /**\n   * Remove the dependent connectors if the node is deleted\n   * @returns { void } Remove the dependent connectors if the node is deleted .\\\n   * @param {(NodeModel | ConnectorModel)} obj - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeObjectsFromLayer = function (obj) {\n    if (obj.children) {\n      for (var i = 0; i < obj.children.length; i++) {\n        var object = this.nameTable[obj.children[i]];\n\n        if (object) {\n          this.removeObjectsFromLayer(object);\n        }\n      }\n    }\n\n    var layer = this.layers.indexOf(this.commandHandler.getObjectLayer(obj.id));\n    var objects = this.layers[layer].objects;\n    var objIndex = objects.indexOf(obj.id);\n\n    if (objIndex > -1) {\n      if (isSelected(this, obj)) {\n        this.unSelect(obj);\n      }\n\n      this.layers[layer].objects.splice(objIndex, 1);\n      delete this.layers[layer].zIndexTable[this.nameTable[obj.id].zIndex];\n    }\n  };\n  /**\n   * removeElements method \\\n   *\n   * @returns { string }     removeElements method .\\\n   * @param {NodeModel | ConnectorModel} currentObj - provide the currentObj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeElements = function (currentObj) {\n    if (this.mode === 'SVG' || this.mode === 'Canvas' && currentObj.shape.type === 'Native') {\n      var removeElement_1 = getDiagramElement(currentObj.id + '_groupElement', this.element.id);\n      var object = currentObj;\n\n      if (object.ports && object.ports.length > 0) {\n        for (var i = 0; i < object.ports.length; i++) {\n          var port = object.ports[i];\n          var removePort = getDiagramElement(object.id + '_' + port.id + '_groupElement', this.element.id);\n\n          if (removePort) {\n            removePort.parentNode.removeChild(removePort);\n          }\n        }\n      }\n\n      if (removeElement_1) {\n        removeElement_1.parentNode.removeChild(removeElement_1);\n      }\n    }\n\n    this.refreshCanvasLayers();\n\n    if (currentObj.wrapper) {\n      var children = currentObj.wrapper.children;\n      var element = void 0;\n      var view = void 0;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          if (children[i] instanceof DiagramNativeElement || children[i].id && children[i].id.indexOf('icon_content') > 0) {\n            if (children[i].id.indexOf('icon_content') > 0 && this.mode === 'SVG') {\n              element = getDiagramElement(children[i].id + '_shape_groupElement', this.element.id);\n\n              if (element) {\n                element.parentNode.removeChild(element);\n              }\n\n              element = getDiagramElement(children[i].id + '_rect_groupElement', this.element.id);\n\n              if (element) {\n                element.parentNode.removeChild(element);\n              }\n            }\n\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n              var elementId = _a[_i];\n              removeElement(children[i].id + '_groupElement', elementId);\n              var nodeIndex = this.scroller.removeCollection.indexOf(currentObj.id);\n              this.scroller.removeCollection.splice(nodeIndex, 1);\n            }\n          } else if (children[i] instanceof DiagramHtmlElement) {\n            for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n              var elementId = _c[_b];\n              removeElement(currentObj.id + '_html_element', elementId);\n              removeElement(children[i].id + '_html_element', elementId);\n              this.clearTemplate(['nodeTemplate' + '_' + currentObj.id]);\n\n              if (children[i].annotationId) {\n                this.clearTemplate(['annotationTemplate' + '_' + currentObj.id + children[i].annotationId]);\n              }\n            }\n          }\n\n          removeGradient(children[i].id);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.removeCommand = function () {\n    this.remove();\n  };\n  /**\n   * Removes the given object from diagram\n   *\n   * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be removed from diagram\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.remove = function (obj) {\n    var selectedItems = [];\n    selectedItems = selectedItems.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n    var args;\n    var groupAction = false;\n\n    if (obj) {\n      obj = this.nameTable[obj.id];\n      this.insertBlazorConnector(obj);\n\n      if (obj && (canDelete(obj) || this.diagramActions & DiagramAction.Clear)) {\n        args = {\n          element: obj,\n          cause: this.diagramActions,\n          state: 'Changing',\n          type: 'Removal',\n          cancel: false\n        };\n\n        if (isBlazor()) {\n          args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Removal');\n        }\n\n        if (!(this.diagramActions & DiagramAction.Clear) && obj.id !== 'helper') {\n          this.triggerEvent(DiagramEvent.collectionChange, args);\n        }\n\n        if (!args.cancel) {\n          if (canDelete(obj)) {\n            if (obj && obj.shape && obj.shape.type === 'SwimLane') {\n              removeSwimLane(this, obj);\n            }\n          }\n\n          if (this.bpmnModule) {\n            if (this.bpmnModule.checkAndRemoveAnnotations(obj, this)) {\n              this.refreshCanvasLayers();\n              return;\n            }\n          }\n\n          if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.PreventHistory) && (obj instanceof Node || obj instanceof Connector)) {\n            var entry = {\n              type: 'CollectionChanged',\n              changeType: 'Remove',\n              undoObject: cloneObject(obj),\n              redoObject: cloneObject(obj),\n              category: 'Internal'\n            };\n\n            if (!(this.diagramActions & DiagramAction.Clear)) {\n              if (obj.children && !obj.isLane && !obj.isPhase && obj.children.length > 0 && this.undoRedoModule && this.layout.type === 'None') {\n                this.historyManager.startGroupAction();\n                groupAction = true;\n              }\n            }\n\n            if (obj instanceof Node) {\n              this.removeDependentConnector(obj);\n            }\n\n            if (!obj.isLane && !obj.isPhase) {\n              if (!(this.diagramActions & DiagramAction.Clear) && !this.isStackChild(obj)) {\n                this.addHistoryEntry(entry);\n              }\n            }\n          }\n\n          if (obj.children && !obj.isLane && !obj.isPhase && (!isBlazor() || !(this.diagramActions & DiagramAction.UndoRedo))) {\n            this.deleteGroup(obj);\n          }\n\n          if (obj.parentId) {\n            this.deleteChild(obj);\n\n            if (this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n              this.updateDiagramObject(this.nameTable[obj.parentId]);\n              this.updateConnectorEdges(this.nameTable[obj.parentId]);\n            }\n          }\n\n          var index = void 0;\n          this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n          var currentObj = this.nameTable[obj.id];\n\n          if (currentObj instanceof Node) {\n            if (currentObj.shape.type === 'Bpmn' && this.bpmnModule) {\n              this.bpmnModule.removeBpmnProcesses(currentObj, this);\n            }\n\n            if (currentObj.isLane || currentObj.isPhase || currentObj.shape.type === 'SwimLane') {\n              var swimLaneNode = currentObj.isLane || currentObj.isPhase ? this.nameTable[currentObj.parentId] : this.nameTable[currentObj.id];\n              var grid = swimLaneNode.wrapper.children[0];\n\n              if (currentObj.isLane) {\n                removeLane(this, currentObj, swimLaneNode);\n              } else if (currentObj.isPhase) {\n                removePhase(this, currentObj, swimLaneNode);\n              }\n            }\n\n            index = this.nodes.indexOf(currentObj);\n\n            if (isBlazor() && obj.id !== 'helper') {\n              if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n              } else if (this.blazorAddorRemoveCollection.length > 0) {\n                this.commandHandler.getBlazorOldValues();\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n              } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                this.UpdateBlazorDiagramModel(obj, 'Node', index);\n              }\n            }\n\n            if (index !== -1) {\n              this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n              this.nodes.splice(index, 1);\n              this.updateNodeEdges(currentObj);\n            }\n          } else {\n            index = this.connectors.indexOf(currentObj);\n\n            if (isBlazor()) {\n              if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n              } else if (this.blazorAddorRemoveCollection.length > 0) {\n                this.commandHandler.getBlazorOldValues();\n                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n              } else if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                this.UpdateBlazorDiagramModel(obj, 'Connector', index);\n              }\n            }\n\n            if (index !== -1) {\n              this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n              this.connectors.splice(index, 1);\n            }\n\n            this.updateEdges(currentObj);\n            this.spliceConnectorEdges(obj, true);\n            this.spliceConnectorEdges(obj, false);\n          }\n\n          if (!this.isServerUpdate && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            this.commandHandler.getBlazorOldValues();\n          }\n\n          if (groupAction) {\n            this.historyManager.endGroupAction();\n          }\n\n          if (isSelected(this, currentObj)) {\n            this.unSelect(currentObj);\n          }\n\n          if (!currentObj.isPhase) {\n            this.removeObjectsFromLayer(obj);\n\n            if (this.currentDrawingObject) {\n              this.currentDrawingObject.wrapper = undefined;\n            }\n\n            delete this.nameTable[obj.id];\n\n            if (selectedItems.length > 0 && selectedItems[0].id === currentObj.id && currentObj.parentId) {\n              var parentnode = this.nameTable[currentObj.parentId];\n\n              if (parentnode && parentnode.isLane && this.nameTable[parentnode.parentId].shape.type === 'SwimLane') {\n                var swimLaneNode = this.nameTable[parentnode.parentId];\n                removeLaneChildNode(this, swimLaneNode, parentnode, currentObj);\n              }\n            }\n\n            this.removeElements(currentObj);\n            this.updateBridging();\n\n            if (this.mode !== 'SVG') {\n              this.refreshDiagramLayer();\n            }\n\n            if (!(this.diagramActions & DiagramAction.Clear)) {\n              this.removeFromAQuad(currentObj);\n              args = {\n                element: obj,\n                cause: this.diagramActions,\n                state: 'Changed',\n                type: 'Removal',\n                cancel: false\n              };\n\n              if (isBlazor()) {\n                args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Removal');\n              }\n\n              if (obj.id !== 'helper') {\n                this.triggerEvent(DiagramEvent.collectionChange, args);\n              }\n\n              this.resetTool();\n            }\n          }\n        }\n      }\n    } else if (selectedItems.length > 0) {\n      if (this.undoRedoModule) {\n        this.historyManager.startGroupAction();\n        this.blazorActions |= BlazorAction.GroupingInProgress;\n        groupAction = true;\n      }\n\n      if (isBlazor() && selectedItems.length > 1) {\n        this.clearSelection();\n      }\n\n      for (var i = 0; i < selectedItems.length; i++) {\n        var node = selectedItems[i];\n\n        if (this.nameTable[selectedItems[i].id]) {\n          if (selectedItems[i] instanceof Connector && this.bpmnModule && this.bpmnModule.textAnnotationConnectors.indexOf(selectedItems[i]) > -1) {\n            this.remove(this.nameTable[selectedItems[i].targetID]);\n            return;\n          }\n\n          if (isBlazor()) {\n            if (!this.isServerUpdate && selectedItems && selectedItems.length > 1) {\n              this.isServerUpdate = true;\n            }\n\n            if (selectedItems[i].parentId) {\n              this.insertBlazorDiagramObjects(this.nameTable[selectedItems[i].parentId]);\n            }\n          }\n\n          this.remove(selectedItems[i]);\n\n          if (isBlazor() && selectedItems[i].parentId) {\n            this.commandHandler.getBlazorOldValues();\n            this.isServerUpdate = false;\n          }\n        }\n      }\n\n      if (groupAction) {\n        this.blazorActions &= ~BlazorAction.GroupingInProgress;\n        this.isServerUpdate = true;\n        this.commandHandler.getBlazorOldValues();\n        this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n        this.historyManager.endGroupAction();\n        this.isServerUpdate = false;\n      }\n\n      this.clearSelection();\n    }\n\n    this.tooltipObject.close();\n\n    if (isBlazor() && selectedItems && selectedItems.length > 0) {\n      var check = true;\n\n      for (var k = 0; k < selectedItems.length; k++) {\n        if (this.nameTable[selectedItems[k].id]) {\n          check = false;\n        }\n      }\n\n      if (check) {\n        this.isServerUpdate = false;\n      }\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.isStackChild = function (obj) {\n    var isstack;\n    var parent = this.nameTable[obj.parentId];\n\n    if (obj && obj.parentId && parent.container && parent.container.type === 'Stack' && this.nameTable[obj.parentId].shape.type !== 'UmlClassifier') {\n      isstack = true;\n      var redoElement = {\n        sourceIndex: parent.wrapper.children.indexOf(obj.wrapper),\n        source: obj,\n        target: undefined,\n        targetIndex: undefined\n      };\n      var entry = {\n        type: 'StackChildPositionChanged',\n        redoObject: {\n          sourceIndex: undefined,\n          source: obj,\n          target: undefined,\n          targetIndex: undefined\n        },\n        undoObject: redoElement,\n        category: 'Internal'\n      };\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    return isstack;\n  };\n  /** @private */\n\n\n  Diagram.prototype.deleteChild = function (node, parentNode) {\n    var id;\n    parentNode = parentNode ? this.nameTable[parentNode.id] : this.nameTable[node.parentId];\n\n    if (typeof node === 'string') {\n      id = node;\n    } else {\n      id = node.id;\n    }\n\n    if (parentNode && parentNode.children) {\n      for (var i = 0; i < parentNode.children.length; i++) {\n        if (parentNode.children[i] === id) {\n          parentNode.children.splice(i, 1);\n\n          for (var j = 0; j < parentNode.wrapper.children.length; j++) {\n            if (parentNode.wrapper.children[j].id === id) {\n              parentNode.wrapper.children.splice(j, 1);\n            }\n          }\n        }\n      }\n\n      parentNode.wrapper.measure(new Size());\n      parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n    }\n  };\n  /**\n   * addChild method \\\n   *\n   * @returns { string }     addChild method .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string | NodeModel | ConnectorModel} child - provide the child value.\n   * @param {number} index - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.addChild = function (node, child, index) {\n    var id;\n    var parentNode = this.nameTable[node.id];\n\n    if (!parentNode.children) {\n      parentNode.children = [];\n    }\n\n    if (parentNode.children) {\n      if (typeof child === 'string') {\n        if (this.nameTable[child]) {\n          id = child;\n        }\n      } else {\n        id = child.id = child.id || randomId();\n        this.add(child);\n      }\n\n      if (id && (!child.umlIndex || child.umlIndex === -1)) {\n        var childNode = this.nameTable[id];\n        childNode.parentId = parentNode.id;\n\n        if (parentNode.container && parentNode.container.type === 'Stack') {\n          this.updateStackProperty(parentNode, childNode);\n        }\n\n        if (index) {\n          parentNode.children.splice(index, 0, id);\n          parentNode.wrapper.children.splice(index, 0, childNode.wrapper);\n        } else {\n          parentNode.children.push(id);\n          parentNode.wrapper.children.push(childNode.wrapper);\n        }\n\n        parentNode.wrapper.measure(new Size());\n        parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n\n        if (!parentNode.isLane) {\n          this.nameTable[node.id].width = parentNode.wrapper.actualSize.width;\n          this.nameTable[node.id].height = parentNode.wrapper.actualSize.height;\n          this.nameTable[node.id].offsetX = parentNode.wrapper.offsetX;\n          this.nameTable[node.id].offsetY = parentNode.wrapper.offsetY;\n        }\n\n        if (parentNode.container !== undefined) {\n          childNode.offsetX = childNode.wrapper.offsetX;\n          childNode.offsetY = childNode.wrapper.offsetY;\n        }\n\n        if (!parentNode.parentId || this.nameTable[parentNode.parentId] && this.nameTable[parentNode.parentId].shape.type !== 'SwimLane') {\n          this.updateDiagramObject(parentNode);\n        }\n      }\n    }\n\n    return id;\n  };\n  /**\n   * Clears all nodes and objects in the diagram\n   *\n   * @returns { void }     getDirection method .\\\n    */\n\n\n  Diagram.prototype.clear = function () {\n    this.clearObjects();\n  };\n\n  Diagram.prototype.clearObjects = function (collection) {\n    var objects = [];\n\n    if (!collection) {\n      objects = objects.concat(this.nodes);\n      objects = objects.concat(this.connectors);\n    } else {\n      objects = collection;\n    }\n\n    this.diagramActions = this.diagramActions | DiagramAction.Clear;\n\n    for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {\n      var obj = objects_1[_i];\n\n      if (this.nameTable[obj.id]) {\n        this.remove(obj);\n      }\n    }\n\n    this.diagramActions = this.diagramActions & ~DiagramAction.Clear;\n    this.spatialSearch = new SpatialSearch(this.nameTable);\n    this.initHistory();\n  };\n\n  Diagram.prototype.startEditCommad = function () {\n    var laneHeader;\n    var node = this.selectedItems.nodes[0] ? this.selectedItems.nodes[0] : undefined;\n\n    if (node && node instanceof Node) {\n      if (node.isLane && node.parentId) {\n        var swimlane = this.nameTable[node.parentId];\n        var lanes = swimlane.shape.lanes;\n        var canvasId = node.id.slice(swimlane.id.length);\n        var currentParentId = canvasId.substring(0, canvasId.length - 1);\n\n        for (var i = 0; i < lanes.length; i++) {\n          if (node.isLane && currentParentId === lanes[i].id) {\n            laneHeader = this.nameTable[lanes[i].header.id];\n          }\n        }\n      } else if (node.shape.type === 'SwimLane' && node.shape.header && node.shape.hasHeader) {\n        var id = node.wrapper.children[0].rows[0].cells[0].children[0].id;\n        laneHeader = this.nameTable[id];\n      }\n    }\n\n    this.startTextEdit(laneHeader);\n  };\n  /* tslint:disable */\n\n  /**\n   * Specified annotation to edit mode\n   *\n   * @returns { void }  Specified annotation to edit mode .\\\n   * @param {NodeModel | ConnectorModel} node - Defines node/connector that contains the annotation to be edited\n   * @param {string} id - Defines annotation id to be edited in the node\n   */\n\n\n  Diagram.prototype.startTextEdit = function (node, id) {\n    if (!canZoomPan(this) && !canMultiSelect(this) || canSingleSelect(this)) {\n      this.textEditing = true;\n      var transform = this.scroller.transform;\n      var scale = canZoomTextEdit(this) ? transform.scale : 1;\n      var minWidth = 90;\n      var text = void 0;\n      var bounds = void 0;\n      var attributes = void 0;\n      var x = void 0;\n      var y = void 0;\n      var textWrapper = void 0;\n\n      if (!node) {\n        node = this.selectedItems.nodes[0] ? this.selectedItems.nodes[0] : this.selectedItems.connectors[0];\n      }\n\n      if (node) {\n        if (isBlazor()) {\n          var selectedNode = cloneObject(node);\n\n          if (selectedNode.annotations.length > 0) {\n            this.insertValue(selectedNode, node instanceof Node ? true : false);\n          }\n\n          node = this.nameTable[node.id] || node;\n        }\n\n        if (node.shape && node.shape.type === 'UmlClassifier') {\n          node = this.nameTable[node.children[0]];\n        }\n\n        var bpmnAnnotation = false;\n\n        if (this.bpmnModule) {\n          textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, id);\n\n          if (textWrapper) {\n            node = this.nameTable[node.id.split('_textannotation_')[0]];\n          }\n        }\n\n        if (!textWrapper) {\n          if (node.shape.type !== 'Text' && node.annotations.length === 0) {\n            if (!(node.constraints & NodeConstraints.ReadOnly)) {\n              this.activeLabel.isGroup = true;\n              this.startGroupAction();\n              this.addLabels(node, [{\n                id: randomId(),\n                content: ''\n              }]);\n            }\n          }\n\n          if (!id && (node.shape.type !== 'Text' && node.annotations.length > 0 || node.shape.type === 'Text')) {\n            id = node.shape.type === 'Text' ? node.wrapper.children[0].id.split('_')[1] : node.annotations[0].id;\n          }\n\n          if (id) {\n            textWrapper = this.getWrapper(node.wrapper, id);\n          }\n        } else {\n          bpmnAnnotation = true;\n        }\n\n        if (node && textWrapper && !(textWrapper instanceof DiagramHtmlElement) && (!enableReadOnly(textWrapper, node) || bpmnAnnotation)) {\n          var style = textWrapper.style;\n          var maxWidth = void 0;\n          maxWidth = textWrapper.bounds.width < node.wrapper.bounds.width ? textWrapper.bounds.width : node.wrapper.bounds.width;\n          maxWidth = minWidth > maxWidth ? minWidth : maxWidth;\n          var textEditing = document.getElementById(this.element.id + '_editTextBoxDiv');\n          var textArea = document.getElementById(this.element.id + '_editBox');\n          text = textArea ? textArea.value : textWrapper.content;\n          this.activeLabel.text = text;\n\n          if (!textEditing && !textArea) {\n            textEditing = createHtmlElement('div', {});\n            textArea = createHtmlElement('textarea', {});\n            this.diagramCanvas.appendChild(textEditing);\n            textEditing.appendChild(textArea);\n            textArea.appendChild(document.createTextNode(text));\n          }\n\n          bounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n\n          if (bounds.isEmpty()) {\n            if (node.shape.type !== 'Text') {\n              bounds = new Size(findAnnotation(node, textWrapper.id.split(node.id + '_')[1]).width || 50, textWrapper.style.fontSize);\n            } else {\n              bounds = new Size(node.width > 50 ? 50 : node.width, textWrapper.style.fontSize);\n            }\n          }\n\n          if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier') {\n            bounds.width = node.wrapper.bounds.width - 20;\n            x = (node.wrapper.bounds.center.x + transform.tx) * transform.scale - bounds.width / 2 * scale - 2.5;\n            y = (node.wrapper.bounds.center.y + transform.ty) * transform.scale - bounds.height / 2 * scale - 3;\n            textWrapper.style.textAlign = 'Left';\n          } else {\n            bounds.width = Math.max(bounds.width, 50);\n            x = (textWrapper.bounds.center.x + transform.tx) * transform.scale - bounds.width / 2 * scale - 2.5;\n            y = (textWrapper.bounds.center.y + transform.ty) * transform.scale - bounds.height / 2 * scale - 3;\n          }\n\n          attributes = {\n            'id': this.element.id + '_editTextBoxDiv',\n            'style': 'position: absolute' + ';left:' + x + 'px;top:' + y + 'px;width:' + (bounds.width + 1) * scale + 'px;height:' + bounds.height * scale + 'px; containerName:' + node.id + ';'\n          };\n          setAttributeHtml(textEditing, attributes);\n          attributes = {\n            'id': this.element.id + '_editBox',\n            'style': 'width:' + (bounds.width + 1) * scale + 'px;height:' + bounds.height * scale + 'px;resize: none;outline: none;overflow: hidden;' + ';font-family:' + style.fontFamily + ';font-size:' + style.fontSize * scale + 'px;text-align:' + textWrapper.style.textAlign.toLocaleLowerCase() + ';',\n            'class': 'e-diagram-text-edit'\n          };\n          setAttributeHtml(textArea, attributes);\n          textArea.style.fontWeight = style.bold ? 'bold' : '';\n          textArea.style.fontStyle = style.italic ? 'italic' : '';\n          textArea.style.lineHeight = (style.fontSize * 1.2 + 'px;').toString();\n          textArea.style.textDecoration = style.textDecoration ? style.textDecoration : '';\n          this.activeLabel.parentId = node.id;\n          this.activeLabel.id = id;\n          textWrapper.visible = false;\n          this.updateDiagramObject(node);\n          this.diagramActions = this.diagramActions | DiagramAction.TextEdit;\n\n          if (!this.isTriggerEvent) {\n            EventHandler.add(textArea, 'input', this.eventHandler.inputChange, this.eventHandler);\n            EventHandler.add(textArea, 'focusout', this.focusOutEdit, this);\n            textArea.select();\n          }\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateConnectorfixedUserHandles = function (connector) {\n    if (connector.fixedUserHandles.length) {\n      var fixedUserHandleWrapper = void 0;\n\n      for (var _i = 0, _a = connector.fixedUserHandles; _i < _a.length; _i++) {\n        var fixedUserHandle = _a[_i];\n        fixedUserHandleWrapper = this.getWrapper(connector.wrapper, fixedUserHandle.id);\n        connector.updateAnnotation(fixedUserHandle, connector.intermediatePoints, connector.wrapper.bounds, fixedUserHandleWrapper);\n      }\n    }\n\n    connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n    connector.wrapper.arrange(connector.wrapper.desiredSize);\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.updateNodeExpand = function (node, visibility) {\n    for (var i = 0; i < node.outEdges.length; i++) {\n      var connector = this.nameTable[node.outEdges[i]];\n      var target = this.nameTable[connector.targetID];\n      connector.visible = visibility;\n\n      if (!visibility) {\n        this.updateElementVisibility(connector.wrapper, connector, false);\n        target.isExpanded = visibility;\n      }\n\n      this.updateNodeExpand(target, target.isExpanded);\n      target.visible = visibility;\n\n      if (!visibility) {\n        this.updateElementVisibility(target.wrapper, target, false);\n      }\n    }\n  };\n\n  Diagram.prototype.updateConnectorAnnotation = function (connector) {\n    if (connector.annotations.length) {\n      var annotationWrapper = void 0;\n\n      for (var _i = 0, _a = connector.annotations; _i < _a.length; _i++) {\n        var annotation = _a[_i];\n        annotationWrapper = this.getWrapper(connector.wrapper, annotation.id);\n        connector.updateAnnotation(annotation, connector.intermediatePoints, connector.wrapper.bounds, annotationWrapper, this.diagramActions & DiagramAction.Interactions);\n      }\n    }\n\n    connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n    connector.wrapper.arrange(connector.wrapper.desiredSize);\n  };\n\n  Diagram.prototype.removeChildrenFromLayout = function (nodes) {\n    var nodesCollection = [];\n    var node;\n    var parentId = 'parentId';\n    var processId = 'processId';\n\n    for (var i = 0; i < nodes.length; i++) {\n      node = nodes[i];\n\n      if (!node[parentId] && !node[processId]) {\n        nodesCollection.push(node);\n      }\n    }\n\n    return nodesCollection;\n  };\n  /* tslint:disable */\n\n  /**\n   * Automatically updates the diagram objects based on the type of the layout\n   * @returns { ILayout | boolean }  Automatically updates the diagram objects based on the type of the layout .\\\n   */\n\n\n  Diagram.prototype.doLayout = function () {\n    var update = false;\n    var layout;\n    var canDoOverlap = this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree';\n    var propChange = this.isProtectedOnChange;\n    this.protectPropertyChange(true);\n    var nodes = this.removeChildrenFromLayout(this.nodes);\n    var canEnableRouting = this.layout.enableRouting && this.layout.type === 'ComplexHierarchicalTree';\n    var viewPort = {\n      x: this.scroller.viewPortWidth,\n      y: this.scroller.viewPortHeight\n    };\n\n    if (this.layout.type !== 'None') {\n      if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap || this.layout.arrangement === 'Linear') {\n        this.lineDistributionModule.initLineDistribution(this.layout, this);\n      }\n\n      if (this.organizationalChartModule) {\n        layout = this.organizationalChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.diagramActions);\n        update = true;\n\n        if (this.layoutAnimateModule && layout.rootNode && !this.diagramActions) {\n          this.updateNodeExpand(layout.rootNode, layout.rootNode.isExpanded);\n        }\n      } else if (this.mindMapChartModule) {\n        if (nodes && nodes.length > 0) {\n          this.mindMapChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.dataSourceSettings.root);\n        }\n\n        update = true;\n      } else if (this.radialTreeModule) {\n        this.radialTreeModule.updateLayout(nodes, this.nameTable, this.layout, viewPort);\n        update = true;\n      } else if (this.symmetricalLayoutModule) {\n        this.symmetricalLayoutModule.maxIteration = this.layout.maxIteration;\n        this.symmetricalLayoutModule.springLength = this.layout.springLength;\n        this.symmetricalLayoutModule.springFactor = this.layout.springFactor;\n        this.symmetricalLayoutModule.updateLayout(nodes, this.connectors, this.symmetricalLayoutModule, this.nameTable, this.layout, viewPort);\n        update = true;\n      } else if (this.complexHierarchicalTreeModule) {\n        var nodes_1 = this.complexHierarchicalTreeModule.getLayoutNodesCollection(this.nodes);\n\n        if (nodes_1.length > 0) {\n          // eslint-disable-next-line max-len\n          this.complexHierarchicalTreeModule.doLayout(nodes_1, this.nameTable, this.layout, viewPort, this.lineDistributionModule);\n        }\n\n        update = true;\n      }\n\n      if (update) {\n        this.preventDiagramUpdate = true;\n        var connectors = {};\n        var updatedNodes = nodes;\n\n        if (isBlazor()) {\n          this.updateTemplate();\n        }\n\n        for (var _i = 0, updatedNodes_1 = updatedNodes; _i < updatedNodes_1.length; _i++) {\n          var obj = updatedNodes_1[_i];\n          var node = obj;\n\n          if (!this.preventNodesUpdate && (!this.diagramActions || !(this.diagramActions & DiagramAction.PreventIconsUpdate))) {\n            this.updateIcon(node);\n            this.updateDefaultLayoutIcons(node);\n          }\n\n          this.preventNodesUpdate = true;\n          this.nodePropertyChange(node, {}, {\n            offsetX: node.offsetX,\n            offsetY: node.offsetY\n          }, true);\n          this.preventNodesUpdate = false;\n          node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n          node.wrapper.arrange(node.wrapper.desiredSize);\n          this.updateDiagramObject(node, true);\n\n          if (node.inEdges.length > 0) {\n            for (var j = 0; j < node.inEdges.length; j++) {\n              var connector = this.nameTable[node.inEdges[j]];\n              connectors[connector.id] = connector;\n            }\n          }\n\n          if (node.outEdges.length > 0) {\n            for (var k = 0; k < node.outEdges.length; k++) {\n              var connection = this.nameTable[node.outEdges[k]];\n              connectors[connection.id] = connection;\n            }\n          }\n        }\n\n        for (var _a = 0, _b = Object.keys(connectors); _a < _b.length; _a++) {\n          var conn = _b[_a];\n\n          if (canEnableRouting) {\n            this.lineDistributionModule.resetConnectorSegments(this.nameTable[conn]);\n          }\n\n          var connector = connectors[conn];\n          var points = this.getPoints(connector);\n\n          if (canEnableRouting) {\n            this.lineDistributionModule.resetRoutingSegments(connector, this, points);\n          }\n\n          updateConnector(connector, points);\n\n          if (connector.shape.type === 'Bpmn' && connector.shape.sequence === 'Default') {\n            this.commandHandler.updatePathElementOffset(connector);\n          }\n\n          connector.wrapper.measure(new Size(undefined, undefined));\n          connector.wrapper.arrange(connector.wrapper.desiredSize);\n          this.updateConnectorAnnotation(connector);\n          this.updateConnectorfixedUserHandles(connector);\n          this.updateQuad(connector);\n          this.updateDiagramObject(connector, true);\n        }\n\n        if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) {\n          this.lineDistributionModule.distributeLines(this.layout, this);\n        }\n\n        this.preventDiagramUpdate = false;\n        this.updatePage();\n\n        if (!(this.diagramActions & DiagramAction.Render) || this.mode === 'Canvas') {\n          this.refreshDiagramLayer();\n        }\n      }\n\n      if (!propChange) {\n        this.protectPropertyChange(propChange);\n      }\n    }\n\n    if (update) {\n      this.updateDiagramElementQuad();\n    }\n\n    return this.blazorActions & BlazorAction.expandNode ? layout : isBlazor() ? null : true;\n  };\n  /* tslint:enable */\n\n  /**\n   * Serializes the diagram control as a string\n   * @returns { string }     Serializes the diagram control as a string .\\\n   */\n\n\n  Diagram.prototype.saveDiagram = function () {\n    return serialize(this);\n  };\n  /**\n   * Converts the given string as a Diagram Control\n   *\n   * @returns { Object }      Converts the given string as a Diagram Control .\\\n   * @param {string} data - Defines the behavior of the diagram to be loaded\n    */\n\n\n  Diagram.prototype.loadDiagram = function (data) {\n    return deserialize(data, this);\n  };\n  /**\n   * To  get the html diagram content\n   *\n   * @returns { string }     getDirection method .\\\n   * @param {StyleSheetList} styleSheets - defines the collection of style files to be considered while exporting.\n   */\n\n\n  Diagram.prototype.getDiagramContent = function (styleSheets) {\n    if (this.printandExportModule) {\n      var data = this.printandExportModule.getDiagramContent(styleSheets);\n      return data;\n    }\n\n    return '';\n  };\n  /**\n   * To export diagram native/html image\n   *\n   * @returns { void } To export diagram native/html image .\\\n   * @param {string} image - defines image content to be exported.\n   * @param {IExportOptions} options - defines the image properties.\n   */\n\n\n  Diagram.prototype.exportImage = function (image, options) {\n    if (this.printandExportModule) {\n      this.printandExportModule.exportImages(image, options);\n    }\n  };\n  /**\n   * To print native/html nodes of diagram\n   *\n   * @returns { void } To print native/html nodes of diagram .\\\n   * @param {string} image - defines image content.\n   * @param {IExportOptions} options - defines the properties of the image\n   */\n\n\n  Diagram.prototype.printImage = function (image, options) {\n    if (this.printandExportModule) {\n      options.printOptions = true;\n      this.printandExportModule.exportImages(image, options);\n    }\n  };\n  /**\n   * To limit the history entry of the diagram\n   *\n   * @returns { void }  To limit the history entry of the diagram.\\\n   * @param {number} stackLimit - defines stackLimit of the history manager.\n   */\n\n\n  Diagram.prototype.setStackLimit = function (stackLimit) {\n    if (this.undoRedoModule && stackLimit) {\n      this.historyManager.stackLimit = stackLimit;\n      this.undoRedoModule.applyLimit(this.historyManager.currentEntry, stackLimit, this, true);\n    }\n  };\n  /**\n   * To clear history of the diagram\n   * @returns { void } To clear history of the diagram .\\\n   */\n\n\n  Diagram.prototype.clearHistory = function () {\n    if (this.undoRedoModule) {\n      this.undoRedoModule.clearHistory(this);\n    }\n  };\n  /**\n   * To get the bound of the diagram\n   * @returns { void } To get the bound of the diagram .\\\n   */\n\n\n  Diagram.prototype.getDiagramBounds = function () {\n    if (this.printandExportModule) {\n      var bounds = this.printandExportModule.getDiagramBounds('', {});\n      bounds.width = bounds.width > this.scrollSettings.viewPortWidth ? bounds.width + (bounds.x > 0 ? bounds.x : 0) : this.scrollSettings.viewPortWidth;\n      bounds.height = bounds.height > this.scrollSettings.viewPortHeight ? bounds.height + (bounds.y > 0 ? bounds.y : 0) : this.scrollSettings.viewPortHeight;\n      bounds.x = bounds.x > 0 ? 0 : bounds.x;\n      bounds.y = bounds.y > 0 ? 0 : bounds.y;\n      return bounds;\n    }\n\n    return new Rect();\n  };\n  /**\n   * To export Diagram\n   *\n   * @returns { void } To export Diagram .\\\n   * @param {IExportOptions} options - defines the how the image to be exported.\n   */\n\n\n  Diagram.prototype.exportDiagram = function (options) {\n    if (this.printandExportModule) {\n      var data = this.printandExportModule.exportDiagram(options);\n      return data;\n    }\n\n    return '';\n  };\n  /**\n   * To print Diagram\n   *\n   * @returns { void }     To print Diagram .\\\n   * @param {IPrintOptions} optons - defines how the image to be printed.\n   */\n\n\n  Diagram.prototype.print = function (options) {\n    if (this.printandExportModule) {\n      this.printandExportModule.print(options);\n    }\n  };\n  /**\n   * Add ports at the run time \\\n   *\n   * @returns { void }    Remove Labels at the run time .\\\n   * @param { Node | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} ports - provide the ports value.\n   * @blazorArgsType obj|DiagramNode\n   */\n\n\n  Diagram.prototype.addPorts = function (obj, ports) {\n    this.protectPropertyChange(true);\n    var portCollection = [];\n    var isAddPortInServer = true;\n\n    if (isBlazor() && obj !== null && obj.ports.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = Number(findObjectIndex(obj, ports[0].id, false));\n\n      if (index !== -1) {\n        isAddPortInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n    var newObj;\n\n    if (ports.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var i = 0; i < ports.length; i++) {\n      newObj = new PointPort(obj, 'ports', ports[i], true);\n      obj.ports.push(newObj);\n\n      if (isBlazor() && isAddPortInServer) {\n        portCollection.push(newObj);\n      }\n\n      if (obj.children) {\n        var container = obj.wrapper;\n        obj.initPort(this.getDescription, obj.wrapper.children[container.children.length - 1], newObj);\n      } else {\n        var canvas = obj.wrapper;\n        canvas.children.push(obj.initPortWrapper(obj.ports[obj.ports.length - 1]));\n      }\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'PortCollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(newObj),\n          redoObject: cloneObject(obj),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    if (ports.length > 1) {\n      this.endGroupAction();\n    }\n\n    if (isBlazor() && isAddPortInServer) {\n      this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', undefined, this.nodes.indexOf(obj));\n    }\n\n    obj.wrapper.measure(new Size(obj.width, obj.height));\n    obj.wrapper.arrange(obj.wrapper.desiredSize);\n    this.updateDiagramObject(obj);\n    this.protectPropertyChange(false);\n  };\n  /**\n   * Add constraints at run time \\\n   *\n   * @returns { void }Add constraints at run time .\\\n   * @param {number} constraintsType - provide the source value.\n   * @param {number} constraintsValue - provide the target value.\n   *\n   */\n\n\n  Diagram.prototype.addConstraints = function (constraintsType, constraintsValue) {\n    return constraintsType | constraintsValue;\n  };\n  /**\n   * Remove constraints at run time \\\n   *\n   * @returns { void }Remove constraints at run time .\\\n   * @param {number} constraintsType - provide the source value.\n   * @param {number} constraintsValue - provide the target value.\n   *\n   */\n\n\n  Diagram.prototype.removeConstraints = function (constraintsType, constraintsValue) {\n    return constraintsType & ~constraintsValue;\n  };\n  /**\n   * Add labels in node at the run time in the blazor platform \\\n   *\n   * @returns { void } Add labels in node at the run time in the blazor platform .\\\n   * @param {NodeModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addNodeLabels = function (obj, labels) {\n    this.addLabels(obj, labels);\n  };\n  /**\n   * Add labels in connector at the run time in the blazor platform\\\n   *\n   * @returns { void } Add labels in connector at the run time in the blazor platform .\\\n   * @param {ConnectorModel} obj - provide the obj value.\n   * @param {PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addConnectorLabels = function (obj, labels) {\n    this.addLabels(obj, labels);\n  };\n  /**\n   * Add Labels at the run time \\\n   *\n   * @returns { void } Add Labels at the run time .\\\n   * @param {NodeModel | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotation[] | PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addLabels = function (obj, labels) {\n    this.protectPropertyChange(true);\n    var isAddLabelInServer = true;\n    var annotationCollection = [];\n\n    if (isBlazor() && obj != null && obj.annotations.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = Number(findObjectIndex(obj, labels[0].id, true));\n\n      if (index !== -1) {\n        isAddLabelInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n    var canvas = obj.wrapper;\n    var newObj;\n\n    if (labels.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var i = 0; i < labels.length; i++) {\n      if (obj instanceof Node) {\n        newObj = new ShapeAnnotation(obj, 'annotations', labels[i], true);\n        obj.annotations.push(newObj);\n\n        if (isBlazor() && isAddLabelInServer) {\n          annotationCollection.push(newObj);\n        }\n\n        if (obj.children) {\n          var node = obj;\n\n          for (var i_2 = 0; i_2 < node.wrapper.children.length; i_2++) {\n            if (node.wrapper.children[i_2].id === node.id + 'group_container') {\n              var container = node.wrapper.children[i_2];\n              container.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n            }\n          }\n        } else {\n          canvas.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n        }\n      } else if (obj instanceof Connector) {\n        newObj = new PathAnnotation(obj, 'annotations', labels[i], true);\n        obj.annotations.push(newObj);\n\n        if (isBlazor() && isAddLabelInServer) {\n          annotationCollection.push(newObj);\n        }\n\n        var segment = canvas.children[0];\n        var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n        canvas.children.push(obj.getAnnotationElement(obj.annotations[obj.annotations.length - 1], obj.intermediatePoints, bounds, this.getDescription, this.element.id));\n      }\n\n      if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n        var entry = {\n          type: 'LabelCollectionChanged',\n          changeType: 'Insert',\n          undoObject: cloneObject(newObj),\n          redoObject: cloneObject(obj),\n          category: 'Internal'\n        };\n        this.addHistoryEntry(entry);\n      }\n    }\n\n    if (labels.length > 1) {\n      this.endGroupAction();\n    }\n\n    if (isBlazor() && isAddLabelInServer) {\n      this.UpdateBlazorLabelOrPortObjects(annotationCollection, obj instanceof Node ? 'NodeAnnotation' : 'ConnectorAnnotation', undefined, obj instanceof Node ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n    }\n\n    obj.wrapper.measure(new Size(canvas.width, canvas.height));\n    obj.wrapper.arrange(canvas.desiredSize);\n    this.updateDiagramObject(obj);\n    this.protectPropertyChange(false);\n  };\n  /**\n   * Add dynamic Lanes to swimLane at runtime \\\n   *\n   * @returns { void } Add dynamic Lanes to swimLane at runtime .\\\n   * @param {NodeModel} node - provide the obj value.\n   * @param {LaneModel[]} lane - provide the labels value.\n   * @param {number} index - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addLanes = function (node, lane, index) {\n    node = this.nameTable[node.id] || node;\n\n    for (var i = 0; i < lane.length; i++) {\n      addLane(this, node, lane[i], index);\n\n      if (index !== undefined) {\n        index += 1;\n      }\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   * Add a phase to a swimLane at runtime \\\n   *\n   * @returns { void } Add a phase to a swimLane at runtime .\\\n   * @param {NodeModel} node - provide the obj value.\n   * @param {PhaseModel[]} phases - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.addPhases = function (node, phases) {\n    node = this.nameTable[node.id] || node;\n\n    for (var i = 0; i < phases.length; i++) {\n      addPhase(this, node, phases[i]);\n    }\n\n    this.updateDiagramElementQuad();\n  };\n  /**\n   *Remove dynamic Lanes to swimLane at runtime \\\n   *\n   * @returns { void } Remove dynamic Lanes to swimLane at runtime .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {LaneModel} lane - provide the lane value.\n   *\n   */\n\n\n  Diagram.prototype.removeLane = function (node, lane) {\n    removeLane(this, undefined, node, lane);\n    this.updateDiagramElementQuad();\n  };\n  /**\n   *Remove a phase to a swimLane at runtime \\\n   *\n   * @returns { void } Remove a phase to a swimLane at runtime .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {PhaseModel} phase - provide the phase value.\n   *\n   */\n\n\n  Diagram.prototype.removePhase = function (node, phase) {\n    removePhase(this, undefined, node, phase);\n    this.updateDiagramElementQuad();\n  };\n\n  Diagram.prototype.removelabelExtension = function (obj, labels, j, wrapper) {\n    for (var i = 0; i < wrapper.children.length; i++) {\n      var canvas = wrapper.children[i];\n\n      if (canvas instanceof TextElement || canvas instanceof DiagramHtmlElement) {\n        if (canvas.id.match('_' + labels[j].id + '$')) {\n          for (var k = 0; k < obj.annotations.length; k++) {\n            if (canvas.id.match('_' + obj.annotations[k].id + '$')) {\n              if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                var entry = {\n                  type: 'LabelCollectionChanged',\n                  changeType: 'Remove',\n                  undoObject: cloneObject(obj.annotations[k]),\n                  redoObject: cloneObject(obj),\n                  category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n              }\n\n              obj.annotations.splice(k, 1);\n            }\n          }\n\n          wrapper.children.splice(i, 1);\n\n          if (this.mode === 'SVG') {\n            var element = getDiagramElement(canvas.id, this.element.id);\n\n            if (element) {\n              var element_1 = getDiagramElement(canvas.id, this.element.id);\n              element_1.parentNode.removeChild(element_1);\n            }\n\n            var textElement = getDiagramElement(canvas.id + '_text', this.element.id);\n\n            if (textElement) {\n              element = getDiagramElement(canvas.id + '_text', this.element.id);\n              element.parentNode.removeChild(element);\n            }\n\n            var htmlElement = getDiagramElement(canvas.id + '_html_element', this.element.id);\n\n            if (htmlElement) {\n              htmlElement.parentNode.removeChild(htmlElement);\n            }\n          } else {\n            this.refreshCanvasLayers();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Remove Labels at the run time \\\n   *\n   * @returns { string }    Remove Labels at the run time .\\\n   * @param { Node | ConnectorModel} obj - provide the obj value.\n   * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} labels - provide the labels value.\n   *\n   */\n\n\n  Diagram.prototype.removeLabels = function (obj, labels) {\n    var isAddLabelInServer = true;\n\n    if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = obj.annotations.length > 0 ? Number(findObjectIndex(obj, labels[0].id, true)) : -1;\n\n      if (index === -1) {\n        isAddLabelInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n\n    if (isBlazor() && isAddLabelInServer) {\n      var annotationCollection = [];\n      var removalIndexCollection = [];\n\n      for (var j = 0; j < labels.length; j++) {\n        var index = Number(findObjectIndex(obj, labels[j].id, true));\n        removalIndexCollection.push(index);\n        annotationCollection.push(labels[j]);\n      }\n\n      this.UpdateBlazorLabelOrPortObjects(annotationCollection, obj instanceof Node ? 'NodeAnnotation' : 'ConnectorAnnotation', removalIndexCollection, obj instanceof Node ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n    }\n\n    if (labels.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var j = labels.length - 1; j >= 0; j--) {\n      if (obj.children && obj.children.length > 0) {\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          this.removelabelExtension(obj, labels, j, obj.wrapper.children[k]);\n        }\n      } else {\n        this.removelabelExtension(obj, labels, j, obj.wrapper);\n      }\n    }\n\n    if (labels.length > 1) {\n      this.endGroupAction();\n    }\n  };\n\n  Diagram.prototype.removePortsExtenion = function (obj, ports, j, wrapper) {\n    for (var i = 0; i < wrapper.children.length; i++) {\n      var canvas = wrapper.children[i];\n\n      if (canvas instanceof PathElement) {\n        if (canvas.id.match('_' + ports[j].id + '$')) {\n          for (var k = 0; k < obj.ports.length; k++) {\n            if (canvas.id.match('_' + obj.ports[k].id + '$')) {\n              if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                var entry = {\n                  type: 'PortCollectionChanged',\n                  changeType: 'Remove',\n                  undoObject: cloneObject(obj.ports[k]),\n                  redoObject: cloneObject(obj),\n                  category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n              }\n\n              obj.ports.splice(k, 1);\n            }\n          }\n\n          wrapper.children.splice(i, 1);\n\n          if (this.mode === 'SVG') {\n            var element = getDiagramElement(canvas.id, this.element.id);\n            element.parentNode.removeChild(element);\n          } else {\n            this.refreshCanvasLayers();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Remove Ports at the run time \\\n   *\n   * @returns { void } checkSourcePointInTarget method .\\\n   * @param {Node} obj - provide the Connector value.\n   * @param {PointPortModel[]} ports - provide the Connector value.\n   *\n   */\n\n\n  Diagram.prototype.removePorts = function (obj, ports) {\n    var isAddPortInServer = true;\n\n    if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n      var index = obj.ports.length > 0 ? Number(findObjectIndex(obj, ports[0].id, false)) : -1;\n\n      if (index === -1) {\n        isAddPortInServer = false;\n      }\n    }\n\n    obj = this.nameTable[obj.id] || obj;\n\n    if (isBlazor() && isAddPortInServer) {\n      var removalIndexCollection = [];\n      var portCollection = [];\n\n      for (var j = ports.length - 1; j >= 0; j--) {\n        var index = Number(findObjectIndex(obj, ports[j].id, false));\n        removalIndexCollection.push(index);\n        portCollection.push(ports[j]);\n      }\n\n      this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', removalIndexCollection, this.nodes.indexOf(obj));\n    }\n\n    if (ports.length > 1) {\n      this.startGroupAction();\n    }\n\n    for (var j = ports.length - 1; j >= 0; j--) {\n      if (obj.children && obj.children.length > 0) {\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          this.removePortsExtenion(obj, ports, j, obj.wrapper.children[k]);\n        }\n      } else {\n        this.removePortsExtenion(obj, ports, j, obj.wrapper);\n      }\n    }\n\n    if (ports.length > 1) {\n      this.endGroupAction();\n    }\n  }; //public methods - end region\n\n  /**\n   * getSizeValue method \\\n   *\n   * @returns { string }     getSizeValue method .\\\n   * @param {string | Number} real - provide the real value.\n   * @param {string | Number} rulerSize - provide the rulerSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getSizeValue = function (real, rulerSize) {\n    var value;\n\n    if (real.toString().indexOf('px') > 0) {\n      value = real.toString();\n    } else if (real.toString().indexOf('%') > 0) {\n      value = rulerSize !== undefined ? '100%' : real.toString();\n    } else {\n      value = real.toString() + 'px';\n    }\n\n    if (rulerSize) {\n      var position = getRulerSize(this);\n      value = 'calc(' + value + ' - ' + rulerSize + 'px)';\n    }\n\n    return value;\n  };\n\n  Diagram.prototype.renderRulers = function () {\n    if (this.rulerSettings.showRulers) {\n      renderOverlapElement(this);\n      renderRuler(this, true);\n      renderRuler(this, false);\n    } else {\n      removeRulerElements(this);\n    }\n  };\n\n  Diagram.prototype.intOffPageBackground = function () {\n    var position = new Size();\n    position = getRulerSize(this);\n    var element = document.getElementById(this.element.id + 'content');\n    var width = this.getSizeValue(this.width, position.width);\n    var height = this.getSizeValue(this.height, position.height);\n    var style = this.rulerSettings.showRulers ? 'width:' + width + '; height:' + height + ';' + 'top:' + position.height + 'px;left:' + position.width + 'px;' + 'overflow: scroll;position:absolute;overflow:auto;' : 'width:' + width + '; height:' + height + ';position:absolute;' + ' left:0px;  top:0px;overflow: auto;';\n    var attr = {\n      'id': this.element.id + 'content',\n      'tabindex': '0',\n      'style': style\n    };\n\n    if (!element) {\n      this.diagramCanvas = createHtmlElement('div', attr);\n      this.element.appendChild(this.diagramCanvas);\n    } else {\n      this.diagramCanvas = element;\n      applyStyleAgainstCsp(this.diagramCanvas, style);\n    }\n\n    this.diagramCanvas.style.background = this.backgroundColor;\n  };\n\n  Diagram.prototype.initDiagram = function () {\n    this.intOffPageBackground();\n    setAttributeHtml(this.element, {\n      style: 'width:' + this.getSizeValue(this.width) + '; height:' + this.getSizeValue(this.height) + ';position:relative;overflow:hidden;'\n    });\n  };\n\n  Diagram.prototype.renderHiddenUserHandleTemplateLayer = function (bounds) {\n    //let element: HTMLElement;\n    var attributes = {\n      'class': this.element.id + '_hiddenUserHandleTemplate',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + 'visibility:hidden ;  overflow: hidden;'\n    };\n    var element = createHtmlElement('div', attributes);\n    this.element.appendChild(element);\n  };\n\n  Diagram.prototype.renderBackgroundLayer = function (bounds, commonStyle) {\n    var bgLayer = this.createSvg(this.element.id + '_backgroundLayer_svg', bounds.width, bounds.height);\n    applyStyleAgainstCsp(bgLayer, commonStyle);\n    var backgroundImage = createSvgElement('g', {\n      'id': this.element.id + '_backgroundImageLayer',\n      'class': 'e-background-image-layer'\n    });\n    bgLayer.appendChild(backgroundImage);\n    var attr = {\n      'id': this.element.id + '_backgroundLayer',\n      'class': 'e-background-layer'\n    };\n    var background = createSvgElement('g', attr);\n    bgLayer.appendChild(background);\n    this.diagramCanvas.appendChild(bgLayer);\n  };\n\n  Diagram.prototype.renderGridLayer = function (bounds, commonStyle) {\n    var svgGridSvg = this.createSvg(this.element.id + '_gridline_svg', bounds.width, bounds.height);\n    svgGridSvg.setAttribute('class', 'e-grid-layer');\n    var svgGrid = createSvgElement('g', {\n      'id': this.element.id + '_gridline',\n      'width': '100%',\n      'height': '100%'\n    });\n    var rect = createSvgElement('rect', {\n      'id': this.element.id + '_grid_rect',\n      'x': '0',\n      'y': '0',\n      'width': '100%',\n      'height': '100%'\n    });\n\n    if (checkBrowserInfo()) {\n      rect.setAttribute('fill', 'url(' + location.protocol + '//' + location.host + location.pathname + '#' + this.element.id + '_pattern)');\n    } else {\n      rect.setAttribute('fill', 'url(#' + this.element.id + '_pattern)');\n    }\n\n    svgGrid.appendChild(rect);\n    svgGridSvg.appendChild(svgGrid);\n    this.diagramCanvas.appendChild(svgGridSvg);\n    setAttributeSvg(svgGridSvg, {\n      'style': commonStyle\n    });\n  };\n\n  Diagram.prototype.renderDiagramLayer = function (bounds, commonStyle) {\n    var attributes = {\n      'id': this.element.id + '_diagramLayer_div',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + commonStyle\n    };\n    this.diagramLayerDiv = createHtmlElement('div', attributes);\n\n    if (this.mode === 'SVG') {\n      var diagramSvg = this.createSvg(this.element.id + '_diagramLayer_svg', bounds.width, bounds.height);\n      diagramSvg.style['pointer-events'] = 'none';\n      diagramSvg.setAttribute('class', 'e-diagram-layer');\n      var diagramLayer = createSvgElement('g', {\n        'id': this.element.id + '_diagramLayer'\n      });\n      var transformationLayer = createSvgElement('g', {});\n      this.diagramLayer = diagramLayer;\n      diagramSvg.style['pointer-events'] = 'all';\n      transformationLayer.appendChild(diagramLayer);\n      diagramSvg.appendChild(transformationLayer);\n      this.diagramLayerDiv.appendChild(diagramSvg);\n    } else {\n      this.diagramLayer = CanvasRenderer.createCanvas(this.element.id + '_diagram', bounds.width, bounds.height);\n      applyStyleAgainstCsp(this.diagramLayer, 'position:absolute;left:0px;top:0px;');\n      this.diagramLayerDiv.appendChild(this.diagramLayer);\n    }\n\n    this.diagramCanvas.appendChild(this.diagramLayerDiv);\n  };\n\n  Diagram.prototype.initLayers = function () {\n    var commonStyle = 'position:absolute;top:0px;left:0px;overflow:hidden;pointer-events:none;';\n    var container = document.getElementById(this.element.id);\n    var bounds = container.getBoundingClientRect();\n    var scrollerSize = getScrollerWidth();\n    this.scroller.scrollerWidth = scrollerSize;\n    this.scroller.setViewPortSize(bounds.width, bounds.height);\n    this.renderRulers();\n    var measureWindowElement = 'measureElement';\n\n    if (window[measureWindowElement]) {\n      window[measureWindowElement] = null;\n      var measureElements = document.getElementById('measureElement');\n      measureElements.remove();\n    }\n\n    createMeasureElements(); // this.renderBackgroundImageLayer(bounds, commonStyle);\n\n    this.renderBackgroundLayer(bounds, commonStyle);\n    this.renderGridLayer(bounds, commonStyle);\n    this.renderDiagramLayer(bounds, commonStyle);\n    this.renderHTMLLayer(bounds, commonStyle);\n    this.renderPortsExpandLayer(bounds, commonStyle);\n    this.renderNativeLayer(bounds, commonStyle);\n    this.renderAdornerLayer(bounds, commonStyle);\n    this.renderHiddenUserHandleTemplateLayer(bounds);\n  };\n\n  Diagram.prototype.renderAdornerLayer = function (bounds, commonStyle) {\n    var divElement = createHtmlElement('div', {\n      'id': this.element.id + '_diagramAdornerLayer',\n      'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n    });\n    var element = createHtmlElement('div', {\n      'id': this.element.id + '_diagramUserHandleLayer',\n      'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n    });\n    element.setAttribute('class', 'e-userHandle-layer');\n    divElement.appendChild(element);\n    var svgAdornerSvg = this.createSvg(this.element.id + '_diagramAdorner_svg', bounds.width, bounds.height);\n    svgAdornerSvg.setAttribute('class', 'e-adorner-layer');\n    svgAdornerSvg.style['pointer-events'] = 'none';\n    this.adornerLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramAdorner'\n    });\n    this.adornerLayer.style[' pointer-events'] = 'all';\n    svgAdornerSvg.appendChild(this.adornerLayer);\n    divElement.appendChild(svgAdornerSvg);\n    this.diagramCanvas.appendChild(divElement);\n    var svgSelector = createSvgElement('g', {\n      'id': this.element.id + '_SelectorElement'\n    });\n    this.adornerLayer.appendChild(svgSelector);\n    setAttributeSvg(svgAdornerSvg, {\n      style: 'pointer-events:none;'\n    });\n  };\n\n  Diagram.prototype.renderPortsExpandLayer = function (bounds, commonStyle) {\n    var svgPortsSvg = this.createSvg(this.element.id + '_diagramPorts_svg', bounds.width, bounds.height);\n    svgPortsSvg.setAttribute('class', 'e-ports-expand-layer');\n    var svgPortsLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramPorts',\n      'class': 'e-ports-layer',\n      'style': 'pointer-events: all;'\n    });\n    svgPortsSvg.appendChild(svgPortsLayer);\n    var svgExpandLayer = createSvgElement('g', {\n      'id': this.element.id + '_diagramExpander',\n      'class': 'e-expand-layer',\n      'style': 'pointer-events: all;'\n    });\n    svgPortsSvg.appendChild(svgExpandLayer);\n    this.diagramCanvas.appendChild(svgPortsSvg);\n    setAttributeSvg(svgPortsSvg, {\n      'style': commonStyle\n    });\n  };\n\n  Diagram.prototype.renderHTMLLayer = function (bounds, commonStyle) {\n    this.htmlLayer = createHtmlElement('div', {\n      'id': this.element.id + '_htmlLayer',\n      'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;position:absolute;top:0px;' + 'left:0px;overflow:hidden;pointer-events:none;',\n      'class': 'e-html-layer'\n    });\n    var htmlLayerDiv = createHtmlElement('div', {\n      'id': this.element.id + '_htmlLayer_div',\n      'style': 'position:absolute;top:0px;left:0px;pointer-events:all;'\n    });\n    this.htmlLayer.appendChild(htmlLayerDiv);\n    this.diagramCanvas.appendChild(this.htmlLayer);\n  };\n\n  Diagram.prototype.renderNativeLayer = function (bounds, commonStyle) {\n    var nativeLayerSvg = this.createSvg(this.element.id + '_nativeLayer_svg', bounds.width, bounds.height);\n    var nativeLayer = createSvgElement('g', {\n      'id': this.element.id + '_nativeLayer',\n      'style': 'pointer-events:all;'\n    });\n    nativeLayerSvg.appendChild(nativeLayer);\n    this.diagramLayerDiv.appendChild(nativeLayerSvg);\n    setAttributeSvg(nativeLayerSvg, {\n      'class': 'e-native-layer',\n      'style': commonStyle\n    });\n  };\n  /**\n   * createSvg method \\\n   *\n   * @returns { void }     createSvg method .\\\n   * @param {string} id - provide the source value.\n   * @param {string | Number} width - provide the source value.\n   * @param {string | Number} height - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.createSvg = function (id, width, height) {\n    var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    setAttributeSvg(svgObj, {\n      'id': id,\n      'width': width,\n      'height': height\n    });\n    return svgObj;\n  };\n\n  Diagram.prototype.updateBazorShape = function () {\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n\n      switch (node.shape.type) {\n        case 'Bpmn':\n          node.shape.bpmnShape = node.shape.shape ? node.shape.shape : node.shape.bpmnShape;\n          break;\n\n        case 'UmlActivity':\n          node.shape.umlActivityShape = node.shape.shape ? node.shape.shape : node.shape.umlActivityShape;\n          break;\n\n        case 'Flow':\n          node.shape.flowShape = node.shape.shape ? node.shape.shape : node.shape.flowShape;\n          break;\n\n        case 'Basic':\n          node.shape.basicShape = node.shape.shape ? node.shape.shape : node.shape.basicShape;\n          break;\n\n        case 'Text':\n          node.shape.textContent = node.shape.content ? node.shape.content : node.shape.textContent;\n          break;\n      }\n    }\n  };\n\n  Diagram.prototype.initObjects = function (isLoad) {\n    this.updateBazorShape();\n\n    if (!this.isLoading) {\n      this.initData();\n    }\n\n    this.initLayerObjects();\n    this.updateBridging(isLoad);\n  };\n  /**\n   * initLayerObjects method \\\n   *\n   * @returns { void }     initLayerObjects method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.initLayerObjects = function () {\n    var hasLayers = this.layers.length > 1; //const set: boolean = false;\n\n    var connectors = [];\n    var blazor = 'Blazor';\n    var canCloneObject = window && window[blazor] && !this.dataSourceSettings.dataSource;\n    var tempTabel = {};\n    var bpmnTable = {};\n    var tempNode = [];\n    var groups = [];\n    var i = 0;\n    var previousNodeObject = [];\n    var previousConnectorObject = [];\n    var updateNodeObject = [];\n    var updateConnectorObject = [];\n    var changeNodes = [];\n    var changeConnectors = [];\n\n    if (isBlazor() && canCloneObject) {\n      previousNodeObject = this.previousNodeCollection;\n      previousConnectorObject = this.previousConnectorCollection;\n    }\n\n    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n      var obj = _a[_i];\n      obj.id = obj.id || randomId();\n      this.addToLayer(obj, hasLayers);\n      tempTabel[obj.id] = obj;\n    }\n\n    for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n      var obj = _c[_b];\n      obj.id = obj.id || randomId();\n      this.addToLayer(obj, hasLayers);\n      tempTabel[obj.id] = obj;\n    }\n\n    for (var _d = 0, _e = this.layers; _d < _e.length; _d++) {\n      var layer = _e[_d];\n\n      for (var _f = 0, _g = layer.objects; _f < _g.length; _f++) {\n        var obj = _g[_f];\n\n        if (tempTabel[obj]) {\n          if (!(tempTabel[obj] instanceof Connector)) {\n            if (tempTabel[obj].children) {\n              groups.push(obj);\n            } else if (tempTabel[obj].shape instanceof BpmnShape && tempTabel[obj].shape.activity.subProcess.processes && tempTabel[obj].shape.activity.subProcess.processes.length > 0) {\n              bpmnTable[tempTabel[obj].id] = obj;\n            } else {\n              this.initNodes(tempTabel[obj], layer);\n            }\n          } else {\n            var connector = tempTabel[obj];\n\n            if (connector.sourceID && connector.targetID) {\n              var sourceNode = tempTabel[connector.sourceID];\n              var targetNode = tempTabel[connector.targetID];\n\n              if (sourceNode && sourceNode.wrapper && targetNode && targetNode.wrapper) {\n                this.initConnectors(tempTabel[obj], layer);\n              } else {\n                connectors.push(tempTabel[obj]);\n              }\n            } else {\n              this.initConnectors(tempTabel[obj], layer);\n            }\n          }\n        }\n      }\n\n      if (this.bpmnModule) {\n        for (var _h = 0, _j = this.bpmnModule.textAnnotationConnectors; _h < _j.length; _h++) {\n          var obj = _j[_h];\n          this.initConnectors(obj, layer, false);\n        }\n      }\n    }\n\n    for (var _k = 0, _l = Object.keys(bpmnTable); _k < _l.length; _k++) {\n      var obj = _l[_k];\n      this.initObject(tempTabel[obj]);\n      this.bpmnModule.updateDocks(tempTabel[obj], this);\n    }\n\n    var alignedGroups = this.alignGroup(groups, tempTabel);\n\n    for (var _m = 0, alignedGroups_1 = alignedGroups; _m < alignedGroups_1.length; _m++) {\n      var obj = alignedGroups_1[_m];\n      var layer = this.commandHandler.getObjectLayer(obj);\n      this.initNodes(tempTabel[obj], layer);\n    }\n\n    for (var _o = 0, connectors_1 = connectors; _o < connectors_1.length; _o++) {\n      var connector = connectors_1[_o];\n      var layer = this.commandHandler.getObjectLayer(connector.id);\n      this.initConnectors(connector, layer);\n    }\n\n    if (isBlazor() && canCloneObject) {\n      for (var _p = 0, _q = this.nodes; _p < _q.length; _p++) {\n        var obj = _q[_p];\n        updateNodeObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      for (var _r = 0, _s = this.connectors; _r < _s.length; _r++) {\n        var obj = _s[_r];\n        updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n      }\n\n      this.commandHandler.getObjectChanges(previousNodeObject, updateNodeObject, changeNodes);\n      this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n\n      if (!(this.blazorActions & BlazorAction.ClearObject)) {\n        var blazorInterop = 'sfBlazor';\n        var diagramObject = {\n          nodes: changeNodes,\n          connectors: changeConnectors\n        };\n        var obj = {\n          'methodName': 'UpdateBlazorProperties',\n          'diagramobj': diagramObject\n        };\n        window[blazorInterop].updateBlazorProperties(obj, this);\n      }\n    }\n  };\n\n  Diagram.prototype.alignGroup = function (parents, tempTabel) {\n    var newList = [];\n    var parentist = [];\n    var child;\n    var childNode;\n    var i;\n    var j;\n\n    for (i = 0; i < parents.length; i++) {\n      child = parents[i];\n      childNode = tempTabel[child];\n      var node = void 0;\n\n      if (childNode && childNode.children.length) {\n        for (j = 0; j < childNode.children.length; j++) {\n          node = childNode.children[j];\n\n          if (parents.indexOf(node) > -1 && newList.indexOf(node) === -1 && parentist.indexOf(node) === -1) {\n            newList.splice(0, 0, node);\n          }\n        }\n      }\n\n      if (newList.indexOf(child) === -1) {\n        parentist.push(child);\n      }\n    }\n\n    newList = newList.concat(parentist);\n    return newList;\n  };\n\n  Diagram.prototype.addToLayer = function (obj, hasLayers) {\n    var layer;\n\n    if (hasLayers) {\n      layer = this.commandHandler.getObjectLayer(obj.id);\n    }\n\n    if (!hasLayers || !layer) {\n      if (this.activeLayer.objects.indexOf(obj.id) === -1) {\n        this.activeLayer.objects.push(obj.id);\n      }\n    }\n\n    this.setZIndex(layer || this.activeLayer, obj);\n  };\n\n  Diagram.prototype.updateLayer = function (newProp) {\n    for (var _i = 0, _a = Object.keys(newProp.layers); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var layerObject = this.layers[key].objects;\n\n      for (var _b = 0, layerObject_1 = layerObject; _b < layerObject_1.length; _b++) {\n        var obj = layerObject_1[_b];\n        var node = this.nameTable[obj];\n\n        if (newProp.layers[key].visible !== undefined) {\n          this.updateElementVisibility(node.wrapper, node, newProp.layers[key].visible);\n        } else if (newProp.layers[key].lock === true) {\n          this.unSelect(node);\n        }\n      }\n\n      if (newProp.layers[key].lock !== undefined) {\n        this.layers[key].lock = newProp.layers[key].lock;\n      }\n    }\n\n    if (this.mode !== 'SVG') {\n      this.refreshDiagramLayer();\n    }\n  };\n\n  Diagram.prototype.updateScrollSettings = function (newProp) {\n    var hPan = -this.scroller.horizontalOffset + newProp.scrollSettings.horizontalOffset || 0;\n    var vPan = this.scroller.verticalOffset - newProp.scrollSettings.verticalOffset || 0;\n    var oldValue = {\n      VerticalOffset: this.scrollSettings.verticalOffset,\n      HorizontalOffset: this.scrollSettings.horizontalOffset,\n      ViewportHeight: this.scrollSettings.viewPortHeight,\n      ViewportWidth: this.scrollSettings.viewPortWidth,\n      CurrentZoom: this.scroller.currentZoom\n    };\n\n    if (hPan !== 0 || vPan !== 0) {\n      this.pan(hPan, vPan);\n    }\n\n    var newValue = {\n      VerticalOffset: this.scrollSettings.verticalOffset,\n      HorizontalOffset: this.scrollSettings.horizontalOffset,\n      ViewportHeight: this.scrollSettings.viewPortHeight,\n      ViewportWidth: this.scrollSettings.viewPortWidth,\n      CurrentZoom: this.scroller.currentZoom\n    };\n    var panStatus = 'Start';\n\n    if (this.realActions & RealAction.PanInProgress) {\n      panStatus = 'Progress';\n    }\n\n    var arg = {\n      oldValue: oldValue,\n      newValue: newValue,\n      source: this,\n      panState: panStatus\n    };\n\n    if (isBlazor() && this.scrollChange) {\n      arg = {\n        oldValue: oldValue,\n        newValue: newValue,\n        sourceId: this.element.id,\n        panState: panStatus\n      };\n    }\n\n    this.triggerEvent(DiagramEvent.scrollChange, arg);\n    this.commandHandler.updatePanState(true);\n\n    if (this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization) {\n      this.refreshDiagramLayer();\n    }\n  };\n\n  Diagram.prototype.initData = function () {\n    var dataSourceSettings = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n    var adapter = 'adaptorName';\n\n    if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n      if (dataSourceSettings && this.dataSourceSettings.connectionDataSource.dataManager) {\n        var dataManager = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n        this.nodes = this.generateData(dataManager, true);\n        this.connectors = this.generateData(this.dataSourceSettings.connectionDataSource.dataManager, false);\n      } else if (dataSourceSettings && dataSourceSettings.dataSource && (dataSourceSettings.dataSource.url || dataSourceSettings[adapter] === 'BlazorAdaptor' && !dataSourceSettings.dataSource.url)) {\n        this.dataBindingModule.initSource(this.dataSourceSettings, this);\n      } else {\n        this.dataBindingModule.initData(this.dataSourceSettings, this);\n      }\n    }\n  };\n\n  Diagram.prototype.generateData = function (dataSource, isNode) {\n    var nodes = [];\n    var i;\n\n    for (i = 0; i < dataSource.length; i++) {\n      var row = dataSource[i];\n      var node = isNode ? this.makeData(row, true) : this.makeData(row, false);\n\n      if (node && node.id && (!findNodeByName(nodes, node.id) || !findNodeByName(nodes, node.id))) {\n        nodes.push(node);\n      }\n    }\n\n    return nodes;\n  };\n\n  Diagram.prototype.makeData = function (row, isNode) {\n    var i;\n    var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n    var data = {};\n    data.id = row[fields.id] ? row[fields.id] : randomId();\n\n    if (fields.sourceID) {\n      data.sourceID = row[fields.sourceID];\n    }\n\n    if (fields.targetID) {\n      data.targetID = row[fields.targetID];\n    }\n\n    if (row[fields.sourcePointX] && row[fields.sourcePointY]) {\n      data.sourcePoint = {\n        'x': Number(row[fields.sourcePointX]),\n        'y': Number(row[fields.sourcePointY])\n      };\n    }\n\n    if (row[fields.targetPointX] && row[fields.targetPointY]) {\n      data.targetPoint = {\n        'x': Number(row[fields.targetPointX]),\n        'y': Number(row[fields.targetPointY])\n      };\n    }\n\n    if (fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n      for (i = 0; i < fields.crudAction.customFields.length; i++) {\n        data[fields.crudAction.customFields[i]] = row[fields.crudAction.customFields[i]];\n      }\n    }\n\n    return data;\n  };\n\n  Diagram.prototype.initNodes = function (obj, layer) {\n    this.preventDiagramUpdate = true;\n    this.initObject(obj, layer);\n    this.preventDiagramUpdate = false;\n  };\n\n  Diagram.prototype.initConnectors = function (obj, layer, independentObj) {\n    this.preventDiagramUpdate = true;\n    this.initObject(obj, layer, independentObj);\n    this.updateEdges(obj);\n    this.preventDiagramUpdate = false;\n  };\n\n  Diagram.prototype.setZIndex = function (layer, obj) {\n    //should be changed\n    var currentLayer = layer;\n\n    if (obj.zIndex === -1) {\n      while (currentLayer.zIndexTable[currentLayer.objectZIndex + 1]) {\n        layer.objectZIndex++;\n      }\n\n      obj.zIndex = ++currentLayer.objectZIndex;\n    } else {\n      var index = obj.zIndex;\n\n      if (currentLayer.zIndexTable[index]) {\n        var tabelLength = Object.keys(currentLayer.zIndexTable).length;\n        var j = 0;\n\n        for (var i = 0; i < tabelLength; i++) {\n          if (i === index) {\n            for (var j_1 = tabelLength; j_1 > index; j_1--) {\n              currentLayer.zIndexTable[j_1] = currentLayer.zIndexTable[j_1 - 1];\n\n              if (this.nameTable[currentLayer.zIndexTable[j_1]]) {\n                this.nameTable[currentLayer.zIndexTable[j_1]].zIndex = j_1;\n              }\n            }\n\n            currentLayer.zIndexTable[i] = obj.id;\n          }\n\n          j++;\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.initializeDiagramLayers = function () {\n    //const tempLayers: LayerModel[] = this.layers;\n    for (var i = 0; i < this.layers.length; i++) {\n      if (this.layers[i].zIndex !== -1) {\n        var temp = this.layers[i];\n        this.layers[i] = this.layers[this.layers[i].zIndex];\n        this.layers[temp.zIndex] = temp;\n      }\n    }\n\n    for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n      var layer = _a[_i];\n      layer.zIndex = layer.zIndex !== -1 ? layer.zIndex : this.layers.indexOf(layer);\n      this.layerZIndexTable[layer.zIndex] = layer.id;\n    }\n\n    for (var i = 0; i < this.layers.length; i++) {\n      for (var j = i + 1; j < this.layers.length; j++) {\n        if (this.layers[i].zIndex > this.layers[j].zIndex) {\n          var temp = this.layers[i];\n          this.layers[i] = this.layers[j];\n          this.layers[j] = temp;\n        }\n      }\n    }\n\n    if (this.layers.length === 0) {\n      var defaultLayer = {\n        id: 'default_layer',\n        visible: true,\n        lock: false,\n        objects: [],\n        zIndex: 0,\n        objectZIndex: -1,\n        zIndexTable: {}\n      };\n      this.commandHandler.addLayer(defaultLayer, null, true);\n    }\n\n    this.setActiveLayer(this.layers[this.layers.length - 1].id);\n  };\n  /**\n   * resetTool method \\\n   *\n   * @returns { void }     resetTool method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.resetTool = function () {\n    this.eventHandler.resetTool();\n  };\n\n  Diagram.prototype.initObjectExtend = function (obj, layer, independentObj) {\n    if (independentObj) {\n      var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds);\n\n      for (var i = 0, a = Object.keys(layer.zIndexTable); i < a.length; i++) {\n        if (layer.zIndexTable[a[i]] && layer.zIndexTable[a[i]] === obj.id) {\n          delete layer.zIndexTable[a[i]];\n        }\n      }\n\n      layer.zIndexTable[obj.zIndex] = obj.id;\n\n      if (!checkBoundaryConstraints) {\n        var node = obj instanceof Node ? this.nodes : this.connectors;\n\n        for (var i = 0; i <= node.length; i++) {\n          if (node[i] && obj.id === node[i].id) {\n            node.splice(i, 1);\n          }\n        }\n\n        delete layer.zIndexTable[obj.zIndex];\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * initObject method \\\n   *\n   * @returns { void }     initObject method .\\\n   * @param {End} obj - provide the obj value.\n   * @param {End} layer - provide the layer value.\n   * @param {LayoutOrientation} independentObj - provide the independentObj value.\n   * @param {boolean} group - provide the independentObj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.initObject = function (obj, layer, independentObj, group) {\n    if (independentObj === void 0) {\n      independentObj = true;\n    }\n\n    if (obj !== undefined) {\n      if (independentObj) {\n        if (!layer) {\n          this.addToLayer(obj, false);\n          layer = this.activeLayer;\n        } //Move the common properties like zindex and id to an abstract class\n\n\n        if (obj instanceof Node || obj instanceof Connector) {\n          this.setZIndex(layer, obj);\n        }\n      }\n\n      if (obj instanceof Node) {\n        if (independentObj) {\n          if (obj.id !== 'helper') {\n            var getDefaults = getFunction(this.getNodeDefaults);\n\n            if (getDefaults) {\n              var defaults = getDefaults(obj, this);\n\n              if (defaults && defaults.ports) {\n                for (var i = 0; i < defaults.ports.length; i++) {\n                  defaults.ports[i].inEdges = [];\n                  defaults.ports[i].outEdges = [];\n                }\n              }\n\n              if (defaults && defaults !== obj) {\n                extendObject(defaults, obj);\n              }\n            }\n          }\n\n          this.initNode(obj, this.element.id);\n        }\n      } else if (obj instanceof Connector) {\n        var getDefaults = getFunction(this.getConnectorDefaults);\n\n        if (getDefaults) {\n          var defaults = getDefaults(obj, this);\n\n          if (defaults && defaults !== obj) {\n            extendObject(defaults, obj);\n          }\n\n          if (obj.segments.length) {\n            if (obj.type !== obj.segments[0].type) {\n              obj.segments = [];\n            }\n          }\n        }\n\n        var sourceNode = this.nameTable[obj.sourceID];\n        var targetNode = this.nameTable[obj.targetID];\n        var port = this.getConnectedPort(sourceNode, obj, true);\n        var targetPort = this.getConnectedPort(targetNode, obj);\n        var outPort = this.findInOutConnectPorts(sourceNode, false);\n        var inPort = this.findInOutConnectPorts(targetNode, true);\n\n        if (sourceNode !== undefined && canOutConnect(sourceNode) || obj.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          obj.sourceWrapper = this.getEndNodeWrapper(sourceNode, obj, true);\n\n          if (obj.sourcePortID) {\n            // eslint-disable-next-line max-len\n            if (port && port.constraints && !(port.constraints & PortConstraints.None) && port.constraints & PortConstraints.OutConnect) {\n              obj.sourcePortWrapper = this.getWrapper(sourceNode.wrapper, obj.sourcePortID);\n            }\n          }\n        }\n\n        if (targetNode !== undefined && canInConnect(targetNode) || obj.targetPortID !== '' && canPortInConnect(inPort)) {\n          obj.targetWrapper = this.getEndNodeWrapper(targetNode, obj, false);\n\n          if (obj.targetPortID) {\n            // eslint-disable-next-line max-len\n            if (targetPort && targetPort.constraints && !(targetPort.constraints & PortConstraints.None) && targetPort.constraints & PortConstraints.InConnect) {\n              obj.targetPortWrapper = this.getWrapper(targetNode.wrapper, obj.targetPortID);\n            }\n          }\n        }\n\n        if (!independentObj) {\n          var points = obj.getConnectorPoints(obj.type);\n          updateConnector(obj, points);\n        }\n\n        if (independentObj) {\n          obj.init(this);\n        }\n\n        for (var k = 0; k < obj.wrapper.children.length; k++) {\n          if (this.pathTable[obj.wrapper.children[k].data]) {\n            obj.wrapper.children[k].absoluteBounds = this.pathTable[obj.wrapper.children[k].data].absoluteBounds;\n          }\n        }\n\n        obj.wrapper.measure(new Size(undefined, undefined));\n        obj.wrapper.arrange(obj.wrapper.desiredSize);\n\n        if (obj instanceof Connector && obj.type === 'Bezier') {\n          this.updateConnectorAnnotation(obj);\n          this.updateConnectorfixedUserHandles(obj);\n        }\n\n        for (var j = 0; j < obj.wrapper.children.length; j++) {\n          this.pathTable[obj.wrapper.children[j].data] = {};\n          this.pathTable[obj.wrapper.children[j].data].absoluteBounds = obj.wrapper.children[j].absoluteBounds;\n        }\n      }\n\n      if (obj instanceof Node && obj.children && obj.container) {\n        for (var i = 0; i < obj.children.length; i++) {\n          this.nameTable[obj.children[i]].offsetX = this.nameTable[obj.children[i]].wrapper.offsetX;\n          this.nameTable[obj.children[i]].offsetY = this.nameTable[obj.children[i]].wrapper.offsetY;\n        }\n      }\n\n      if (this.bpmnModule && obj instanceof Node && obj.shape.type === 'Bpmn' && obj.shape.annotations.length > 0) {\n        this.bpmnModule.updateQuad(obj, this);\n      }\n\n      this.initObjectExtend(obj, layer, independentObj);\n      this.nameTable[obj.id] = obj;\n\n      if (obj instanceof Node && obj.children) {\n        this.preventNodesUpdate = true;\n        this.preventConnectorsUpdate = true;\n\n        if (!group && !obj.container) {\n          this.updateGroupOffset(obj, true);\n        }\n\n        this.groupTable[obj.id] = obj.children;\n\n        for (var i = 0; i < obj.children.length; i++) {\n          var node = this.nameTable[obj.children[i]];\n\n          if (node) {\n            node.parentId = obj.id;\n          }\n        }\n\n        if (!this.isLoading && obj.rotateAngle && !obj.container) {\n          this.commandHandler.rotateObjects(obj, [obj], obj.rotateAngle, {\n            x: obj.offsetX,\n            y: obj.offsetY\n          }, false);\n        }\n\n        this.preventNodesUpdate = false;\n        this.preventConnectorsUpdate = false;\n      }\n\n      if (this['enterObject'] === undefined) {\n        this.updateQuad(obj);\n      }\n    }\n\n    if (obj.visible === false) {\n      this.updateElementVisibility(obj.wrapper, obj, false);\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.getConnectedPort = function (node, connector, isSource) {\n    if (node && node.ports) {\n      for (var _i = 0, _a = node.ports; _i < _a.length; _i++) {\n        var port = _a[_i];\n\n        if (port.id === connector.sourcePortID && isSource) {\n          return port;\n        } else if (port.id === connector.targetPortID && !isSource) {\n          return port;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Diagram.prototype.scaleObject = function (obj, size, isWidth) {\n    var actualSize = isWidth ? obj.wrapper.actualSize.width : obj.wrapper.actualSize.height;\n    var sw = isWidth ? 1 + (size - actualSize) / actualSize : 1;\n    var sh = isWidth ? 1 : 1 + (size - actualSize) / actualSize; //const groupOffsetX: number = obj.offsetX; const groupOffsetY: number = obj.offsetY;\n\n    this.realActions |= RealAction.PreventDrag;\n    this.scale(obj, sw, sh, {\n      x: 0.5,\n      y: 0.5\n    });\n    this.realActions &= ~RealAction.PreventDrag;\n  };\n\n  Diagram.prototype.updateDefaultLayoutIcons = function (node) {\n    if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' || this.layout.type === 'ComplexHierarchicalTree') {\n      {\n        this.updateDefaultLayoutIcon(node, node.expandIcon);\n        this.updateDefaultLayoutIcon(node, node.collapseIcon);\n      }\n    }\n  };\n\n  Diagram.prototype.updateDefaultLayoutIcon = function (node, icon) {\n    if (icon.shape !== 'None') {\n      if (icon.horizontalAlignment === 'Auto' && icon.verticalAlignment === 'Auto' && icon.offset.x === .5 && icon.offset.y === 1) {\n        var iconWrapper = this.getWrapper(node.wrapper, 'icon_content');\n        var offsetX = void 0;\n        var offsetY = void 0;\n\n        if (this.layout.orientation === 'TopToBottom' || this.layout.orientation === 'BottomToTop') {\n          offsetX = .5;\n          offsetY = this.layout.orientation === 'TopToBottom' ? 1 : 0;\n        } else if (this.layout.orientation === 'RightToLeft' || this.layout.orientation === 'LeftToRight') {\n          offsetX = this.layout.orientation === 'LeftToRight' ? 1 : 0;\n          offsetY = .5;\n        }\n\n        iconWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        iconWrapper.horizontalAlignment = 'Center';\n        iconWrapper.verticalAlignment = 'Center';\n        node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n        node.wrapper.arrange(node.wrapper.desiredSize);\n      }\n    }\n  };\n  /**\n   * updateGroupOffset method \\\n   *\n   * @returns { void }     updateGroupOffset method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the source value.\n   * @param {boolean} isUpdateSize - provide the target value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGroupOffset = function (node, isUpdateSize) {\n    var isUpdateGroupToBlazor = false;\n\n    if (node.children && node.children.length > 0 && !node.container || node.processId) {\n      var node1 = this.nameTable[node.id];\n\n      if (!(this.realActions & RealAction.PreventScale) && !(this.realActions & RealAction.PreventDrag)) {\n        if (node1.offsetX && (this.realActions & RealAction.EnableGroupAction || !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod))) {\n          this.realActions |= RealAction.PreventScale;\n          var diffX = node1.offsetX - node.wrapper.offsetX;\n          node1.offsetX = node.wrapper.offsetX;\n          var diffY = node1.offsetY - node.wrapper.offsetY;\n          node1.offsetY = node.wrapper.offsetY;\n\n          if (node.flip === 'None') {\n            this.drag(node1, diffX, diffY);\n          }\n\n          this.realActions &= ~RealAction.PreventScale;\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.offsetX = node.wrapper.offsetX;\n        }\n\n        if (node1.offsetY && (this.realActions & RealAction.EnableGroupAction || !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod))) {\n          this.realActions |= RealAction.PreventScale;\n          var diffY = node1.offsetY - node.wrapper.offsetY;\n          node1.offsetY = node.wrapper.offsetY;\n\n          if (node.flip === 'None') {\n            this.drag(node1, 0, diffY);\n          }\n\n          this.realActions &= ~RealAction.PreventScale;\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.offsetY = node.wrapper.offsetY;\n        }\n\n        if (this.diagramActions) {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(node1), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          node1.width = node.wrapper.actualSize.width;\n          node1.height = node.wrapper.actualSize.height;\n        }\n      }\n    }\n\n    if (isUpdateSize) {\n      if (node.children && node.children.length > 0) {\n        if (this.nameTable[node.id].width !== undefined) {\n          this.scaleObject(node, this.nameTable[node.id].width, true);\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(this.nameTable[node.id]), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          this.nameTable[node.id].width = node.wrapper.actualSize.width;\n        }\n\n        if (this.nameTable[node.id].height !== undefined) {\n          this.scaleObject(node, this.nameTable[node.id].height, false);\n        } else {\n          if (isBlazor()) {\n            this.insertValue(cloneObject(this.nameTable[node.id]), true);\n            isUpdateGroupToBlazor = true;\n          }\n\n          this.nameTable[node.id].height = node.wrapper.actualSize.height;\n        }\n      }\n    }\n\n    if (isUpdateGroupToBlazor && !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.PublicMethod)) {\n      this.commandHandler.getBlazorOldValues();\n    }\n  };\n  /* eslint-disable */\n\n\n  Diagram.prototype.initNode = function (obj, diagramId, group) {\n    var canvas = obj.initContainer();\n    var portContainer = new Canvas();\n    var content;\n\n    if (!this.diagramSettings.inversedAlignment) {\n      canvas.inversedAlignment = false;\n    }\n\n    if (!canvas.children) {\n      canvas.children = [];\n    }\n\n    if (obj.children) {\n      canvas.measureChildren = false;\n      portContainer.id = obj.id + 'group_container';\n      portContainer.style.fill = 'none';\n      portContainer.style.strokeColor = 'none';\n      portContainer.horizontalAlignment = 'Stretch';\n      portContainer.verticalAlignment = 'Stretch';\n      canvas.style = obj.style;\n      portContainer.children = [];\n      portContainer.preventContainer = true;\n\n      if (obj.container) {\n        portContainer.relativeMode = 'Object';\n      }\n\n      var checkPorts = obj.ports && obj.ports.length > 0 ? true : false;\n\n      if (isNullOrUndefined(obj.container) && !checkPorts) {\n        canvas.children.push(portContainer);\n      }\n\n      if (obj.container && obj.container.type === 'Grid') {\n        for (var i = 0; i < obj.children.length; i++) {\n          var childCollection = new Canvas();\n          var child = this.nameTable[obj.children[i]];\n          childCollection.children = [];\n          childCollection.children.push(child.wrapper);\n\n          if (child) {\n            canvas.addObject(child.wrapper, child.rowIndex, child.columnIndex, child.rowSpan, child.columnSpan);\n          }\n        }\n      } else {\n        for (var i = 0; i < obj.children.length; i++) {\n          if (this.nameTable[obj.children[i]]) {\n            var child = this.nameTable[obj.children[i]];\n            this.updateStackProperty(obj, child, i);\n            canvas.children.push(child.wrapper);\n            canvas.elementActions = canvas.elementActions | ElementAction.ElementIsGroup;\n            child.wrapper.flip = child.wrapper.flip === 'None' ? obj.wrapper.flip : child.wrapper.flip;\n          }\n        }\n      }\n\n      if (checkPorts || obj.container && obj.container.type !== 'Grid') {\n        canvas.children.push(portContainer);\n      }\n    } else {\n      var setNodeTemplate = getFunction(this.setNodeTemplate);\n\n      if (setNodeTemplate && obj.id !== 'helper') {\n        content = setNodeTemplate(obj, this);\n      }\n\n      if (!content) {\n        content = obj.init(this);\n      }\n\n      canvas.children.push(content);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var wrapperContent;\n    wrapperContent = getFunction(this.getDescription);\n\n    if (wrapperContent) {\n      (obj.children ? canvas : content).description = wrapperContent;\n    } else {\n      (obj.children ? canvas : content).description = obj.annotations.length ? obj.annotations[0].content : obj.id;\n    }\n\n    var container = obj.children ? portContainer : canvas;\n    obj.initAnnotations(this.getDescription, container, this.element.id, canVitualize(this) ? true : false, this.annotationTemplate);\n    obj.initPorts(this.getDescription, container);\n    obj.initIcons(this.getDescription, this.layout, container, diagramId);\n\n    for (var i = 0; obj.fixedUserHandles !== undefined, i < obj.fixedUserHandles.length; i++) {\n      var fixedUserHandles = obj.initfixedUserHandles(obj.fixedUserHandles[i]);\n      container.children.push(fixedUserHandles);\n    }\n\n    if (obj.shape.type === 'SwimLane' && obj.wrapper && obj.wrapper.children.length > 0 && obj.wrapper.children[0] instanceof GridPanel) {\n      swimLaneMeasureAndArrange(obj);\n      arrangeChildNodesInSwimLane(this, obj);\n      this.updateDiagramElementQuad();\n    } else {\n      canvas.measure(new Size(obj.width, obj.height), obj.id, this.onLoadImageSize.bind(this));\n\n      if (canvas instanceof GridPanel) {\n        canvas.arrange(canvas.desiredSize, true);\n      } else {\n        canvas.arrange(canvas.desiredSize);\n      }\n    }\n\n    if (obj.wrapper.flip !== 'None' && obj.wrapper.elementActions & ElementAction.ElementIsGroup) {\n      alignElement(obj.wrapper, obj.wrapper.offsetX, obj.wrapper.offsetY, this, obj.wrapper.flip);\n    }\n\n    if (obj instanceof Node && obj.container && (obj.width < canvas.outerBounds.width || obj.height < canvas.outerBounds.height) && canvas.bounds.x <= canvas.outerBounds.x && canvas.bounds.y <= canvas.outerBounds.y) {\n      obj.width = canvas.width = canvas.outerBounds.width;\n      obj.height = canvas.height = canvas.outerBounds.height;\n      canvas.measure(new Size(obj.width, obj.height));\n      canvas.arrange(canvas.desiredSize);\n    }\n\n    if (obj.container && obj.container.type === 'Grid' && obj.children && obj.children.length > 0) {\n      this.updateChildPosition(obj);\n    }\n  };\n  /* eslint-enable */\n\n  /**\n   * updateDiagramElementQuad method \\\n   *\n   * @returns { void }     updateDiagramElementQuad method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramElementQuad = function () {\n    for (var i = 0; i < this.nodes.length; i++) {\n      if (this.nodes[i].wrapper && this.nodes[i].wrapper instanceof Container) {\n        this.updateQuad(this.nodes[i]);\n      }\n    }\n  };\n\n  Diagram.prototype.onLoadImageSize = function (id, size) {\n    var obj = this.getObject(id);\n    var image = document.getElementById(id + 'sf-imageNode');\n\n    if (image) {\n      image.parentNode.removeChild(image);\n    }\n\n    this.nodePropertyChange(obj, {}, {\n      width: size.width,\n      height: size.height\n    });\n    var args = {\n      element: cloneObject(obj),\n      size: size\n    };\n    this.triggerEvent(DiagramEvent.onImageLoad, args);\n  };\n\n  Diagram.prototype.updateChildPosition = function (obj) {\n    for (var i = 0; i < obj.children.length; i++) {\n      var child = this.getObject(obj.children[i]);\n      child.offsetX = child.wrapper.offsetX;\n      child.offsetY = child.wrapper.offsetY;\n\n      if (child.children && child.children.length > 0) {\n        this.updateChildPosition(child);\n      }\n    }\n  };\n\n  Diagram.prototype.canExecute = function () {\n    return true;\n  };\n\n  Diagram.prototype.updateStackProperty = function (obj, child, index) {\n    if (obj.container && obj.container.type === 'Stack') {\n      if (!child.width) {\n        child.wrapper.horizontalAlignment = 'Stretch';\n        child.horizontalAlignment = 'Stretch';\n      }\n\n      if (!child.height) {\n        child.verticalAlignment = 'Stretch';\n        child.wrapper.verticalAlignment = 'Stretch';\n      }\n\n      if (index && obj.shape.type === 'UmlClassifier') {\n        child.umlIndex = index;\n      }\n    }\n  };\n\n  Diagram.prototype.initViews = function () {\n    if (!this.isLoading) {\n      this.views.push(this.element.id);\n      this.views[this.element.id] = this;\n    }\n  };\n\n  Diagram.prototype.initCommands = function () {\n    var i;\n    var newCommands = this.commandManager.commands;\n    var commands = {\n      'copy': {\n        execute: this.copyCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.C,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'paste': {\n        execute: this.pasteCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.V,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'cut': {\n        execute: this.cutCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.X,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'delete': {\n        execute: this.removeCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Delete\n        }\n      },\n      'selectAll': {\n        execute: this.selectAll.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.A,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'undo': {\n        execute: this.undo.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Z,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'redo': {\n        execute: this.redo.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Y,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'nudgeUp': {\n        execute: this.nudgeCommand.bind(this, 'Up'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Up\n        },\n        parameter: 'up'\n      },\n      'nudgeRight': {\n        execute: this.nudgeCommand.bind(this, 'Right'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Right\n        },\n        parameter: 'right'\n      },\n      'nudgeDown': {\n        execute: this.nudgeCommand.bind(this, 'Down'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Down\n        },\n        parameter: 'down'\n      },\n      'nudgeLeft': {\n        execute: this.nudgeCommand.bind(this, 'Left'),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Left\n        },\n        parameter: 'left'\n      },\n      'startEdit': {\n        execute: this.startEditCommad.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.F2\n        }\n      },\n      'endEdit': {\n        execute: this.endEditCommand.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Escape\n        }\n      },\n      'focusToNextItem': {\n        // execute: this.focusToItem.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Tab\n        }\n      },\n      'focusToPreviousItem': {\n        // execute: this.focusToItem.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Tab,\n          keyModifiers: KeyModifiers.Control\n        }\n      },\n      'selectFocusedItem': {\n        execute: this.startEditCommad.bind(this),\n        canExecute: this.canExecute.bind(this),\n        gesture: {\n          key: Keys.Enter\n        }\n      }\n    };\n    this.initCommandManager(newCommands, commands);\n  };\n\n  Diagram.prototype.overrideCommands = function (newCommand, commands) {\n    var command;\n\n    for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n      var key = _a[_i];\n      command = commands[key];\n\n      if (newCommand.gesture.key === command.gesture.key && newCommand.gesture.keyModifiers === command.gesture.keyModifiers) {\n        delete commands[key];\n        break;\n      }\n    }\n  };\n\n  Diagram.prototype.initCommandManager = function (newCommands, commands) {\n    var i = 0;\n\n    if (newCommands) {\n      for (i = 0; i < newCommands.length; i++) {\n        if (commands[newCommands[i].name] && newCommands[i]) {\n          if (newCommands[i].canExecute) {\n            commands[newCommands[i].name].canExecute = newCommands[i].canExecute;\n          }\n\n          if (newCommands[i].execute) {\n            commands[newCommands[i].name].execute = newCommands[i].execute;\n          }\n\n          if (newCommands[i].gesture.key || newCommands[i].gesture.keyModifiers) {\n            commands[newCommands[i].name].gesture = newCommands[i].gesture;\n          }\n\n          if (newCommands[i].parameter !== '') {\n            commands[newCommands[i].name].parameter = newCommands[i].parameter;\n          }\n        } else {\n          this.overrideCommands(newCommands[i], commands);\n          commands[newCommands[i].name] = {\n            execute: newCommands[i].execute,\n            canExecute: newCommands[i].canExecute,\n            gesture: newCommands[i].gesture,\n            parameter: newCommands[i].parameter\n          };\n        }\n      }\n    }\n\n    this.commands = commands;\n  };\n  /**\n   * updateNodeEdges method \\\n   *\n   * @returns { void }     updateNodeEdges method .\\\n   * @param {Node} node - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodeEdges = function (node) {\n    for (var _i = 0, _a = node.inEdges; _i < _a.length; _i++) {\n      var edge = _a[_i];\n\n      if (this.nameTable[edge]) {\n        this.nameTable[edge].targetID = '';\n      }\n    }\n\n    for (var _b = 0, _c = node.outEdges; _b < _c.length; _b++) {\n      var edge = _c[_b];\n\n      if (this.nameTable[edge]) {\n        this.nameTable[edge].sourceID = '';\n      }\n    }\n\n    node.inEdges = [];\n    node.outEdges = [];\n  };\n  /**\n   * updateIconVisibility method \\\n   *\n   * @returns { void }     updateIconVisibility method .\\\n   * @param {Node} node - provide the source value.\n   * @param {boolean} visibility - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateIconVisibility = function (node, visibility) {\n    for (var i = 0; i < node.wrapper.children.length; i++) {\n      var child = node.wrapper.children[i];\n\n      if (child.id) {\n        var id = child.id.split(node.id)[1];\n\n        if (id && id.match('^_icon')) {\n          child.visible = visibility;\n          this.updateDiagramContainerVisibility(child, visibility);\n        }\n      }\n    }\n  };\n  /**\n   * updateEdges method \\\n   *\n   * @returns { void }     updateEdges method .\\\n   * @param {Connector} obj - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateEdges = function (obj) {\n    if (obj.sourceID !== undefined && obj.sourceID !== '') {\n      var node = this.nameTable[obj.sourceID];\n\n      if (node && node.outEdges && node.outEdges.length === 0) {\n        node.outEdges = [];\n      }\n\n      if (node && node.outEdges && node.outEdges.indexOf(obj.id) === -1) {\n        node.outEdges.push(obj.id);\n      }\n\n      this.updatePortEdges(node, obj, false);\n    }\n\n    if (obj.targetID !== undefined && obj.targetID !== '') {\n      var node = this.nameTable[obj.targetID];\n\n      if (node && node.inEdges && node.inEdges.length === 0) {\n        node.inEdges = [];\n      }\n\n      if (node && node.inEdges && node.inEdges.indexOf(obj.id) === -1) {\n        node.inEdges.push(obj.id);\n      }\n\n      this.updatePortEdges(node, obj, true);\n\n      if (node && node.visible && node.outEdges) {\n        var value = node.outEdges.length === 0 ? false : true;\n        this.updateIconVisibility(node, value);\n      }\n    }\n  };\n  /**\n   * updatePortEdges method \\\n   *\n   * @returns { void }     updatePortEdges method .\\\n   * @param {NodeModel} node - provide the source value.\n   * @param {ConnectorModel} obj - provide the target value.\n   * @param {boolean} isInEdges - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePortEdges = function (node, obj, isInEdges) {\n    if (node) {\n      for (var i = 0; i < node.ports.length; i++) {\n        var port = node.ports[i];\n        var portId = isInEdges ? obj.targetPortID : obj.sourcePortID;\n\n        if (port.id === portId) {\n          var portEdges = isInEdges ? port.inEdges : port.outEdges;\n\n          if (portEdges.indexOf(obj.id) === -1) {\n            portEdges.push(obj.id);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * refreshDiagram method \\\n   *\n   * @returns { void }     refreshDiagram method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshDiagram = function () {\n    this.initLayerObjects();\n    this.doLayout();\n    this.updateBridging();\n    this.scroller.setSize();\n    this.addBlazorDiagramObjects();\n\n    if (isBlazor() && this.layout && this.layout.layoutInfo && this.layout.layoutInfo.isRootInverse && this.nodes.length > 2) {\n      var rootNode = this.nodes[0];\n\n      if (rootNode.outEdges.length > 1) {\n        var isProtectedChange = this.isProtectedOnChange;\n\n        for (var i = 1; i < rootNode.outEdges.length; i++) {\n          var connector = this.nameTable[rootNode.outEdges[i]];\n          var isAllowServerUpdate = this.allowServerDataBinding;\n          this.protectPropertyChange(false);\n          this.enableServerDataBinding(false);\n          this.preventDiagramUpdate = true;\n          var target = this.getObject(connector.targetID); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          if (target.data.Branch === 'Left') {\n            connector.sourcePortID = rootNode.ports[1].id;\n          }\n\n          this.dataBind();\n          this.preventDiagramUpdate = false;\n          this.enableServerDataBinding(isAllowServerUpdate);\n          this.protectPropertyChange(isProtectedChange);\n        }\n      }\n    }\n\n    if (isBlazor()) {\n      var view = void 0;\n\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        view = this.views[temp];\n\n        if (view.renderDocument) {\n          view.renderDocument(view);\n          view.diagramRenderer.setLayers();\n          view.updateView(view);\n          this.renderNodes(view);\n        }\n      }\n    }\n\n    this.updateFitToPage();\n  };\n\n  Diagram.prototype.updateCanupdateStyle = function (element, value) {\n    for (var j = 0; j < element.length; j++) {\n      if (element[j].children) {\n        this.updateCanupdateStyle(element[j].children, value);\n      }\n\n      element[j].canApplyStyle = value;\n    }\n  };\n\n  Diagram.prototype.getZindexPosition = function (obj, viewId) {\n    var objects = [];\n    var index = undefined;\n    objects = objects.concat(this.nodes);\n    objects = objects.concat(this.connectors);\n    var type;\n\n    if (obj.zIndex !== -1) {\n      for (var i = 0; i < objects.length; i++) {\n        if (objects[i].zIndex > obj.zIndex) {\n          if (obj.shape.type === 'HTML' || obj.shape.type === 'Native') {\n            type = obj.shape.type === 'HTML' ? 'html' : 'native';\n          }\n\n          index = getDomIndex(viewId, objects[i].id, type);\n          break;\n        }\n      }\n    }\n\n    return index;\n  };\n  /**\n   *updateDiagramObject method \\\n   *\n   * @returns { void } updateDiagramObject method .\\\n   * @param { (NodeModel | ConnectorModel) } obj - provide the obj value.\n   * @param { boolean } canIgnoreIndex - provide the canIgnoreIndex value.\n   * @param { boolean } isUpdateObject - provide the isUpdateObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramObject = function (obj, canIgnoreIndex, isUpdateObject) {\n    var view;\n    var domTable = 'domTable';\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      if (this.diagramActions) {\n        if (view.mode === 'SVG') {\n          var hasLayers = this.layers.length > 1;\n          var layer = void 0;\n\n          if (hasLayers) {\n            layer = this.commandHandler.getObjectLayer(obj.id);\n          }\n\n          if (layer === undefined || layer && layer.visible || isUpdateObject) {\n            var htmlLayer = getHTMLLayer(this.element.id);\n\n            if (!window[domTable][view.element.id + '_diagramLayer']) {\n              window[domTable][view.element.id + '_diagramLayer'] = document.getElementById(view.element.id + '_diagramLayer');\n            }\n\n            var diagramElementsLayer = window[domTable][view.element.id + '_diagramLayer'];\n\n            if (this.diagramActions & DiagramAction.Interactions) {\n              this.updateCanupdateStyle(obj.wrapper.children, true);\n            }\n\n            this.diagramRenderer.updateNode(obj.wrapper, diagramElementsLayer, htmlLayer, undefined, canIgnoreIndex ? undefined : this.getZindexPosition(obj, view.element.id));\n            this.updateCanupdateStyle(obj.wrapper.children, true);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *updateGridContainer method \\\n   *\n   * @returns { void } updateGridContainer method .\\\n   * @param { GridPanel } grid - provide the objectArray value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGridContainer = function (grid) {\n    var view;\n    var htmlLayer = getHTMLLayer(this.element.id);\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      if (view.mode === 'SVG' && this.diagramActions) {\n        var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n        this.diagramRenderer.updateNode(grid, diagramElementsLayer, htmlLayer, undefined);\n      } else {\n        this.refreshCanvasDiagramLayer(view);\n      }\n    }\n  };\n  /**\n   *getObjectsOfLayer method \\\n   *\n   * @returns { (NodeModel | ConnectorModel)[] } getObjectsOfLayer method .\\\n   * @param { string[] } objectArray - provide the objectArray value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getObjectsOfLayer = function (objectArray) {\n    var nodeArray = [];\n\n    for (var _i = 0, objectArray_1 = objectArray; _i < objectArray_1.length; _i++) {\n      var obj = objectArray_1[_i];\n\n      if (this.nameTable[obj]) {\n        nodeArray.push(this.nameTable[obj]);\n      }\n    }\n\n    return nodeArray;\n  };\n  /**\n   *refreshDiagramLayer method \\\n   *\n   * @returns { void } refreshDiagramLayer method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshDiagramLayer = function () {\n    var view;\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var temp = _a[_i];\n      view = this.views[temp];\n\n      switch (view.mode) {\n        case 'SVG':\n          this.refreshSvgDiagramLayer(view);\n          break;\n\n        case 'Canvas':\n          this.refreshCanvasLayers(view);\n          break;\n      }\n    }\n  };\n  /**\n   *refreshCanvasLayers method \\\n   *\n   * @returns { void } refreshCanvasLayers method .\\\n   * @param { View } view - provide the view value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshCanvasLayers = function (view) {\n    if (!view) {\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        var view_1 = this.views[temp];\n        this.refreshCanvasDiagramLayer(view_1);\n      }\n    } else {\n      this.refreshCanvasDiagramLayer(view);\n    }\n  };\n\n  Diagram.prototype.renderBasicElement = function (view) {\n    var htmlLayer = getHTMLLayer(view.element.id);\n\n    for (var i = 0; i < this.basicElements.length; i++) {\n      var element = this.basicElements[i];\n\n      if (element instanceof Container) {\n        element.prevRotateAngle = 0;\n      }\n\n      element.measure(new Size(element.width, element.height));\n      element.arrange(element.desiredSize);\n      view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n    }\n  };\n\n  Diagram.prototype.refreshElements = function (view) {\n    if (!this.isDestroyed) {\n      this.clearCanvas(view);\n\n      if (view instanceof Diagram) {\n        view.diagramLayer.getContext('2d').setTransform(view.scroller.currentZoom, 0, 0, view.scroller.currentZoom, 0, 0);\n        view.diagramLayer.getContext('2d').scale(1.5, 1.5);\n      } else {\n        var element = document.getElementById(view.element.id + '_nativeLayer');\n\n        if (element.children.length > 0) {\n          view.updateView(view);\n        }\n      }\n\n      var htmlLayer = getHTMLLayer(view.element.id); //const bounds: Rect = this.spatialSearch.getPageBounds();\n\n      this.renderDiagramElements(view.diagramLayer, view.diagramRenderer, htmlLayer);\n\n      for (var i = 0; i < this.basicElements.length; i++) {\n        var element = this.basicElements[i];\n        element.measure(new Size(element.width, element.height));\n        element.arrange(element.desiredSize);\n        view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n      }\n\n      if (view instanceof Diagram) {\n        view.diagramLayer.style.transform = 'scale(' + 2 / 3 + ')';\n        view.diagramLayer.style.transformOrigin = '0 0';\n      }\n\n      this.renderTimer = null;\n    }\n  };\n  /**\n   *refreshCanvasDiagramLayer method \\\n   *\n   * @returns { void } refreshCanvasDiagramLayer method .\\\n   * @param { View } view - provide the view value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshCanvasDiagramLayer = function (view) {\n    var _this = this;\n\n    if (view.mode !== 'SVG' && !this.isDestroyed) {\n      if (this.basicElements.length > 0) {\n        this.renderBasicElement(view);\n      }\n\n      if (!this.diagramActions || (this.diagramActions & DiagramAction.Render) === 0 || DiagramAction.ToolAction & this.diagramActions || canVitualize(this) || this.scroller.currentZoom !== 1) {\n        this.refreshElements(view);\n      } else if (!this.renderTimer) {\n        this.renderTimer = setTimeout(function () {\n          _this.refreshElements(view);\n        }, 40);\n      }\n    }\n  };\n  /**\n   *updatePortVisibility method \\\n   *\n   * @returns { void } updatePortVisibility method .\\\n   * @param { Node } node - provide the node value.\n   * @param { PortVisibility } portVisibility - provide the portVisibility value.\n   * @param { Boolean } inverse - provide the inverse value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePortVisibility = function (node, portVisibility, inverse) {\n    var portElement;\n    var drawingObject = !(this.drawingObject && this.drawingObject.shape) ? true : false;\n\n    if (node instanceof Node && drawingObject && canMove(node)) {\n      var ports = node.ports;\n      var changed = false;\n\n      for (var i = 0; i < ports.length; i++) {\n        portElement = this.getWrapper(node.wrapper, ports[i].id);\n\n        if (portVisibility & PortVisibility.Hover || portVisibility & PortVisibility.Connect) {\n          if (checkPortRestriction(ports[i], portVisibility)) {\n            portElement.visible = !inverse;\n            changed = true;\n          }\n        }\n      }\n\n      if (changed) {\n        this.updateDiagramObject(node);\n      }\n    }\n  };\n  /**\n   *refreshSvgDiagramLayer method \\\n   *\n   * @returns { void } refreshSvgDiagramLayer method .\\\n   * @param { View } view - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.refreshSvgDiagramLayer = function (view) {\n    var element;\n    var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n    var htmlLayer = getHTMLLayer(view.element.id);\n\n    if (!canVitualize(this)) {\n      for (var i = 0; i < this.basicElements.length; i++) {\n        element = this.basicElements[i];\n        element.measure(new Size(element.width, element.height));\n        element.arrange(element.desiredSize, !(this.diagramActions & DiagramAction.Render) ? true : false);\n        this.diagramRenderer.renderElement(element, diagramElementsLayer, htmlLayer);\n      }\n\n      this.renderDiagramElements(diagramElementsLayer, this.diagramRenderer, htmlLayer);\n    } else {\n      this.scroller.virtualizeElements();\n    }\n  };\n  /**\n   *removeVirtualObjects method \\\n   *\n   * @returns { void } removeVirtualObjects method .\\\n   * @param { Object } clearIntervalVal - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeVirtualObjects = function (clearIntervalVal) {\n    if (this.deleteVirtualObject) {\n      for (var i = 0; i < this.scroller.removeCollection.length; i++) {\n        var obj = this.nameTable[this.scroller.removeCollection[i]];\n        this.removeElements(obj);\n      }\n\n      this.deleteVirtualObject = false;\n    }\n\n    clearInterval(clearIntervalVal);\n  };\n  /**\n   *updateTextElementValue method \\\n   *\n   * @returns { void } updateTextElementValue method .\\\n   * @param {  NodeModel | ConnectorModel } object - provide the object value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateTextElementValue = function (object) {\n    for (var j = 0; j < object.wrapper.children.length; j++) {\n      var element = object.wrapper.children[j];\n\n      if (element instanceof TextElement) {\n        element.canMeasure = true;\n        element.measure(new Size(object.width, object.height));\n        element.arrange(element.desiredSize);\n      }\n    }\n  };\n  /**\n   *updateVirtualObjects method \\\n   *\n   * @returns { void } updateVirtualObjects method .\\\n   * @param { string[] } collection - provide the collection value.\n   * @param { boolean } remove - provide the remove value.\n   * @param { string[] } tCollection - provide the htmlLayer value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateVirtualObjects = function (collection, remove, tCollection) {\n    var diagramElementsLayer = document.getElementById(this.element.id + '_diagramLayer');\n    var htmlLayer = getHTMLLayer(this.element.id);\n\n    if (this.mode === 'SVG') {\n      for (var i = 0; i < collection.length; i++) {\n        var index = this.scroller.removeCollection.indexOf(collection[i]);\n\n        if (index >= 0) {\n          this.scroller.removeCollection.splice(index, 1);\n        }\n\n        var object = this.nameTable[collection[i]];\n        this.updateTextElementValue(object);\n        this.diagramRenderer.renderElement(object.wrapper, diagramElementsLayer, htmlLayer, undefined, undefined, undefined, undefined, object.zIndex);\n      }\n\n      for (var k = 0; k < tCollection.length; k++) {\n        this.scroller.removeCollection.push(tCollection[k]);\n      }\n\n      if (this.scroller.currentZoom !== 1) {\n        this.eventHandler.updateVirtualization();\n      }\n    } else if (this.diagramActions) {\n      this.refreshDiagramLayer();\n    }\n  };\n  /**\n   *renderDiagramElements method \\\n   *\n   * @returns { void } renderDiagramElements method .\\\n   * @param { HTMLCanvasElement | SVGElement} canvas - provide the canvas value.\n   * @param { DiagramRenderer } renderer - provide the renderer value.\n   * @param { HTMLElement } htmlLayer - provide the htmlLayer value.\n   * @param {boolean } transform - provide the transform value.\n   * @param {boolean } fromExport - provide the fromExport value.\n   * @param { boolean } isOverView - provide the isOverView value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderDiagramElements = function (canvas, renderer, htmlLayer, transform, fromExport, isOverView) {\n    if (transform === void 0) {\n      transform = true;\n    }\n\n    var pageBounds = this.scroller.getPageBounds();\n    pageBounds.x *= this.scroller.currentZoom;\n    pageBounds.y *= this.scroller.currentZoom;\n    pageBounds.width *= this.scroller.currentZoom;\n    pageBounds.height *= this.scroller.currentZoom;\n    var difX = -this.scroller.horizontalOffset - pageBounds.x;\n    var difY = -this.scroller.verticalOffset - pageBounds.y;\n\n    for (var _i = 0, _a = Object.keys(this.layerZIndexTable); _i < _a.length; _i++) {\n      var layerId = _a[_i];\n      var layer = this.commandHandler.getLayer(this.layerZIndexTable[layerId]);\n      var left = void 0;\n      var top_1 = void 0;\n\n      if (this.mode === 'Canvas' && canVitualize(this) && !this.diagramActions) {\n        this.scroller.virtualizeElements();\n      }\n\n      var id = this.mode === 'Canvas' && canVitualize(this) && this.scroller.oldCollectionObjects.length > 0 ? this.scroller.oldCollectionObjects : undefined;\n\n      for (var _b = 0, _c = Object.keys(id || layer.zIndexTable); _b < _c.length; _b++) {\n        var node = _c[_b];\n        var renderNode = id ? this.nameTable[id[node]] : this.nameTable[layer.zIndexTable[node]];\n\n        if (renderNode && !renderNode.parentId && layer.visible && (!renderNode.processId || this.refreshing)) {\n          var transformValue = {\n            tx: this.scroller.transform.tx,\n            ty: this.scroller.transform.ty,\n            scale: this.scroller.transform.scale\n          };\n\n          if (canVitualize(this)) {\n            if (this.scroller.currentZoom < 1) {\n              if (pageBounds.x < 0 || this.scroller.horizontalOffset < 0) {\n                var verticalValue = this.scroller.verticalOffset < 0 ? this.scroller.verticalOffset : 0;\n                left = (difX > 0 ? difX : 0) + 'px';\n                top_1 = (this.realActions & RealAction.vScrollbarMoved ? 0 : -verticalValue) + 'px';\n              } else {\n                left = 0 + 'px';\n                top_1 = 0 + 'px';\n              }\n\n              if (this.realActions & RealAction.hScrollbarMoved) {\n                this.realActions = this.realActions & ~RealAction.hScrollbarMoved;\n              }\n\n              if (this.realActions & RealAction.vScrollbarMoved) {\n                this.realActions = this.realActions & ~RealAction.vScrollbarMoved;\n              }\n            } else {\n              left = (pageBounds.x < 0 ? difX : -this.scroller.horizontalOffset) + 'px';\n              top_1 = (pageBounds.y < 0 ? difY : -this.scroller.verticalOffset) + 'px';\n            }\n\n            this.diagramLayer.style.left = left;\n            this.diagramLayer.style.top = top_1;\n            transformValue.tx = this.scroller.horizontalOffset / transformValue.scale;\n            transformValue.ty = this.scroller.verticalOffset / transformValue.scale;\n          }\n\n          var status_1 = true;\n\n          if (fromExport) {\n            status_1 = false;\n          }\n\n          this.updateTextElementValue(renderNode);\n\n          if (this.refreshing) {\n            if (renderNode.shape.activity && renderNode.shape.activity.subProcess && renderNode.shape.activity.subProcess.processes) {\n              for (var i = 0; i < renderNode.shape.activity.subProcess.processes.length; i++) {\n                var process = renderNode.shape.activity.subProcess.processes[i];\n                renderNode.wrapper.children.push(this.nameTable[process].wrapper);\n              }\n\n              renderNode.wrapper.measure(new Size(renderNode.wrapper.bounds.width, renderNode.wrapper.bounds.height));\n              renderNode.wrapper.arrange(renderNode.wrapper.desiredSize);\n            }\n          }\n\n          renderer.renderElement(renderNode.wrapper, canvas, htmlLayer, !renderer.isSvgMode && transform ? transformValue : undefined, undefined, undefined, status_1 && (!this.diagramActions || isOverView));\n        }\n      }\n    }\n  };\n  /**\n   *updateBridging method \\\n   *\n   * @returns { void } updateBridging method .\\\n   * @param {string} isLoad - provide the isLoad value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateBridging = function (isLoad) {\n    if (this.bridgingModule) {\n      for (var i = 0; i < this.connectors.length; i++) {\n        var connector = this.connectors[i];\n        this.bridgingModule.updateBridging(connector, this);\n        var canvas = this.connectors[i].wrapper;\n\n        if (canvas) {\n          var pathSegment = canvas.children[0];\n          var data = pathSegment.data;\n          connector.getSegmentElement(connector, pathSegment, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ? this.layout.orientation : undefined);\n\n          if (pathSegment.data !== data) {\n            canvas.measure(new Size());\n            canvas.arrange(canvas.desiredSize);\n\n            if (this.mode === 'SVG' && !isLoad) {\n              this.updateDiagramObject(connector);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   *setCursor method \\\n   *\n   * @returns { void } setCursor method .\\\n   * @param {string} cursor - provide the width value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setCursor = function (cursor) {\n    this.diagramRenderer.setCursor(this.diagramCanvas, cursor);\n  };\n  /**\n   *clearCanvas method \\\n   *\n   * @returns { void } clearCanvas method .\\\n   * @param {View} view - provide the width value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearCanvas = function (view) {\n    //let width: number;\n    //let height: number;\n    var width = view.contentWidth || view.diagramLayer.width / this.scroller.currentZoom;\n    var height = view.contentHeight || view.diagramLayer.height / this.scroller.currentZoom;\n\n    if (view.mode !== 'SVG') {\n      var ctx = CanvasRenderer.getContext(view.diagramLayer);\n      ctx.clearRect(0, 0, width, height);\n    }\n  };\n  /**\n   *updateScrollOffset method \\\n   *\n   * @returns { void } updateScrollOffset method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateScrollOffset = function () {\n    this.scroller.setScrollOffset(this.diagramCanvas.scrollLeft, this.diagramCanvas.scrollTop);\n    updateRuler(this);\n\n    if (canVitualize(this)) {\n      this.scroller.virtualizeElements();\n    }\n  };\n  /**\n   *setOffset method \\\n   *\n   * @returns { void } setOffset method .\\\n   * @param {number} offsetX - provide the width value.\n   * @param {number} offsetY - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setOffset = function (offsetX, offsetY) {\n    var domTable = 'domTable';\n\n    if (!window[domTable][this.element.id + 'content']) {\n      window[domTable][this.element.id + 'content'] = document.getElementById(this.element.id + 'content');\n    }\n\n    var container = window[domTable][this.element.id + 'content'];\n\n    if (container) {\n      container.scrollLeft = offsetX;\n      container.scrollTop = offsetY;\n    }\n  };\n  /**\n   *setSize method \\\n   *\n   * @returns { void } setSize method .\\\n   * @param {number} width - provide the width value.\n   * @param {number} height - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setSize = function (width, height) {\n    if (this.diagramLayer && !this.preventDiagramUpdate) {\n      var position = getRulerSize(this);\n      width -= position.width;\n      height -= position.height;\n      var bounds = this.spatialSearch.getPageBounds();\n      bounds.x *= this.scroller.currentZoom;\n      bounds.y *= this.scroller.currentZoom;\n      bounds.width *= this.scroller.currentZoom;\n      bounds.height *= this.scroller.currentZoom;\n      var factor = this.mode === 'SVG' ? 1 : 1.5;\n      var diagramLayer = this.mode === 'SVG' ? getDiagramLayerSvg(this.element.id) : this.diagramLayer;\n      var w = this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization ? this.scroller.viewPortWidth : width;\n      var h = this.mode === 'Canvas' && this.constraints & DiagramConstraints.Virtualization ? this.scroller.viewPortHeight : height;\n      diagramLayer.setAttribute('width', (factor * w).toString());\n      diagramLayer.setAttribute('height', (factor * h).toString());\n      var hiddenUserHandleTemplate = document.getElementById(this.element.id + '_diagramUserHandleLayer');\n\n      if (hiddenUserHandleTemplate) {\n        hiddenUserHandleTemplate.style.width = width + 'px';\n        hiddenUserHandleTemplate.style.height = height + 'px';\n      }\n\n      var attr = {\n        'width': width.toString(),\n        'height': height.toString()\n      };\n      this.diagramLayerDiv.style.width = width + 'px';\n      this.diagramLayerDiv.style.height = height + 'px';\n      setAttributeSvg(getNativeLayerSvg(this.element.id), attr);\n      setAttributeSvg(getPortLayerSvg(this.element.id), attr);\n      var adornerSVG = getAdornerLayerSvg(this.element.id);\n      setAttributeSvg(adornerSVG, attr);\n      adornerSVG.parentNode.style.width = width + 'px';\n      adornerSVG.parentNode.style.height = height + 'px';\n      var gridLayer = getGridLayerSvg(this.element.id);\n      setAttributeSvg(gridLayer, attr);\n      this.diagramRenderer.updateGrid(this.snapSettings, gridLayer, this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n      setAttributeSvg(getBackgroundLayerSvg(this.element.id), attr);\n      this.htmlLayer.style.width = width + 'px';\n      this.htmlLayer.style.height = height + 'px';\n\n      if (this.mode !== 'SVG' && !canVitualize(this)) {\n        this.refreshDiagramLayer();\n      }\n\n      if (this.mode === 'SVG' && canVitualize(this)) {\n        this.scroller.virtualizeElements();\n      }\n    }\n  };\n  /**\n   *transformLayers method \\\n   *\n   * @returns { void } Defines how to remove the Page breaks .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.transformLayers = function () {\n    var bounds = this.spatialSearch.getPageBounds();\n    bounds.x *= this.scroller.currentZoom;\n    bounds.y *= this.scroller.currentZoom;\n    bounds.width *= this.scroller.currentZoom;\n    bounds.height *= this.scroller.currentZoom;\n    this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    this.diagramRenderer.transformLayers(this.scroller.transform, this.mode === 'SVG');\n\n    if (!(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.updateSelector();\n    }\n\n    this.renderPageBreaks(bounds);\n  };\n  /**\n   *Defines how to remove the Page breaks \\\n   *\n   * @returns { void } Defines how to remove the Page breaks .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removePageBreaks = function () {\n    if (this.diagramLayer) {\n      var line = getBackgroundLayer(this.element.id);\n\n      if (line && line.childNodes) {\n        var length_1 = line.childNodes.length;\n\n        for (var i = 0; i < length_1; i++) {\n          line.removeChild(line.childNodes[0]);\n        }\n      }\n    }\n  };\n  /**\n   * Defines how the page breaks has been rendered \\\n   *\n   * @returns { void } Defines how the page breaks has been rendered .\\\n   * @param {Rect} bounds - provide the overview value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderPageBreaks = function (bounds) {\n    this.removePageBreaks();\n    var backgroundLayer = getBackgroundLayer(this.element.id);\n\n    if (backgroundLayer) {\n      var i = 0;\n      bounds = this.scroller.getPageBounds(true);\n      var x = (this.scroller.transform.tx + bounds.x) * this.scroller.currentZoom;\n      var y = (this.scroller.transform.ty + bounds.y) * this.scroller.currentZoom;\n      var height = bounds.height * this.scroller.currentZoom;\n      var width = bounds.width * this.scroller.currentZoom;\n      DiagramRenderer.renderSvgBackGroundImage(this.pageSettings.background, this.element, x, y, width, height);\n      var options = {\n        id: backgroundLayer.id + 'rect',\n        x: x,\n        y: y,\n        height: height,\n        width: width,\n        angle: 0,\n        stroke: '',\n        strokeWidth: 1,\n        fill: this.pageSettings.background.color,\n        opacity: 1,\n        pivotX: 0,\n        pivotY: 0,\n        visible: true,\n        dashArray: '0'\n      };\n      this.diagramRenderer.drawRect(backgroundLayer, options);\n\n      if (this.pageSettings.showPageBreaks) {\n        var collection = this.scroller.getPageBreak(bounds);\n\n        for (i = 0; i < collection.length; i++) {\n          this.diagramRenderer.drawLine(backgroundLayer, {\n            class: 'e-diagram-page-break',\n            fill: 'none',\n            stroke: '#aaaaaa',\n            strokeWidth: 1,\n            dashArray: '10 10',\n            opacity: 2,\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            angle: 0,\n            pivotX: 0,\n            pivotY: 0,\n            visible: true,\n            startPoint: {\n              x: (collection[i].x1 + this.scroller.transform.tx) * this.scroller.currentZoom,\n              y: (collection[i].y1 + this.scroller.transform.ty) * this.scroller.currentZoom\n            },\n            endPoint: {\n              x: (collection[i].x2 + this.scroller.transform.tx) * this.scroller.currentZoom,\n              y: (collection[i].y2 + this.scroller.transform.ty) * this.scroller.currentZoom\n            },\n            id: collection[i].y1 === collection[i].y2 ? 'HorizontalLines' : 'VerticalLines'\n          });\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.validatePageSize = function () {\n    var temp = 0;\n\n    if (this.pageSettings.orientation === 'Portrait') {\n      if (this.pageSettings.width > this.pageSettings.height) {\n        temp = this.pageSettings.height;\n        this.pageSettings.height = this.pageSettings.width;\n        this.pageSettings.width = temp;\n      }\n    } else {\n      if (this.pageSettings.height > this.pageSettings.width) {\n        temp = this.pageSettings.width;\n        this.pageSettings.width = this.pageSettings.height;\n        this.pageSettings.height = temp;\n      }\n    }\n  };\n  /**\n   * setOverview method \\\n   *\n   * @returns { void }     setOverview method .\\\n   * @param {View} overview - provide the overview value.\n   * @param {string} id - provide the boolean value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.setOverview = function (overview, id) {\n    if (overview) {\n      if (overview) {\n        this.views.push(overview.id);\n        this.views[overview.id] = overview;\n        overview.renderDocument(overview);\n        overview.diagramRenderer.setLayers();\n        overview.updateView(overview);\n        this.renderNodes(overview);\n      }\n    } else {\n      for (var i = 0; i < this.views.length; i++) {\n        if (this.views[i] === id) {\n          overview = this.views[id];\n        }\n      }\n\n      this.views[id] = undefined;\n      var index = this.views.indexOf(id);\n      this.views.splice(index, 1);\n    }\n  };\n\n  Diagram.prototype.renderNodes = function (overview) {\n    if (overview) {\n      var renderer = new DiagramRenderer(overview.id, new SvgRenderer(), false);\n      var g = document.getElementById(overview.element.id + '_diagramLayer');\n      var htmlLayer = getHTMLLayer(overview.element.id);\n      this.renderDiagramElements(g, overview.diagramRenderer || renderer, htmlLayer, undefined, undefined, true);\n    }\n  };\n\n  Diagram.prototype.updateThumbConstraints = function (node, selectorModel, canInitialize) {\n    var state = 0;\n    var length = node.length;\n\n    for (var i = 0; i < length; i++) {\n      var obj = node[i];\n      var hideRotate = false;\n      var hideResize = false;\n      var thumbConstraints = selectorModel.thumbsConstraints;\n\n      if (obj instanceof Node) {\n        hideRotate = obj.shape.type === 'Bpmn' && obj.shape.shape === 'Activity' && obj.shape.activity.subProcess.collapsed === false || obj.shape.shape === 'TextAnnotation';\n        hideResize = obj.shape.type === 'Bpmn' && obj.shape.shape === 'TextAnnotation';\n\n        if (!canRotate(obj) || !(thumbConstraints & ThumbsConstraints.Rotate) || hideRotate) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n        }\n\n        if (!canResize(obj, 'SouthEast') || !(thumbConstraints & ThumbsConstraints.ResizeSouthEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthEast;\n        }\n\n        if (!canResize(obj, 'NorthWest') || !(thumbConstraints & ThumbsConstraints.ResizeNorthWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthWest;\n        }\n\n        if (!canResize(obj, 'East') || !(thumbConstraints & ThumbsConstraints.ResizeEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeEast;\n        }\n\n        if (!canResize(obj, 'West') || !(thumbConstraints & ThumbsConstraints.ResizeWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeWest;\n        }\n\n        if (!canResize(obj, 'North') || !(thumbConstraints & ThumbsConstraints.ResizeNorth) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorth;\n        }\n\n        if (!canResize(obj, 'South') || !(thumbConstraints & ThumbsConstraints.ResizeSouth) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouth;\n        }\n\n        if (!canResize(obj, 'NorthEast') || !(thumbConstraints & ThumbsConstraints.ResizeNorthEast) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthEast;\n        }\n\n        if (!canResize(obj, 'SouthWest') || !(thumbConstraints & ThumbsConstraints.ResizeSouthWest) || hideResize) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthWest;\n        }\n      } else if (obj instanceof Connector) {\n        if (!canInitialize) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n        }\n\n        if (canDragSourceEnd(obj)) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorSource;\n        } else {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorSource;\n        }\n\n        if (canDragTargetEnd(obj)) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorTarget;\n        } else {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorTarget;\n        }\n      } else {\n        if (!canInitialize) {\n          thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n        }\n\n        if (!canResize(obj)) {\n          thumbConstraints = thumbConstraints & ~(ThumbsConstraints.ResizeSouthEast | ThumbsConstraints.ResizeSouthWest | ThumbsConstraints.ResizeSouth | ThumbsConstraints.ResizeEast | ThumbsConstraints.ResizeWest | ThumbsConstraints.ResizeNorth | ThumbsConstraints.ResizeNorthEast | ThumbsConstraints.ResizeNorthWest);\n        }\n\n        if (!canRotate(obj)) {\n          thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n        }\n      }\n\n      selectorModel.thumbsConstraints = thumbConstraints;\n    }\n  };\n  /**\n   * renderSelector method \\\n   *\n   * @returns { void }     renderSelector method .\\\n   * @param {boolean} multipleSelection - provide the multipleSelection value.\n   * @param {boolean} isSwimLane - provide the boolean value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderSelector = function (multipleSelection, isSwimLane) {\n    var isProtectedOnChangeValue = this.isProtectedOnChange;\n\n    if (isBlazor()) {\n      this.isProtectedOnChange = true;\n    }\n\n    var size = new Size();\n    var selectorModel = this.selectedItems;\n    var selectorConstraints = selectorModel.constraints;\n    var rendererActions = this.diagramRenderer.rendererActions;\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n    this.diagramRenderer.rendererActions = this.currentSymbol ? this.addConstraints(rendererActions, RendererAction.DrawSelectorBorder) : this.removeConstraints(rendererActions, RendererAction.DrawSelectorBorder);\n    this.clearSelectorLayer();\n\n    if (this.commandHandler.hasSelection()) {\n      if (selectorModel.nodes.length === 1 && selectorModel.connectors.length === 0) {\n        selectorModel.rotateAngle = selectorModel.nodes[0].rotateAngle;\n        selectorModel.pivot = selectorModel.nodes[0].pivot;\n      }\n\n      selectorModel.wrapper.measure(size);\n      selectorModel.wrapper.arrange(selectorModel.wrapper.desiredSize);\n      selectorModel.width = selectorModel.wrapper.actualSize.width;\n      selectorModel.height = selectorModel.wrapper.actualSize.height;\n      selectorModel.offsetX = selectorModel.wrapper.offsetX;\n      selectorModel.offsetY = selectorModel.wrapper.offsetY;\n\n      if (selectorModel.rotateAngle !== 0) {\n        for (var _i = 0, _a = selectorModel.nodes; _i < _a.length; _i++) {\n          var obj = _a[_i];\n          obj.offsetX = obj.wrapper.offsetX;\n          obj.offsetY = obj.wrapper.offsetY;\n        }\n\n        for (var _b = 0, _c = selectorModel.connectors; _b < _c.length; _b++) {\n          var conn = _c[_b]; //update connections\n        }\n      }\n\n      var bounds = this.spatialSearch.getPageBounds(); //let selectorElement: (SVGElement | HTMLCanvasElement);\n\n      var selectorElement = getSelectorElement(this.element.id); //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n\n      var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n      selectorModel.thumbsConstraints = ThumbsConstraints.Default;\n\n      if (selectorModel.annotation) {\n        this.updateThumbConstraints([selectorModel.annotation], selectorModel);\n      } else {\n        this.updateThumbConstraints(selectorModel.nodes, selectorModel);\n        this.updateThumbConstraints(selectorModel.connectors, selectorModel, true);\n      }\n\n      if (selectorModel.annotation) {\n        this.renderSelectorForAnnotation(selectorModel, selectorElement);\n      } else if (selectorModel.nodes.length + selectorModel.connectors.length === 1 || this.nameTable[\"helper\"]) {\n        if (selectorModel.nodes[0] instanceof Node) {\n          var node = selectorModel.nodes[0];\n\n          if (checkParentAsContainer(this, node)) {\n            if (!isSwimLane && node.shape.type !== 'UmlClassifier' && !(node.parentId && this.nameTable[node.parentId] && this.nameTable[node.parentId].shape.type === 'UmlClassifier')) {\n              if (!(node.container && (node.container.type === 'Canvas' || node.container.type === 'Grid'))) {\n                selectorModel.nodes[0].constraints &= ~(NodeConstraints.Rotate | NodeConstraints.HideThumbs);\n              }\n\n              selectorModel.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n            }\n          }\n\n          var constraints = isSwimLane ? true : node.constraints & NodeConstraints.HideThumbs ? true : false;\n          var swimlane = node.shape.type === 'SwimLane' || node.isLane || node.isPhase || isSwimLane ? true : false;\n          this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(node), constraints, swimlane);\n        } else if (selectorModel.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n          var connector = selectorModel.connectors[0];\n          this.diagramRenderer.renderEndPointHandle(connector, selectorElement, selectorModel.thumbsConstraints, selectorModel.constraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, this.connectorEditingToolModule && canDragSegmentThumb(connector) ? true : false);\n        }\n      } else {\n        this.diagramRenderer.renderResizeHandle(selectorModel.wrapper, selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel));\n      }\n\n      if (!selectorModel.annotation && !this.currentSymbol) {\n        this.diagramRenderer.renderUserHandler(selectorModel, selectorElement, this.scroller.transform, diagramUserHandlelayer);\n\n        if (isBlazor() && innertemplate.length > 0) {\n          for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n            var userHandle = this.selectedItems.userHandles[i];\n            div = document.getElementById(userHandle.name + '_html_element');\n            div.style.display = 'block';\n          }\n        }\n      }\n    }\n\n    this.isProtectedOnChange = isProtectedOnChangeValue;\n  };\n  /**\n   * updateSelector method \\\n   *\n   * @returns { void }     updateSelector method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateSelector = function () {\n    var severDataBind = this.allowServerDataBinding;\n    this.enableServerDataBinding(false);\n    var size = new Size();\n    var selector = this.selectedItems;\n    var selectorConstraints = selector.constraints;\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n\n    if (!(this.diagramActions & DiagramAction.ToolAction) && this.selectedItems.nodes.length === 1) {\n      this.selectedItems.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n      this.selectedItems.wrapper.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n    }\n\n    if (this.selectedItems !== undefined) {\n      this.clearSelectorLayer();\n\n      if (selector.wrapper !== null && selector.wrapper.children && selector.wrapper.children.length) {\n        selector.wrapper.measure(size);\n        selector.wrapper.arrange(selector.wrapper.desiredSize);\n\n        if (selector.rotateAngle !== 0 || selector.rotateAngle !== selector.wrapper.prevRotateAngle) {\n          for (var _i = 0, _a = selector.nodes; _i < _a.length; _i++) {\n            var obj = _a[_i];\n            obj.offsetX = obj.wrapper.offsetX;\n            obj.offsetY = obj.wrapper.offsetY;\n          }\n        }\n\n        selector.width = selector.wrapper.actualSize.width;\n        selector.height = selector.wrapper.actualSize.height;\n        selector.offsetX = selector.wrapper.offsetX;\n        selector.offsetY = selector.wrapper.offsetY; //let selectorEle: (SVGElement | HTMLCanvasElement);\n\n        var selectorEle = getSelectorElement(this.element.id); //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n\n        var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n        var canHideResizers = this.eventHandler.canHideResizers();\n        selector.thumbsConstraints = ThumbsConstraints.Default;\n\n        if (selector.annotation) {\n          this.updateThumbConstraints([selector.annotation], selector);\n        } else {\n          this.updateThumbConstraints(selector.nodes, selector);\n          this.updateThumbConstraints(selector.connectors, selector, true);\n        }\n\n        if (this.selectedItems.constraints & SelectorConstraints.UserHandle && !selector.annotation && !this.currentSymbol) {\n          this.diagramRenderer.renderUserHandler(selector, selectorEle, this.scroller.transform, diagramUserHandlelayer);\n\n          if (isBlazor() && innertemplate.length > 0) {\n            for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n              var userHandletemplate = this.selectedItems.userHandles[i];\n              div = document.getElementById(userHandletemplate.name + '_html_element');\n              div.style.display = 'block';\n            }\n          }\n        }\n\n        if (selector.annotation) {\n          this.renderSelectorForAnnotation(selector, selectorEle);\n        } else if (selector.nodes.length + selector.connectors.length === 1) {\n          if (selector.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n            var connector = selector.connectors[0];\n            this.diagramRenderer.renderEndPointHandle(connector, selectorEle, selector.thumbsConstraints, selectorConstraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, this.connectorEditingToolModule && canDragSegmentThumb(connector) ? true : false);\n          } else if (selector.nodes[0] instanceof Node) {\n            var stackPanel = selector.nodes[0];\n\n            if (checkParentAsContainer(this, selector.nodes[0])) {\n              if (stackPanel.shape.type !== 'UmlClassifier' && !(stackPanel.parentId && this.nameTable[stackPanel.parentId] && this.nameTable[stackPanel.parentId].shape.type === 'UmlClassifier')) {\n                if (!(stackPanel.container && (stackPanel.container.type === 'Canvas' || stackPanel.container.type === 'Grid'))) {\n                  selector.nodes[0].constraints &= ~(NodeConstraints.HideThumbs | NodeConstraints.Rotate);\n                }\n\n                selector.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n              }\n            }\n\n            var swimlane = stackPanel.shape.type === 'SwimLane' || stackPanel.isLane || stackPanel.isPhase ? true : false;\n            this.diagramRenderer.renderResizeHandle(selector.wrapper.children[0], selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector.nodes[0]), selector.nodes[0].constraints & NodeConstraints.HideThumbs ? true : false, swimlane);\n          }\n        } else {\n          if (this.diagramActions & DiagramAction.Interactions) {\n            this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions | RendererAction.PreventRenderSelector;\n          }\n\n          this.diagramRenderer.renderResizeHandle(selector.wrapper, selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector));\n          this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions & ~RendererAction.PreventRenderSelector;\n        }\n      }\n    }\n\n    this.enableServerDataBinding(severDataBind);\n  };\n  /**\n   * renderSelectorForAnnotation method \\\n   *\n   * @returns { void }     renderSelectorForAnnotation method .\\\n   * @param {Selector} selectorModel - provide the x value.\n   * @param {(SVGElement | HTMLCanvasElement)} selectorElement - provide the y value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderSelectorForAnnotation = function (selectorModel, selectorElement) {\n    this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel.annotation));\n  };\n  /**\n   * drawSelectionRectangle method \\\n   *\n   * @returns { void }     drawSelectionRectangle method .\\\n   * @param {number} x - provide the x value.\n   * @param {number} y - provide the y value.\n   * @param {number} width - provide the width value.\n   * @param {number} height - provide the height value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.drawSelectionRectangle = function (x, y, width, height) {\n    this.clearSelectorLayer();\n    this.diagramRenderer.drawSelectionRectangle(x, y, width, height, this.adornerLayer, this.scroller.transform);\n  };\n  /**\n   * renderHighlighter method \\\n   *\n   * @returns { void }     renderHighlighter method .\\\n   * @param {DiagramElement} element - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.renderHighlighter = function (element) {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    this.diagramRenderer.renderHighlighter(element, adornerSvg, this.scroller.transform);\n  };\n  /**\n   * clearHighlighter method \\\n   *\n   * @returns { void }     clearHighlighter method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearHighlighter = function () {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    var highlighter = adornerSvg.getElementById(adornerSvg.id + '_highlighter');\n\n    if (highlighter) {\n      highlighter.parentNode.removeChild(highlighter);\n    }\n  };\n  /**\n   * getNodesConnectors method \\\n   *\n   * @returns { (NodeModel | ConnectorModel)[] }     getNodesConnectors method .\\\n   * @param {(NodeModel | ConnectorModel)[]} selectedItems - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getNodesConnectors = function (selectedItems) {\n    for (var i = 0; i < this.nodes.length; i++) {\n      var node = this.nodes[i];\n      selectedItems.push(node);\n    }\n\n    for (var i = 0; i < this.connectors.length; i++) {\n      var conn = this.connectors[i];\n      selectedItems.push(conn);\n    }\n\n    return selectedItems;\n  };\n  /**\n   * clearSelectorLayer method \\\n   *\n   * @returns { void }     clearSelectorLayer method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.clearSelectorLayer = function () {\n    var adornerSvg = getAdornerLayerSvg(this.element.id);\n    var innertemplate = document.getElementsByClassName('blazor-inner-template');\n    var i;\n    var div;\n    var j;\n\n    if (!this.currentSymbol) {\n      var selectionRect = adornerSvg.getElementById(this.adornerLayer.id + '_selected_region');\n\n      if (selectionRect) {\n        selectionRect.parentNode.removeChild(selectionRect);\n      }\n\n      this.clearHighlighter();\n      var childNodes = getSelectorElement(this.element.id).childNodes;\n      var child = void 0;\n\n      for (var i_3 = childNodes.length; i_3 > 0; i_3--) {\n        child = childNodes[i_3 - 1];\n        child.parentNode.removeChild(child);\n      }\n\n      if (isBlazor() && !(this.diagramActions & DiagramAction.DragUsingMouse) && innertemplate.length > 0) {\n        for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n          var template = this.selectedItems.userHandles[i];\n          div = document.getElementById(template.name + '_html_element');\n          div.style.display = 'none';\n        }\n      } else {\n        if (!isBlazor()) {\n          var templates = getUserHandleLayer(this.element.id).childNodes;\n\n          for (i = templates.length; i > 0; i--) {\n            templates[i - 1].parentNode.removeChild(templates[i - 1]);\n          }\n        }\n      }\n    } else {\n      var symbolBorder = adornerSvg.getElementById('borderRect_symbol');\n\n      if (symbolBorder) {\n        symbolBorder.parentNode.removeChild(symbolBorder);\n      }\n    }\n  };\n  /**\n   * getWrapper method \\\n   *\n   * @returns { void }     getWrapper method .\\\n   * @param {Container} nodes - provide the node value.\n   * @param {string} id - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getWrapper = function (nodes, id) {\n    var wrapper;\n    id = nodes.id + '_' + id;\n    var container = nodes instanceof Canvas ? nodes : this.getPortContainer(this.nameTable[nodes.id]);\n\n    for (var i = 0; i < container.children.length; i++) {\n      if (id === container.children[i].id) {\n        wrapper = container.children[i];\n      }\n    }\n\n    return wrapper;\n  };\n  /**\n   * DiagramElement method \\\n   *\n   * @returns { void }     getEndNodeWrapper method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   * @param {ConnectorModel} connector - provide the childernCollection value.\n   * @param {boolean} source - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getEndNodeWrapper = function (node, connector, source) {\n    if (node.shape.type === 'Bpmn' && node.wrapper.children[0] instanceof Canvas) {\n      if (!isBlazor() && node.shape.shape === 'Activity' || isBlazor() && node.shadow.bpmnShape === 'Activity') {\n        if (source && node.shape.activity.subProcess.type === 'Transaction' && connector.sourcePortID) {\n          var portId = connector.sourcePortID;\n          var parent_3 = node.wrapper.children[0].children[0].children[2];\n\n          if (parent_3.children) {\n            for (var _i = 0, _a = parent_3.children; _i < _a.length; _i++) {\n              var child = _a[_i];\n\n              if (child.visible && child.id === node.id + '_' + portId) {\n                return child.children[0];\n              }\n            }\n          }\n        }\n\n        return node.wrapper.children[0].children[0].children[0];\n      }\n\n      return node.wrapper.children[0].children[0];\n    }\n\n    if (!this.containsMargin(node.wrapper.children[0])) {\n      if (!node.children) {\n        return node.wrapper.children[0];\n      }\n    }\n\n    return node.wrapper;\n  };\n\n  Diagram.prototype.containsMargin = function (node) {\n    return node.margin && (node.margin.left !== 0 || node.margin.top !== 0 || node.margin.right !== 0 || node.margin.bottom !== 0);\n  };\n\n  Diagram.prototype.focusOutEdit = function () {\n    this.endEdit();\n  };\n\n  Diagram.prototype.endEditCommand = function () {\n    this.endEdit();\n    this.textEditing = false;\n  };\n  /**\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.endEdit = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var blazor, blazorInterop, oldValues, changedvalues, annotations, textArea, text, element, node, annotation, args, bpmnAnnotation, textWrapper, eventObj, annotation_1, index, deleteNode, eventObj, index, changesAnnotation, nodeIndex, oldnodes, newnodes, clonedObject, selectedNode, swimLaneNode, laneHeader, phaseHeader, collection, j;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.diagramActions & DiagramAction.TextEdit)) return [3\n            /*break*/\n            , 11];\n            blazor = 'Blazor';\n            blazorInterop = 'sfBlazor';\n            oldValues = void 0;\n            changedvalues = void 0;\n            annotations = {};\n            this.enableServerDataBinding(false);\n\n            if (isBlazor()) {\n              this.canEnableBlazorObject = true;\n            }\n\n            textArea = document.getElementById(this.element.id + '_editBox');\n            if (!(isBlazor() && textArea || !isBlazor())) return [3\n            /*break*/\n            , 11];\n            text = textArea.value;\n            EventHandler.remove(textArea, 'input', this.eventHandler.inputChange);\n            EventHandler.remove(textArea, 'focusout', this.focusOutEdit);\n            element = document.getElementById(this.element.id + '_editTextBoxDiv');\n            node = void 0;\n            node = this.nameTable[this.activeLabel.parentId];\n            annotation = findAnnotation(node, this.activeLabel.id);\n            args = {\n              oldValue: this.activeLabel.text,\n              newValue: text,\n              cancel: false,\n              element: node,\n              annotation: annotation\n            };\n\n            if (isBlazor() && this.textEdit) {\n              args = this.getBlazorTextEditArgs(args);\n            }\n\n            bpmnAnnotation = false;\n            element.parentNode.removeChild(element);\n            textWrapper = void 0;\n            if (!this.bpmnModule) return [3\n            /*break*/\n            , 5];\n            node = this.bpmnModule.isBpmnTextAnnotation(this.activeLabel, this);\n            textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, this.activeLabel.id);\n            bpmnAnnotation = node ? true : false;\n            if (!bpmnAnnotation) return [3\n            /*break*/\n            , 5];\n            if (!(element.textContent !== text || text !== this.activeLabel.text)) return [3\n            /*break*/\n            , 5];\n            if (!isBlazor()) return [3\n            /*break*/\n            , 3];\n            if (!(this.textEdit && window && window[blazor])) return [3\n            /*break*/\n            , 2];\n            eventObj = {\n              'EventName': 'textEdit',\n              args: JSON.stringify(args)\n            };\n            return [4\n            /*yield*/\n            , window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n\n          case 1:\n            args = _a.sent() || args;\n            _a.label = 2;\n\n          case 2:\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            this.triggerEvent(DiagramEvent.textEdit, args);\n            _a.label = 4;\n\n          case 4:\n            if (!args.cancel) {\n              this.bpmnModule.updateTextAnnotationContent(node, this.activeLabel, text, this);\n            }\n\n            _a.label = 5;\n\n          case 5:\n            if (!!bpmnAnnotation) return [3\n            /*break*/\n            , 10];\n            node = this.nameTable[this.activeLabel.parentId];\n            annotation_1 = findAnnotation(node, this.activeLabel.id);\n\n            if (annotation_1 && !(annotation_1 instanceof Text)) {\n              index = findObjectIndex(node, annotation_1.id, true);\n              annotations[index] = {\n                content: annotation_1.content\n              };\n              oldValues = {\n                annotations: annotations\n              };\n            } else {\n              if (isBlazor() && node.shape.type === 'Text') {\n                oldValues = {\n                  shape: {\n                    textContent: node.shape.content\n                  }\n                };\n              } else {\n                oldValues = {\n                  shape: {\n                    content: node.shape.content\n                  }\n                };\n              }\n            }\n\n            deleteNode = this.eventHandler.isAddTextNode(node, true);\n            if (!(!deleteNode && (element.textContent !== text || text !== this.activeLabel.text))) return [3\n            /*break*/\n            , 9];\n            if (!isBlazor()) return [3\n            /*break*/\n            , 8];\n            if (!(window && window[blazor] && this.textEdit)) return [3\n            /*break*/\n            , 7];\n            eventObj = {\n              'EventName': 'textEdit',\n              args: JSON.stringify(args)\n            };\n            return [4\n            /*yield*/\n            , window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n\n          case 6:\n            args = _a.sent() || args;\n            _a.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            this.triggerEvent(DiagramEvent.textEdit, args);\n            _a.label = 9;\n\n          case 9:\n            if (!textWrapper) {\n              textWrapper = this.getWrapper(node.wrapper, this.activeLabel.id);\n            }\n\n            if (annotation_1.content !== text && !args.cancel) {\n              if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier' && text.indexOf('+') === -1 && text.indexOf('-') === -1 && text.indexOf('#') === -1 && text.indexOf('~') === -1 && node.id.indexOf('_umlClass_header') === -1) {\n                text = ' + ' + text;\n              }\n\n              if (node.isLane || node.isPhase) {\n                this.protectPropertyChange(true);\n              }\n\n              if (!(annotation_1 instanceof Text)) {\n                index = findObjectIndex(node, annotation_1.id, true);\n                changesAnnotation = {};\n                changesAnnotation[index] = {\n                  content: text\n                };\n                changedvalues = {\n                  annotations: changesAnnotation\n                };\n              } else {\n                if (isBlazor() && node.shape.type === 'Text') {\n                  changedvalues = {\n                    shape: {\n                      textContent: text\n                    }\n                  };\n                } else {\n                  changedvalues = {\n                    shape: {\n                      content: text\n                    }\n                  };\n                }\n              }\n\n              nodeIndex = this.getIndex(node, node.id);\n\n              if (nodeIndex) {\n                oldnodes = {};\n                oldnodes[nodeIndex] = oldValues;\n                newnodes = {};\n                newnodes[nodeIndex] = changedvalues;\n\n                if (getObjectType(node) === Node) {\n                  this.onPropertyChanged({\n                    nodes: newnodes\n                  }, {\n                    nodes: oldnodes\n                  });\n                } else {\n                  this.onPropertyChanged({\n                    connectors: newnodes\n                  }, {\n                    connectors: oldnodes\n                  });\n                }\n              }\n\n              this.protectPropertyChange(true);\n\n              if (isBlazor() && node.shape.type === 'Text') {\n                node.shape.textContent = text;\n              } else {\n                annotation_1.content = text;\n              }\n\n              this.protectPropertyChange(false);\n              this.updateSelector();\n\n              if (node.isLane || node.isPhase) {\n                this.protectPropertyChange(false);\n              }\n            }\n\n            if (deleteNode) {\n              this.removeObjectsFromLayer(node);\n              this.removeFromAQuad(node);\n              delete this.nameTable[this.activeLabel.parentId];\n\n              if (text !== '') {\n                this.clearSelection();\n                clonedObject = cloneObject(node);\n                node = this.add(clonedObject);\n                this.updateDiagramObject(node);\n                this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n                this.commandHandler.select(this.nameTable[node.id]);\n                this.commandHandler.updateBlazorSelector();\n              }\n            }\n\n            _a.label = 10;\n\n          case 10:\n            if (this.selectedItems.nodes.length) {\n              selectedNode = this.nameTable[this.activeLabel.parentId];\n              swimLaneNode = this.nameTable[selectedNode.parentId];\n\n              if (swimLaneNode && swimLaneNode.shape.type === 'SwimLane' || selectedNode.shape.type === 'SwimLane') {\n                laneHeader = 'LaneHeaderParent';\n                phaseHeader = 'PhaseHeaderParent';\n\n                if (selectedNode.shape.type === 'SwimLane') {\n                  swimLaneNode = this.nameTable[this.activeLabel.parentId];\n                  selectedNode = node;\n                }\n\n                if (selectedNode.isLane || selectedNode.isPhase) {\n                  collection = selectedNode.isLane ? swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n\n                  for (j = 0; j < collection.length; j++) {\n                    if (collection[j].id === (selectedNode[laneHeader] || selectedNode[phaseHeader])) {\n                      collection[j].header.annotation.content = selectedNode.annotations[0].content;\n                    }\n                  }\n                } else if (selectedNode.isHeader && swimLaneNode.shape.hasHeader) {\n                  swimLaneNode.shape.header.annotation.content = selectedNode.annotations[0].content;\n                }\n              }\n\n              this.dataBind();\n            }\n\n            textWrapper.visible = true;\n            this.updateDiagramObject(node);\n            this.diagramActions = this.diagramActions & ~DiagramAction.TextEdit;\n\n            if (this.activeLabel.isGroup) {\n              this.endGroupAction();\n            }\n\n            this.activeLabel = {\n              id: '',\n              parentId: '',\n              isGroup: false,\n              text: undefined\n            };\n            this.commandHandler.getBlazorOldValues();\n\n            if (isBlazor()) {\n              this.canEnableBlazorObject = false;\n            }\n\n            this.enableServerDataBinding(true);\n            _a.label = 11;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * getIndex method \\\n   *\n   * @returns { void }     getIndex method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   * @param {string} id - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getIndex = function (node, id) {\n    //let index: number;\n    var collection = getObjectType(node) === Node ? this.nodes : this.connectors;\n\n    for (var i = 0; i < collection.length; i++) {\n      if (collection[i].id.toString() === id.toString()) {\n        return i.toString();\n      }\n    }\n\n    return null;\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.getBlazorTextEditArgs = function (args) {\n    var element = getObjectType(args.element) === Connector ? {\n      connectorId: args.element.id\n    } : {\n      nodeId: args.element.id\n    };\n    var annotation = {};\n\n    if (getObjectType(args.element) === Node) {\n      if (args.element.shape.type === 'Text') {\n        annotation.textNode = args.element.shape;\n      } else {\n        annotation.annotationId = args.element.annotations[0].id;\n      }\n    } else {\n      annotation.annotationId = args.element.annotations[0].id;\n    }\n\n    args = {\n      oldValue: args.oldValue,\n      newValue: args.newValue,\n      cancel: args.cancel,\n      element: element,\n      annotation: annotation\n    };\n    return args;\n  };\n  /**\n   * canLogChange method \\\n   *\n   * @returns { void }     canLogChange method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.canLogChange = function () {\n    if (this.diagramActions & DiagramAction.Render && !(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.PublicMethod)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Diagram.prototype.modelChanged = function (newProp, oldProp) {\n    if (newProp.connectors || oldProp.connectors || newProp.nodes || oldProp.connectors || newProp.pageSettings || oldProp.pageSettings || newProp.bridgeDirection || oldProp.bridgeDirection) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Diagram.prototype.resetDiagramActions = function (action) {\n    var isAction = action ? true : false;\n\n    if (this.diagramActions & DiagramAction.UndoRedo && (!isAction || action === DiagramAction.UndoRedo)) {\n      this.diagramActions = this.diagramActions & ~DiagramAction.UndoRedo;\n    }\n\n    if (this.diagramActions & DiagramAction.PublicMethod && (!isAction || action === DiagramAction.PublicMethod)) {\n      this.diagramActions = this.diagramActions & ~DiagramAction.PublicMethod;\n    }\n  };\n  /**\n   * removeNode method \\\n   *\n   * @returns { void }     removeNode method .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {NodeModel} childernCollection - provide the childernCollection value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeNode = function (node, childernCollection) {\n    this.removeObjectsFromLayer(node);\n    this.removeFromAQuad(this.nameTable[node.id]);\n    var groupElement = document.getElementById(node.id + '_groupElement');\n    delete this.nameTable[node.id];\n\n    if (node.children) {\n      delete this.groupTable[node.id];\n    }\n\n    if (isBlazor()) {\n      for (var i = 0; i < this.nodes.length; i++) {\n        if (node.id === this.nodes[i].id) {\n          this.UpdateBlazorDiagramModel(node, 'Node', i);\n        }\n      }\n    }\n\n    this.nodes.splice(this.nodes.indexOf(node), 1);\n\n    if (groupElement.children && groupElement.children.length > 0) {\n      var beforeElement = undefined;\n\n      for (var j = groupElement.children.length - 1; j >= 0; j--) {\n        var childElement = groupElement.children[j];\n\n        if (childernCollection.length > 0 && childernCollection.indexOf(childElement.id.split('_')[0]) !== -1) {\n          if (!beforeElement) {\n            groupElement.parentNode.insertBefore(childElement, groupElement);\n          } else {\n            groupElement.parentNode.insertBefore(childElement, beforeElement);\n          }\n\n          beforeElement = childElement;\n        }\n      }\n    }\n\n    if (groupElement) {\n      groupElement.parentNode.removeChild(groupElement);\n    }\n  };\n  /**\n   * deleteGroup method \\\n   *\n   * @returns { void }     deleteGroup method .\\\n   * @param {NodeModel} node - provide the source value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.deleteGroup = function (node) {\n    var elements = [];\n    var tempNode = [];\n\n    if (node.children) {\n      tempNode = this.commandHandler.getChildren(node, elements);\n    }\n\n    this.UpdateBlazorDiagramModelCollection(node);\n\n    for (var _i = 0, tempNode_1 = tempNode; _i < tempNode_1.length; _i++) {\n      var nodes = tempNode_1[_i];\n\n      if (this.nameTable[nodes.id]) {\n        this.remove(nodes);\n      }\n    }\n  }; //helper methods - end region\n  //property changes - start region\n\n  /** @private */\n\n  /**\n   * updateObject method \\\n   *\n   * @returns { void }     updateObject method .\\\n   * @param {Node | Connector} actualObject - provide the source value.\n   * @param {Node | Connector} oldObject - provide the target value.\n   * @param {Node | Connector} changedProp - provide the layoutOrientation value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateObject = function (actualObject, oldObject, changedProp) {\n    if (!(this.diagramActions & DiagramAction.ToolAction)) {\n      var bound = actualObject.wrapper.children[0].bounds;\n      var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bound);\n\n      if (!checkBoundaryConstraints) {\n        if (actualObject instanceof Node) {\n          var oldNode = oldObject;\n\n          for (var _i = 0, _a = Object.keys(changedProp); _i < _a.length; _i++) {\n            var key = _a[_i];\n\n            switch (key) {\n              case 'width':\n                actualObject.width = oldNode.width;\n                break;\n\n              case 'height':\n                actualObject.height = oldNode.height;\n                break;\n\n              case 'offsetX':\n                actualObject.offsetX = oldNode.offsetX;\n                break;\n\n              case 'offsetY':\n                actualObject.offsetY = oldNode.offsetY;\n                break;\n\n              case 'rotateAngle':\n                actualObject.rotateAngle = oldNode.rotateAngle;\n                break;\n            }\n          }\n\n          this.nodePropertyChange(actualObject, changedProp, oldObject);\n        } else {\n          for (var _b = 0, _c = Object.keys(changedProp); _b < _c.length; _b++) {\n            var key = _c[_b];\n            var oldConnector = oldObject;\n            var actualSourcePoint = actualObject.sourcePoint;\n            var actualTargetPoint = actualObject.targetPoint;\n\n            switch (key) {\n              case 'sourcePoint':\n                actualSourcePoint.x = oldConnector.sourcePoint.x || actualSourcePoint.x;\n                actualSourcePoint.y = oldConnector.sourcePoint.y || actualSourcePoint.y;\n                break;\n\n              case 'targetPoint':\n                actualTargetPoint.x = oldConnector.targetPoint.x || actualTargetPoint.x;\n                actualTargetPoint.y = oldConnector.targetPoint.y || actualTargetPoint.y;\n            }\n          }\n\n          this.connectorPropertyChange(actualObject, changedProp, oldObject);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.nodePropertyChangeExtend = function (actualObject, oldObject, node, update) {\n    if (node.style !== undefined && actualObject.shape.type !== 'Bpmn') {\n      updateStyle(node.style, actualObject.wrapper.children[0]);\n      update = true;\n    }\n\n    if (node.shadow !== undefined) {\n      this.updateShadow(actualObject.shadow, node.shadow);\n      update = true;\n    }\n\n    if (node.constraints !== undefined) {\n      if (oldObject.constraints & NodeConstraints.Select && !(node.constraints & NodeConstraints.Select) && isSelected(this, actualObject)) {\n        this.clearSelection();\n      } else {\n        this.updateThumbConstraints(this.selectedItems.nodes, this.selectedItems);\n        this.updateSelector();\n        update = true;\n      }\n    }\n\n    this.swimLaneNodePropertyChange(actualObject, oldObject, node, update);\n    return update;\n  };\n  /* tslint:disable */\n\n\n  Diagram.prototype.swimLaneNodePropertyChange = function (actualObject, oldObject, node, update) {\n    if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol) {\n      if (oldObject.shape) {\n        var shape = node.shape;\n        var actualShape = actualObject.shape;\n        var orientation_1 = actualShape.orientation === 'Horizontal' ? true : false;\n        var padding = actualShape.padding;\n        var oldShape = oldObject.shape;\n        var grid = actualObject.wrapper.children[0];\n        var oldObjects = void 0;\n        var newObjects = void 0;\n        var id = void 0;\n\n        if (oldShape.lanes || oldShape.phases) {\n          if (oldShape.lanes) {\n            for (var _i = 0, _a = Object.keys(shape.lanes); _i < _a.length; _i++) {\n              var count = _a[_i];\n              var indexValue = Number(count);\n              var lane = oldShape.lanes[indexValue];\n              var laneIndex = void 0;\n              var newLane = shape.lanes[indexValue];\n\n              if (newLane && newLane.header) {\n                id = actualShape.lanes[indexValue].header.id;\n                oldObjects = lane.header;\n                newObjects = newLane.header;\n                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n              }\n\n              if (lane.children) {\n                for (var _b = 0, _c = Object.keys(lane.children); _b < _c.length; _b++) {\n                  var childNodeIndex = _c[_b];\n                  id = actualShape.lanes[indexValue].children[Number(childNodeIndex)].id;\n                  var node_1 = this.nameTable[id];\n                  oldObjects = lane.children[Number(childNodeIndex)];\n                  newObjects = newLane.children[Number(childNodeIndex)];\n                  this.nodePropertyChange(node_1, oldObjects, newObjects);\n                }\n              }\n\n              if (lane.width && !orientation_1) {\n                laneIndex = actualShape.phases && actualShape.phaseSize ? indexValue + 1 : indexValue;\n                grid.updateColumnWidth(laneIndex, newLane.width, true, padding);\n                this.updateDiagramElementQuad();\n              }\n\n              if (lane.height && orientation_1) {\n                laneIndex = actualShape.header && actualShape.hasHeader ? indexValue + 1 : indexValue;\n                laneIndex += actualShape.phases && actualShape.phaseSize ? 1 : 0;\n                grid.updateRowHeight(laneIndex, newLane.height, true, padding);\n                this.updateDiagramElementQuad();\n              }\n            }\n          }\n\n          if (shape.phases) {\n            for (var _d = 0, _e = Object.keys(shape.phases); _d < _e.length; _d++) {\n              var key = _e[_d];\n              var indexValue = Number(key);\n              var phase = shape.phases[indexValue];\n              var size = void 0;\n              var rowIndex = actualShape.header && actualShape.hasHeader ? 1 : 0;\n\n              if (phase && phase.header) {\n                id = actualShape.phases[indexValue].header.id;\n                oldObjects = oldShape.phases[indexValue].header;\n                newObjects = phase.header;\n                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n              }\n\n              if (phase.offset) {\n                if (indexValue === 0) {\n                  size = phase.offset;\n                } else {\n                  var previousPhase = actualShape.phases[indexValue - 1];\n                  size = phase.offset - previousPhase.offset;\n\n                  if (size <= 0) {\n                    size = phase.offset;\n                  }\n                }\n\n                if (orientation_1) {\n                  grid.updateColumnWidth(indexValue, size, true, padding);\n                  updatePhaseMaxWidth(actualObject, this, grid.rows[rowIndex].cells[indexValue], indexValue);\n                } else {\n                  grid.updateRowHeight(rowIndex + indexValue, size, true, padding);\n                }\n              }\n            }\n          }\n        }\n\n        if (shape.phaseSize !== undefined && actualShape.phases.length) {\n          if (shape.phaseSize === 0 || oldShape.phaseSize === 0) {\n            if (oldShape.phaseSize) {\n              if (orientation_1) {\n                grid.removeRow(actualShape.header && actualShape.hasHeader ? 1 : 0);\n                actualObject.height = actualObject.wrapper.height = grid.height;\n              } else {\n                if (actualShape.header && actualShape.hasHeader) {\n                  grid.rows[0].cells[1].children = grid.rows[0].cells[0].children;\n                  grid.rows[0].cells[1].columnSpan = grid.rows[0].cells[0].columnSpan - 1;\n                  grid.rows[0].cells[0].children = [];\n                }\n\n                grid.removeColumn(0);\n              }\n            } else {\n              if (orientation_1) {\n                var rowDef = new RowDefinition();\n                rowDef.height = shape.phaseSize;\n                grid.addRow(actualShape.header && actualShape.hasHeader ? 1 : 0, rowDef, true);\n                actualObject.height = actualObject.wrapper.height += shape.phaseSize;\n              } else {\n                var colDef = new ColumnDefinition();\n                colDef.width = shape.phaseSize;\n                grid.addColumn(0, colDef, true);\n\n                if (actualShape.header && actualShape.hasHeader) {\n                  grid.rows[0].cells[0].children = grid.rows[0].cells[1].children;\n                  grid.rows[0].cells[1].children = [];\n                  grid.rows[0].cells[1].columnSpan = 1;\n                  grid.rows[0].cells[1].minWidth = undefined;\n                  grid.rows[0].cells[0].columnSpan = actualShape.lanes.length + 1;\n                }\n              }\n\n              for (var k = 0; k < actualShape.phases.length; k++) {\n                if (actualShape.phases[k].id === '') {\n                  actualShape.phases[k].id = randomId();\n                }\n\n                phaseDefine(grid, this, actualObject, actualShape.header && actualShape.hasHeader ? 1 : 0, orientation_1, k);\n              }\n            }\n          } else {\n            if (orientation_1) {\n              grid.updateRowHeight(actualShape.header && actualShape.hasHeader ? 1 : 0, shape.phaseSize, false);\n            } else {\n              grid.updateColumnWidth(0, shape.phaseSize, false);\n            }\n          }\n        }\n\n        if (actualShape.header && actualShape.hasHeader && oldShape.header) {\n          var id_1 = grid.rows[0].cells[0].children[0].id;\n          var headerNode = this.nameTable[id_1];\n          this.nodePropertyChange(headerNode, oldShape.header, shape.header);\n        }\n\n        actualObject.height = actualObject.wrapper.height = grid.height;\n        actualObject.width = actualObject.wrapper.width = grid.width;\n      } else if (oldObject.constraints) {\n        var oldSelectConstraints = oldObject.constraints & NodeConstraints.Select;\n        var newSelectConstraints = node.constraints & NodeConstraints.Select;\n\n        if (oldSelectConstraints !== newSelectConstraints) {\n          var shape = actualObject.shape; // Header - constraints\n\n          var headerNode = this.nameTable[actualObject.id + shape.header.id];\n          headerNode.constraints = !newSelectConstraints ? headerNode.constraints & ~NodeConstraints.Select : headerNode.constraints | NodeConstraints.Select; // Phase - Constraints\n\n          var phaseNode = void 0;\n\n          if (shape.phaseSize > 0) {\n            for (var i = 0; i < shape.phases.length; i++) {\n              phaseNode = this.nameTable[actualObject.id + shape.phases[i].id + '_header'];\n              phaseNode.constraints = !newSelectConstraints ? phaseNode.constraints & ~NodeConstraints.Select : phaseNode.constraints | NodeConstraints.Select;\n            }\n          } // Header - Constraints\n\n\n          var laneNode = void 0;\n          var laneHeader = void 0;\n          var value = shape.phases.length || 1;\n\n          for (var i = 0; i < shape.lanes.length; i++) {\n            for (var l = 0; l < value; l++) {\n              laneNode = this.nameTable[actualObject.id + shape.lanes[i].id + l];\n              laneNode.constraints = !newSelectConstraints ? laneNode.constraints & ~NodeConstraints.Select : laneNode.constraints | NodeConstraints.Select;\n\n              if (l === 0) {\n                laneHeader = this.nameTable[actualObject.id + shape.lanes[i].id + '_' + l + '_header'];\n                laneHeader.constraints = !newSelectConstraints ? laneHeader.constraints & ~NodeConstraints.Select : laneHeader.constraints | NodeConstraints.Select;\n              }\n            }\n          }\n        }\n      }\n\n      update = true;\n    }\n\n    return update;\n  };\n  /** @private */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Diagram.prototype.insertValue = function (oldNodeObject, isNode) {\n    if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n      var value = void 0;\n      var oldObjects = isNode ? this.oldNodeObjects : this.oldConnectorObjects;\n\n      for (var i = 0; i < oldObjects.length; i++) {\n        if (oldObjects[i].id === oldNodeObject.id) {\n          value = true;\n        }\n      }\n\n      if (!value) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        isNode ? this.oldNodeObjects.push(oldNodeObject) : this.oldConnectorObjects.push(oldNodeObject);\n      }\n    }\n  };\n  /* tslint:disable */\n\n  /** @private */\n  // eslint-disable-next-line max-len\n\n\n  Diagram.prototype.nodePropertyChange = function (actualObject, oldObject, node, isLayout, rotate, propertyChange) {\n    if (this.canEnableBlazorObject && actualObject.id !== 'helper') {\n      var node_2 = cloneObject(actualObject);\n      this.insertValue(node_2, true);\n    }\n\n    var existingBounds = actualObject.wrapper.outerBounds;\n    var existingInnerBounds = actualObject.wrapper.bounds;\n    var updateConnector = false;\n    var i;\n    var j;\n    var offsetX;\n    var offsetY;\n    var update;\n    var tx;\n    var ty;\n\n    if (node.width !== undefined) {\n      if (!actualObject.children) {\n        actualObject.wrapper.children[0].width = node.width;\n        update = true;\n        updateConnector = true;\n      } else if (!actualObject.container) {\n        this.scaleObject(actualObject, node.width, true);\n      } else {\n        actualObject.wrapper.width = node.width;\n      }\n    }\n\n    if (node.height !== undefined) {\n      if (!actualObject.children) {\n        actualObject.wrapper.children[0].height = node.height;\n        update = true;\n        updateConnector = true;\n      } else if (!actualObject.container) {\n        this.scaleObject(actualObject, node.height, false);\n      } else {\n        actualObject.wrapper.height = node.height;\n      }\n    }\n\n    update = this.nodePropertyChangeExtend(actualObject, oldObject, node, update);\n\n    if (node.constraints !== undefined && canShadow(oldObject) !== canShadow(node)) {\n      actualObject.wrapper.children[0].shadow = canShadow(actualObject) ? actualObject.shadow : null;\n    }\n\n    if (node.offsetX !== undefined) {\n      if (actualObject.wrapper.flip !== 'None') {\n        if (actualObject.offsetX !== actualObject.wrapper.offsetX && oldObject.offsetX !== undefined) {\n          var offsetX_1 = node.offsetX - oldObject.offsetX;\n          actualObject.wrapper.offsetX = actualObject.wrapper.offsetX + offsetX_1;\n          this.updateFlipOffset(actualObject.wrapper, offsetX_1, 0, actualObject.wrapper.flip);\n        }\n      } else {\n        actualObject.wrapper.offsetX = node.offsetX;\n      }\n\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.offsetY !== undefined) {\n      if (actualObject.wrapper.flip !== 'None') {\n        if (actualObject.offsetY !== actualObject.wrapper.offsetY && oldObject.offsetY !== undefined) {\n          var offsetY_1 = node.offsetY - oldObject.offsetY;\n          actualObject.wrapper.offsetY = actualObject.wrapper.offsetY + offsetY_1;\n          this.updateFlipOffset(actualObject.wrapper, 0, offsetY_1, actualObject.wrapper.flip);\n        }\n      } else {\n        actualObject.wrapper.offsetY = node.offsetY;\n      }\n\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.pivot !== undefined) {\n      actualObject.wrapper.pivot = node.pivot;\n      update = true;\n    }\n\n    if (node.minWidth !== undefined) {\n      actualObject.wrapper.minWidth = actualObject.wrapper.children[0].minWidth = node.minWidth;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.minHeight !== undefined) {\n      actualObject.wrapper.minHeight = actualObject.wrapper.children[0].minHeight = node.minHeight;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.maxWidth !== undefined) {\n      actualObject.wrapper.maxWidth = node.maxWidth;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.maxHeight !== undefined) {\n      actualObject.wrapper.maxHeight = node.maxHeight;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.flip !== undefined) {\n      actualObject.wrapper.flip = node.flip;\n      update = true;\n      updateConnector = true;\n\n      if (actualObject.wrapper.elementActions & ElementAction.ElementIsGroup) {\n        alignElement(actualObject.wrapper, actualObject.offsetX, actualObject.offsetY, this, node.flip);\n\n        if (actualObject && actualObject.children) {\n          for (var _i = 0, _a = actualObject.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var updateNode = this.nameTable[child];\n            updateNode.wrapper.flip = node.flip;\n            this.updatePorts(updateNode, node.flip);\n          }\n        }\n      } else {\n        actualObject.wrapper.children[0].flip = node.flip;\n        this.updatePorts(actualObject, node.flip);\n      }\n    }\n\n    if (node.rotateAngle !== undefined && actualObject.constraints & NodeConstraints.Rotate) {\n      if (actualObject.children && rotate) {\n        // eslint-disable-next-line max-len\n        this.commandHandler.rotateObjects(actualObject, [actualObject], actualObject.rotateAngle - actualObject.wrapper.rotateAngle, {\n          x: actualObject.offsetX,\n          y: actualObject.offsetY\n        }, false);\n      }\n\n      actualObject.wrapper.rotateAngle = node.rotateAngle;\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.backgroundColor !== undefined) {\n      actualObject.wrapper.style.fill = node.backgroundColor;\n    }\n\n    if (node.visible !== undefined) {\n      this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n    }\n\n    if (node.shape !== undefined && actualObject.shape.type !== 'Bpmn') {\n      update = true;\n      updateShape(node, actualObject, oldObject, this);\n      updateConnector = true;\n    }\n\n    if (node.margin) {\n      update = true;\n      this.updateMargin(actualObject, node);\n      updateConnector = true;\n    }\n\n    if ((node.shape !== undefined && node.shape.type === undefined || node.width !== undefined || node.height !== undefined || node.style !== undefined) && actualObject.shape.type === 'Bpmn' && this.bpmnModule || isBlazor() && node && node.shape && node.shape.type === 'Bpmn') {\n      update = true;\n      updateConnector = true;\n      this.bpmnModule.updateBPMN(node, oldObject, actualObject, this);\n    }\n\n    if (actualObject.shape.type === 'UmlActivity' && (!isBlazor() && actualObject.shape.shape === 'FinalNode' || isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode')) {\n      update = true;\n      updateConnector = true;\n      this.updateUMLActivity(node, oldObject, actualObject, this);\n    }\n\n    if (actualObject.shape && actualObject.shape.type === 'UmlClassifier' || actualObject.parentId && this.nameTable[actualObject.parentId] && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n      update = true;\n      updateConnector = true;\n    }\n\n    if (node.ports !== undefined) {\n      for (var _b = 0, _c = Object.keys(node.ports); _b < _c.length; _b++) {\n        var key = _c[_b];\n        var index = Number(key);\n        update = true;\n        var changedObject = node.ports[key];\n        var actualPort = actualObject.ports[index];\n        this.updatePort(changedObject, actualPort, actualObject.wrapper);\n        updateConnector = true;\n      }\n    }\n\n    if (node.annotation !== undefined || node.annotations !== undefined || node.width !== undefined) {\n      for (var _d = 0, _e = Object.keys(node.annotations || actualObject.annotations); _d < _e.length; _d++) {\n        var key = _e[_d];\n        var index = Number(key);\n        update = true;\n        var changedObject = void 0;\n\n        if (node.annotation) {\n          changedObject = node.annotation;\n        } else {\n          changedObject = node.annotations ? node.annotations[key] : actualObject.annotations;\n        }\n\n        var actualAnnotation = actualObject.annotations[index];\n\n        if (actualAnnotation) {\n          var updateSize = actualObject.width ? true : false;\n          this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject, updateSize);\n          var swimLaneNode = this.nameTable[actualObject.parentId];\n\n          if (swimLaneNode && swimLaneNode.shape.type === 'SwimLane') {\n            var laneHeader = 'LaneHeaderParent';\n            var phaseHeader = 'PhaseHeaderParent';\n\n            if (actualObject.isLane || actualObject.isPhase) {\n              var collection = actualObject.isLane ? swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n\n              for (var j_2 = 0; j_2 < collection.length; j_2++) {\n                if (collection[j_2].id === (actualObject[laneHeader] || actualObject[phaseHeader])) {\n                  collection[j_2].header.annotation.content = actualObject.annotations[0].content;\n                  collection[j_2].header.annotation.style = actualObject.annotations[0].style;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (node.expandIcon !== undefined || node.collapseIcon !== undefined || node.isExpanded !== undefined) {\n      this.updateIcon(actualObject);\n      this.updateDefaultLayoutIcons(actualObject);\n\n      if (node.isExpanded !== undefined) {\n        this.commandHandler.expandNode(actualObject, this);\n      }\n\n      update = true;\n    }\n\n    if (node.fixedUserHandles !== undefined) {\n      var index = void 0;\n      var changedObject = void 0;\n      var actualfixedUserHandle = void 0;\n\n      for (var _f = 0, _g = Object.keys(node.fixedUserHandles); _f < _g.length; _f++) {\n        var key = _g[_f];\n        index = Number(key);\n        update = true;\n\n        if (node.fixedUserHandles[index]) {\n          changedObject = node.fixedUserHandles[index];\n        }\n\n        actualfixedUserHandle = actualObject.fixedUserHandles[index];\n\n        if (actualfixedUserHandle) {\n          this.updateNodefixedUserHandle(changedObject, actualfixedUserHandle, actualObject.wrapper, actualObject);\n        }\n      }\n    }\n\n    if (node.tooltip !== undefined) {\n      this.updateTooltip(actualObject, node);\n    }\n\n    if (update) {\n      if (this.bpmnModule !== undefined) {\n        // eslint-disable-next-line max-len\n        this.bpmnModule.updateTextAnnotationProp(actualObject, {\n          offsetX: oldObject.offsetX || actualObject.offsetX,\n          offsetY: oldObject.offsetY || actualObject.offsetY\n        }, this);\n      }\n\n      if (this.checkSelectedItem(actualObject) && actualObject.wrapper.children[0] instanceof TextElement) {\n        actualObject.wrapper.children[0].refreshTextElement();\n      }\n\n      actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height), actualObject.id, this.onLoadImageSize.bind(this));\n      actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n      this.updateObject(actualObject, oldObject, node);\n\n      if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && !(this.diagramActions & DiagramAction.ToolAction)) {\n        updateHeaderMaxWidth(this, actualObject);\n        var grid = actualObject.wrapper.children[0];\n        var shape = actualObject.shape;\n        var column = grid.columnDefinitions().length;\n\n        if (shape.orientation === 'Horizontal') {\n          var index = shape.header && shape.hasHeader ? 1 : 0;\n          updatePhaseMaxWidth(actualObject, this, grid.rows[index].cells[column - 1], column - 1);\n        }\n\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n      }\n\n      if (!(this.diagramActions & DiagramAction.ToolAction) || this.diagramActions & DiagramAction.UndoRedo) {\n        if (this.checkSelectedItem(actualObject)) {\n          this.updateSelector();\n        }\n      }\n\n      if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) {\n        this.updateQuad(actualObject);\n      }\n\n      if (!isLayout) {\n        // eslint-disable-next-line max-len\n        this.commandHandler.connectorSegmentChange(actualObject, existingInnerBounds, node.rotateAngle !== undefined ? true : false); // if (updateConnector) {\n        //     this.updateConnectorEdges(actualObject);\n        // }\n      } else {\n        if (actualObject && actualObject.visible && actualObject.outEdges) {\n          this.updateIconVisibility(actualObject, actualObject.outEdges.length === 0 ? false : true);\n        }\n      }\n\n      if (this.bpmnModule !== undefined) {\n        this.bpmnModule.updateDocks(actualObject, this);\n      }\n\n      if (!node.annotations || !actualObject.processId) {\n        this.updateGroupOffset(actualObject);\n      } // if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) { this.updateQuad(actualObject); }\n      // EJ2-42005 - The parent of the actualObject is not measured and arranged when a node or connector is selected.\n      // The condition restricts the measure and arrange of the actualObject whenever a node or connector is selected.\n      // Commented @Dheepshiva\n      // let objects: (NodeModel | ConnectorModel)[] = [];\n      // objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n      // if (objects.length === 0) {\n\n\n      if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n        var parent_4 = this.nameTable[actualObject.parentId];\n        parent_4.wrapper.measure(new Size(parent_4.wrapper.width, actualObject.wrapper.height));\n        parent_4.wrapper.arrange(parent_4.wrapper.desiredSize);\n        parent_4.offsetX = parent_4.wrapper.offsetX;\n        parent_4.offsetY = parent_4.wrapper.offsetY;\n      } // }\n\n\n      if (existingInnerBounds.equals(existingInnerBounds, actualObject.wrapper.bounds) === false) {\n        this.updateGroupSize(actualObject);\n\n        if (actualObject.children) {\n          this.updateGroupOffset(actualObject);\n        }\n      }\n\n      if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && this.diagramActions & DiagramAction.Render) {\n        var connectors = getConnectors(this, actualObject.wrapper.children[0], undefined, true);\n        updateConnectorsProperties(connectors, this);\n      }\n\n      if (!this.preventNodesUpdate) {\n        if (!canVitualize(this) || canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1) {\n          if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n            this.updateDiagramObject(actualObject, true);\n          } else {\n            this.updateDiagramObject(actualObject);\n          }\n        }\n\n        if (!isLayout && updateConnector) {\n          if (this.lineRoutingModule && this.diagramActions && this.constraints & DiagramConstraints.LineRouting && actualObject.id !== 'helper') {\n            if (!(this.diagramActions & DiagramAction.ToolAction)) {\n              this.lineRoutingModule.renderVirtualRegion(this, true);\n            }\n          }\n\n          this.updateConnectorEdges(actualObject);\n\n          if (actualObject.id !== 'helper' && !(this.diagramActions & DiagramAction.ToolAction)) {\n            var objects = this.spatialSearch.findObjects(actualObject.wrapper.outerBounds);\n\n            for (var i_4 = 0; i_4 < objects.length; i_4++) {\n              var object = objects[i_4];\n\n              if (object instanceof Connector) {\n                this.connectorPropertyChange(objects[i_4], {}, {\n                  sourceID: object.sourceID,\n                  targetID: object.targetID,\n                  sourcePortID: object.sourcePortID,\n                  targetPortID: object.targetPortID,\n                  sourcePoint: object.sourcePoint,\n                  targetPoint: object.targetPoint\n                });\n              }\n            }\n          }\n        }\n      }\n\n      if (actualObject.status !== 'New' && this.diagramActions) {\n        actualObject.status = 'Update';\n      }\n    }\n\n    if (!propertyChange) {\n      var element = actualObject;\n      var args = {\n        element: element,\n        cause: this.diagramActions,\n        oldValue: oldObject,\n        newValue: node\n      };\n\n      if (isBlazor() && this.propertyChange) {\n        args.element = {\n          node: cloneBlazorObject(element)\n        };\n        args.oldValue = {\n          node: cloneBlazorObject(oldObject)\n        };\n        args.newValue = {\n          node: cloneBlazorObject(node)\n        };\n      }\n\n      this.triggerEvent(DiagramEvent.propertyChange, args);\n    }\n  };\n\n  Diagram.prototype.updatePorts = function (actualObject, flip) {\n    if (actualObject && actualObject.ports.length > 0) {\n      for (var _i = 0, _a = Object.keys(actualObject.ports); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var index = Number(key);\n        var actualPort = actualObject.ports[index];\n        var portWrapper = this.getWrapper(actualObject.wrapper, actualPort.id);\n        portWrapper = updatePortEdges(portWrapper, flip, actualPort);\n        portWrapper.relativeMode = 'Point';\n        portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n        portWrapper.arrange(portWrapper.desiredSize);\n      }\n    }\n  };\n\n  Diagram.prototype.updateFlipOffset = function (element, diffX, diffY, flip) {\n    if (element.hasChildren()) {\n      for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        if (flip === 'Horizontal' || flip === 'Both') {\n          child.flipOffset.x = child.flipOffset.x + diffX;\n        }\n\n        if (flip === 'Vertical' || flip === 'Both') {\n          child.flipOffset.y = child.flipOffset.y + diffY;\n        }\n\n        if (child instanceof Canvas || child instanceof Container) {\n          this.updateFlipOffset(child, diffX, diffY, flip);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateUMLActivity = function (changedProp, oldObject, actualObject, diagram) {\n    var sizeChanged = changedProp.width !== undefined || changedProp.height !== undefined;\n\n    if (sizeChanged) {\n      var innerFinalNode = actualObject.wrapper.children[0].children[0];\n      innerFinalNode.width = changedProp.width;\n      innerFinalNode.height = changedProp.height;\n      var outerFinalNode = actualObject.wrapper.children[0].children[1];\n      outerFinalNode.width = changedProp.width / 1.5;\n      outerFinalNode.height = changedProp.height / 1.5;\n    }\n  };\n\n  Diagram.prototype.updateConnectorProperties = function (connector) {\n    if (this.preventConnectorsUpdate) {\n      var index = this.selectionConnectorsList.indexOf(connector);\n\n      if (index === -1) {\n        this.selectionConnectorsList.push(connector);\n      }\n    } else {\n      var conn = {\n        sourcePoint: connector.sourcePoint,\n        targetPoint: connector.targetPoint,\n        sourceID: connector.sourceID,\n        targetID: connector.targetID,\n        sourcePortID: connector.sourcePortID,\n        targetPortID: connector.targetPortID\n      };\n      this.connectorPropertyChange(connector, {}, conn, undefined, true);\n    }\n  };\n  /**\n   * updateConnectorEdges method \\\n   *\n   * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n   * @param {Node} actualObject - provide the actualObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateConnectorEdges = function (actualObject) {\n    if (actualObject.inEdges.length > 0) {\n      for (var j = 0; j < actualObject.inEdges.length; j++) {\n        this.updateConnectorProperties(this.nameTable[actualObject.inEdges[j]]);\n      }\n    }\n\n    if (actualObject.outEdges.length > 0) {\n      for (var k = 0; k < actualObject.outEdges.length; k++) {\n        this.updateConnectorProperties(this.nameTable[actualObject.outEdges[k]]);\n      }\n    }\n\n    if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n      this.updateConnectorEdges(this.nameTable[actualObject.parentId]);\n    }\n  };\n  /* tslint:enable */\n\n\n  Diagram.prototype.connectorProprtyChangeExtend = function (actualObject, oldProp, newProp, updateSelector) {\n    if (newProp.type !== undefined && newProp.type !== oldProp.type) {\n      if (actualObject.segments.length > 0 && newProp.segments === undefined) {\n        actualObject.segments = [];\n      }\n    }\n\n    if (newProp.shape !== undefined && actualObject.shape !== undefined && actualObject.shape && actualObject.shape.type === 'Bpmn' && this.bpmnModule) {\n      this.bpmnModule.updateBPMNConnector(actualObject, oldProp, newProp, this);\n    }\n\n    if (actualObject.constraints !== undefined) {\n      this.updateThumbConstraints(this.selectedItems.connectors, this.selectedItems);\n      return updateSelector = true;\n    }\n\n    return updateSelector;\n  };\n  /* tslint:disable */\n\n  /**\n   * Updates the connectorPropertyChange of the diagram container \\\n   *\n   * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n   * @param {DiagramElement} actualObject - provide the actualObject value.\n   * @param {boolean} oldProp - provide the oldProp value.\n   * @param {boolean} newProp - provide the newProp value.\n   * @param {boolean} disableBridging - provide the disableBridging value.\n   * @param {boolean} propertyChange - provide the propertyChange value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.connectorPropertyChange = function (actualObject, oldProp, newProp, disableBridging, propertyChange) {\n    if (this.canEnableBlazorObject) {\n      var node = cloneObject(actualObject);\n      this.insertValue(node, false);\n    }\n\n    var existingBounds = actualObject.wrapper.bounds;\n    var updateSelector = false;\n    var points = [];\n    updateSelector = this.connectorProprtyChangeExtend(actualObject, oldProp, newProp, updateSelector);\n    var inPort;\n    var outPort;\n    var source;\n    var target;\n\n    if (newProp.visible !== undefined) {\n      this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n    }\n\n    if (newProp.sourcePoint !== undefined || newProp.targetPoint !== undefined || newProp.sourceID !== undefined || newProp.targetID !== undefined || newProp.targetPadding !== undefined || newProp.sourcePortID !== undefined || newProp.targetPortID !== undefined || newProp.sourcePadding !== undefined || newProp.type !== undefined || newProp.segments !== undefined || newProp.flip !== undefined) {\n      if (newProp.sourceID !== undefined && newProp.sourceID !== oldProp.sourceID || newProp.sourcePortID) {\n        var sourceNode = this.nameTable[actualObject.sourceID];\n        outPort = this.findInOutConnectPorts(sourceNode, false);\n\n        if (!sourceNode || canOutConnect(sourceNode) || actualObject.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          actualObject.sourceWrapper = sourceNode ? this.getEndNodeWrapper(sourceNode, actualObject, true) : undefined;\n\n          if (actualObject.sourcePortID && newProp.sourcePortID === undefined) {\n            actualObject.sourcePortWrapper = sourceNode ? this.getWrapper(sourceNode.wrapper, actualObject.sourcePortID) : undefined;\n          }\n\n          this.removePortEdges(this.nameTable[oldProp.sourceID] || sourceNode, oldProp.sourcePortID || actualObject.sourcePortID, actualObject.id, false);\n        }\n\n        if (newProp.sourceID !== undefined && oldProp.sourceID !== undefined && oldProp.sourceID !== '') {\n          var oldSource = this.nameTable[oldProp.sourceID];\n\n          if (oldSource !== undefined && oldSource.outEdges && oldSource.outEdges.indexOf(actualObject.id) !== -1) {\n            removeItem(oldSource.outEdges, actualObject.id);\n          }\n        }\n\n        this.updateEdges(actualObject);\n      }\n\n      if (newProp.targetID !== undefined && newProp.targetID !== oldProp.targetID) {\n        var targetNode = this.nameTable[newProp.targetID];\n        inPort = this.findInOutConnectPorts(targetNode, true);\n\n        if (!targetNode || canInConnect(targetNode) || actualObject.targetPortID !== '' && canPortInConnect(inPort)) {\n          actualObject.targetWrapper = targetNode ? this.getEndNodeWrapper(targetNode, actualObject, false) : undefined;\n\n          if (actualObject.targetPortID && newProp.targetPortID === undefined) {\n            actualObject.targetPortWrapper = targetNode ? this.getWrapper(targetNode.wrapper, actualObject.targetPortID) : undefined;\n          }\n\n          this.removePortEdges(this.nameTable[oldProp.targetID] || targetNode, oldProp.targetPortID || actualObject.targetPortID, actualObject.id, true);\n        }\n\n        if (oldProp !== undefined && oldProp.targetID !== undefined && oldProp.targetID !== '') {\n          var oldTarget = this.nameTable[oldProp.targetID];\n\n          if (oldTarget !== undefined && oldTarget.inEdges && oldTarget.inEdges.indexOf(actualObject.id) !== -1) {\n            removeItem(oldTarget.inEdges, actualObject.id);\n          }\n        }\n\n        this.updateEdges(actualObject);\n      }\n\n      if (newProp.sourcePortID !== undefined && newProp.sourcePortID !== oldProp.sourcePortID) {\n        if (actualObject.sourceID && this.nameTable[actualObject.sourceID]) {\n          source = this.nameTable[actualObject.sourceID].wrapper;\n        }\n\n        var sourceNode = this.nameTable[actualObject.sourceID];\n\n        if (!sourceNode || canOutConnect(sourceNode) || actualObject.sourcePortID !== '' && canPortOutConnect(outPort)) {\n          actualObject.sourcePortWrapper = source ? this.getWrapper(source, newProp.sourcePortID) : undefined;\n        } else if (actualObject.sourcePortID === '' && !canOutConnect(sourceNode)) {\n          actualObject.sourcePortWrapper = undefined;\n        }\n      }\n\n      if (newProp.targetPortID !== undefined && newProp.targetPortID !== oldProp.targetPortID) {\n        var targetNode = this.nameTable[actualObject.targetID];\n\n        if (actualObject.targetID && this.nameTable[actualObject.targetID]) {\n          target = this.nameTable[actualObject.targetID].wrapper;\n        }\n\n        if (!targetNode || canInConnect(targetNode) || actualObject.targetPortID !== '' && canPortInConnect(inPort)) {\n          actualObject.targetPortWrapper = target ? this.getWrapper(target, newProp.targetPortID) : undefined;\n        } else if (actualObject.targetPortID === '' && !canInConnect(targetNode)) {\n          actualObject.targetPortWrapper = undefined;\n        }\n      }\n\n      if (newProp.flip !== undefined) {\n        actualObject.flip = newProp.flip;\n        flipConnector(actualObject);\n      }\n\n      if (actualObject.type === 'Orthogonal' && this.lineRoutingModule && this.diagramActions && this.constraints & DiagramConstraints.LineRouting && !(this.diagramActions & DiagramAction.ToolAction)) {\n        this.lineRoutingModule.renderVirtualRegion(this, true);\n        this.lineRoutingModule.refreshConnectorSegments(this, actualObject, false);\n      }\n\n      points = this.getPoints(actualObject);\n    } //Add prop change for zindex, alignments and margin\n\n\n    if (newProp.style !== undefined) {\n      updateStyle(newProp.style, actualObject.wrapper.children[0]);\n    }\n\n    if (points.length > 0 || newProp.sourceDecorator !== undefined || newProp.targetDecorator !== undefined && canMeasureDecoratorPath(Object.keys(newProp.targetDecorator)) || newProp.cornerRadius !== undefined) {\n      updateConnector(actualObject, points.length > 0 ? points : actualObject.intermediatePoints, this.diagramActions);\n\n      if (newProp.type !== undefined) {\n        updateSelector = true;\n      }\n\n      if (points.length > 0) {\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize); // eslint-disable-next-line max-len\n\n        this.updateConnectorAnnotation(actualObject);\n        this.updateConnectorfixedUserHandles(actualObject);\n        this.updateObject(actualObject, oldProp, newProp);\n      } //work-around to update intersected connector bridging\n\n    }\n\n    if ((newProp.sourcePoint || newProp.targetPoint || newProp.segments) && this.diagramActions === DiagramAction.Render) {\n      updateSelector = true;\n    }\n\n    if (actualObject.shape.type === 'Bpmn' && actualObject.shape.sequence === 'Default') {\n      this.commandHandler.updatePathElementOffset(actualObject);\n    } // eslint-disable-next-line max-len\n\n\n    if (!disableBridging) {\n      this.updateBridging();\n    }\n\n    this.updateAnnotations(newProp, actualObject);\n    this.updatefixedUserHandle(newProp, actualObject);\n    actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n    actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n\n    if (existingBounds.equals(existingBounds, actualObject.wrapper.bounds) === false) {\n      this.updateQuad(actualObject);\n      this.updateGroupSize(actualObject);\n    }\n\n    if (updateSelector === true && this.checkSelectedItem(actualObject) && (!(this.diagramActions & DiagramAction.ToolAction) || this.diagramActions & DiagramAction.UndoRedo)) {\n      this.updateSelector();\n    }\n\n    if (!this.preventConnectorsUpdate) {\n      if (!canVitualize(this) || canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1) {\n        if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n          this.updateDiagramObject(actualObject, true);\n        } else {\n          this.updateDiagramObject(actualObject);\n        }\n      }\n    }\n\n    if (this.diagramActions && actualObject.status !== 'New') {\n      actualObject.status = 'Update';\n    }\n\n    this.triggerPropertyChange(propertyChange, actualObject, oldProp, newProp);\n  };\n  /* tslint:enable */\n\n  /**\n   * getDirection methods \\\n   *\n   * @returns { void }  getDirection methods .\\\n   * @param {NodeModel} node - provide the node value.\n   * @param {string} portId - provide the portId value.\n   * @param {string} item - provide the item value.\n   * @param {number} isInEdges - provide the isInEdges value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removePortEdges = function (node, portId, item, isInEdges) {\n    if (node) {\n      for (var i = 0; i < node.ports.length; i++) {\n        var port = node.ports[i];\n\n        if (port.id === portId) {\n          var portEdge = isInEdges ? port.inEdges : port.outEdges;\n          removeItem(portEdge, item);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.getpropertyChangeArgs = function (element, oldProp, newProp, args) {\n    args.element = {\n      connector: cloneBlazorObject(element)\n    };\n    args.oldValue = {\n      connector: cloneBlazorObject(oldProp)\n    };\n    args.newValue = {\n      connector: cloneBlazorObject(newProp)\n    };\n    return args;\n  };\n\n  Diagram.prototype.triggerPropertyChange = function (propertyChange, actualObject, oldProp, newProp) {\n    if (!propertyChange) {\n      var element = actualObject;\n      var args = {\n        element: cloneBlazorObject(element),\n        cause: this.diagramActions,\n        oldValue: cloneBlazorObject(oldProp),\n        newValue: cloneBlazorObject(newProp)\n      };\n\n      if (isBlazor()) {\n        args = this.getpropertyChangeArgs(element, oldProp, newProp, args);\n      }\n\n      this.triggerEvent(DiagramEvent.propertyChange, args);\n    }\n  };\n\n  Diagram.prototype.findInOutConnectPorts = function (node, isInconnect) {\n    var port = {};\n\n    if (node) {\n      port = getInOutConnectPorts(node, isInconnect);\n    }\n\n    return port;\n  };\n\n  Diagram.prototype.getPoints = function (actualObject, points) {\n    //let pts: PointModel[];\n    var lineDistributionModule = this.lineDistributionModule ? true : false;\n    var pts = actualObject.getConnectorPoints(actualObject.type, points, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ? this.layout.orientation : undefined, lineDistributionModule);\n    return pts;\n  };\n  /**\n   * update the  opacity  and visibility for the node  once the layout animation starts \\\n   *\n   * @returns { void }  update the  opacity  and visibility for the node  once the layout animation starts .\\\n   * @param {Container} element - provide the element value.\n   * @param {boolean} visible - provide the visible value.\n   * @param {number} opacity - provide the opacity value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodeProperty = function (element, visible, opacity) {\n    if (visible === undefined) {\n      this.updateElementVisibility(element, this.nameTable[element.id], visible);\n    } else {\n      element.style.opacity = opacity;\n\n      for (var i = 0; i < element.children.length; i++) {\n        if (element.children[i] instanceof Container) {\n          this.updateNodeProperty(element.children[i], undefined, opacity);\n        }\n\n        element.children[i].style.opacity = opacity;\n      }\n    }\n  };\n  /**\n   * checkSelected Item for Connector \\\n   *\n   * @returns { void }  checkSelected Item for Connector .\\\n   * @param {Connector | Node} actualObject - provide the element value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.checkSelectedItem = function (actualObject) {\n    var selectorModel = this.selectedItems;\n    var isSelected = false;\n    var selItems = [];\n    selItems = selItems.concat(selectorModel.nodes, selectorModel.connectors);\n\n    if (selItems.length > 0) {\n      if (actualObject.id === selItems[selItems.length - 1].id) {\n        isSelected = true;\n      }\n    }\n\n    return isSelected;\n  };\n  /**\n   * Updates the visibility of the diagram container \\\n   *\n   * @returns { void }     Updates the visibility of the diagram container .\\\n   * @param {DiagramElement} element - provide the element value.\n   * @param {boolean} visible - provide the target value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateDiagramContainerVisibility = function (element, visible) {\n    if (element instanceof Container) {\n      for (var i = 0; i < element.children.length; i++) {\n        this.updateDiagramContainerVisibility(element.children[i], visible);\n      }\n    }\n\n    element.visible = visible;\n  };\n  /**\n   * Updates the visibility of the node/connector \\\n   *\n   * @returns { void }  Updates the visibility of the node/connector .\\\n   * @param {Container} element - provide the element value.\n   * @param {Connector | Node} obj - provide the obj value.\n   * @param {boolean} visible - provide the visible value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateElementVisibility = function (element, obj, visible) {\n    if (visible !== undefined) {\n      element.visible = visible;\n\n      if (obj instanceof Node) {\n        //content\n        if (!obj.children) {\n          element.children[0].visible = visible;\n          this.updateDiagramContainerVisibility(element.children[0], visible);\n\n          if (obj.shape.type === 'Bpmn' && this.bpmnModule) {\n            this.bpmnModule.updateElementVisibility(obj, visible, this);\n          }\n        } else {\n          for (var _i = 0, _a = obj.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            this.updateElementVisibility(this.nameTable[child].wrapper, this.nameTable[child], visible);\n          }\n        } //ports\n\n\n        if (obj.ports) {\n          for (var _b = 0, _c = obj.ports; _b < _c.length; _b++) {\n            var port = _c[_b];\n\n            if (port.visibility & PortVisibility.Visible) {\n              var wrapper = this.getWrapper(element, port.id);\n              wrapper.visible = visible;\n            }\n          }\n        }\n\n        if (obj.annotations) {\n          for (var _d = 0, _e = obj.annotations; _d < _e.length; _d++) {\n            var annotation = _e[_d];\n            var wrapper = this.getWrapper(element, annotation.id);\n            wrapper.visible = visible;\n          }\n        }\n      } else {\n        //path and decorators\n        for (var i = 0; i < 3; i++) {\n          element.children[i].visible = visible;\n        }\n      }\n\n      if (obj.annotations) {\n        //annotations\n        for (var _f = 0, _g = obj.annotations; _f < _g.length; _f++) {\n          var annotation = _g[_f];\n          var wrapper = this.getWrapper(element, annotation.id);\n          wrapper.visible = visible;\n        }\n      }\n\n      if (obj.expandIcon || obj.collapseIcon) {\n        var wrapper = this.getWrapper(element, 'icon_content');\n\n        if (wrapper) {\n          for (var i = 0; i < wrapper.children.length; i++) {\n            wrapper.children[i].visible = visible;\n          }\n\n          wrapper.visible = visible;\n        }\n\n        if (obj && obj.visible && obj.outEdges) {\n          this.updateIconVisibility(obj, obj.outEdges.length === 0 ? false : true);\n        }\n      }\n\n      if (visible === false) {\n        this.unSelect(this.nameTable[element.id]);\n      }\n\n      if (obj instanceof Node && !this.preventNodesUpdate || obj instanceof Connector && !this.preventConnectorsUpdate) {\n        //Avoid calling updateDiagramObject method during rendering\n        if (this.diagramActions) {\n          this.updateDiagramObject(this.nameTable[element.id], undefined, true);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updateAnnotations = function (newProp, actualObject) {\n    if (newProp.annotations !== undefined) {\n      for (var _i = 0, _a = Object.keys(newProp.annotations); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var index = Number(key);\n        var changedObject = newProp.annotations[key];\n        var actualAnnotation = actualObject.annotations[index];\n        this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n      }\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandle = function (newProp, actualObject) {\n    if (newProp.fixedUserHandles !== undefined) {\n      var index = void 0;\n      var changedObject = void 0;\n      var actualAnnotation = void 0;\n\n      for (var _i = 0, _a = Object.keys(newProp.fixedUserHandles); _i < _a.length; _i++) {\n        var key = _a[_i];\n        index = Number(key);\n        changedObject = newProp.fixedUserHandles[key];\n        actualAnnotation = actualObject.fixedUserHandles[index];\n        this.updateConnectorfixedUserHandle(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n      }\n    }\n  };\n  /**\n   * updateConnectorfixedUserHandle method \\\n   *\n   * @returns { void }  updateConnectorfixedUserHandle method .\\\n   * @param {ConnectorFixedUserHandleModel} changedObject - provide the changedObject value.\n   * @param {ConnectorFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n   * @param {Container} nodes - provide the nodes value.\n   * @param {Object} actualObject - provide the actualObject value.\n   * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateConnectorfixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject, canUpdateSize) {\n    var isMeasure = false;\n    var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n\n    if (fixedUserHandleWrapper !== undefined) {\n      if (changedObject.width !== undefined) {\n        fixedUserHandleWrapper.width = changedObject.width;\n        isMeasure = true;\n      }\n\n      if (changedObject.height !== undefined) {\n        fixedUserHandleWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (actualfixedUserHandle instanceof ConnectorFixedUserHandle && changedObject.offset !== undefined) {\n        actualObject.updateAnnotation(actualfixedUserHandle, actualObject.intermediatePoints, actualObject.wrapper.bounds, fixedUserHandleWrapper);\n      }\n\n      if (actualfixedUserHandle instanceof ConnectorFixedUserHandle && changedObject.displacement) {\n        if (changedObject.displacement.x !== undefined || changedObject.displacement.y !== undefined) {\n          isMeasure = true;\n        }\n      }\n\n      if (changedObject.fill !== undefined) {\n        fixedUserHandleWrapper.style.fill = changedObject.fill;\n      }\n\n      if (changedObject.handleStrokeColor !== undefined) {\n        fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n      }\n\n      if (changedObject.handleStrokeWidth !== undefined) {\n        fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        fixedUserHandleWrapper.visible = changedObject.visibility;\n      }\n\n      if (changedObject.cornerRadius !== undefined) {\n        fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n      }\n\n      this.updatefixedUserHandleContent(changedObject, isMeasure, fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n\n      if (isMeasure === true) {\n        fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n        fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n      }\n    }\n  };\n  /**\n   * updateAnnotation method \\\n   *\n   * @returns { void }  updateAnnotation method .\\\n   * @param {AnnotationModel} changedObject - provide the changedObject value.\n   * @param {ShapeAnnotationModel} actualAnnotation - provide the actualAnnotation value.\n   * @param {Container} nodes - provide the nodes value.\n   * @param {Object} actualObject - provide the actualObject value.\n   * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateAnnotation = function (changedObject, actualAnnotation, nodes, actualObject, canUpdateSize) {\n    var isMeasure = false; // eslint-disable-next-line max-len\n\n    var annotationWrapper = this.getWrapper(nodes, actualAnnotation.id);\n\n    if (annotationWrapper !== undefined) {\n      if (changedObject.width !== undefined && changedObject.height !== undefined) {\n        annotationWrapper.width = changedObject.width;\n        annotationWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (changedObject.rotateAngle !== undefined) {\n        annotationWrapper.rotateAngle = changedObject.rotateAngle;\n      }\n\n      if (canUpdateSize && !(annotationWrapper instanceof DiagramHtmlElement)) {\n        annotationWrapper.refreshTextElement();\n      }\n\n      if (actualAnnotation instanceof PathAnnotation && changedObject.segmentAngle !== undefined) {\n        annotationWrapper.rotateAngle = actualAnnotation.rotateAngle;\n      }\n\n      if (actualAnnotation instanceof ShapeAnnotation && changedObject.offset !== undefined) {\n        var offset = changedObject.offset;\n        isMeasure = true;\n        var offsetX = offset.x !== undefined ? offset.x : actualAnnotation.offset.x;\n        var offsetY = offset.y !== undefined ? offset.y : actualAnnotation.offset.y;\n        annotationWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        annotationWrapper.relativeMode = 'Point';\n      } else if (actualAnnotation instanceof PathAnnotation && (changedObject.offset !== undefined || changedObject.segmentAngle !== undefined)) {\n        actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n      }\n\n      if (actualAnnotation instanceof PathAnnotation && changedObject.displacement) {\n        if (changedObject.displacement.x !== undefined || changedObject.displacement.y !== undefined) {\n          isMeasure = true;\n        }\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          annotationWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          annotationWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          annotationWrapper.margin.left = changedObject.margin.left;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          annotationWrapper.margin.right = changedObject.margin.right;\n        }\n      }\n\n      if (isMeasure || canUpdateSize) {\n        annotationWrapper.width = actualAnnotation.width || actualObject.width;\n\n        if (actualAnnotation.template) {\n          annotationWrapper.width = annotationWrapper.width || annotationWrapper.actualSize.width;\n          annotationWrapper.height = actualAnnotation.height || actualObject.height || annotationWrapper.actualSize.height;\n        }\n      }\n\n      if (changedObject.horizontalAlignment !== undefined) {\n        annotationWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n        isMeasure = true;\n      }\n\n      if (changedObject.verticalAlignment !== undefined) {\n        annotationWrapper.verticalAlignment = changedObject.verticalAlignment;\n        isMeasure = true;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        annotationWrapper.visible = nodes.visible && changedObject.visibility ? true : false;\n      }\n\n      if (changedObject.constraints !== undefined) {\n        var updateSelector = false;\n\n        if (annotationWrapper.constraints & AnnotationConstraints.Select && !(changedObject.constraints & AnnotationConstraints.Select) && isSelected(this, actualObject, false, annotationWrapper)) {//updateSelector = true;\n        }\n\n        annotationWrapper.constraints = changedObject.constraints;\n\n        if (updateSelector) {\n          this.clearSelection();\n        }\n      }\n\n      if (changedObject.style !== undefined) {\n        updateStyle(changedObject.style, annotationWrapper);\n      }\n\n      if (changedObject.hyperlink !== undefined) {\n        updateHyperlink(changedObject.hyperlink, annotationWrapper, actualAnnotation);\n      }\n\n      this.updateAnnotationContent(changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes);\n\n      if (isMeasure === true) {\n        annotationWrapper.measure(new Size(annotationWrapper.width, annotationWrapper.height));\n        annotationWrapper.arrange(annotationWrapper.desiredSize);\n      }\n\n      if (!(annotationWrapper instanceof DiagramHtmlElement)) {\n        annotationWrapper.refreshTextElement();\n      } // this.refresh(); this.refreshDiagramLayer();\n\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandleContent = function (changedObject, isMeasure, fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes) {\n    if (changedObject !== undefined) {\n      this.updateConnectorfixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes);\n    }\n  };\n\n  Diagram.prototype.updateConnectorfixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n      removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Connector) {\n      var canvas = actualObject.wrapper;\n      var segment = canvas.children[0];\n      var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n      fixedUserHandleWrapper = actualObject.getfixedUserHandle(actualObject.fixedUserHandles[actualObject.fixedUserHandles.length - 1], actualObject.intermediatePoints, bounds);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, fixedUserHandleWrapper);\n      }\n    }\n  };\n\n  Diagram.prototype.updateAnnotationContent = function (changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes) {\n    if (changedObject.content !== undefined) {\n      if (annotationWrapper) {\n        isMeasure = true;\n\n        if (actualObject.shape.type === 'UmlActivity' && (isBlazor() && actualObject.shape.umlActivityShape === 'StructuredNode' || !isBlazor() && actualObject.shape.shape === 'StructuredNode')) {\n          annotationWrapper.content = '<<' + changedObject.content + '>>';\n        } else {\n          annotationWrapper.content = changedObject.content;\n        }\n      }\n\n      if (annotationWrapper instanceof DiagramHtmlElement) {\n        this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n      }\n    }\n\n    if (changedObject.template !== undefined) {\n      annotationWrapper.content = changedObject.template;\n      this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n    }\n  };\n\n  Diagram.prototype.updateAnnotationWrapper = function (annotationWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(annotationWrapper.id + '_groupElement', elementId);\n      removeElement(annotationWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Node) {\n      annotationWrapper = actualObject.initAnnotationWrapper(actualAnnotation, this.element.id);\n    } else if (actualObject instanceof Connector) {\n      var canvas = actualObject.wrapper;\n      var segment = canvas.children[0];\n      var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n      annotationWrapper = actualObject.getAnnotationElement(actualObject.annotations[actualObject.annotations.length - 1], actualObject.intermediatePoints, bounds, this.getDescription, this.element.id);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (annotationWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, annotationWrapper);\n      }\n    }\n  };\n  /**\n   * updateNodefixedUserHandle method \\\n   *\n   * @returns { void }  updateNodefixedUserHandle method .\\\n   * @param {NodeFixedUserHandleModel} changedObject - provide the changedObject value.\n   * @param {NodeFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n   * @param {Container} nodes - provide the changedObject value.\n   * @param {Object} actualObject - provide the changedObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateNodefixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject) {\n    //let fixedUserHandleWrapper: Canvas;\n    var isMeasure = false;\n    var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n\n    if (fixedUserHandleWrapper !== undefined) {\n      if (changedObject.width !== undefined) {\n        fixedUserHandleWrapper.actualSize.width = changedObject.width;\n        isMeasure = true;\n      }\n\n      if (changedObject.height !== undefined) {\n        fixedUserHandleWrapper.height = changedObject.height;\n        isMeasure = true;\n      }\n\n      if (actualfixedUserHandle instanceof NodeFixedUserHandle && changedObject.offset !== undefined) {\n        var offset = changedObject.offset;\n        isMeasure = true;\n        var offsetX = offset.x !== undefined ? offset.x : actualfixedUserHandle.offset.x;\n        var offsetY = offset.y !== undefined ? offset.y : actualfixedUserHandle.offset.y;\n        fixedUserHandleWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        fixedUserHandleWrapper.relativeMode = 'Point';\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          fixedUserHandleWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          fixedUserHandleWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          fixedUserHandleWrapper.margin.left = changedObject.margin.left;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          fixedUserHandleWrapper.margin.right = changedObject.margin.right;\n        }\n      }\n\n      if (changedObject.visibility !== undefined) {\n        fixedUserHandleWrapper.visible = changedObject.visibility;\n      }\n\n      if (changedObject.fill !== undefined) {\n        fixedUserHandleWrapper.style.fill = changedObject.fill;\n      }\n\n      if (changedObject.handleStrokeColor !== undefined) {\n        fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n      }\n\n      if (changedObject.handleStrokeWidth !== undefined) {\n        fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n      }\n\n      if (changedObject.cornerRadius !== undefined) {\n        fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n      }\n\n      this.updatefixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n\n      if (isMeasure === true) {\n        fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n        fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n      }\n    }\n  };\n\n  Diagram.prototype.updatefixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var elementId = _a[_i];\n      removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n      removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n    }\n\n    if (actualObject instanceof Node) {\n      fixedUserHandleWrapper = actualObject.initfixedUserHandles(actualAnnotation);\n    }\n\n    for (var i = 0; i < nodes.children.length; i++) {\n      if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n        nodes.children.splice(i, 1, fixedUserHandleWrapper);\n      }\n    }\n  };\n  /**\n   * updatePort method \\\n   *\n   * @returns { void }  updatePort method .\\\n   * @param {PointPortModel} changedObject - provide the changedObject value.\n   * @param {PointPortModel} actualPort - provide the changedObject value.\n   * @param {Container} nodes - provide the changedObject value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updatePort = function (changedObject, actualPort, nodes) {\n    var isMeasure = false;\n    var portWrapper = this.getWrapper(nodes, actualPort.id);\n\n    if (portWrapper !== undefined) {\n      if (changedObject.offset !== undefined) {\n        isMeasure = true;\n        var offsetX = changedObject.offset.x !== undefined ? changedObject.offset.x : actualPort.offset.x;\n        var offsetY = changedObject.offset.y !== undefined ? changedObject.offset.y : actualPort.offset.y;\n        portWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n        portWrapper.relativeMode = 'Point';\n      }\n\n      if (changedObject.width !== undefined) {\n        isMeasure = true;\n        portWrapper.width = changedObject.width;\n      }\n\n      if (changedObject.height !== undefined) {\n        isMeasure = true;\n        portWrapper.height = changedObject.height;\n      }\n\n      if (changedObject.visibility !== undefined) {\n        portWrapper.visible = nodes.visible && checkPortRestriction(actualPort, PortVisibility.Visible) ? true : false;\n      }\n\n      if (changedObject.margin !== undefined) {\n        isMeasure = true;\n\n        if (changedObject.margin.bottom !== undefined) {\n          portWrapper.margin.bottom = changedObject.margin.bottom;\n        }\n\n        if (changedObject.margin.top !== undefined) {\n          portWrapper.margin.top = changedObject.margin.top;\n        }\n\n        if (changedObject.margin.right !== undefined) {\n          portWrapper.margin.right = changedObject.margin.right;\n        }\n\n        if (changedObject.margin.left !== undefined) {\n          portWrapper.margin.left = changedObject.margin.left;\n        }\n      }\n\n      if (changedObject.horizontalAlignment !== undefined) {\n        isMeasure = true;\n        portWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n      }\n\n      if (changedObject.verticalAlignment !== undefined) {\n        isMeasure = true;\n        portWrapper.verticalAlignment = changedObject.verticalAlignment;\n      }\n\n      if (changedObject.style !== undefined) {\n        if (changedObject.style.fill !== undefined) {\n          portWrapper.style.fill = changedObject.style.fill;\n        }\n\n        if (changedObject.style.opacity !== undefined) {\n          portWrapper.style.opacity = changedObject.style.opacity;\n        }\n\n        if (changedObject.style.strokeColor !== undefined) {\n          portWrapper.style.strokeColor = changedObject.style.strokeColor;\n        }\n\n        if (changedObject.style.strokeWidth !== undefined) {\n          portWrapper.style.strokeWidth = changedObject.style.strokeWidth;\n        }\n\n        if (changedObject.style.strokeDashArray !== undefined) {\n          portWrapper.style.strokeDashArray = changedObject.style.strokeDashArray;\n        }\n      }\n\n      if (changedObject.shape !== undefined) {\n        if (portWrapper) {\n          var pathdata = getPortShape(changedObject.shape);\n          portWrapper.data = pathdata;\n          portWrapper.canMeasurePath = true;\n        }\n      }\n\n      if (changedObject.pathData !== undefined) {\n        portWrapper.data = String(changedObject.pathData);\n        isMeasure = true;\n      }\n\n      if (isMeasure === true) {\n        portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n        portWrapper.arrange(portWrapper.desiredSize);\n      } //this.refresh(); this.refreshDiagramLayer();\n\n    }\n  };\n  /**\n   * updateIcon method \\\n   *\n   * @returns { void }  updateIcon method .\\\n   * @param {Node} actualObject - provide the obj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateIcon = function (actualObject) {\n    var iconContainer = this.getWrapper(actualObject.wrapper, 'icon_content');\n    var diagramId = this.diagramActions & DiagramAction.Render ? this.element.id : undefined;\n\n    if (iconContainer) {\n      if (this.mode === 'SVG') {\n        var icon = getDiagramElement(actualObject.wrapper.id + '_icon_content', diagramId);\n\n        if (icon) {\n          var iconRect = getDiagramElement(icon.id + '_rect', diagramId);\n          var iconShape = getDiagramElement(icon.id + '_shape', diagramId);\n          var nativeContent = getDiagramElement(iconShape.id + '_native_element', diagramId);\n\n          if (nativeContent) {\n            nativeContent.parentNode.removeChild(nativeContent);\n          }\n\n          iconShape.parentNode.removeChild(iconShape);\n          iconRect.parentNode.removeChild(iconRect);\n          icon.parentNode.removeChild(icon);\n        }\n      }\n\n      var index = actualObject.wrapper.children.indexOf(iconContainer);\n      actualObject.wrapper.children.splice(index, 1);\n    }\n\n    var portContainer = this.getPortContainer(actualObject);\n    actualObject.initIcons(this.getDescription, this.layout, portContainer, this.element.id);\n  };\n\n  Diagram.prototype.getPortContainer = function (actualObject) {\n    if (actualObject.children) {\n      for (var i = 0; i < actualObject.wrapper.children.length; i++) {\n        if (actualObject.wrapper.children[i].id === actualObject.id + 'group_container') {\n          return actualObject.wrapper.children[i];\n        }\n      }\n    }\n\n    return actualObject.wrapper;\n  };\n\n  Diagram.prototype.updateTooltip = function (actualObject, node) {\n    if (node.tooltip.content !== undefined) {\n      actualObject.tooltip.content = node.tooltip.content;\n    }\n\n    if (node.tooltip.position !== undefined) {\n      actualObject.tooltip.position = node.tooltip.position;\n    }\n\n    if (node.tooltip.height !== undefined) {\n      actualObject.tooltip.height = node.tooltip.height;\n    }\n\n    if (node.tooltip.width !== undefined) {\n      actualObject.tooltip.width = node.tooltip.width;\n    }\n\n    if (node.tooltip.showTipPointer !== undefined) {\n      actualObject.tooltip.showTipPointer = node.tooltip.showTipPointer;\n    }\n\n    if (node.tooltip.relativeMode !== undefined) {\n      actualObject.tooltip.relativeMode = node.tooltip.relativeMode;\n    }\n  };\n  /**\n   * updateQuad method \\\n   *\n   * @returns { void }  updateQuad method .\\\n   * @param {IElement} obj - provide the obj value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateQuad = function (obj) {\n    var modified = this.spatialSearch.updateQuad(obj.wrapper);\n\n    if (modified && !this.preventDiagramUpdate) {\n      this.updatePage();\n    }\n  };\n  /**\n   * removeFromAQuad method \\\n   *\n   * @returns { void }  removeFromAQuad method .\\\n   * @param {IElement} obj - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.removeFromAQuad = function (obj) {\n    if (obj.children) {\n      var child = void 0;\n      var children = obj.children;\n\n      for (var i = 0; i < children.length; i++) {\n        child = this.nameTable[children[i]];\n\n        if (child) {\n          this.removeFromAQuad(child);\n        }\n      }\n    }\n\n    this.spatialSearch.removeFromAQuad(obj.wrapper);\n    var modified = this.spatialSearch.updateBounds(obj.wrapper);\n\n    if (modified && !this.preventDiagramUpdate) {\n      this.updatePage();\n    }\n  };\n  /**\n   * updateGroupSize method \\\n   *\n   * @returns { void }  updateGroupSize method .\\\n   * @param {NodeModel | ConnectorModel} node - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateGroupSize = function (node) {\n    var tempNode;\n\n    if (node.parentId) {\n      tempNode = this.nameTable[node.parentId];\n\n      if (tempNode) {\n        if (tempNode.parentId) {\n          this.updateGroupSize(tempNode);\n        } else {\n          tempNode.wrapper.measure(new Size());\n          tempNode.wrapper.arrange(tempNode.wrapper.desiredSize);\n          this.updateGroupOffset(tempNode);\n          this.updateDiagramObject(tempNode);\n        }\n      }\n    }\n  };\n\n  Diagram.prototype.updatePage = function () {\n    if (this.diagramActions & DiagramAction.Render && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n      this.scroller.updateScrollOffsets();\n      this.scroller.setSize(); //updating overview\n\n      for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n        var temp = _a[_i];\n        var view = this.views[temp];\n\n        if (!(view instanceof Diagram)) {\n          view.updateView(view);\n        }\n      }\n    }\n\n    if (this.diagramActions & DiagramAction.DragUsingMouse) {\n      this.renderPageBreaks();\n    }\n  };\n  /**\n   * protectPropertyChange method \\\n   *\n   * @returns { void }  protectPropertyChange method .\\\n   * @param {boolean} enable - provide the enable value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.protectPropertyChange = function (enable) {\n    this.isProtectedOnChange = enable;\n  };\n  /**\n   * getProtectPropertyChangeValue method \\\n   *\n   * @returns { boolean }  getProtectPropertyChangeValue method .\\\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.getProtectPropertyChangeValue = function () {\n    return this.isProtectedOnChange;\n  };\n  /**\n   * enableServerDataBinding method \\\n   *\n   * @returns { void }  enableServerDataBinding method .\\\n   * @param {boolean} enable - provide the node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.enableServerDataBinding = function (enable) {\n    if (isBlazor()) {\n      this.allowServerDataBinding = enable;\n\n      if (enable) {\n        this.bulkChanges = {};\n      }\n    }\n  };\n  /**\n   * updateShadow method \\\n   *\n   * @returns { void }  updateShadow method .\\\n   * @param {ShadowModel} nodeShadow - provide the node value.\n   * @param {ShadowModel} changedShadow - provide the Node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateShadow = function (nodeShadow, changedShadow) {\n    if (changedShadow.angle !== undefined) {\n      nodeShadow.angle = changedShadow.angle;\n    }\n\n    if (changedShadow.color !== undefined) {\n      nodeShadow.color = changedShadow.color;\n    }\n\n    if (changedShadow.distance !== undefined) {\n      nodeShadow.distance = changedShadow.distance;\n    }\n\n    if (changedShadow.opacity !== undefined) {\n      nodeShadow.opacity = changedShadow.opacity;\n    }\n  };\n  /**\n   * updateMargin method \\\n   *\n   * @returns { void }  updateMargin method .\\\n   * @param {Node} node - provide the node value.\n   * @param {Node} changes - provide the Node value.\n   *\n   * @private\n   */\n\n\n  Diagram.prototype.updateMargin = function (node, changes) {\n    if (changes.margin.top !== undefined) {\n      node.margin.top = changes.margin.top;\n    }\n\n    if (changes.margin.bottom !== undefined) {\n      node.margin.bottom = changes.margin.bottom;\n    }\n\n    if (changes.margin.left !== undefined) {\n      node.margin.left = changes.margin.left;\n    }\n\n    if (changes.margin.right !== undefined) {\n      node.margin.right = changes.margin.right;\n    }\n  };\n\n  Diagram.prototype.removePreviewChildren = function (preview) {\n    if (preview.children && preview.children.length && preview.shape && preview.shape.type === 'SwimLane') {\n      for (var z = 0; z < preview.children.length; z++) {\n        var previewChildId = preview.children[z];\n        var previewIndex_1 = this.nodes.indexOf(this.nameTable[previewChildId]);\n\n        if (previewIndex_1 >= 0) {\n          this.nodes.splice(previewIndex_1, 1);\n        }\n\n        delete this.nameTable[previewChildId];\n      }\n\n      var previewIndex = this.nodes.indexOf(this.nameTable[this.currentSymbol.id]);\n\n      if (previewIndex >= 0) {\n        this.nodes.splice(previewIndex, 1);\n      }\n    }\n  }; //property changes - end region\n\n  /* tslint:disable */\n\n\n  Diagram.prototype.initDroppables = function () {\n    var _this = this; // initiates droppable event\n\n\n    var childTable = {};\n    var entryTable = {};\n    var header;\n    var lane;\n    this.droppable = new Droppable(this.element); // this.droppable.accept = '.e-dragclone';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.droppable.over = function (args) {\n      if (!_this.currentSymbol) {\n        var dragDataHelper = null;\n\n        if (!args.dragData && args.name === 'drag') {\n          var helper = document.getElementsByClassName('e-dragclone')[0];\n\n          if (helper) {\n            dragDataHelper = helper;\n          }\n        }\n\n        if (args.dragData || dragDataHelper) {\n          var newObj = void 0;\n          var isHorizontal = void 0;\n          document.getElementById(_this.element.id + 'content').focus();\n\n          var position = _this.eventHandler.getMousePosition(args.event);\n\n          var clonedObject = void 0;\n          var selectedSymbol = dragDataHelper || args.dragData.helper;\n          var paletteId = selectedSymbol.getAttribute('paletteId');\n          var nodeDragSize = void 0;\n          var nodePreviewSize = void 0;\n          var paletteDragSize = void 0;\n          var preview = void 0;\n\n          if (paletteId) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var sourceElement = document.getElementById(paletteId).ej2_instances[0];\n            var source = 'sourceElement';\n            _this.droppable[source] = sourceElement;\n            var selectedSymbols = 'selectedSymbols';\n            var childtable = 'childTable';\n\n            if (sourceElement) {\n              var obj = sourceElement[selectedSymbols];\n              _this.allowServerDataBinding = false;\n              clonedObject = cloneObject(sourceElement[selectedSymbols]);\n              childTable = sourceElement[childtable];\n              var wrapper = obj.wrapper.children[0].children[0];\n              preview = getPreviewSize(sourceElement, clonedObject, wrapper);\n\n              if (sourceElement[selectedSymbols] instanceof Node) {\n                if (obj.shape.shape === 'TextAnnotation') {\n                  // eslint-disable-next-line max-len\n                  clonedObject.offsetX = position.x + 11 + preview.width * clonedObject.pivot.x; // eslint-disable-next-line max-len\n\n                  clonedObject.offsetY = position.y + 11 + preview.height * clonedObject.pivot.y;\n                } else {\n                  // eslint-disable-next-line max-len\n                  clonedObject.offsetX = position.x + 5 + preview.width * clonedObject.pivot.x; // eslint-disable-next-line max-len\n\n                  clonedObject.offsetY = position.y + preview.height * clonedObject.pivot.y;\n                }\n\n                var newNode = new Node(_this, 'nodes', clonedObject, true);\n\n                if (newNode.shape.type === 'Bpmn' && newNode.shape.activity.subProcess.processes && newNode.shape.activity.subProcess.processes.length) {\n                  newNode.shape.activity.subProcess.processes = [];\n                }\n\n                nodeDragSize = newNode.dragSize;\n                nodePreviewSize = newNode.previewSize;\n                paletteDragSize = sourceElement['symbolDragSize'];\n                var palettePreview = sourceElement['symbolPreview']; // eslint-disable-next-line max-len\n\n                newNode.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || palettePreview.width || newNode.width; // eslint-disable-next-line max-len\n\n                newNode.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || palettePreview.height || newNode.height;\n\n                if (newNode.shape.type === 'SwimLane') {\n                  _this.diagramActions |= DiagramAction.PreventHistory;\n\n                  if (newNode.shape.isLane) {\n                    newNode.children = [];\n                    header = {\n                      id: 'header' + randomId()\n                    };\n\n                    if (newNode.shape.orientation === 'Horizontal') {\n                      header.width = newNode.shape.lanes[0].header.width;\n                      header.height = newNode.shape.lanes[0].height;\n                    } else {\n                      header.width = newNode.shape.lanes[0].width;\n                      header.height = newNode.shape.lanes[0].header.height;\n                    }\n\n                    header.style = newNode.shape.lanes[0].header.style;\n                    header.offsetX = position.x + 5 + header.width / 2;\n                    header.offsetY = position.y + header.height / 2;\n                    _this.diagramActions |= DiagramAction.PreventCollectionChangeOnDragOver;\n                    header = _this.add(header);\n                    lane = {\n                      id: 'body' + randomId()\n                    };\n\n                    if (newNode.shape.orientation === 'Horizontal') {\n                      lane.width = newNode.shape.lanes[0].width - header.width;\n                      lane.height = newNode.shape.lanes[0].height; // eslint-disable-next-line max-len\n\n                      lane.offsetX = position.x + 5 + (newNode.shape.lanes[0].header.width + lane.width / 2);\n                      lane.offsetY = position.y + lane.height / 2;\n                    } else {\n                      lane.width = newNode.shape.lanes[0].width;\n                      lane.height = newNode.shape.lanes[0].height - header.height;\n                      lane.offsetX = position.x + 5 + lane.width / 2; // eslint-disable-next-line max-len\n\n                      lane.offsetY = position.y + (newNode.shape.lanes[0].header.height + lane.height / 2);\n                    }\n\n                    lane.style = newNode.shape.lanes[0].style;\n                    lane = _this.add(lane);\n                    var group = {\n                      id: 'group' + randomId(),\n                      children: [header.id, lane.id]\n                    };\n                    group.shape = newNode.shape;\n                    group.width = newNode.shape.lanes[0].width;\n                    group.height = newNode.shape.lanes[0].height;\n                    group.previewSize = newNode.previewSize;\n                    group.dragSize = newNode.dragSize;\n                    group.addInfo = newNode.addInfo;\n                    newNode = _this.add(group);\n                    _this.diagramActions &= ~DiagramAction.PreventCollectionChangeOnDragOver;\n                  }\n\n                  _this.diagramActions &= ~DiagramAction.PreventHistory;\n                }\n\n                if (newNode.shape.isPhase) {\n                  isHorizontal = newNode.shape.orientation === 'Horizontal' ? true : false;\n\n                  if (isHorizontal) {\n                    newNode.offsetX = position.x + 5 + (newNode.width || wrapper.actualSize.width) / 2;\n                    newNode.offsetY = position.y;\n                    newNode.shape.data = 'M' + 20 + ',' + newNode.height / 2 + ' L' + (newNode.width - 20) + ',' + newNode.height / 2 + 'z';\n                    newNode.height = 1;\n                  } else {\n                    newNode.offsetX = position.x + 5;\n                    newNode.offsetY = position.y + (newNode.height || wrapper.actualSize.height) / 2;\n                    newNode.shape.data = 'M' + newNode.width / 2 + ',' + 20 + ' L' + newNode.width / 2 + ',' + (newNode.height - 20) + 'z';\n                    newNode.width = 1;\n                  }\n                }\n\n                newObj = newNode;\n\n                if (clonedObject.children) {\n                  var parentNode = clonedObject;\n                  var tempTable = {};\n                  entryTable = _this.getChildren(parentNode, tempTable, childTable);\n                  arrangeChild(parentNode, -parentNode.offsetX, -parentNode.offsetY, entryTable, true, _this);\n                }\n              } else if (sourceElement[selectedSymbols] instanceof Connector) {\n                newObj = new Connector(_this, 'connectors', clonedObject, true);\n                var bounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n                var tx = position.x - bounds.left;\n                var ty = position.y - bounds.top;\n                newObj.sourcePoint.x += tx;\n                newObj.sourcePoint.y += ty;\n                newObj.targetPoint.x += tx;\n                newObj.targetPoint.y += ty;\n              }\n\n              if (!newObj.shape.isLane) {\n                newObj.id += randomId();\n              }\n\n              var arg = {\n                source: sourceElement,\n                element: newObj,\n                cancel: false,\n                diagram: _this\n              };\n\n              if (isBlazor()) {\n                arg = _this.getBlazorDragEventArgs(arg);\n              }\n\n              _this['enterObject'] = newObj;\n              _this['enterTable'] = entryTable;\n\n              _this.triggerEvent(DiagramEvent.dragEnter, arg);\n\n              if (newObj instanceof Node && newObj.shape.type === 'SwimLane' && newObj.shape.isLane) {\n                var swimLaneObj = arg.element;\n                var laneObj = swimLaneObj.shape.lanes[0]; //let child1: NodeModel; let child2: NodeModel;\n\n                isHorizontal = swimLaneObj.shape.orientation === 'Horizontal' ? true : false;\n                var child1 = _this.nameTable[newObj.children[0]];\n                var child2 = _this.nameTable[newObj.children[1]];\n                nodeDragSize = newObj.dragSize;\n                nodePreviewSize = newObj.previewSize;\n                paletteDragSize = sourceElement['symbolDragSize'];\n                laneObj.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || laneObj.width;\n                laneObj.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || laneObj.height;\n\n                if (isHorizontal) {\n                  header.width = laneObj.header.width;\n                  header.height = laneObj.height;\n                  lane.width = laneObj.width - header.width;\n                  lane.height = laneObj.height;\n                  lane.offsetX = position.x + 5 + (laneObj.header.width + child2.width / 2);\n                  lane.offsetY = position.y + child2.height / 2;\n                } else {\n                  header.width = laneObj.width;\n                  header.height = laneObj.header.height;\n                  lane.width = laneObj.width;\n                  lane.height = laneObj.height - header.height;\n                  lane.offsetX = position.x + 5 + child2.width / 2;\n                  lane.offsetY = position.y + (laneObj.header.height + child2.height / 2);\n                }\n\n                header.offsetX = position.x + 5 + child1.width / 2;\n                header.offsetY = position.y + child1.height / 2;\n                newObj.width = laneObj.width;\n                newObj.height = laneObj.height;\n              }\n\n              if (newObj instanceof Node && newObj.shape.isPhase) {\n                if (isHorizontal) {\n                  newObj.height = 1;\n                } else {\n                  newObj.width = 1;\n                }\n              }\n\n              if (!_this.activeLayer.lock && !arg.cancel) {\n                _this.preventDiagramUpdate = true;\n\n                if (newObj.children) {\n                  _this.findChild(newObj, entryTable);\n                }\n\n                _this.preventDiagramUpdate = true;\n\n                if (newObj.zIndex !== -1) {\n                  newObj.zIndex = -1;\n                }\n\n                _this.initObject(newObj, undefined, undefined, true);\n\n                _this.currentSymbol = newObj;\n\n                if (_this.mode !== 'SVG') {\n                  _this.refreshDiagramLayer();\n                }\n\n                _this.commandHandler.oldSelectedObjects = cloneSelectedObjects(_this);\n\n                _this.commandHandler.select(newObj);\n\n                _this.commandHandler.updateBlazorSelector();\n\n                _this.eventHandler.mouseDown(args.event);\n\n                _this.eventHandler.mouseMove(args.event, args);\n\n                _this.preventDiagramUpdate = false;\n\n                _this.updatePage();\n\n                selectedSymbol.style.opacity = '0';\n              }\n\n              delete _this['enterObject'];\n              delete _this['enterTable'];\n            }\n\n            _this.droppable[selectedSymbols] = selectedSymbol;\n            _this.allowServerDataBinding = true;\n          }\n        }\n      } else {\n        if (args.event.touches && args.event.touches.length) {\n          _this.eventHandler.mouseMove(args.event, args.event.touches);\n        }\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    this.droppable.drop = function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var source, value, isPhase, orientation_2, isConnector, arg, id, clonedObject, nodeId, newObj, arg, clonedObject, id, selectedSymbols, draggableElement, i;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              this.allowServerDataBinding = false;\n              source = 'sourceElement';\n              if (!this.currentSymbol) return [3\n              /*break*/\n              , 4];\n              isPhase = false;\n              isConnector = this.currentSymbol instanceof Connector ? true : false;\n\n              if (args.event.touches) {\n                this.eventHandler.mouseUp(args.event);\n              }\n\n              arg = void 0;\n              arg = {\n                source: this.droppable[source],\n                element: this.currentSymbol,\n                target: this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this,\n                cancel: false,\n                position: {\n                  x: this.currentSymbol.wrapper.offsetX,\n                  y: this.currentSymbol.wrapper.offsetY\n                }\n              };\n              if (!isBlazor()) return [3\n              /*break*/\n              , 2];\n              arg = {\n                source: cloneBlazorObject(this.droppable[source]),\n                // eslint-disable-next-line max-len\n                element: getObjectType(this.currentSymbol) === Connector ? {\n                  connector: cloneBlazorObject(this.currentSymbol)\n                } : {\n                  node: cloneBlazorObject(this.currentSymbol)\n                },\n                cancel: false,\n                target: {},\n                position: {\n                  x: this.currentSymbol.wrapper.offsetX,\n                  y: this.currentSymbol.wrapper.offsetY\n                }\n              }; // eslint-disable-next-line max-len\n\n              this.getDropEventArgs(arg);\n              return [4\n              /*yield*/\n              , this.triggerEvent(DiagramEvent.drop, arg)];\n\n            case 1:\n              arg = _a.sent() || arg;\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              this.triggerEvent(DiagramEvent.drop, arg);\n              _a.label = 3;\n\n            case 3:\n              id = 'id';\n              clonedObject = cloneObject(this.currentSymbol);\n              clonedObject['hasTarget'] = this.currentSymbol['hasTarget'];\n              this.removeFromAQuad(this.currentSymbol);\n              this.removeObjectsFromLayer(this.nameTable[this.currentSymbol.id]);\n              this.removeElements(this.currentSymbol);\n\n              if (this.currentSymbol.shape.isLane || this.currentSymbol.shape.isPhase) {\n                this.removeChildInNodes(this.currentSymbol);\n              }\n\n              if (arg.cancel) {\n                removeChildNodes(this.currentSymbol, this);\n              }\n\n              if (this.currentSymbol.shape.isPhase) {\n                isPhase = true;\n                orientation_2 = this.currentSymbol.shape.orientation;\n              }\n\n              this.removePreviewChildren(this.currentSymbol);\n              delete this.nameTable[this.currentSymbol.id];\n              this.currentSymbol = null;\n              this.protectPropertyChange(true);\n\n              if (!arg.cancel) {\n                this.startGroupAction();\n\n                if (clonedObject && (clonedObject.shape.isLane || isPhase)) {\n                  if (isPhase) {\n                    clonedObject.shape.isPhase = isPhase;\n                    clonedObject.shape.orientation = orientation_2;\n                  }\n\n                  this.eventHandler.addSwimLaneObject(clonedObject);\n                }\n\n                if (clonedObject.shape.type === 'Bpmn' && clonedObject.shape.annotation && clonedObject['hasTarget']) {\n                  nodeId = clonedObject.shape.annotation.nodeId;\n                  clonedObject.shape.annotation.id = clonedObject.id;\n                  this.addTextAnnotation(clonedObject.shape.annotation, this.nameTable[nodeId]);\n                  clonedObject.nodeId = '';\n                }\n\n                if (!clonedObject.shape.isLane && !isPhase) {\n                  if (clonedObject.children) {\n                    this.addChildNodes(clonedObject);\n                  }\n\n                  if (arg.target && arg.target instanceof Node && !isConnector && checkParentAsContainer(this, arg.target) && canAllowDrop(arg.target)) {\n                    addChildToContainer(this, arg.target, clonedObject);\n                  } else {\n                    value = this.add(clonedObject, true);\n                  }\n\n                  if ((clonedObject || value) && canSingleSelect(this)) {\n                    this.select([this.nameTable[clonedObject[id]]]);\n                  }\n                }\n              } else {\n                this.clearSelectorLayer();\n              }\n\n              this.protectPropertyChange(false);\n              newObj = this.nameTable[clonedObject[id]];\n\n              if (clonedObject['hasTarget']) {\n                clonedObject.nodeId = clonedObject['hasTarget'];\n                this.remove(clonedObject);\n              }\n\n              if (this.bpmnModule && newObj instanceof Node && clonedObject.processId) {\n                newObj.processId = clonedObject.processId;\n                this.bpmnModule.dropBPMNchild(this.nameTable[newObj.processId], newObj, this);\n              }\n\n              if (!arg.cancel) {\n                this.endGroupAction();\n              }\n\n              if (this.mode !== 'SVG') {\n                this.refreshDiagramLayer();\n              }\n\n              delete this.droppable[source];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              arg = {\n                source: cloneBlazorObject(args.droppedElement),\n                element: undefined,\n                target: cloneBlazorObject(this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this),\n                cancel: false,\n                position: undefined\n              };\n\n              if (isBlazor()) {\n                arg = {\n                  source: cloneBlazorObject(args.droppedElement),\n                  element: undefined,\n                  cancel: false,\n                  position: undefined,\n                  target: {}\n                };\n                this.getDropEventArgs(arg);\n              }\n\n              this.triggerEvent(DiagramEvent.drop, arg);\n              clonedObject = void 0;\n              id = 'id';\n              _a.label = 5;\n\n            case 5:\n              selectedSymbols = 'selectedSymbols'; // eslint-disable-next-line max-len\n\n              if (this.droppable[selectedSymbols] && this.droppable[selectedSymbols].parentNode) {\n                remove(this.droppable[selectedSymbols]);\n              } else {\n                draggableElement = document.getElementsByClassName('e-dragclone');\n\n                for (i = 0; i < draggableElement.length; i++) {\n                  draggableElement[i].remove();\n                }\n              }\n\n              this.allowServerDataBinding = true;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.droppable.out = function (args) {\n      if (_this.currentSymbol && !_this.eventHandler.focus) {\n        _this.unSelect(_this.currentSymbol);\n\n        _this.removeFromAQuad(_this.currentSymbol);\n\n        if (_this.mode !== 'SVG' && _this.currentSymbol.shape.type === 'Native') {\n          _this.removeElements(_this.currentSymbol);\n        }\n\n        _this.removeObjectsFromLayer(_this.nameTable[_this.currentSymbol.id]);\n\n        _this.removePreviewChildren(_this.currentSymbol);\n\n        delete _this.nameTable[_this.currentSymbol.id];\n        var args_1 = {\n          element: cloneBlazorObject(_this.currentSymbol),\n          diagram: _this\n        };\n\n        if (isBlazor()) {\n          args_1 = _this.getBlazorDragLeaveEventArgs(args_1);\n        }\n\n        _this.triggerEvent(DiagramEvent.dragLeave, args_1);\n\n        if (_this.mode !== 'SVG') {\n          _this.refreshDiagramLayer();\n        } else {\n          _this.removeElements(_this.currentSymbol);\n        }\n\n        _this.currentSymbol = null;\n        var selectedSymbols = 'selectedSymbols';\n        _this.droppable[selectedSymbols].style.opacity = '1';\n        var source = 'sourceElement';\n        delete _this.droppable[source];\n        _this.diagramRenderer.rendererActions = _this.removeConstraints(_this.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n\n        if (_this.previousSelectedObject) {\n          _this.select(_this.previousSelectedObject, _this.previousSelectedObject.length > 1 ? true : false);\n        }\n\n        _this.previousSelectedObject = null;\n      }\n    };\n  };\n\n  Diagram.prototype.getBlazorDragLeaveEventArgs = function (args) {\n    args = {\n      diagramId: this.element.id,\n      element: getObjectType(args.element) === Connector ? {\n        connector: cloneBlazorObject(args.element)\n      } : {\n        node: cloneBlazorObject(args.element)\n      }\n    };\n    return args;\n  };\n\n  Diagram.prototype.getDropEventArgs = function (arg) {\n    if (this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode']) {\n      var object = this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode']; // eslint-disable-next-line max-len\n\n      arg.target = getObjectType(object) === Connector ? {\n        connector: cloneBlazorObject(object)\n      } : {\n        node: cloneBlazorObject(object)\n      };\n    } else {\n      arg.target.diagramId = this.element.id;\n    }\n  };\n\n  Diagram.prototype.removeChildInNodes = function (node) {\n    if (node) {\n      if (node.children) {\n        for (var i = 0; i < node.children.length; i++) {\n          this.removeChildInNodes(this.nameTable[node.children[i]]);\n        }\n      }\n\n      var index = this.nodes.indexOf(node);\n\n      if (index !== -1) {\n        this.nodes.splice(index, 1);\n      }\n    }\n  };\n\n  Diagram.prototype.getBlazorDragEventArgs = function (args) {\n    args = {\n      // eslint-disable-next-line max-len\n      source: cloneBlazorObject(args.source),\n      element: getObjectType(args.element) === Connector ? {\n        connector: cloneBlazorObject(args.element)\n      } : {\n        node: cloneBlazorObject(args.element)\n      },\n      cancel: args.cancel,\n      diagramId: this.element.id\n    };\n    return args;\n  };\n\n  Diagram.prototype.findChild = function (node, childTable) {\n    var group;\n    var newNode;\n\n    for (var i = 0; i < node.children.length; i++) {\n      group = childTable[node.children[i]];\n\n      if (group) {\n        if (group.children) {\n          this.findChild(group, childTable);\n        }\n\n        group.id = group.id + randomId();\n        childTable[group.id] = group;\n        node.children[i] = group.id;\n        newNode = new Node(this, 'nodes', group, true);\n        this.initObject(newNode, undefined, undefined, true); //this.add(group, true);\n      }\n    }\n  };\n\n  Diagram.prototype.getChildren = function (node, entryTable, childTable) {\n    var temp;\n\n    for (var i = 0; i < node.children.length; i++) {\n      temp = childTable[node.children[i]];\n\n      if (temp) {\n        if (temp.children) {\n          entryTable = this.getChildren(temp, entryTable, childTable);\n        }\n\n        entryTable[temp.id] = cloneObject(temp);\n      }\n    }\n\n    return entryTable;\n  };\n\n  Diagram.prototype.addChildNodes = function (node) {\n    var temp;\n\n    for (var i = 0; i < node.children.length; i++) {\n      temp = this.nameTable[node.children[i]];\n\n      if (temp) {\n        if (temp.children) {\n          this.addChildNodes(temp);\n        }\n\n        this.add(temp, true);\n      }\n    }\n  };\n\n  Diagram.prototype.moveNode = function (node) {\n    var currentLayer = this.commandHandler.getObjectLayer(node.id);\n    var index = currentLayer.zIndex;\n    var length = currentLayer.objects.length;\n    var targetLayer;\n\n    for (var i = 0; i < this.layers.length; i++) {\n      if (index === this.layers[i].zIndex) {\n        targetLayer = this.layers[i + 1];\n      }\n    }\n\n    if (length > 1) {\n      this.commandHandler.moveSvgNode(node.id, currentLayer.objects[length - 2]);\n      this.commandHandler.moveSvgNode(currentLayer.objects[length - 2], node.id);\n    } else {\n      if (targetLayer) {\n        var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[0];\n\n        if (targetObject) {\n          this.commandHandler.moveSvgNode(node.id, targetObject);\n          this.commandHandler.updateNativeNodeIndex(node.id, targetObject);\n        } else {\n          this.moveObjectsUp(node, currentLayer);\n        }\n      } else {\n        this.moveObjectsUp(node, currentLayer);\n      }\n    }\n  };\n  /**\n   * moves the node or connector forward within given layer \\\n   *\n   * @returns { void }  moves the node or connector forward within given layer .\\\n   * @param {Node | Connector} node - provide the source value.\n   * @param {LayerModel} currentLayer - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.moveObjectsUp = function (node, currentLayer) {\n    var targetLayer;\n\n    for (var i = this.layers.length - 1; i >= 0; i--) {\n      targetLayer = this.layers[i];\n\n      if (currentLayer.id !== targetLayer.id) {\n        // eslint-disable-next-line max-len\n        var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[targetLayer.objects.length - 1];\n\n        if (targetObject) {\n          this.commandHandler.moveSvgNode(node.id, targetObject);\n          this.commandHandler.moveSvgNode(targetObject, node.id);\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * Inserts newly added element into the database \\\n   *\n   * @returns { void }  Inserts newly added element into the database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.insertData = function (node) {\n    return this.crudOperation(node, 'create', this.getNewUpdateNodes('New'));\n  };\n  /**\n   * updates the user defined element properties into the existing database \\\n   *\n   * @returns { void }     Removes the user deleted element from the existing database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.updateData = function (node) {\n    return this.crudOperation(node, 'update', this.getNewUpdateNodes('Update'));\n  };\n  /**\n   * Removes the user deleted element from the existing database \\\n   *\n   * @returns { void }     Removes the user deleted element from the existing database .\\\n   * @param {Node | Connector} node - provide the source value.\n   *\n   */\n\n\n  Diagram.prototype.removeData = function (node) {\n    return this.crudOperation(node, 'destroy', this.getDeletedNodes());\n  };\n\n  Diagram.prototype.crudOperation = function (node, crud, getNodesCollection) {\n    if (node) {\n      var data = this.parameterMap(node, node instanceof Connector ? false : true);\n\n      if (data) {\n        // eslint-disable-next-line max-len\n        var url = node instanceof Connector ? this.dataSourceSettings.connectionDataSource.crudAction[crud] : this.dataSourceSettings.crudAction[crud];\n        this.raiseAjaxPost(JSON.stringify(data), url);\n      }\n\n      return data;\n    } else {\n      var newObjects = getNodesCollection; // eslint-disable-next-line max-len\n\n      this.processCrudCollection(newObjects, this.dataSourceSettings.crudAction[crud], this.dataSourceSettings.connectionDataSource.crudAction[crud]);\n      return newObjects;\n    }\n  };\n\n  Diagram.prototype.processCrudCollection = function (newObjects, nodeCrudAction, connectorCrudAction) {\n    if (newObjects.nodes) {\n      var data = [];\n      var i = void 0;\n\n      for (i = 0; i < newObjects.nodes.length; i++) {\n        data.push(this.parameterMap(newObjects.nodes[i], true));\n      }\n\n      if (data && data.length > 0) {\n        this.raiseAjaxPost(JSON.stringify(data), nodeCrudAction);\n      }\n    }\n\n    if (newObjects.connectors) {\n      var data = [];\n      var i = void 0;\n\n      for (i = 0; i < newObjects.connectors.length; i++) {\n        data.push(this.parameterMap(newObjects.connectors[i], false));\n      }\n\n      if (data && data.length > 0) {\n        this.raiseAjaxPost(JSON.stringify(data), connectorCrudAction);\n      }\n    }\n  };\n\n  Diagram.prototype.parameterMap = function (object, isNode) {\n    var mappingObj = {};\n    var i;\n    var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n\n    if (fields.id) {\n      mappingObj[fields.id] = object.id;\n    }\n\n    if (fields.sourcePointX && fields.sourcePointY) {\n      mappingObj[fields.sourcePointX] = object.sourcePoint.x;\n      mappingObj[fields.sourcePointY] = object.sourcePoint.y;\n    }\n\n    if (fields.targetPointX && fields.targetPointY) {\n      mappingObj[fields.targetPointX] = object.targetPoint.x;\n      mappingObj[fields.targetPointY] = object.targetPoint.y;\n    }\n\n    if (fields.sourceID) {\n      mappingObj[fields.sourceID] = object.sourceID;\n    }\n\n    if (fields.targetID) {\n      mappingObj[fields.targetID] = object.targetID;\n    }\n\n    if (fields.crudAction && fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n      for (i = 0; i < fields.crudAction.customFields.length; i++) {\n        mappingObj[fields.crudAction.customFields[i]] = object[fields.crudAction.customFields[i]];\n      }\n    }\n\n    return mappingObj;\n  };\n\n  Diagram.prototype.getNewUpdateNodes = function (status) {\n    var nodes = [];\n    var connectors = []; // eslint-disable-next-line guard-for-in\n\n    for (var name_1 in this.nameTable) {\n      var node = this.nameTable[name_1];\n\n      if (node.status === status) {\n        if (node && node instanceof Connector) {\n          node.status = 'None';\n          connectors.push(node);\n        } else {\n          node.status = 'None';\n          nodes.push(node);\n        }\n      }\n    }\n\n    return {\n      nodes: nodes,\n      connectors: connectors\n    };\n  };\n\n  Diagram.prototype.getDeletedNodes = function () {\n    var nodes = [];\n    var connectors = [];\n    var i;\n\n    for (i = 0; i < this.crudDeleteNodes.length; i++) {\n      var node = this.crudDeleteNodes[i];\n\n      if (node && node.segments) {\n        connectors.push(node);\n      } else if (node) {\n        nodes.push(node);\n      }\n    }\n\n    this.crudDeleteNodes = [];\n    return {\n      nodes: nodes,\n      connectors: connectors\n    };\n  };\n\n  Diagram.prototype.raiseAjaxPost = function (value, url) {\n    var callback = new Ajax(url, 'POST', true, 'application/json');\n    var data = JSON.stringify(JSON.parse(value));\n    callback.send(data).then();\n    /* eslint-disable */\n\n    callback.onSuccess = function (data) {};\n    /* eslint-enable */\n\n  };\n\n  Diagram.prototype.getHiddenItems = function (args) {\n    var hiddenItems = [];\n\n    if (this.contextMenuModule) {\n      this.contextMenuModule.hiddenItems = [];\n\n      for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.contextMenuModule.ensureItems(item, args.event);\n\n        if (item.items && item.items.length) {\n          for (var _b = 0, _c = item.items; _b < _c.length; _b++) {\n            var newItem = _c[_b];\n            this.contextMenuModule.ensureItems(newItem, args.event);\n          }\n        }\n      }\n\n      return this.contextMenuModule.hiddenItems;\n    }\n\n    return hiddenItems;\n  };\n\n  __decorate([Property('100%')], Diagram.prototype, \"width\", void 0);\n\n  __decorate([Property('SVG')], Diagram.prototype, \"mode\", void 0);\n\n  __decorate([Property('100%')], Diagram.prototype, \"height\", void 0);\n\n  __decorate([Complex({}, ContextMenuSettings)], Diagram.prototype, \"contextMenuSettings\", void 0);\n\n  __decorate([Property(DiagramConstraints.Default)], Diagram.prototype, \"constraints\", void 0);\n\n  __decorate([Property(DiagramTools.Default)], Diagram.prototype, \"tool\", void 0);\n\n  __decorate([Property('Top')], Diagram.prototype, \"bridgeDirection\", void 0);\n\n  __decorate([Property('transparent')], Diagram.prototype, \"backgroundColor\", void 0);\n\n  __decorate([Complex({}, SnapSettings)], Diagram.prototype, \"snapSettings\", void 0);\n\n  __decorate([Complex({}, RulerSettings)], Diagram.prototype, \"rulerSettings\", void 0);\n\n  __decorate([Complex({}, PageSettings)], Diagram.prototype, \"pageSettings\", void 0);\n\n  __decorate([Complex({}, SerializationSettings)], Diagram.prototype, \"serializationSettings\", void 0);\n\n  __decorate([Collection([], Node)], Diagram.prototype, \"nodes\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"drawingObject\", void 0);\n\n  __decorate([Collection([], Connector)], Diagram.prototype, \"connectors\", void 0);\n\n  __decorate([Property([])], Diagram.prototype, \"basicElements\", void 0);\n\n  __decorate([Complex({}, DiagramTooltip)], Diagram.prototype, \"tooltip\", void 0);\n\n  __decorate([Complex({}, DataSource)], Diagram.prototype, \"dataSourceSettings\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"addInfo\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"historyManager\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"annotationTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"userHandleTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getNodeDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"nodeDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getConnectorDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"connectorDefaults\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"setNodeTemplate\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getDescription\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomProperty\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomTool\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"getCustomCursor\", void 0);\n\n  __decorate([Collection([], CustomCursorAction)], Diagram.prototype, \"customCursor\", void 0);\n\n  __decorate([Property()], Diagram.prototype, \"updateSelection\", void 0);\n\n  __decorate([Complex({}, DiagramSettings)], Diagram.prototype, \"diagramSettings\", void 0);\n\n  __decorate([Complex({}, Selector)], Diagram.prototype, \"selectedItems\", void 0);\n\n  __decorate([Complex({}, ScrollSettings)], Diagram.prototype, \"scrollSettings\", void 0);\n\n  __decorate([Complex({}, Layout)], Diagram.prototype, \"layout\", void 0);\n\n  __decorate([Complex({}, CommandManager)], Diagram.prototype, \"commandManager\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dataLoaded\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"dragOver\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"click\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"historyChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"historyStateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"doubleClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"textEdit\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"scrollChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"selectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"sizeChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"connectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"sourcePointChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"targetPointChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"propertyChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"positionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"keyUp\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"keyDown\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"animationComplete\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"rotateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"collectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"fixedUserHandleClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseDown\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseUp\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onUserHandleMouseLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"segmentCollectionChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"onImageLoad\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"expandStateChange\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"created\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseEnter\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseLeave\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"mouseOver\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuOpen\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuBeforeItemRender\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"contextMenuClick\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"commandExecute\", void 0);\n\n  __decorate([Collection([], Layer)], Diagram.prototype, \"layers\", void 0);\n\n  __decorate([Event()], Diagram.prototype, \"drop\", void 0);\n\n  return Diagram;\n}(Component);\n\nexport { Diagram };","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/node_modules/@syncfusion/ej2-diagrams/src/diagram/diagram.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","push","Component","Property","Complex","Collection","EventHandler","L10n","Droppable","remove","Ajax","isBlazor","isNullOrUndefined","Browser","Event","updateBlazorTemplate","resetBlazorTemplate","CanvasRenderer","SvgRenderer","DiagramRenderer","PageSettings","ScrollSettings","ServiceLocator","Container","Node","BpmnShape","cloneBlazorObject","cloneSelectedObjects","findObjectIndex","checkBrowserInfo","updateDefaultValues","getCollectionChangeEventArguements","flipConnector","updatePortEdges","alignElement","setConnectorDefaults","getPreviewSize","Connector","SnapSettings","RulerSettings","removeRulerElements","updateRuler","getRulerSize","renderRuler","renderOverlapElement","Size","Keys","KeyModifiers","DiagramTools","AnnotationConstraints","NodeConstraints","ScrollActions","RendererAction","BlazorAction","DiagramConstraints","SelectorConstraints","PortVisibility","DiagramEvent","DiagramAction","ThumbsConstraints","RealAction","ElementAction","PortConstraints","PathElement","TextElement","updateStyle","removeItem","updateConnector","updateShape","setUMLActivityDefaults","findNodeByName","setSwimLaneDefaults","checkPortRestriction","serialize","deserialize","updateHyperlink","getObjectType","removeGradient","Rect","getPortShape","ShapeAnnotation","PathAnnotation","Canvas","GridPanel","ColumnDefinition","DataSource","Layout","Selector","Text","DiagramEventHandler","CommandHandler","DiagramScroller","isSelected","SpatialSearch","setAttributeSvg","setAttributeHtml","measureHtmlText","removeElement","createMeasureElements","getDomIndex","getDiagramElement","getScrollerWidth","getHTMLLayer","createUserHandleTemplates","getBackgroundLayer","createHtmlElement","createSvgElement","getNativeLayerSvg","getUserHandleLayer","getPortLayerSvg","getDiagramLayerSvg","applyStyleAgainstCsp","getAdornerLayerSvg","getSelectorElement","getGridLayerSvg","getBackgroundLayerSvg","CommandManager","ContextMenuSettings","canDelete","canInConnect","canOutConnect","canRotate","canVitualize","canDrawThumbs","canPortInConnect","canPortOutConnect","canResize","canSingleSelect","canZoomPan","canZoomTextEdit","canMultiSelect","canDragSourceEnd","canDragTargetEnd","canDragSegmentThumb","enableReadOnly","canMove","findAnnotation","arrangeChild","getInOutConnectPorts","removeChildNodes","canMeasureDecoratorPath","randomId","cloneObject","extendObject","getFunction","getBounds","DiagramTooltip","initTooltip","PointPort","canShadow","Layer","DiagramNativeElement","DiagramHtmlElement","canAllowDrop","checkParentAsContainer","addChildToContainer","updateLaneBoundsAfterAddChild","getConnectors","updateConnectorsProperties","phaseDefine","swimLaneMeasureAndArrange","arrangeChildNodesInSwimLane","updateHeaderMaxWidth","updatePhaseMaxWidth","addLane","addPhase","SerializationSettings","removeSwimLane","removeLane","removePhase","removeLaneChildNode","RowDefinition","CustomCursorAction","DiagramSettings","StackPanel","ConnectorFixedUserHandle","NodeFixedUserHandle","Diagram","_super","options","element","_this","version","checkMenu","isServerUpdate","oldNodeObjects","oldDiagramObject","oldConnectorObjects","canEnableBlazorObject","connectorTable","groupTable","scrollActions","None","blazorActions","Default","activeLabel","id","parentId","isGroup","text","undefined","textEditing","isTriggerEvent","preventNodesUpdate","preventConnectorsUpdate","callBlazorModel","selectionConnectorsList","deleteVirtualObject","canLayout","changedConnectorCollection","changedNodesCollection","previousNodeCollection","previousConnectorCollection","crudDeleteNodes","blazorAddorRemoveCollection","blazorRemoveIndexCollection","diagramid","selectedObject","helperObject","actualObject","renderTimer","child","node","blazor","canCloneObject","window","dataSourceSettings","dataSource","ignoreCollectionWatch","nodes","children","style","fill","strokeColor","shape","type","nodeDefaults","updateAnnotationText","annotations","connectors","connectorDefaults","defaultConnector","connector","defaultPropChanges","bulkChanges","enableServerDataBinding","protectPropertyChange","keys","i_1","split","sfIndex","Number","content","join","callFromServer","arg","methodName","mId","nameTable","outEdge","isOutEdge","outEdges","inEdges","obj","isAdding","args","add","remove_1","data","loadDiagram","clearCollection","isConnector","collection","_i","_a","clearObjects","onPropertyChanged","newProp","oldProp","newValue","oldValue","isPropertyChanged","refreshLayout","refereshColelction","diagramActions","Render","prop","width","getSizeValue","height","eventHandler","updateViewPortSize","_b","_c","views","view","temp","updateView","_d","_e","index","changedProp","excludeFromLayout","nodePropertyChange","cause","triggerEvent","propertyChange","mode","refreshDiagramLayer","oldObject","_f","_g","sourceDecorator","targetDecorator","DecoratorPropertyChange","connectorPropertyChange","updateConnectorEdges","updateBridging","intOffPageBackground","validatePageSize","updatePage","selectedItems","userHandles","wrapper","renderSelector","constraints","updateSnapSettings","initCommands","clear","initObjects","layout","updateRulerSettings","updateLayer","PropertyChange","updateScrollSettings","locale","realActions","PreventDataInit","refresh","contextMenuSettings","showCustomMenuOnly","show","items","_h","_j","contextMenuModule","refreshItems","serializationSettings","preventDefaults","connectionPointOrigin","enableRouting","ports","j","removePorts","sourcePortid","sourcePortID","targetPortId","targetPortID","sourcePortWrapper","targetPortWrapper","segments","doLayout","renderReactTemplates","diagram","canLogChange","modelChanged","entry","undoObject","redoObject","category","historyManager","addHistoryEntry","resetDiagramActions","scrollAlone","scrollSettings","_k","_l","currentZoom","updateHtmlLayer","refreshCanvasDiagramLayer","resetTemplate","snapSettings","horizontalGridlines","verticalGridlines","gridType","diagramRenderer","updateGrid","scroller","transform","rulerSettings","hRuler","vRuler","dynamicGrid","showRulers","setSize","renderRulers","horizontalRuler","verticalRuler","thickness","getPersistData","keyEntity","addOnPersist","preRender","initializePrivateVariables","isProtectedOnChange","serviceLocator","initializeServices","setCulture","measureWindowElement","initDiagram","initViews","unWireEvents","wireEvents","classList","document","getElementsByClassName","defaultLocale","Copy","Cut","Paste","Undo","Redo","SelectAll","Grouping","Group","UnGroup","Order","BringToFront","MoveForward","SendToBack","SendBackward","layerZIndex","layerZIndexTable","pathTable","commands","isLoading","commandHandler","spatialSearch","register","localeObj","getModuleName","render","refreshing","domTable","collapsedNode","changedNodes","changedConnectors","deepDiffer","removeEmptyValues","blazorInterop","diagramObject","updateBlazorProperties","crudAction","read","renderInitialCrud","initHistory","initLayers","initializeDiagramLayers","setLayers","isLayout","insertValue","isExpanded","expandNode","getBlazorOldValues","lineRoutingModule","previousConnectorObject","updateConnectorObject","changeConnectors","lineRouting","getObjectChanges","ClearObject","renderPageBreaks","renderSvgGridlines","initSelectorWrapper","notify","trigger","updateScrollOffsets","verticalOffset","horizontalOffset","updateScrollOffset","isDevice","tool","ZoomPan","SingleSelect","tooltipObject","hiddenUserHandleTemplate","userHandleTemplate","updateTemplate","renderComplete","updateFitToPage","pageSettings","fitOptions","canFit","fitToPage","annotation","pathAnnotation","annotationType","template","htmlNode","templateAnnotation","path","HTMLElement","tempObj","callback","onSuccess","dataManager","JSON","parse","dataBind","send","connectionDataSource","getClassName","requiredModules","modules","member","UndoRedo","enableAnimation","LineRouting","arrangement","removeUserHandlesTemplate","elementId","name","destroy","clearInterval","droppable","clearTemplate","getElementById","tooltipelement","parentNode","removeChild","usageCount","measureElementCount","layers","currentLayer","zIndexTable","startEvent","touchStartEvent","stopEvent","touchEndEvent","moveEvent","touchMoveEvent","cancelEvent","isPointer","isIE11Pointer","wheelEvent","info","diagramCanvas","mouseDown","mouseMove","mouseUp","mouseLeave","keyDown","keyUp","doubleClick","scrolled","mouseWheel","windowResize","initDroppables","select","objects","multipleSelection","selectObjects","selectAll","getObjectsOfLayer","activeLayer","unSelect","oldSelectedObjects","updateBlazorSelector","clearSelection","updateViewPort","attribute","getZoomingAttribute","updateBlazorDiagramProperties","cutCommand","cut","addProcess","process","bpmnModule","removeProcess","pasteCommand","paste","bringIntoView","bound","bringToCenter","copyCommand","copy","group","insertBlazorDiagramObjects","unGroup","sendToBack","setActiveLayer","layerName","layer","getLayer","addLayer","layerObject","addDiagramLayer","removeLayer","layerId","removeDiagramLayer","moveObjects","targetLayer","oldValues","map","diffValue","frameObject","layerObjectUpdate","leyerObject","zIndex","sendLayerBackward","updateLayerObject","bringLayerForward","cloneLayer","bringToFront","moveForward","sendForward","sendBackward","getObject","getNodeObject","getConnectorObject","getActiveLayer","nudgeCommand","direction","x","nudge","tx","ty","negativeDirection","labelDrag","drag","refreshCanvasLayers","interaction","object","updated","updateAnnotationDrag","parent_1","isLane","swimlane","conn","indexOf","updateSelector","DragUsingMouse","updateConnectorProperties","sequence","updatePathElementOffset","ToolAction","GroupClipboardInProcess","disableStackContainerPadding","disable","considerPadding","scale","sx","sy","pivot","checkBoundaryConstraints","bounds","rotate","angle","offsetX","offsetY","rotateAngle","concat","rotateObjects","dragSourceEnd","dragTargetEnd","findObjectsUnderMouse","position","source","findObjectUnderMouse","action","inAction","findTargetObjectUnderMouse","findTargetUnderMouse","findElementUnderMouse","padding","findActionToBeDone","getTool","getCustomTool","getCursor","active","cursor","getCustomCursor","customCursor","undoRedoModule","currentSymbol","checkCurrentSymbol","historyChangeTrigger","check","undoObjects","addCustomHistoryEntry","change","entryType","changeType","sourceValue","historyChange","startGroupAction","endGroupAction","undo","redo","getBlazorDiagramObjects","align","option","PublicMethod","distribute","sameSize","canCall","isServerDataBindEnabled","allowServerDataBinding","getDiagramOldValues","zoom","factor","focusedPoint","zoomTo","zoomFactor","focusPoint","pan","setCursor","reset","resetSegments","setBlazorDiagramProps","eventName","eventArgs","updateEventValue","addNodeToLane","swimLane","lane","swimlaneNode","phases","laneId","laneNode","margin","left","top","orientation","laneHeaderId","lanes","containsPoint","updateDiagramElementQuad","showTooltip","tooltip","Math","round","openOn","targetPoint","hideTooltip","close","addNode","addChildToGroup","severDataBind","propChange","isHistoryAdded","PreventHistory","addChild","childTable","objectId","getHistoryStack","isUndoStack","historyEntry","undoStack","redoStack","stackLimit","getEdges","getParentId","addConnector","UpdateBlazorDiagramModelCollection","copiedObject","multiSelectDelete","isBlazorGroupUpdate","updatedModel","connectorModelCollection","updatedModelCollection","objectTypeCollection","removalIndexCollection","updatedModel_1","elements","removalIndex","tempNode","getChildren","isNode","dgmObj","stringify","UpdateBlazorDiagramModel","objectType","annotationNodeIndex","Clear","UpdateBlazorLabelOrPortObjects","nodeIndex","nodeIndexCollection","addBlazorDiagramObjects","nodesCollection","connectorCollection","dataBindingModule","removeNodeEdges","isOutEdges","edges","splice","insertBlazorConnector","sourceID","targetID","newObj","propertyChangeValue","state","cancel","parentObject","PreventCollectionChangeOnDragOver","collectionChange","drawingObject","removeElements","lock","visible","status","initObject","GroupingInProgress","updateElementVisibility","updateEdges","umlIndex","getTextAnnotationConn","obj_1","initConnectors","activity","subProcess","processes","updateDocks","findObjects","outerBounds","sourcePoint","parent_2","measure","arrange","desiredSize","updateDiagramObject","updateSvgNodes","updateTextElementValue","updateProcesses","moveNode","moveSvgNode","processes_1","processes_2","nodeId","parent","parentElement","appendChild","addTextAnnotation","addAnnotation","getObjectLayer","spliceConnectorEdges","isSource","isInEdge","removePortEdges","removeDependentConnector","removeObjectsFromLayer","objIndex","currentObj","removeElement_1","port","removePort","removeCollection","annotationId","removeCommand","groupAction","checkAndRemoveAnnotations","isPhase","isStackChild","deleteGroup","deleteChild","removeBpmnProcesses","swimLaneNode","grid","updateNodeEdges","currentDrawingObject","parentnode","removeFromAQuad","resetTool","textAnnotationConnectors","k","isstack","container","redoElement","sourceIndex","targetIndex","childNode","updateStackProperty","actualSize","objects_1","startEditCommad","laneHeader","canvasId","slice","currentParentId","substring","header","hasHeader","rows","cells","startTextEdit","minWidth","attributes","textWrapper","selectedNode","bpmnAnnotation","getTextAnnotationWrapper","ReadOnly","addLabels","getWrapper","maxWidth","textArea","createTextNode","isEmpty","fontSize","center","textAlign","max","fontFamily","toLocaleLowerCase","fontWeight","bold","fontStyle","italic","lineHeight","toString","textDecoration","TextEdit","inputChange","focusOutEdit","updateConnectorfixedUserHandles","fixedUserHandles","fixedUserHandleWrapper","fixedUserHandle","updateAnnotation","intermediatePoints","updateNodeExpand","visibility","updateConnectorAnnotation","annotationWrapper","Interactions","removeChildrenFromLayout","processId","update","canDoOverlap","canEnableRouting","viewPort","viewPortWidth","viewPortHeight","lineDistributionModule","initLineDistribution","organizationalChartModule","updateLayout","layoutAnimateModule","rootNode","mindMapChartModule","root","radialTreeModule","symmetricalLayoutModule","maxIteration","springLength","springFactor","complexHierarchicalTreeModule","nodes_1","getLayoutNodesCollection","preventDiagramUpdate","updatedNodes","updatedNodes_1","PreventIconsUpdate","updateIcon","updateDefaultLayoutIcons","connection","resetConnectorSegments","points","getPoints","resetRoutingSegments","updateQuad","distributeLines","saveDiagram","getDiagramContent","styleSheets","printandExportModule","exportImage","image","exportImages","printImage","printOptions","setStackLimit","applyLimit","currentEntry","clearHistory","getDiagramBounds","exportDiagram","print","addPorts","portCollection","isAddPortInServer","initPort","getDescription","canvas","initPortWrapper","addConstraints","constraintsType","constraintsValue","removeConstraints","addNodeLabels","labels","addConnectorLabels","isAddLabelInServer","annotationCollection","i_2","initAnnotationWrapper","segment","getAnnotationElement","addLanes","addPhases","phase","removelabelExtension","match","element_1","textElement","htmlElement","removeLabels","removePortsExtenion","real","rulerSize","attr","background","backgroundColor","renderHiddenUserHandleTemplateLayer","renderBackgroundLayer","commonStyle","bgLayer","createSvg","backgroundImage","renderGridLayer","svgGridSvg","setAttribute","svgGrid","rect","location","protocol","host","pathname","renderDiagramLayer","diagramLayerDiv","diagramSvg","diagramLayer","transformationLayer","createCanvas","getBoundingClientRect","scrollerSize","scrollerWidth","setViewPortSize","measureElements","renderHTMLLayer","renderPortsExpandLayer","renderNativeLayer","renderAdornerLayer","divElement","svgAdornerSvg","adornerLayer","svgSelector","svgPortsSvg","svgPortsLayer","svgExpandLayer","htmlLayer","htmlLayerDiv","nativeLayerSvg","nativeLayer","svgObj","createElementNS","updateBazorShape","bpmnShape","umlActivityShape","flowShape","basicShape","textContent","isLoad","initData","initLayerObjects","hasLayers","tempTabel","bpmnTable","groups","previousNodeObject","updateNodeObject","changeNodes","addToLayer","initNodes","sourceNode","targetNode","alignedGroups","alignGroup","_m","alignedGroups_1","_o","connectors_1","_p","_q","_r","_s","parents","newList","parentist","setZIndex","layerObject_1","hPan","vPan","VerticalOffset","HorizontalOffset","ViewportHeight","ViewportWidth","CurrentZoom","panStatus","PanInProgress","panState","scrollChange","sourceId","updatePanState","Virtualization","adapter","generateData","url","initSource","row","makeData","fields","sourcePointX","sourcePointY","targetPointX","targetPointY","customFields","independentObj","objectZIndex","tabelLength","j_1","defaultLayer","initObjectExtend","a","getDefaults","getNodeDefaults","defaults","initNode","getConnectorDefaults","getConnectedPort","targetPort","outPort","findInOutConnectPorts","inPort","sourceWrapper","getEndNodeWrapper","OutConnect","targetWrapper","InConnect","getConnectorPoints","init","absoluteBounds","updateGroupOffset","scaleObject","size","isWidth","sw","sh","PreventDrag","updateDefaultLayoutIcon","expandIcon","collapseIcon","icon","horizontalAlignment","verticalAlignment","offset","iconWrapper","setOffsetWithRespectToBounds","isUpdateSize","isUpdateGroupToBlazor","node1","PreventScale","EnableGroupAction","diffX","diffY","flip","diagramId","initContainer","portContainer","diagramSettings","inversedAlignment","measureChildren","preventContainer","relativeMode","checkPorts","childCollection","addObject","rowIndex","columnIndex","rowSpan","columnSpan","elementActions","ElementIsGroup","setNodeTemplate","wrapperContent","description","initAnnotations","annotationTemplate","initPorts","initIcons","initfixedUserHandles","onLoadImageSize","bind","updateChildPosition","onImageLoad","canExecute","newCommands","commandManager","execute","gesture","C","keyModifiers","Control","V","X","Delete","A","Z","Y","Up","parameter","Right","Down","Left","F2","endEditCommand","Escape","Tab","Enter","initCommandManager","overrideCommands","newCommand","command","edge","updateIconVisibility","updateDiagramContainerVisibility","isInEdges","portId","portEdges","refreshDiagram","layoutInfo","isRootInverse","isProtectedChange","isAllowServerUpdate","Branch","renderDocument","renderNodes","updateCanupdateStyle","canApplyStyle","getZindexPosition","viewId","canIgnoreIndex","isUpdateObject","diagramElementsLayer","updateNode","updateGridContainer","objectArray","nodeArray","objectArray_1","refreshSvgDiagramLayer","view_1","renderBasicElement","basicElements","prevRotateAngle","renderElement","refreshElements","isDestroyed","clearCanvas","getContext","setTransform","renderDiagramElements","transformOrigin","setTimeout","updatePortVisibility","portVisibility","inverse","portElement","changed","Hover","Connect","virtualizeElements","removeVirtualObjects","clearIntervalVal","canMeasure","updateVirtualObjects","tCollection","updateVirtualization","renderer","fromExport","isOverView","pageBounds","getPageBounds","difX","difY","top_1","oldCollectionObjects","renderNode","transformValue","verticalValue","vScrollbarMoved","hScrollbarMoved","status_1","isSvgMode","bridgingModule","pathSegment","getSegmentElement","contentWidth","contentHeight","ctx","clearRect","setScrollOffset","scrollLeft","scrollTop","setOffset","w","h","adornerSVG","gridLayer","transformLayers","removePageBreaks","line","childNodes","length_1","backgroundLayer","renderSvgBackGroundImage","stroke","strokeWidth","color","opacity","pivotX","pivotY","dashArray","drawRect","showPageBreaks","getPageBreak","drawLine","class","startPoint","x1","y1","endPoint","x2","y2","setOverview","overview","updateThumbConstraints","selectorModel","canInitialize","hideRotate","hideResize","thumbConstraints","thumbsConstraints","collapsed","Rotate","ResizeSouthEast","ResizeNorthWest","ResizeEast","ResizeWest","ResizeNorth","ResizeSouth","ResizeNorthEast","ResizeSouthWest","ConnectorSource","ConnectorTarget","isSwimLane","isProtectedOnChangeValue","selectorConstraints","rendererActions","innertemplate","div","DrawSelectorBorder","clearSelectorLayer","hasSelection","selectorElement","diagramUserHandlelayer","renderSelectorForAnnotation","HideThumbs","renderResizeHandle","renderEndPointHandle","connectorEditingToolModule","renderUserHandler","userHandle","display","selector","selectorEle","canHideResizers","UserHandle","userHandletemplate","stackPanel","PreventRenderSelector","drawSelectionRectangle","renderHighlighter","adornerSvg","clearHighlighter","highlighter","getNodesConnectors","selectionRect","i_3","templates","symbolBorder","getPortContainer","shadow","parent_3","containsMargin","right","bottom","endEdit","changedvalues","eventObj","annotation_1","deleteNode","changesAnnotation","oldnodes","newnodes","clonedObject","phaseHeader","textEdit","getBlazorTextEditArgs","isBpmnTextAnnotation","updateBlazorDiagramEvents","updateTextAnnotationContent","isAddTextNode","getIndex","isHeader","connectorId","textNode","bridgeDirection","isAction","removeNode","childernCollection","groupElement","beforeElement","childElement","insertBefore","tempNode_1","updateObject","oldNode","oldConnector","actualSourcePoint","actualTargetPoint","nodePropertyChangeExtend","updateShadow","Select","swimLaneNodePropertyChange","actualShape","orientation_1","oldShape","oldObjects","newObjects","count","indexValue","laneIndex","newLane","childNodeIndex","node_1","phaseSize","updateColumnWidth","updateRowHeight","previousPhase","removeRow","removeColumn","rowDef","addRow","colDef","addColumn","id_1","headerNode","oldSelectConstraints","newSelectConstraints","phaseNode","l","oldNodeObject","node_2","existingBounds","existingInnerBounds","offsetX_1","updateFlipOffset","offsetY_1","minHeight","maxHeight","updatePorts","updateMargin","updateBPMN","updateUMLActivity","changedObject","actualPort","updatePort","actualAnnotation","updateSize","j_2","actualfixedUserHandle","updateNodefixedUserHandle","updateTooltip","updateTextAnnotationProp","checkSelectedItem","refreshTextElement","column","columnDefinitions","equals","connectorSegmentChange","parent_4","updateGroupSize","PreventZIndexOnDragging","renderVirtualRegion","i_4","portWrapper","hasChildren","flipOffset","sizeChanged","innerFinalNode","outerFinalNode","connectorProprtyChangeExtend","updateBPMNConnector","disableBridging","targetPadding","sourcePadding","oldSource","oldTarget","refreshConnectorSegments","cornerRadius","updateAnnotations","updatefixedUserHandle","triggerPropertyChange","item","portEdge","getpropertyChangeArgs","isInconnect","pts","updateNodeProperty","selItems","Visible","updateConnectorfixedUserHandle","canUpdateSize","isMeasure","displacement","handleStrokeColor","handleStrokeWidth","updatefixedUserHandleContent","segmentAngle","hyperlink","updateAnnotationContent","fixedUserHandleAnnotation","updateConnectorfixedUserHandleWrapper","getfixedUserHandle","updateAnnotationWrapper","updatefixedUserHandleWrapper","strokeDashArray","pathdata","canMeasurePath","pathData","String","iconContainer","iconRect","iconShape","nativeContent","showTipPointer","modified","updateBounds","enable","getProtectPropertyChangeValue","nodeShadow","changedShadow","distance","changes","removePreviewChildren","preview","z","previewChildId","previewIndex_1","previewIndex","entryTable","over","dragDataHelper","dragData","helper","isHorizontal","focus","getMousePosition","event","selectedSymbol","paletteId","getAttribute","nodeDragSize","nodePreviewSize","paletteDragSize","sourceElement","ej2_instances","selectedSymbols","childtable","newNode","dragSize","previewSize","palettePreview","addInfo","tempTable","toBounds","getBlazorDragEventArgs","dragEnter","swimLaneObj","laneObj","child1","child2","findChild","touches","drop","orientation_2","draggableElement","getDropEventArgs","removeChildInNodes","addSwimLaneObject","addChildNodes","dropBPMNchild","droppedElement","out","args_1","getBlazorDragLeaveEventArgs","dragLeave","previousSelectedObject","targetObject","updateNativeNodeIndex","moveObjectsUp","insertData","crudOperation","getNewUpdateNodes","updateData","removeData","getDeletedNodes","crud","getNodesCollection","parameterMap","raiseAjaxPost","processCrudCollection","nodeCrudAction","connectorCrudAction","mappingObj","name_1","getHiddenItems","hiddenItems","ensureItems","newItem"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIM,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,SAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAT,CAAN,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeF,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAAC,OAAD,CAAT,CAAmBK,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACL,KAAR,CAArB,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,QAAAA,OAAO,CAACQ,MAAM,CAACL,KAAR,CAAP;AAAwB,OAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;;AAC/IH,IAAAA,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBhB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDS,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CAPD;;AAQA,IAAIO,WAAW,GAAI,QAAQ,KAAKA,WAAd,IAA8B,UAAUjB,OAAV,EAAmBkB,IAAnB,EAAyB;AACrE,MAAIC,CAAC,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,IAAI,EAAE,YAAW;AAAE,UAAIC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc,MAAMA,CAAC,CAAC,CAAD,CAAP;AAAY,aAAOA,CAAC,CAAC,CAAD,CAAR;AAAc,KAAvE;AAAyEC,IAAAA,IAAI,EAAE,EAA/E;AAAmFC,IAAAA,GAAG,EAAE;AAAxF,GAAR;AAAA,MAAsGC,CAAtG;AAAA,MAAyGC,CAAzG;AAAA,MAA4GJ,CAA5G;AAAA,MAA+GK,CAA/G;AACA,SAAOA,CAAC,GAAG;AAAEjB,IAAAA,IAAI,EAAEkB,IAAI,CAAC,CAAD,CAAZ;AAAiB,aAASA,IAAI,CAAC,CAAD,CAA9B;AAAmC,cAAUA,IAAI,CAAC,CAAD;AAAjD,GAAJ,EAA4D,OAAOC,MAAP,KAAkB,UAAlB,KAAiCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAW;AAAE,WAAO,IAAP;AAAc,GAAjF,CAA5D,EAAgJH,CAAvJ;;AACA,WAASC,IAAT,CAAcG,CAAd,EAAiB;AAAE,WAAO,UAAUC,CAAV,EAAa;AAAE,aAAOvB,IAAI,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,CAAX;AAAsB,KAA5C;AAA+C;;AAClE,WAASvB,IAAT,CAAcwB,EAAd,EAAkB;AACd,QAAIR,CAAJ,EAAO,MAAM,IAAIS,SAAJ,CAAc,iCAAd,CAAN;;AACP,WAAOf,CAAP,EAAU,IAAI;AACV,UAAIM,CAAC,GAAG,CAAJ,EAAOC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAYP,CAAC,CAAC,QAAD,CAAb,GAA0BO,EAAE,CAAC,CAAD,CAAF,GAAQP,CAAC,CAAC,OAAD,CAAD,KAAe,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAD,CAAN,KAAqBJ,CAAC,CAACa,IAAF,CAAOT,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAAChB,IAAjG,CAAD,IAA2G,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAF,CAAOT,CAAP,EAAUO,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBnB,IAA9I,EAAoJ,OAAOQ,CAAP;AACpJ,UAAII,CAAC,GAAG,CAAJ,EAAOJ,CAAX,EAAcW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAYX,CAAC,CAACd,KAAd,CAAL;;AACd,cAAQyB,EAAE,CAAC,CAAD,CAAV;AACI,aAAK,CAAL;AAAQ,aAAK,CAAL;AAAQX,UAAAA,CAAC,GAAGW,EAAJ;AAAQ;;AACxB,aAAK,CAAL;AAAQd,UAAAA,CAAC,CAACC,KAAF;AAAW,iBAAO;AAAEZ,YAAAA,KAAK,EAAEyB,EAAE,CAAC,CAAD,CAAX;AAAgBnB,YAAAA,IAAI,EAAE;AAAtB,WAAP;;AACnB,aAAK,CAAL;AAAQK,UAAAA,CAAC,CAACC,KAAF;AAAWM,UAAAA,CAAC,GAAGO,EAAE,CAAC,CAAD,CAAN;AAAWA,UAAAA,EAAE,GAAG,CAAC,CAAD,CAAL;AAAU;;AACxC,aAAK,CAAL;AAAQA,UAAAA,EAAE,GAAGd,CAAC,CAACK,GAAF,CAAMY,GAAN,EAAL;;AAAkBjB,UAAAA,CAAC,CAACI,IAAF,CAAOa,GAAP;;AAAc;;AACxC;AACI,cAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAN,EAAYD,CAAC,GAAGA,CAAC,CAAC9B,MAAF,GAAW,CAAX,IAAgB8B,CAAC,CAACA,CAAC,CAAC9B,MAAF,GAAW,CAAZ,CAAnC,MAAuDyC,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;AAAEd,YAAAA,CAAC,GAAG,CAAJ;AAAO;AAAW;;AAC5G,cAAIc,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAACX,CAAD,IAAOW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAT,IAAgBW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUa,EAAE,CAAC,CAAD,CAAZ;AAAiB;AAAQ;;AACtF,cAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAed,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAA9B,EAAmC;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;AAAgBA,YAAAA,CAAC,GAAGW,EAAJ;AAAQ;AAAQ;;AACrE,cAAIX,CAAC,IAAIH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAApB,EAAyB;AAAEH,YAAAA,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;;AAAgBH,YAAAA,CAAC,CAACK,GAAF,CAAMa,IAAN,CAAWJ,EAAX;;AAAgB;AAAQ;;AACnE,cAAIX,CAAC,CAAC,CAAD,CAAL,EAAUH,CAAC,CAACK,GAAF,CAAMY,GAAN;;AACVjB,UAAAA,CAAC,CAACI,IAAF,CAAOa,GAAP;;AAAc;AAXtB;;AAaAH,MAAAA,EAAE,GAAGf,IAAI,CAACiB,IAAL,CAAUnC,OAAV,EAAmBmB,CAAnB,CAAL;AACH,KAjBS,CAiBR,OAAOR,CAAP,EAAU;AAAEsB,MAAAA,EAAE,GAAG,CAAC,CAAD,EAAItB,CAAJ,CAAL;AAAae,MAAAA,CAAC,GAAG,CAAJ;AAAQ,KAjBzB,SAiBkC;AAAED,MAAAA,CAAC,GAAGH,CAAC,GAAG,CAAR;AAAY;;AAC1D,QAAIW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;AAAa,WAAO;AAAEzB,MAAAA,KAAK,EAAEyB,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;AAAiCnB,MAAAA,IAAI,EAAE;AAAvC,KAAP;AAC/B;AACJ,CA1BD;AA2BA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AACA,SAASwB,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,UAAvC,EAAmDC,YAAnD,EAAiEC,IAAjE,EAAuEC,SAAvE,EAAkFC,MAAlF,EAA0FC,IAA1F,EAAgGC,QAAhG,QAAgH,sBAAhH;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,sBAA/B;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,sBAA1D;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,yBAA7C;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,gBAAhC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,eAAlD,QAAyE,wBAAzE;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,mBAAT,EAA8BC,kCAA9B,QAAwE,wBAAxE;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,YAAzC,EAAuDC,oBAAvD,EAA6EC,cAA7E,QAAmG,wBAAnG;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,mBAAT,EAA8BC,WAA9B,EAA2CC,YAA3C,QAA+D,eAA/D;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,eAAlD;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,YAA7B,EAA2CC,qBAA3C,EAAkEC,eAAlE,EAAmFC,aAAnF,QAAwG,aAAxG;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,cAAlD,EAAkEC,YAAlE,QAAsF,aAAtF;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,aAAjD;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,eAApC,QAA2D,aAA3D;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,eAAlC,EAAmDC,WAAnD,EAAgEC,sBAAhE,EAAwFC,cAAxF,QAA8G,wBAA9G;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,oBAAT,EAA+BC,SAA/B,EAA0CC,WAA1C,EAAuDC,eAAvD,EAAwEC,aAAxE,EAAuFC,cAAvF,QAA6G,wBAA7G;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,sBAAhD;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,wBAA5C;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,gBAA/B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,aAAT,QAA8B,6CAA9B;AACA,SAASC,eAAT,EAA0BC,gBAA1B,EAA4CC,eAA5C,EAA6DC,aAA7D,EAA4EC,qBAA5E,EAAmGC,WAAnG,QAAsH,oBAAtH;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,YAA9C,EAA4DC,yBAA5D,QAA6F,oBAA7F;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,gBAAhD,EAAkEC,iBAAlE,EAAqFC,kBAArF,QAA+G,oBAA/G;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,oBAA9C,QAA0E,oBAA1E;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,eAAjD,EAAkEC,qBAAlE,QAA+F,oBAA/F;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,6BAApD;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,aAAlC,EAAiDC,SAAjD,EAA4DC,YAA5D,EAA0EC,aAA1E,QAA+F,4BAA/F;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,4BAApD;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,UAArC,EAAiDC,eAAjD,EAAkEC,cAAlE,QAAwF,4BAAxF;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,mBAA7C,EAAkEC,cAAlE,EAAkFC,OAAlF,QAAiG,4BAAjG;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,oBAAvC,EAA6DC,gBAA7D,EAA+EC,uBAA/E,QAA8G,wBAA9G;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,YAAhC,EAA8CC,WAA9C,EAA2DC,SAA3D,QAA4E,qBAA5E;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,mBAA5C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,sBAAT,EAAiCC,mBAAjC,EAAsDC,6BAAtD,QAA2F,qCAA3F;AACA,SAASC,aAAT,EAAwBC,0BAAxB,EAAoDC,WAApD,QAAuE,0BAAvE;AACA,SAASC,yBAAT,QAA0C,0BAA1C;AACA,SAASC,2BAAT,EAAsCC,oBAAtC,EAA4DC,mBAA5D,QAAuF,0BAAvF;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,0BAAlC;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,WAArC,EAAkDC,mBAAlD,QAA6E,0BAA7E;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,wBAAT,EAAmCC,mBAAnC,QAA8D,6BAA9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC3CnP,EAAAA,SAAS,CAACkP,OAAD,EAAUC,MAAV,CAAT;AACA;AACJ;AACA;;;AACI,WAASD,OAAT,CAAiBE,OAAjB,EAA0BC,OAA1B,EAAmC;AAC/B,QAAIC,KAAK,GAAGH,MAAM,CAACnL,IAAP,CAAY,IAAZ,EAAkBoL,OAAlB,EAA2BC,OAA3B,KAAuC,IAAnD;AACA;;;AACAC,IAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACA;;AACAD,IAAAA,KAAK,CAACE,SAAN,GAAkB,KAAlB;AACA;;AACAF,IAAAA,KAAK,CAACG,cAAN,GAAuB,KAAvB;AACA;;AACAH,IAAAA,KAAK,CAACI,cAAN,GAAuB,EAAvB;AACA;;AACAJ,IAAAA,KAAK,CAACK,gBAAN,GAAyB,EAAzB;AACA;;AACAL,IAAAA,KAAK,CAACM,mBAAN,GAA4B,EAA5B;AACA;;AACAN,IAAAA,KAAK,CAACO,qBAAN,GAA8B,KAA9B;AACA;;AACAP,IAAAA,KAAK,CAACQ,cAAN,GAAuB,EAAvB;AACA;;AACAR,IAAAA,KAAK,CAACS,UAAN,GAAmB,EAAnB;AACA;;AACAT,IAAAA,KAAK,CAACU,aAAN,GAAsB5I,aAAa,CAAC6I,IAApC;AACA;;AACAX,IAAAA,KAAK,CAACY,aAAN,GAAsB5I,YAAY,CAAC6I,OAAnC;AACA;;AACAb,IAAAA,KAAK,CAACc,WAAN,GAAoB;AAAEC,MAAAA,EAAE,EAAE,EAAN;AAAUC,MAAAA,QAAQ,EAAE,EAApB;AAAwBC,MAAAA,OAAO,EAAE,KAAjC;AAAwCC,MAAAA,IAAI,EAAEC;AAA9C,KAApB;AACA;;AACAnB,IAAAA,KAAK,CAACoB,WAAN,GAAoB,KAApB;AACA;;AACApB,IAAAA,KAAK,CAACqB,cAAN,GAAuB,KAAvB;AACA;;AACArB,IAAAA,KAAK,CAACsB,kBAAN,GAA2B,KAA3B;AACA;;AACAtB,IAAAA,KAAK,CAACuB,uBAAN,GAAgC,KAAhC;AACA;;AACAvB,IAAAA,KAAK,CAACwB,eAAN,GAAwB,IAAxB;AACA;;AACAxB,IAAAA,KAAK,CAACyB,uBAAN,GAAgC,EAAhC;AACA;;AACAzB,IAAAA,KAAK,CAAC0B,mBAAN,GAA4B,KAA5B;AACA1B,IAAAA,KAAK,CAAC2B,SAAN,GAAkB,IAAlB;AACA3B,IAAAA,KAAK,CAAC4B,0BAAN,GAAmC,EAAnC;AACA5B,IAAAA,KAAK,CAAC6B,sBAAN,GAA+B,EAA/B;AACA7B,IAAAA,KAAK,CAAC8B,sBAAN,GAA+B,EAA/B;AACA9B,IAAAA,KAAK,CAAC+B,2BAAN,GAAoC,EAApC;AACA/B,IAAAA,KAAK,CAACgC,eAAN,GAAwB,EAAxB,CA7C+B,CA8C/B;;AACAhC,IAAAA,KAAK,CAACiC,2BAAN,GAAoC,EAApC;AACAjC,IAAAA,KAAK,CAACkC,2BAAN,GAAoC,EAApC;AACAlC,IAAAA,KAAK,CAACmC,SAAN,GAAkB,KAAlB;AACA;;AACAnC,IAAAA,KAAK,CAACoC,cAAN,GAAuB;AAAEC,MAAAA,YAAY,EAAElB,SAAhB;AAA2BmB,MAAAA,YAAY,EAAEnB;AAAzC,KAAvB;AACAnB,IAAAA,KAAK,CAACuC,WAAN,GAAoB,IAApB;AACA,QAAIC,KAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,MAAM,GAAG,QAAb;AACA,QAAIC,cAAc,GAAGrN,QAAQ,MAAMsN,MAAd,IAAwBA,MAAM,CAACF,MAAD,CAA9B,IAA0C,CAAC1C,KAAK,CAAC6C,kBAAN,CAAyBC,UAAzF;AACA9C,IAAAA,KAAK,CAAC+C,qBAAN,GAA8B,IAA9B;;AACA,SAAK,IAAI3Q,CAAC,GAAG,CAAb,EAAgB0N,OAAO,IAAIA,OAAO,CAACkD,KAAnB,IAA4B5Q,CAAC,GAAG0N,OAAO,CAACkD,KAAR,CAAcjR,MAA9D,EAAsEK,CAAC,EAAvE,EAA2E;AACvEoQ,MAAAA,KAAK,GAAG1C,OAAO,CAACkD,KAAR,CAAc5Q,CAAd,CAAR;AACAqQ,MAAAA,IAAI,GAAGzC,KAAK,CAACgD,KAAN,CAAY5Q,CAAZ,CAAP;;AACA,UAAIoQ,KAAK,CAACS,QAAN,IAAkBT,KAAK,CAACS,QAAN,CAAelR,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,YAAI,CAACyQ,KAAK,CAACU,KAAP,IAAgB,CAACV,KAAK,CAACU,KAAN,CAAYC,IAAjC,EAAuC;AACnCV,UAAAA,IAAI,CAACS,KAAL,CAAWC,IAAX,GAAkB,aAAlB;AACH;;AACD,YAAI,CAACX,KAAK,CAACU,KAAP,IAAgB,CAACV,KAAK,CAACU,KAAN,CAAYE,WAAjC,EAA8C;AAC1CX,UAAAA,IAAI,CAACS,KAAL,CAAWE,WAAX,GAAyB,aAAzB;AACH;AACJ;;AACD,UAAIZ,KAAK,CAACa,KAAN,IAAeb,KAAK,CAACa,KAAN,CAAYC,IAAZ,KAAqB,aAAxC,EAAuD;AACnDtK,QAAAA,sBAAsB,CAACwJ,KAAD,EAAQC,IAAR,CAAtB;AACH;;AACD,UAAID,KAAK,CAACa,KAAN,IAAeb,KAAK,CAACa,KAAN,CAAYC,IAAZ,KAAqB,UAAxC,EAAoD;AAChDpK,QAAAA,mBAAmB,CAACsJ,KAAD,EAAQC,IAAR,CAAnB;AACH;;AACD,UAAIE,cAAJ,EAAoB;AAChB3C,QAAAA,KAAK,CAAC8B,sBAAN,CAA6BlN,IAA7B,CAAkC6I,WAAW,CAACgF,IAAD,EAAOtB,SAAP,EAAkBA,SAAlB,EAA6B,IAA7B,CAA7C;AACH;;AACD,UAAInB,KAAK,CAACuD,YAAV,EAAwB;AACpB9M,QAAAA,mBAAmB,CAACgM,IAAD,EAAOD,KAAP,EAAcxC,KAAK,CAACuD,YAApB,CAAnB;AACH;;AACDvD,MAAAA,KAAK,CAACwD,oBAAN,CAA2Bf,IAAI,CAACgB,WAAhC;AACH;;AACD,QAAI3D,OAAO,IAAIA,OAAO,CAAC4D,UAAvB,EAAmC;AAC/B,WAAK,IAAItR,CAAC,GAAG,CAAb,EAAgB0N,OAAO,IAAIA,OAAO,CAAC4D,UAAnB,IAAiCtR,CAAC,GAAG0N,OAAO,CAAC4D,UAAR,CAAmB3R,MAAxE,EAAgFK,CAAC,EAAjF,EAAqF;AACjFoQ,QAAAA,KAAK,GAAG1C,OAAO,CAAC4D,UAAR,CAAmBtR,CAAnB,CAAR;AACAqQ,QAAAA,IAAI,GAAGzC,KAAK,CAAC0D,UAAN,CAAiBtR,CAAjB,CAAP;;AACA,YAAIuQ,cAAJ,EAAoB;AAChB3C,UAAAA,KAAK,CAAC+B,2BAAN,CAAkCnN,IAAlC,CAAuC6I,WAAW,CAACgF,IAAD,EAAOtB,SAAP,EAAkBA,SAAlB,EAA6B,IAA7B,CAAlD;AACH;;AACD,YAAInB,KAAK,CAAC2D,iBAAV,EAA6B;AACzBlN,UAAAA,mBAAmB,CAACgM,IAAD,EAAOD,KAAP,EAAcxC,KAAK,CAAC2D,iBAApB,CAAnB;AACH;;AACD3D,QAAAA,KAAK,CAACwD,oBAAN,CAA2Bf,IAAI,CAACgB,WAAhC;AACH;AACJ;;AACD,SAAK,IAAIrR,CAAC,GAAG,CAAb,EAAgB0N,OAAO,IAAIA,OAAO,CAAC4D,UAAnB,IAAiCtR,CAAC,GAAG0N,OAAO,CAAC4D,UAAR,CAAmB3R,MAAxE,EAAgFK,CAAC,EAAjF,EAAqF;AACjF,UAAIwR,gBAAgB,GAAG9D,OAAO,CAAC4D,UAAR,CAAmBtR,CAAnB,CAAvB;AACA,UAAIyR,SAAS,GAAG7D,KAAK,CAAC0D,UAAN,CAAiBtR,CAAjB,CAAhB;;AACA,UAAIwR,gBAAgB,CAACP,KAAjB,IAA0BO,gBAAgB,CAACP,KAAjB,CAAuBC,IAAvB,KAAgC,MAA9D,EAAsE;AAClExM,QAAAA,oBAAoB,CAAC8M,gBAAD,EAAmBC,SAAnB,CAApB;AACH;;AACD,UAAIvO,QAAQ,EAAZ,EAAgB;AACZ,YAAIwO,kBAAkB,GAAGrG,WAAW,CAACuC,KAAK,CAAC+D,WAAP,CAApC;;AACA/D,QAAAA,KAAK,CAACgE,uBAAN,CAA8B,IAA9B;;AACAhE,QAAAA,KAAK,CAACiE,qBAAN,CAA4B,IAA5B;;AACA,YAAIC,IAAI,GAAGpT,MAAM,CAACoT,IAAP,CAAYJ,kBAAZ,CAAX;;AACA,aAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGD,IAAI,CAACnS,MAA7B,EAAqCoS,GAAG,EAAxC,EAA4C;AACxC,cAAIxS,GAAG,GAAGuS,IAAI,CAACC,GAAD,CAAd;AACA,cAAIC,KAAK,GAAGzS,GAAG,CAACyS,KAAJ,CAAU,GAAV,CAAZ;;AACA,cAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;AACnB,gBAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B;AACtBN,cAAAA,kBAAkB,CAACnS,GAAD,CAAlB,CAAwB0S,OAAxB,GAAkCC,MAAM,CAACF,KAAK,CAAC,CAAD,CAAN,CAAxC;;AACApE,cAAAA,KAAK,CAAC6B,sBAAN,CAA6BjN,IAA7B,CAAkCkP,kBAAkB,CAACnS,GAAD,CAApD;AACH;;AACD,gBAAIyS,KAAK,CAAC,CAAD,CAAL,KAAa,YAAjB,EAA+B;AAC3BN,cAAAA,kBAAkB,CAACnS,GAAD,CAAlB,CAAwB0S,OAAxB,GAAkCC,MAAM,CAACF,KAAK,CAAC,CAAD,CAAN,CAAxC;;AACApE,cAAAA,KAAK,CAAC4B,0BAAN,CAAiChN,IAAjC,CAAsCkP,kBAAkB,CAACnS,GAAD,CAAxD;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,WAAOqO,KAAP;AACH;;AACDJ,EAAAA,OAAO,CAACtO,SAAR,CAAkBkS,oBAAlB,GAAyC,UAAUC,WAAV,EAAuB;AAC5D,QAAInO,QAAQ,MAAMmO,WAAW,CAAC1R,MAAZ,GAAqB,CAAvC,EAA0C;AACtC,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBqR,WAAW,IAAIrR,CAAC,GAAGqR,WAAW,CAAC1R,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxD,YAAIuB,KAAK,GAAG8P,WAAW,CAACrR,CAAD,CAAvB;AACAuB,QAAAA,KAAK,CAAC4Q,OAAN,GAAgB5Q,KAAK,CAAC4Q,OAAN,CAAcH,KAAd,CAAoB,KAApB,EAA2BI,IAA3B,CAAgC,IAAhC,CAAhB;AACH;AACJ;AACJ,GAPD;;AAQA5E,EAAAA,OAAO,CAACtO,SAAR,CAAkBmT,cAAlB,GAAmC,UAAUC,GAAV,EAAe;AAC9C,QAAIC,UAAU,GAAG,YAAjB;AACA,QAAIC,GAAG,GAAG,IAAV;;AACA,QAAIF,GAAG,CAACC,UAAD,CAAH,KAAoB,aAAxB,EAAuC;AACnC,UAAI5D,EAAE,GAAG2D,GAAG,CAACE,GAAD,CAAZ;AACA,aAAO,KAAKC,SAAL,CAAe9D,EAAf,EAAmBC,QAA1B;AACH,KAHD,MAIK,IAAI0D,GAAG,CAACC,UAAD,CAAH,KAAoB,UAAxB,EAAoC;AACrC,UAAIG,OAAO,GAAG,SAAd;AACA,UAAIC,SAAS,GAAGL,GAAG,CAACI,OAAD,CAAnB;AACA,UAAI/D,EAAE,GAAG2D,GAAG,CAACE,GAAD,CAAZ;;AACA,UAAIG,SAAJ,EAAe;AACX,eAAO,KAAKF,SAAL,CAAe9D,EAAf,EAAmBiE,QAA1B;AACH,OAFD,MAGK;AACD,eAAO,KAAKH,SAAL,CAAe9D,EAAf,EAAmBkE,OAA1B;AACH;AACJ,KAVI,MAWA,IAAIP,GAAG,CAACC,UAAD,CAAH,KAAoB,sBAAxB,EAAgD;AACjD,UAAIO,GAAG,GAAG,KAAV;AACA,UAAIC,QAAQ,GAAG,UAAf;AACA,UAAIC,IAAI,GAAGV,GAAG,CAACQ,GAAD,CAAd;AACA,WAAK/E,cAAL,GAAsB,IAAtB;;AACA,UAAIuE,GAAG,CAACS,QAAD,CAAP,EAAmB;AACf,YAAIE,GAAG,GAAG,KAAV;AACA,aAAKA,GAAL,EAAU9R,KAAV,CAAgB,IAAhB,EAAsB6R,IAAtB;AACH,OAHD,MAIK;AACD,YAAIE,QAAQ,GAAG,QAAf;AACA,aAAKA,QAAL,EAAe/R,KAAf,CAAqB,IAArB,EAA2B6R,IAA3B;AACH;;AACD,WAAKjF,cAAL,GAAsB,KAAtB;AACH,KAdI,MAeA,IAAIuE,GAAG,CAACC,UAAD,CAAH,KAAoB,yBAAxB,EAAmD;AACpD,UAAIY,IAAI,GAAG,MAAX;AACA,WAAKC,WAAL,CAAiBd,GAAG,CAACa,IAAD,CAApB;AACH;AACJ,GArCD;;AAsCA3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBmU,eAAlB,GAAoC,UAAUC,WAAV,EAAuB;AACvD,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIT,GAAJ;;AACA,SAAK,IAAIU,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY,KAAKW,SAAjB,CAAtB,EAAmDe,EAAE,GAAGC,EAAE,CAAC9T,MAA3D,EAAmE6T,EAAE,EAArE,EAAyE;AACrE,UAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACAV,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAelT,GAAf,CAAN;;AACA,UAAIuT,GAAG,KAAMQ,WAAW,IAAIR,GAAG,YAAYlO,SAA/B,IAA8C,CAAC0O,WAAD,IAAgBR,GAAG,YAAY/O,IAAlF,CAAP,EAAiG;AAC7FwP,QAAAA,UAAU,CAAC/Q,IAAX,CAAgBsQ,GAAhB;AACH;AACJ;;AACD,SAAKY,YAAL,CAAkBH,UAAlB;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;;AACI;;;AACA/F,EAAAA,OAAO,CAACtO,SAAR,CAAkByU,iBAAlB,GAAsC,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC9D;AACA,QAAIC,QAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,iBAAiB,GAAG,IAAxB;AACA,QAAIC,aAAa,GAAG,KAApB;AACA,QAAIC,kBAAkB,GAAG,KAAzB;;AACA,QAAI,KAAKC,cAAL,GAAsBlO,aAAa,CAACmO,MAAxC,EAAgD;AAC5C,WAAK,IAAIZ,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY8B,OAAZ,CAAtB,EAA4CJ,EAAE,GAAGC,EAAE,CAAC9T,MAApD,EAA4D6T,EAAE,EAA9D,EAAkE;AAC9D,YAAIa,IAAI,GAAGZ,EAAE,CAACD,EAAD,CAAb;;AACA,gBAAQa,IAAR;AACI,eAAK,OAAL;AACA,eAAK,QAAL;AACI,iBAAK1G,OAAL,CAAamD,KAAb,CAAmBwD,KAAnB,GAA2B,KAAKC,YAAL,CAAkB,KAAKD,KAAvB,CAA3B;AACA,iBAAK3G,OAAL,CAAamD,KAAb,CAAmB0D,MAAnB,GAA4B,KAAKD,YAAL,CAAkB,KAAKC,MAAvB,CAA5B;AACA,iBAAKC,YAAL,CAAkBC,kBAAlB,CAAqC,KAAK/G,OAA1C;;AACA,iBAAK,IAAIgH,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKC,KAA3B,EAAkCF,EAAE,GAAGC,EAAE,CAACjV,MAA1C,EAAkDgV,EAAE,EAApD,EAAwD;AACpD,kBAAIG,IAAI,GAAGF,EAAE,CAACD,EAAD,CAAb;AACA,kBAAII,IAAI,GAAG,KAAKF,KAAL,CAAWC,IAAX,CAAX;;AACA,kBAAI,EAAEC,IAAI,YAAYvH,OAAlB,CAAJ,EAAgC;AAC5BuH,gBAAAA,IAAI,CAACC,UAAL,CAAgBD,IAAhB;AACH;AACJ;;AACD;;AACJ,eAAK,OAAL;AACI,gBAAInB,OAAO,CAAChD,KAAR,CAAcjR,MAAd,GAAuB,CAAvB,IAA4BkU,OAAO,CAACjD,KAAR,CAAcjR,MAAd,KAAyB,CAAzD,EAA4D;AACxD,mBAAK0T,eAAL;AACAa,cAAAA,kBAAkB,GAAG,IAArB;AACH,aAHD,MAIK;AACD,mBAAK,IAAIe,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGxW,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAAChD,KAApB,CAAtB,EAAkDqE,EAAE,GAAGC,EAAE,CAACvV,MAA1D,EAAkEsV,EAAE,EAApE,EAAwE;AACpE,oBAAI1V,GAAG,GAAG2V,EAAE,CAACD,EAAD,CAAZ;AACA,oBAAIE,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACA,oBAAI2Q,YAAY,GAAG,KAAKU,KAAL,CAAWuE,KAAX,CAAnB;AACA,oBAAIC,WAAW,GAAGxB,OAAO,CAAChD,KAAR,CAAcuE,KAAd,CAAlB;AACAlB,gBAAAA,aAAa,GAAGA,aAAa,IAAImB,WAAW,CAACC,iBAAZ,KAAkCtG,SAAnE;AACA,qBAAKuG,kBAAL,CAAwBpF,YAAxB,EAAsC2D,OAAO,CAACjD,KAAR,CAAcuE,KAAd,CAAtC,EAA4DC,WAA5D,EAAyErG,SAAzE,EAAoF,IAApF,EAA0F,IAA1F;AACA,oBAAIiE,IAAI,GAAG;AACPrF,kBAAAA,OAAO,EAAE1J,iBAAiB,CAACiM,YAAD,CADnB;AACmCqF,kBAAAA,KAAK,EAAE,KAAKpB,cAD/C;AAEPJ,kBAAAA,QAAQ,EAAE9P,iBAAiB,CAAC4P,OAAO,CAACjD,KAAR,CAAcuE,KAAd,CAAD,CAFpB;AAGPrB,kBAAAA,QAAQ,EAAE7P,iBAAiB,CAAC2P,OAAO,CAAChD,KAAR,CAAcuE,KAAd,CAAD;AAHpB,iBAAX;;AAKA,oBAAIjS,QAAQ,EAAZ,EAAgB;AACZ8P,kBAAAA,IAAI,CAACrF,OAAL,GAAe;AAAE0C,oBAAAA,IAAI,EAAEpM,iBAAiB,CAACiM,YAAD;AAAzB,mBAAf;AACA8C,kBAAAA,IAAI,CAACe,QAAL,GAAgB;AAAE1D,oBAAAA,IAAI,EAAEpM,iBAAiB,CAAC8P,QAAD;AAAzB,mBAAhB;AACAf,kBAAAA,IAAI,CAACc,QAAL,GAAgB;AAAEzD,oBAAAA,IAAI,EAAEpM,iBAAiB,CAAC6P,QAAD;AAAzB,mBAAhB;AACH;;AACD,qBAAK0B,YAAL,CAAkBxP,YAAY,CAACyP,cAA/B,EAA+CzC,IAA/C;;AACA,oBAAIgB,iBAAJ,EAAuB;AACnBA,kBAAAA,iBAAiB,GAAG,KAApB;AACH;AACJ;;AACD,kBAAI,KAAK0B,IAAL,KAAc,QAAlB,EAA4B;AACxB,qBAAKC,mBAAL;AACH;AACJ;;AACD;;AACJ,eAAK,YAAL;AACI;AACA,gBAAIC,SAAS,GAAG,KAAK,CAArB;;AACA,gBAAIhC,OAAO,CAACtC,UAAR,CAAmB3R,MAAnB,GAA4B,CAA5B,IAAiCkU,OAAO,CAACvC,UAAR,CAAmB3R,MAAnB,KAA8B,CAAnE,EAAsE;AAClE,mBAAK0T,eAAL,CAAqB,IAArB;AACAa,cAAAA,kBAAkB,GAAG,IAArB;AACH,aAHD,MAIK;AACD,mBAAK,IAAI2B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpX,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAACtC,UAApB,CAAtB,EAAuDuE,EAAE,GAAGC,EAAE,CAACnW,MAA/D,EAAuEkW,EAAE,EAAzE,EAA6E;AACzE,oBAAItW,GAAG,GAAGuW,EAAE,CAACD,EAAD,CAAZ;AACA,oBAAIV,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACA,oBAAI2Q,YAAY,GAAG,KAAKoB,UAAL,CAAgB6D,KAAhB,CAAnB;AACA,oBAAIC,WAAW,GAAGxB,OAAO,CAACtC,UAAR,CAAmB6D,KAAnB,CAAlB;;AACA,oBAAIC,WAAW,KAAKA,WAAW,CAACW,eAAZ,IAA+BX,WAAW,CAACY,eAAhD,CAAf,EAAiF;AAC7E,uBAAK7B,cAAL,IAAuBlO,aAAa,CAACgQ,uBAArC;AACH;;AACD,qBAAKC,uBAAL,CAA6BhG,YAA7B,EAA2C2D,OAAO,CAACvC,UAAR,CAAmB6D,KAAnB,CAA3C,EAAsEC,WAAtE,EAAmF,IAAnF,EAAyF,IAAzF;;AACA,oBAAIA,WAAW,KAAKA,WAAW,CAACW,eAAZ,IAA+BX,WAAW,CAACY,eAAhD,CAAf,EAAiF;AAC7E,uBAAK7B,cAAL,GAAsB,KAAKA,cAAL,GAAsB,CAAClO,aAAa,CAACgQ,uBAA3D;AACH;;AACD,oBAAIjD,IAAI,GAAG;AACPrF,kBAAAA,OAAO,EAAE1J,iBAAiB,CAACiM,YAAD,CADnB;AACmCqF,kBAAAA,KAAK,EAAE,KAAKpB,cAD/C;AAEPJ,kBAAAA,QAAQ,EAAE9P,iBAAiB,CAAC4P,OAAO,CAACvC,UAAR,CAAmB6D,KAAnB,CAAD,CAFpB;AAGPrB,kBAAAA,QAAQ,EAAE7P,iBAAiB,CAAC2P,OAAO,CAACtC,UAAR,CAAmB6D,KAAnB,CAAD;AAHpB,iBAAX;;AAKA,oBAAIjS,QAAQ,EAAZ,EAAgB;AACZ8P,kBAAAA,IAAI,CAACrF,OAAL,GAAe;AAAE8D,oBAAAA,SAAS,EAAExN,iBAAiB,CAACiM,YAAD;AAA9B,mBAAf;AACA8C,kBAAAA,IAAI,CAACe,QAAL,GAAgB;AAAEtC,oBAAAA,SAAS,EAAExN,iBAAiB,CAAC8P,QAAD;AAA9B,mBAAhB;AACAf,kBAAAA,IAAI,CAACc,QAAL,GAAgB;AAAErC,oBAAAA,SAAS,EAAExN,iBAAiB,CAAC6P,QAAD;AAA9B,mBAAhB;AACH;;AACD,qBAAK0B,YAAL,CAAkBxP,YAAY,CAACyP,cAA/B,EAA+CzC,IAA/C;;AACA,oBAAI9C,YAAY,IAAIA,YAAY,CAACtB,QAA7B,IAAyC,KAAK6D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,EAAsCqC,KAAtC,CAA4CC,IAA5C,KAAqD,eAAlG,EAAmH;AAC/G,uBAAKiF,oBAAL,CAA0B,KAAK1D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,KAAyCsB,YAAnE;AACH;;AACD,oBAAI8D,iBAAJ,EAAuB;AACnBA,kBAAAA,iBAAiB,GAAG,KAApB;AACH;AACJ;;AACD,mBAAKoC,cAAL;;AACA,kBAAI,KAAKV,IAAL,KAAc,QAAlB,EAA4B;AACxB,qBAAKC,mBAAL;AACH;AACJ;;AACD;;AACJ,eAAK,iBAAL;AACI,iBAAKS,cAAL;;AACA,gBAAI,KAAKV,IAAL,KAAc,QAAlB,EAA4B;AACxB,mBAAKC,mBAAL;AACH;;AACD;;AACJ,eAAK,iBAAL;AACI,iBAAKU,oBAAL;AACA;;AACJ,eAAK,cAAL;AACI,iBAAKC,gBAAL;AACA,iBAAKC,UAAL;AACA;;AACJ,eAAK,eAAL;AACI,gBAAI3C,OAAO,CAAC4C,aAAR,CAAsBC,WAAtB,IAAqC,KAAKD,aAAL,CAAmBE,OAAxD,IAAmE,KAAKF,aAAL,CAAmBC,WAA1F,EAAuG;AACnG,kBAAI,KAAKD,aAAL,CAAmBC,WAAnB,CAA+B9W,MAA/B,GAAwC,CAA5C,EAA+C;AAC3C,qBAAKgX,cAAL,CAAoB,IAApB;AACA;AACH;AACJ;;AACD,gBAAI/C,OAAO,CAAC4C,aAAR,CAAsBI,WAA1B,EAAuC;AACnC,mBAAKD,cAAL,CAAoB,IAApB;AACA;AACH;;AACD;;AACJ,eAAK,cAAL;AACI,iBAAKE,kBAAL,CAAwBjD,OAAxB;AACA;;AACJ,eAAK,gBAAL;AACI,iBAAKkD,YAAL;AACA;;AACJ,eAAK,QAAL;AACI7C,YAAAA,aAAa,GAAG,IAAhB;AACA;;AACJ,eAAK,oBAAL;AACI,iBAAK8C,KAAL;AACA,iBAAKC,WAAL;;AACA,gBAAI,KAAKC,MAAL,CAAY/F,IAAZ,KAAqB,MAAzB,EAAiC;AAC7BgD,cAAAA,kBAAkB,GAAG,IAArB;AACH,aAFD,MAGK;AACDD,cAAAA,aAAa,GAAG,IAAhB;AACH;;AACD;;AACJ,eAAK,SAAL;AACIvI,YAAAA,WAAW,CAAC,IAAD,CAAX;AACA;;AACJ,eAAK,eAAL;AACI,iBAAKwL,mBAAL,CAAyBtD,OAAzB;AACA;;AACJ,eAAK,QAAL;AACI,iBAAKuD,WAAL,CAAiBvD,OAAjB;AACA;;AACJ,eAAK,gBAAL;AACI,iBAAKtF,aAAL,IAAsB5I,aAAa,CAAC0R,cAApC;AACA,iBAAKC,oBAAL,CAA0BzD,OAA1B;AACA,iBAAKtF,aAAL,IAAsB,CAAC5I,aAAa,CAAC0R,cAArC;AACA;;AACJ,eAAK,QAAL;AACI,gBAAIxD,OAAO,CAAC0D,MAAR,KAAmBzD,OAAO,CAACyD,MAA/B,EAAuC;AACnC,mBAAKC,WAAL,IAAoBpR,UAAU,CAACqR,eAA/B;;AACA/J,cAAAA,MAAM,CAACvO,SAAP,CAAiBuY,OAAjB,CAAyBnV,IAAzB,CAA8B,IAA9B;;AACA,mBAAKiV,WAAL,IAAoB,CAACpR,UAAU,CAACqR,eAAhC;AACH;;AACD;;AACJ,eAAK,qBAAL;AACI,gBAAI5D,OAAO,CAAC8D,mBAAR,CAA4BC,kBAA5B,KAAmD5I,SAAvD,EAAkE;AAC9D,mBAAK2I,mBAAL,CAAyBC,kBAAzB,GAA8C/D,OAAO,CAAC8D,mBAAR,CAA4BC,kBAA1E;AACH;;AACD,gBAAI/D,OAAO,CAAC8D,mBAAR,CAA4BE,IAA5B,KAAqC7I,SAAzC,EAAoD;AAChD,mBAAK2I,mBAAL,CAAyBE,IAAzB,GAAgChE,OAAO,CAAC8D,mBAAR,CAA4BE,IAA5D;AACH;;AACD,gBAAIhE,OAAO,CAAC8D,mBAAR,CAA4BG,KAAhC,EAAuC;AACnC,kBAAIA,KAAK,GAAGjE,OAAO,CAAC8D,mBAAR,CAA4BG,KAAxC;;AACA,mBAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGrZ,MAAM,CAACoT,IAAP,CAAY+F,KAAZ,CAAtB,EAA0CC,EAAE,GAAGC,EAAE,CAACpY,MAAlD,EAA0DmY,EAAE,EAA5D,EAAgE;AAC5D,oBAAIvY,GAAG,GAAGwY,EAAE,CAACD,EAAD,CAAZ;AACA,oBAAI3C,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACA,qBAAKmY,mBAAL,CAAyBG,KAAzB,CAA+B1C,KAA/B,IAAwC0C,KAAK,CAAC1C,KAAD,CAA7C;AACH;;AACD,kBAAI,KAAK6C,iBAAT,EAA4B;AACxB,qBAAKA,iBAAL,CAAuBC,YAAvB;AACH;AACJ;;AACD;;AACJ,eAAK,uBAAL;AACI,gBAAIrE,OAAO,CAACsE,qBAAR,CAA8BC,eAA9B,KAAkDpJ,SAAtD,EAAiE;AAC7D,mBAAKmJ,qBAAL,CAA2BC,eAA3B,GAA6CvE,OAAO,CAACsE,qBAAR,CAA8BC,eAA3E;AACH;;AACD;AAnLR;AAqLH;;AACD,UAAIlE,aAAa,IAAI,CAACC,kBAAtB,EAA0C;AACtC,YAAIL,OAAO,CAACoD,MAAR,IAAkBpD,OAAO,CAACoD,MAAR,CAAemB,qBAAf,KAAyC,gBAA3D,IAA+ExE,OAAO,CAACqD,MAAR,CAAemB,qBAAf,KAAyC,WAAxH,IACIvE,OAAO,CAACoD,MAAR,IAAkBrD,OAAO,CAACqD,MAA1B,IAAoC,CAACrD,OAAO,CAACqD,MAAR,CAAeoB,aAApD,IAAqExE,OAAO,CAACoD,MAAR,CAAeoB,aAD5F,EAC4G;AACxG,eAAK,IAAIrY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,gBAAIqQ,IAAI,GAAG,KAAKO,KAAL,CAAW5Q,CAAX,CAAX;;AACA,gBAAKqQ,IAAI,CAACiI,KAAL,IAAcjI,IAAI,CAACiI,KAAL,CAAW3Y,MAAX,GAAoB,CAAvC,EAA2C;AACvC,kBAAI2Y,KAAK,GAAG,EAAZ;;AACA,mBAAK,IAAIC,CAAC,GAAGlI,IAAI,CAACiI,KAAL,CAAW3Y,MAAX,GAAoB,CAAjC,EAAoC4Y,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC7C,oBAAIlI,IAAI,CAACiI,KAAL,CAAWC,CAAX,EAAc5J,EAAd,CAAiBqD,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,MAAmC,kBAAvC,EAA2D;AACvDsG,kBAAAA,KAAK,CAAC9V,IAAN,CAAW6N,IAAI,CAACiI,KAAL,CAAWC,CAAX,CAAX;AACH;AACJ;;AACD,mBAAKC,WAAL,CAAiBnI,IAAjB,EAAuBiI,KAAvB;AACH;AACJ;;AACD,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjH,UAAL,CAAgB3R,MAApC,EAA4C4Y,CAAC,EAA7C,EAAiD;AAC7C,gBAAI9G,SAAS,GAAG,KAAKH,UAAL,CAAgBiH,CAAhB,CAAhB;AACA,gBAAIE,YAAY,GAAGhH,SAAS,CAACiH,YAA7B;AACA,gBAAIC,YAAY,GAAGlH,SAAS,CAACmH,YAA7B,CAH6C,CAI7C;;AACAnH,YAAAA,SAAS,CAACiH,YAAV,GAAyB,EAAzB;AACAjH,YAAAA,SAAS,CAACmH,YAAV,GAAyB,EAAzB;AACAnH,YAAAA,SAAS,CAACoH,iBAAV,GAA8B9J,SAA9B;AACA0C,YAAAA,SAAS,CAACqH,iBAAV,GAA8B/J,SAA9B;AACA0C,YAAAA,SAAS,CAACsH,QAAV,GAAqB,EAArB;AACA,iBAAK7C,uBAAL,CAA6BzE,SAA7B,EAAwC;AACpCiH,cAAAA,YAAY,EAAED,YADsB;AACRG,cAAAA,YAAY,EAAED;AADN,aAAxC,EAEG;AAAED,cAAAA,YAAY,EAAE,EAAhB;AAAoBE,cAAAA,YAAY,EAAE;AAAlC,aAFH;AAGH;AACJ;;AACD,aAAKI,QAAL;AACA,aAAKC,oBAAL;AACH;;AACD,UAAIjF,iBAAiB,IAAI,KAAKyB,cAA9B,EAA8C;AAC1C,YAAIzC,IAAI,GAAG;AACPrF,UAAAA,OAAO,EAAE1J,iBAAiB,CAAC,IAAD,CADnB;AAC2BsR,UAAAA,KAAK,EAAE,KAAKpB,cADvC;AAEPJ,UAAAA,QAAQ,EAAE9P,iBAAiB,CAAC4P,OAAD,CAFpB;AAE+BC,UAAAA,QAAQ,EAAE7P,iBAAiB,CAAC2P,OAAD;AAF1D,SAAX;;AAIA,YAAI1Q,QAAQ,EAAZ,EAAgB;AACZ8P,UAAAA,IAAI,CAACrF,OAAL,GAAe;AAAEuL,YAAAA,OAAO,EAAEjV,iBAAiB,CAAC,IAAD;AAA5B,WAAf;AACA+O,UAAAA,IAAI,CAACe,QAAL,GAAgB;AAAEmF,YAAAA,OAAO,EAAEjV,iBAAiB,CAAC8P,QAAD;AAA5B,WAAhB;AACAf,UAAAA,IAAI,CAACc,QAAL,GAAgB;AAAEoF,YAAAA,OAAO,EAAEjV,iBAAiB,CAAC6P,QAAD;AAA5B,WAAhB;AACH;;AACD,aAAK0B,YAAL,CAAkBxP,YAAY,CAACyP,cAA/B,EAA+CzC,IAA/C;AACH;;AACD,UAAI,CAACkB,kBAAD,IAAwB,KAAKiF,YAAL,EAAxB,IAAiD,KAAKC,YAAL,CAAkBxF,OAAlB,EAA2BC,OAA3B,CAArD,EAA2F;AACvF,YAAIwF,KAAK,GAAG;AAAEnI,UAAAA,IAAI,EAAE,iBAAR;AAA2BoI,UAAAA,UAAU,EAAEzF,OAAvC;AAAgD0F,UAAAA,UAAU,EAAE3F,OAA5D;AAAqE4F,UAAAA,QAAQ,EAAE;AAA/E,SAAZ;;AACA,YAAI,KAAKC,cAAT,EAAyB;AACrB,eAAKC,eAAL,CAAqBL,KAArB;AACH;AACJ;;AACD,WAAKM,mBAAL;;AACA,UAAIzF,kBAAJ,EAAwB;AACpB,aAAK8C,WAAL,CAAiB,IAAjB;AACA,aAAKrB,mBAAL;;AACA,YAAI1B,aAAJ,EAAmB;AACf,eAAK+E,QAAL;AACH;AACJ;;AACD,UAAIY,WAAW,GAAKlb,MAAM,CAACoT,IAAP,CAAY8B,OAAZ,EAAqBjU,MAArB,KAAgC,CAAjC,IAAuCiU,OAAO,CAACiG,cAAR,KAA2B9K,SAArF;;AACA,UAAI,CAACmF,kBAAL,EAAyB;AACrB,aAAK,IAAI4F,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKlF,KAA3B,EAAkCiF,EAAE,GAAGC,EAAE,CAACpa,MAA1C,EAAkDma,EAAE,EAApD,EAAwD;AACpD,cAAI/E,IAAI,GAAGgF,EAAE,CAACD,EAAD,CAAb;AACA,cAAIhF,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAX;;AACA,cAAI,EAAED,IAAI,YAAYtH,OAAlB,CAAJ,EAAgC;AAC5B,gBAAIoG,OAAO,CAACiG,cAAR,IAA0BjG,OAAO,CAACiG,cAAR,CAAuBG,WAAvB,KAAuCnG,OAAO,CAACgG,cAAR,CAAuBG,WAA5F,EAAyG;AACrGlF,cAAAA,IAAI,CAACmF,eAAL,CAAqBnF,IAArB;AACH;;AACD,gBAAI,CAAC8E,WAAL,EAAkB;AACd,mBAAKM,yBAAL,CAA+BpF,IAA/B;AACH;AACJ;AACJ;AACJ;;AACD,WAAKqF,aAAL;AACH;AACJ,GA5QD;AA6QA;;;AACA3M,EAAAA,OAAO,CAACtO,SAAR,CAAkB2X,kBAAlB,GAAuC,UAAUjD,OAAV,EAAmB;AACtD,QAAIA,OAAO,CAACwG,YAAR,CAAqBxD,WAArB,KAAqC7H,SAArC,IAAkD6E,OAAO,CAACwG,YAAR,CAAqBC,mBAAvE,IACAzG,OAAO,CAACwG,YAAR,CAAqBE,iBADrB,IAC0C1G,OAAO,CAACwG,YAAR,CAAqBG,QADnE,EAC6E;AACzE,WAAKC,eAAL,CAAqBC,UAArB,CAAgC,KAAKL,YAArC,EAAmD3Q,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAAlE,EAAqF,KAAK+L,QAAL,CAAcC,SAAnG,EAA8G,KAAKC,aAAnH,EAAkI,KAAKC,MAAvI,EAA+I,KAAKC,MAApJ;AACH;AACJ,GALD;;AAMAtN,EAAAA,OAAO,CAACtO,SAAR,CAAkBgY,mBAAlB,GAAwC,UAAUtD,OAAV,EAAmB;AACvD,QAAIA,OAAO,CAACgH,aAAR,CAAsBG,WAAtB,KAAsChM,SAA1C,EAAqD;AACjD,WAAKyL,eAAL,CAAqBC,UAArB,CAAgC,KAAKL,YAArC,EAAmD3Q,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAAlE,EAAqF,KAAK+L,QAAL,CAAcC,SAAnG,EAA8G,KAAKC,aAAnH,EAAkI,KAAKC,MAAvI,EAA+I,KAAKC,MAApJ;AACH;;AACD,QAAIlH,OAAO,CAACgH,aAAR,CAAsBI,UAAtB,KAAqCjM,SAAzC,EAAoD;AAChD,WAAKsH,oBAAL;AACA,WAAKqE,QAAL,CAAcO,OAAd;AACA,WAAKC,YAAL;AACH,KAJD,MAKK,IAAItH,OAAO,CAACgH,aAAR,CAAsBO,eAAtB,KAA0CpM,SAA1C,IACL6E,OAAO,CAACgH,aAAR,CAAsBQ,aAAtB,KAAwCrM,SADvC,EACkD;AACnD,UAAI6E,OAAO,CAACgH,aAAR,CAAsBO,eAAtB,CAAsCE,SAAtC,KAAoDtM,SAApD,IACA6E,OAAO,CAACgH,aAAR,CAAsBQ,aAAtB,CAAoCC,SAApC,KAAkDtM,SADtD,EACiE;AAC7DhK,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,aAAKsR,oBAAL;AACA,aAAKqE,QAAL,CAAcO,OAAd;AACA,aAAKC,YAAL;AACH,OAND,MAOK;AACDlW,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ;;AACD,SAAKwV,eAAL,CAAqBC,UAArB,CAAgC,KAAKL,YAArC,EAAmD3Q,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAAlE,EAAqF,KAAK+L,QAAL,CAAcC,SAAnG,EAA8G,KAAKC,aAAnH,EAAkI,KAAKC,MAAvI,EAA+I,KAAKC,MAApJ;AACH,GAvBD;AAwBA;AACJ;AACA;AACA;AACA;;;AACItN,EAAAA,OAAO,CAACtO,SAAR,CAAkBoc,cAAlB,GAAmC,YAAY;AAC3C,QAAIC,SAAS,GAAG,CAAC,QAAD,CAAhB;AACA,WAAO,KAAKC,YAAL,CAAkBD,SAAlB,CAAP;AACH,GAHD;AAIA;AACJ;AACA;;;AACI/N,EAAAA,OAAO,CAACtO,SAAR,CAAkBuc,SAAlB,GAA8B,YAAY;AACtC,SAAKC,0BAAL;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACA,SAAKC,cAAL,GAAsB,IAAI/X,cAAJ,EAAtB;AACA,SAAKgY,kBAAL;AACA,SAAKC,UAAL;AACA,QAAIC,oBAAoB,GAAG,gBAA3B;;AACA,QAAIvL,MAAM,CAACuL,oBAAD,CAAV,EAAkC;AAC9BvL,MAAAA,MAAM,CAACuL,oBAAD,CAAN,GAA+B,IAA/B;AACH;;AACD,SAAKC,WAAL;AACA,SAAKC,SAAL;AACA,SAAKC,YAAL;AACA,SAAKC,UAAL;AACA,SAAKxO,OAAL,CAAayO,SAAb,CAAuBnJ,GAAvB,CAA2B,WAA3B;AACH,GAfD;;AAgBAzF,EAAAA,OAAO,CAACtO,SAAR,CAAkBwc,0BAAlB,GAA+C,YAAY;AACvD,QAAI,KAAK/N,OAAL,CAAagB,EAAb,KAAoB,EAAxB,EAA4B;AACxB,UAAI4E,UAAU,GAAG8I,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,EAA6C3c,MAA9D;AACA,WAAKgO,OAAL,CAAagB,EAAb,GAAkB,aAAa,KAAKoB,SAAlB,GAA8B,GAA9B,GAAoCwD,UAAtD;AACH;;AACD,SAAKgJ,aAAL,GAAqB;AACjBC,MAAAA,IAAI,EAAE,MADW;AAEjBC,MAAAA,GAAG,EAAE,KAFY;AAGjBC,MAAAA,KAAK,EAAE,OAHU;AAIjBC,MAAAA,IAAI,EAAE,MAJW;AAKjBC,MAAAA,IAAI,EAAE,MALW;AAMjBC,MAAAA,SAAS,EAAE,YANM;AAOjBC,MAAAA,QAAQ,EAAE,UAPO;AAQjBC,MAAAA,KAAK,EAAE,OARU;AASjBC,MAAAA,OAAO,EAAE,UATQ;AAUjBC,MAAAA,KAAK,EAAE,OAVU;AAWjBC,MAAAA,YAAY,EAAE,gBAXG;AAYjBC,MAAAA,WAAW,EAAE,cAZI;AAajBC,MAAAA,UAAU,EAAE,cAbK;AAcjBC,MAAAA,YAAY,EAAE;AAdG,KAArB;AAgBA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAK9K,SAAL,GAAiB,EAAjB;AACA,SAAK+K,SAAL,GAAiB,EAAjB;AACA,SAAKnP,UAAL,GAAkB,EAAlB;AACA,SAAKoP,QAAL,GAAgB,EAAhB;;AACA,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,WAAK7I,KAAL,GAAa,EAAb;AACH;;AACD,SAAK8I,cAAL,GAAsB,IAAI1V,cAAJ,CAAmB,IAAnB,CAAtB;AACA,SAAKwM,YAAL,GAAoB,IAAIzM,mBAAJ,CAAwB,IAAxB,EAA8B,KAAK2V,cAAnC,CAApB;AACA,SAAKC,aAAL,GAAqB,IAAIxV,aAAJ,CAAkB,KAAKqK,SAAvB,CAArB;AACA,SAAKiI,QAAL,GAAgB,IAAIxS,eAAJ,CAAoB,IAApB,CAAhB;AACH,GAlCD;;AAmCAsF,EAAAA,OAAO,CAACtO,SAAR,CAAkB2c,kBAAlB,GAAuC,YAAY;AAC/C,SAAKD,cAAL,CAAoBiC,QAApB,CAA6B,cAA7B,EAA6C,KAAKC,SAAL,GAAiB,IAAIhb,IAAJ,CAAS,KAAKib,aAAL,EAAT,EAA+B,KAAKxB,aAApC,EAAmD,KAAKjF,MAAxD,CAA9D;AACH,GAFD;AAGA;AACJ;AACA;;;AACI9J,EAAAA,OAAO,CAACtO,SAAR,CAAkB4c,UAAlB,GAA+B,YAAY;AACvC,SAAKgC,SAAL,GAAiB,IAAIhb,IAAJ,CAAS,KAAKib,aAAL,EAAT,EAA+B,KAAKxB,aAApC,EAAmD,KAAKjF,MAAxD,CAAjB;AACH,GAFD;AAGA;;AACA;AACJ;AACA;;;AACI9J,EAAAA,OAAO,CAACtO,SAAR,CAAkB8e,MAAlB,GAA2B,YAAY;AACnC,QAAI,KAAKC,UAAL,IAAmB,KAAKxN,kBAAL,CAAwBC,UAA3C,IAAyD,CAAC,KAAKgN,SAAnE,EAA8E;AAC1E,WAAK9M,KAAL,GAAa,EAAb;AACA,WAAKU,UAAL,GAAkB,EAAlB;AACH;;AACD,SAAKX,qBAAL,GAA6B,IAA7B;AACA,QAAIuN,QAAQ,GAAG,UAAf;AACA1N,IAAAA,MAAM,CAAC0N,QAAD,CAAN,GAAmB,EAAnB;AACA,QAAIC,aAAa,GAAG,EAApB;;AACA,QAAIjb,QAAQ,EAAZ,EAAgB;AACZ,UAAIkb,YAAY,GAAG,EAAnB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AACA,WAAK,IAAIre,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKyP,sBAAL,CAA4B9P,MAAhD,EAAwDK,CAAC,EAAzD,EAA6D;AACzDoe,QAAAA,YAAY,CAAC5b,IAAb,CAAkB,KAAKmb,cAAL,CAAoBW,UAApB,CAA+BC,iBAA/B,CAAiD,KAAK9O,sBAAL,CAA4BzP,CAA5B,CAAjD,CAAlB;AACH;;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwP,0BAAL,CAAgC7P,MAApD,EAA4DK,CAAC,EAA7D,EAAiE;AAC7Dqe,QAAAA,iBAAiB,CAAC7b,IAAlB,CAAuB,KAAKmb,cAAL,CAAoBW,UAApB,CAA+BC,iBAA/B,CAAiD,KAAK/O,0BAAL,CAAgCxP,CAAhC,CAAjD,CAAvB;AACH;;AACD,UAAIwe,aAAa,GAAG,UAApB;AACA,UAAIlO,MAAM,GAAG,QAAb;AACA,UAAImO,aAAa,GAAG;AAAE7N,QAAAA,KAAK,EAAEwN,YAAT;AAAuB9M,QAAAA,UAAU,EAAE+M;AAAnC,OAApB;;AACA,UAAI7N,MAAM,IAAIA,MAAM,CAACF,MAAD,CAAhB,IAA4B,CAAC,KAAKG,kBAAL,CAAwBC,UAArD,KACI0N,YAAY,CAACze,MAAb,GAAsB,CAAtB,IAA2B0e,iBAAiB,CAAC1e,MAAlB,GAA2B,CAD1D,CAAJ,EACkE;AAC9D,YAAImT,GAAG,GAAG;AAAE,wBAAc,wBAAhB;AAA0C,wBAAc2L;AAAxD,SAAV;AACAjO,QAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACH;AACJ;;AACD,QAAI,KAAKrC,kBAAL,CAAwBkO,UAAxB,CAAmCC,IAAvC,EAA6C;AACzC,WAAKC,iBAAL;AACH;;AACD,SAAKC,WAAL;AACA,SAAKtE,eAAL,GAAuB,IAAI9W,eAAJ,CAAoB,KAAKiK,OAAL,CAAagB,EAAjC,EAAqC,IAAIlL,WAAJ,EAArC,EAAwD,KAAKiS,IAAL,KAAc,KAAtE,CAAvB;AACA,SAAKqJ,UAAL;AACA,SAAKC,uBAAL;AACA,SAAKxE,eAAL,CAAqByE,SAArB;AACA,SAAKjI,WAAL,CAAiB,IAAjB;AACA,QAAIkI,QAAQ,GAAG,KAAf;;AACA,QAAIhc,QAAQ,MAAM,CAAC,KAAKuN,kBAAL,CAAwBC,UAAvC,IAAqD,KAAKuG,MAAL,CAAY/F,IAAZ,KAAqB,MAA9E,EAAsF;AAClF,WAAK,IAAIsC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAK7C,KAA3B,EAAkC4C,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIV,GAAG,GAAGW,EAAE,CAACD,EAAD,CAAZ;AACA,aAAK2L,WAAL,CAAiB9T,WAAW,CAACyH,GAAD,CAA5B,EAAmC,IAAnC;AACH;;AACD,WAAK,IAAI6B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKtD,UAA3B,EAAuCqD,EAAE,GAAGC,EAAE,CAACjV,MAA/C,EAAuDgV,EAAE,EAAzD,EAA6D;AACzD,YAAI7B,GAAG,GAAG8B,EAAE,CAACD,EAAD,CAAZ;AACA,aAAKwK,WAAL,CAAiB9T,WAAW,CAACyH,GAAD,CAA5B,EAAmC,KAAnC;AACH;;AACDoM,MAAAA,QAAQ,GAAG,IAAX;AACH;;AACD,QAAItO,KAAK,GAAG,KAAKA,KAAjB;;AACA,SAAK,IAAI5Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4Q,KAAK,CAACjR,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,UAAI,CAAC4Q,KAAK,CAAC5Q,CAAD,CAAL,CAASof,UAAd,EAA0B;AACtBjB,QAAAA,aAAa,CAAC3b,IAAd,CAAmBoO,KAAK,CAAC5Q,CAAD,CAAxB;AACH;AACJ;;AACD,QAAIme,aAAa,CAACxe,MAAlB,EAA0B;AACtB,WAAK,IAAIK,CAAC,GAAGme,aAAa,CAACxe,MAAd,GAAuB,CAApC,EAAuCK,CAAC,IAAI,CAA5C,EAA+CA,CAAC,EAAhD,EAAoD;AAChD,aAAK2d,cAAL,CAAoB0B,UAApB,CAA+BlB,aAAa,CAACne,CAAD,CAA5C,EAAiD,IAAjD;AACH;AACJ;;AACD,QAAI,KAAKuP,SAAT,EAAoB;AAChB,WAAKyJ,QAAL;AACH;;AACD,QAAIkG,QAAJ,EAAc;AACV,WAAKvB,cAAL,CAAoB2B,kBAApB;AACH;;AACD,QAAI,KAAKC,iBAAT,EAA4B;AACxB,UAAIC,uBAAuB,GAAG,EAA9B;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,UAAIC,gBAAgB,GAAG,EAAvB;;AACA,UAAIxc,QAAQ,EAAZ,EAAgB;AACZ,aAAK,IAAI+R,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAK5D,UAA3B,EAAuC2D,EAAE,GAAGC,EAAE,CAACvV,MAA/C,EAAuDsV,EAAE,EAAzD,EAA6D;AACzD,cAAInC,GAAG,GAAGoC,EAAE,CAACD,EAAD,CAAZ;AACAuK,UAAAA,uBAAuB,CAAChd,IAAxB,CAA6B6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAxC;AACH;AACJ;;AACD,WAAKwQ,iBAAL,CAAuBI,WAAvB,CAAmC,IAAnC;;AACA,UAAIzc,QAAQ,EAAZ,EAAgB;AACZ,aAAK,IAAI2S,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKxE,UAA3B,EAAuCuE,EAAE,GAAGC,EAAE,CAACnW,MAA/C,EAAuDkW,EAAE,EAAzD,EAA6D;AACzD,cAAI/C,GAAG,GAAGgD,EAAE,CAACD,EAAD,CAAZ;AACA4J,UAAAA,qBAAqB,CAACjd,IAAtB,CAA2B6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAtC;AACH;;AACD,aAAK4O,cAAL,CAAoBiC,gBAApB,CAAqCJ,uBAArC,EAA8DC,qBAA9D,EAAqFC,gBAArF;;AACA,YAAI,EAAE,KAAKlR,aAAL,GAAqB5I,YAAY,CAACia,WAApC,CAAJ,EAAsD;AAClD,cAAIrB,aAAa,GAAG,UAApB;AACA,cAAIlO,MAAM,GAAG,QAAb;AACA,cAAImO,aAAa,GAAG;AAAE7N,YAAAA,KAAK,EAAE,EAAT;AAAaU,YAAAA,UAAU,EAAEoO;AAAzB,WAApB;;AACA,cAAIlP,MAAM,IAAIA,MAAM,CAACF,MAAD,CAApB,EAA8B;AAC1B,gBAAIwC,GAAG,GAAG;AAAE,4BAAc,wBAAhB;AAA0C,4BAAc2L;AAAxD,aAAV;AACAjO,YAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACH;AACJ;AACJ;AACJ;;AACD,SAAKwD,gBAAL;AACA,SAAKwJ,gBAAL;AACA,SAAKtF,eAAL,CAAqBuF,kBAArB,CAAwC,KAAK3F,YAA7C,EAA2D3Q,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAA1E,EAA6F,KAAK+L,QAAL,CAAcC,SAA3G,EAAsH,KAAKC,aAA3H,EAA0I,KAAKC,MAA/I,EAAuJ,KAAKC,MAA5J;AACA,SAAK6C,cAAL,CAAoBqC,mBAApB;AACA;AACR;AACA;;AACQ,SAAKC,MAAL,CAAY,cAAZ,EAA4B,EAA5B;AACA;AACR;AACA;;AACQ,SAAKC,OAAL,CAAa,MAAb;AACA,SAAKxF,QAAL,CAAcO,OAAd;AACA,SAAKP,QAAL,CAAcyF,mBAAd;AACA,SAAKxK,mBAAL;;AACA,QAAI,KAAKkE,cAAL,CAAoBuG,cAApB,GAAqC,CAArC,IAA0C,KAAKvG,cAAL,CAAoBwG,gBAApB,GAAuC,CAArF,EAAwF;AACpF,WAAKC,kBAAL;AACH;AACD;AACR;AACA;;;AACQ,QAAIld,OAAO,CAACmd,QAAZ,EAAsB;AAClB,WAAKC,IAAL,GAAYjb,YAAY,CAACkb,OAAb,GAAuBlb,YAAY,CAACmb,YAAhD;AACH;;AACD,SAAKT,MAAL,CAAY,aAAZ,EAA2B,EAA3B;AACA,SAAKtE,mBAAL,GAA2B,KAA3B;AACA,SAAKgF,aAAL,GAAqBjV,WAAW,CAAC,IAAD,CAAhC;AACA,SAAKyI,cAAL,GAAsBlO,aAAa,CAACmO,MAApC;AACA,SAAK0C,YAAL;AACA,QAAI8J,wBAAwB,GAAGvE,QAAQ,CAACC,sBAAT,CAAgC,KAAK3O,OAAL,CAAagB,EAAb,GAAkB,2BAAlD,CAA/B;AACA7F,IAAAA,yBAAyB,CAAC,KAAK+X,kBAAN,EAA0BD,wBAA1B,EAAoD,KAAKpK,aAAzD,EAAwE,KAAK7I,OAAL,CAAagB,EAArF,CAAzB;AACA,SAAKmS,cAAL;AACA,SAAKpD,SAAL,GAAiB,KAAjB;AACA,SAAKqD,cAAL;AACA,SAAKC,eAAL;;AACA,QAAI,KAAK/C,UAAT,EAAqB;AACjB,WAAKhF,oBAAL;AACH;AACJ,GAnID;AAoIA;;;AACAzL,EAAAA,OAAO,CAACtO,SAAR,CAAkB8hB,eAAlB,GAAoC,YAAY;AAC5C,QAAI,KAAKC,YAAL,IAAqB,KAAKA,YAAL,CAAkBC,UAAvC,IAAqD,KAAKD,YAAL,CAAkBC,UAAlB,CAA6BC,MAAtF,EAA8F;AAC1F,WAAKC,SAAL,CAAe,KAAKH,YAAL,CAAkBC,UAAjC;AACH;AACJ,GAJD;;AAKA1T,EAAAA,OAAO,CAACtO,SAAR,CAAkB4hB,cAAlB,GAAmC,YAAY;AAC3C,QAAIzQ,IAAJ;AACA,QAAIgR,UAAJ;AACA,QAAIC,cAAJ;;AACA,SAAK,IAAIthB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxCqQ,MAAAA,IAAI,GAAG,KAAKO,KAAL,CAAW5Q,CAAX,CAAP;;AACA,UAAIqQ,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAApB,IAA8Bb,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,QAAtD,EAAgE;AAC5D5N,QAAAA,oBAAoB,CAAC,yBAAD,EAA4B,cAA5B,EAA4C,IAA5C,EAAkD,KAAlD,CAApB;AACA;AACH;AACJ;;AACD,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxCqQ,MAAAA,IAAI,GAAG,KAAKO,KAAL,CAAW5Q,CAAX,CAAP;AACAqhB,MAAAA,UAAU,GAAGhR,IAAI,CAACgB,WAAL,CAAiB,CAAjB,CAAb;;AACA,UAAIgQ,UAAU,IAAIA,UAAU,CAACE,cAAX,KAA8B,UAAhD,EAA4D;AACxDje,QAAAA,oBAAoB,CAAC,+BAAD,EAAkC,oBAAlC,EAAwD,IAAxD,EAA8D,KAA9D,CAApB;AACA;AACH;AACJ;;AACD,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7CshB,MAAAA,cAAc,GAAG,KAAKhQ,UAAL,CAAgBtR,CAAhB,EAAmBqR,WAAnB,CAA+B,CAA/B,CAAjB;;AACA,UAAIiQ,cAAc,IAAIA,cAAc,CAACC,cAAf,KAAkC,UAAxD,EAAoE;AAChEje,QAAAA,oBAAoB,CAAC,+BAAD,EAAkC,oBAAlC,EAAwD,IAAxD,EAA8D,KAA9D,CAApB;AACA;AACH;AACJ;;AACD,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAAnD,EAA2DK,CAAC,EAA5D,EAAgE;AAC5D,UAAI,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,EAAkCwhB,QAAtC,EAAgD;AAC5Cle,QAAAA,oBAAoB,CAAC,+BAAD,EAAkC,oBAAlC,EAAwD,IAAxD,EAA8D,KAA9D,CAApB;AACA;AACH;AACJ;AACJ,GAhCD;;AAiCAkK,EAAAA,OAAO,CAACtO,SAAR,CAAkBib,aAAlB,GAAkC,YAAY;AAC1C,QAAIsH,QAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,IAAJ;;AACA,SAAK,IAAI3hB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxCyhB,MAAAA,QAAQ,GAAG,KAAK7Q,KAAL,CAAW5Q,CAAX,CAAX;;AACA,UAAIyhB,QAAQ,CAACxQ,KAAT,CAAeC,IAAf,KAAwB,MAAxB,IAAkCuQ,QAAQ,CAACxQ,KAAT,CAAekB,OAAf,YAAkCyP,WAAxE,EAAqF;AACjFre,QAAAA,mBAAmB,CAAC,yBAAD,EAA4B,cAA5B,CAAnB;AACA;AACH;AACJ;;AACD,SAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxCyhB,MAAAA,QAAQ,GAAG,KAAK7Q,KAAL,CAAW5Q,CAAX,CAAX;AACA0hB,MAAAA,kBAAkB,GAAGD,QAAQ,CAACpQ,WAAT,CAAqB,CAArB,CAArB;;AACA,UAAIqQ,kBAAkB,IAAIA,kBAAkB,CAACH,cAAnB,KAAsC,UAA5D,IACGG,kBAAkB,CAACvP,OAAnB,YAAsCyP,WAD7C,EAC0D;AACtDre,QAAAA,mBAAmB,CAAC,+BAAD,EAAkC,oBAAlC,CAAnB;AACA;AACH;AACJ;;AACD,SAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7C2hB,MAAAA,IAAI,GAAG,KAAKrQ,UAAL,CAAgBtR,CAAhB,EAAmBqR,WAAnB,CAA+B,CAA/B,CAAP;;AACA,UAAIsQ,IAAI,IAAIA,IAAI,CAACJ,cAAL,KAAwB,UAAhC,IAA8CI,IAAI,CAACxP,OAAL,YAAwByP,WAA1E,EAAuF;AACnFre,QAAAA,mBAAmB,CAAC,+BAAD,EAAkC,oBAAlC,CAAnB;AACA;AACH;AACJ;;AACD,SAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAAnD,EAA2DK,CAAC,EAA5D,EAAgE;AAC5D,UAAI,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,EAAkCwhB,QAAtC,EAAgD;AAC5Cle,QAAAA,oBAAoB,CAAC,+BAAD,EAAkC,oBAAlC,EAAwD,IAAxD,EAA8D,KAA9D,CAApB;AACA;AACH;AACJ;AACJ,GAjCD,CAtuB2C,CAwwB3C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAkK,EAAAA,OAAO,CAACtO,SAAR,CAAkB2f,iBAAlB,GAAsC,YAAY;AAC9C;AACA,QAAIgD,OAAO,GAAG,IAAd;AACA;;AACA,QAAIA,OAAO,CAACpR,kBAAR,CAA2BkO,UAA3B,CAAsCC,IAA1C,EAAgD;AAC5C,UAAIkD,QAAQ,GAAG,IAAI7e,IAAJ,CAAS4e,OAAO,CAACpR,kBAAR,CAA2BkO,UAA3B,CAAsCC,IAA/C,EAAqD,KAArD,EAA4D,KAA5D,CAAf;;AACAkD,MAAAA,QAAQ,CAACC,SAAT,GAAqB,UAAU5O,IAAV,EAAgB;AACjC,YAAI0O,OAAO,CAACpR,kBAAR,CAA2BuR,WAA/B,EAA4C;AACxCH,UAAAA,OAAO,CAACpR,kBAAR,CAA2BuR,WAA3B,GAAyCC,IAAI,CAACC,KAAL,CAAW/O,IAAX,CAAzC;AACH,SAFD,MAGK;AACD0O,UAAAA,OAAO,CAACpR,kBAAR,CAA2BC,UAA3B,GAAwCuR,IAAI,CAACC,KAAL,CAAW/O,IAAX,CAAxC;AACH;;AACD0O,QAAAA,OAAO,CAACM,QAAR;AACH,OARD;;AASAL,MAAAA,QAAQ,CAACM,IAAT,GAAgBlhB,IAAhB;AACH;;AACD,QAAI2gB,OAAO,CAACpR,kBAAR,CAA2B4R,oBAA3B,CAAgD1D,UAAhD,CAA2DC,IAA/D,EAAqE;AACjE,UAAIkD,QAAQ,GAAG,IAAI7e,IAAJ,CAAS4e,OAAO,CAACpR,kBAAR,CAA2B4R,oBAA3B,CAAgD1D,UAAhD,CAA2DC,IAApE,EAA0E,KAA1E,EAAiF,KAAjF,CAAf;;AACAkD,MAAAA,QAAQ,CAACC,SAAT,GAAqB,UAAU5O,IAAV,EAAgB;AACjC0O,QAAAA,OAAO,CAACpR,kBAAR,CAA2B4R,oBAA3B,CAAgDL,WAAhD,GAA8DC,IAAI,CAACC,KAAL,CAAW/O,IAAX,CAA9D;AACA0O,QAAAA,OAAO,CAACM,QAAR;AACH,OAHD;;AAIAL,MAAAA,QAAQ,CAACM,IAAT,GAAgBlhB,IAAhB;AACH;AACJ,GAzBD;AA0BA;AACJ;AACA;AACA;AACA;;;AACIsM,EAAAA,OAAO,CAACtO,SAAR,CAAkB6e,aAAlB,GAAkC,YAAY;AAC1C,WAAO,SAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIvQ,EAAAA,OAAO,CAACtO,SAAR,CAAkBojB,YAAlB,GAAiC,YAAY;AACzC,WAAO,SAAP;AACH,GAFD;AAGA;;AACA;AACJ;AACA;AACA;AACA;AACA;;;AACI9U,EAAAA,OAAO,CAACtO,SAAR,CAAkBqjB,eAAlB,GAAoC,YAAY;AAC5C,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,MAAAA,MAAM,EAAE,MADC;AAETzP,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIAwP,IAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,MAAAA,MAAM,EAAE,UADC;AAETzP,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIAwP,IAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,MAAAA,MAAM,EAAE,sBADC;AAETzP,MAAAA,IAAI,EAAE;AAFG,KAAb;;AAIA,QAAI9P,QAAQ,EAAZ,EAAgB;AACZsf,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,eADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAK4D,WAAL,GAAmB/Q,kBAAkB,CAAC6c,QAA1C,EAAoD;AAChDF,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,UADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKiE,MAAL,CAAY/F,IAAZ,KAAqB,qBAArB,IAA8C,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAAnE,IACA,KAAK+F,MAAL,CAAY0L,eADhB,EACiC;AAC7BH,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,eADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKoH,YAAL,CAAkBxD,WAAtB,EAAmC;AAC/B4L,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,UADC;AAETzP,QAAAA,IAAI,EAAE,CAAC,IAAD;AAFG,OAAb;AAIH;;AACDwP,IAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,MAAAA,MAAM,EAAE,gBADC;AAETzP,MAAAA,IAAI,EAAE,CAAC,IAAD;AAFG,KAAb;;AAIA,QAAI,KAAK0E,mBAAL,CAAyBE,IAA7B,EAAmC;AAC/B4K,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,aADC;AAETzP,QAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,KAAK4I,cAAZ;AAFG,OAAb;AAIH;;AACD,QAAI,KAAK3E,MAAL,CAAY/F,IAAZ,KAAqB,qBAArB,IAA8C,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAAvE,EAA2F;AACvFsR,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,qBADC;AAETzP,QAAAA,IAAI,EAAE,CAAC,IAAD;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKiE,MAAL,CAAY/F,IAAZ,KAAqB,yBAAzB,EAAoD;AAChDsR,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,yBADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKiE,MAAL,CAAY/F,IAAZ,KAAqB,SAAzB,EAAoC;AAChCsR,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,cADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKiE,MAAL,CAAY/F,IAAZ,KAAqB,YAAzB,EAAuC;AACnCsR,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,YADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKiE,MAAL,CAAY/F,IAAZ,KAAqB,mBAAzB,EAA8C;AAC1CsR,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,mBADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAKvC,kBAAL,CAAwBuR,WAAxB,IAAuC,KAAKvR,kBAAL,CAAwBC,UAA/D,IACA,KAAKD,kBAAL,CAAwBkO,UAAxB,CAAmCC,IADnC,IAC2C,KAAKnO,kBAAL,CAAwB4R,oBAAxB,CAA6C1D,UAA7C,CAAwDC,IADvG,EAC6G;AACzG4D,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,aADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAI,KAAK4D,WAAL,GAAmB/Q,kBAAkB,CAAC+c,WAA1C,EAAuD;AACnDJ,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,aADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,QAAK,KAAKiE,MAAL,IAAe,KAAKA,MAAL,CAAYmB,qBAAZ,KAAsC,gBAAtD,IAA4E,KAAKnB,MAAL,CAAY4L,WAAZ,KAA4B,QAA5B,IAAyC,KAAK5L,MAAL,CAAYoB,aAArI,EAAsJ;AAClJmK,MAAAA,OAAO,CAAChgB,IAAR,CAAa;AACTigB,QAAAA,MAAM,EAAE,kBADC;AAETzP,QAAAA,IAAI,EAAE;AAFG,OAAb;AAIH;;AACD,WAAOwP,OAAP;AACH,GAnGD;AAoGA;;;AACAhV,EAAAA,OAAO,CAACtO,SAAR,CAAkB4jB,yBAAlB,GAA8C,YAAY;AACtD,QAAI,KAAKtM,aAAL,CAAmBC,WAAnB,CAA+B9W,MAAnC,EAA2C;AACvC,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAAnD,EAA2DK,CAAC,EAA5D,EAAgE;AAC5D,aAAK,IAAIwT,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,cAAIuP,SAAS,GAAGtP,EAAE,CAACD,EAAD,CAAlB;AACAhL,UAAAA,aAAa,CAAC,KAAKgO,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,EAAkCgjB,IAAlC,GAAyC,4BAA1C,EAAwED,SAAxE,CAAb;AACH;AACJ;AACJ;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;;;AACIvV,EAAAA,OAAO,CAACtO,SAAR,CAAkB+jB,OAAlB,GAA4B,YAAY;AACpCC,IAAAA,aAAa,CAAC,KAAK/S,WAAN,CAAb;AACA,SAAKA,WAAL,GAAmB,IAAnB;;AACA,QAAI,KAAK0K,MAAL,IAAe,KAAKC,MAAxB,EAAgC;AAC5B,WAAKD,MAAL,CAAYoI,OAAZ;AACA,WAAKnI,MAAL,CAAYmI,OAAZ;AACH;;AACD,SAAKtC,aAAL,CAAmBsC,OAAnB;AACA,SAAKE,SAAL,CAAeF,OAAf;AACA,SAAK/G,YAAL;AACA,SAAK+D,MAAL,CAAY,SAAZ,EAAuB,EAAvB;;AACAxS,IAAAA,MAAM,CAACvO,SAAP,CAAiB+jB,OAAjB,CAAyB3gB,IAAzB,CAA8B,IAA9B;;AACA,SAAKwgB,yBAAL;AACA,SAAKM,aAAL;;AACA,QAAI/G,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAArC,CAAJ,EAA8C;AAC1C,WAAKhB,OAAL,CAAayO,SAAb,CAAuBpZ,MAAvB,CAA8B,WAA9B;AACA,UAAIsgB,cAAc,GAAGjH,QAAQ,CAACC,sBAAT,CAAgC,mBAAhC,CAArB;;AACA,aAAOgH,cAAc,CAAC3jB,MAAf,GAAwB,CAA/B,EAAkC;AAC9B2jB,QAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBC,UAAlB,CAA6BC,WAA7B,CAAyCF,cAAc,CAAC,CAAD,CAAvD;AACH;;AACD,UAAInR,OAAO,GAAGkK,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,SAA1C,CAAd;;AACA,UAAIwD,OAAJ,EAAa;AACT,aAAKxE,OAAL,CAAa6V,WAAb,CAAyBrR,OAAzB;AACH;;AACD,UAAI4J,oBAAoB,GAAG,gBAA3B;;AACA,UAAIvL,MAAM,CAACuL,oBAAD,CAAV,EAAkC;AAC9BvL,QAAAA,MAAM,CAACuL,oBAAD,CAAN,CAA6B0H,UAA7B,IAA2C,CAA3C;AACA,YAAIC,mBAAmB,GAAG,qBAA1B;AACAlT,QAAAA,MAAM,CAACkT,mBAAD,CAAN;;AACA,YAAIlT,MAAM,CAACkT,mBAAD,CAAN,KAAgC,CAApC,EAAuC;AACnClT,UAAAA,MAAM,CAACuL,oBAAD,CAAN,CAA6BwH,UAA7B,CAAwCC,WAAxC,CAAoDhT,MAAM,CAACuL,oBAAD,CAA1D;AACAvL,UAAAA,MAAM,CAACuL,oBAAD,CAAN,GAA+B,IAA/B;AACH;AACJ;AACJ;;AACD,QAAImC,QAAQ,GAAG,UAAf;AACA1N,IAAAA,MAAM,CAAC0N,QAAD,CAAN,GAAmB,EAAnB;;AACA,SAAK,IAAIle,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,UAAI4jB,YAAY,GAAG,KAAKD,MAAL,CAAY3jB,CAAZ,CAAnB;AACA4jB,MAAAA,YAAY,CAACC,WAAb,GAA2B,EAA3B;AACH;;AACD,SAAK1P,cAAL,GAAsBpF,SAAtB;AACH,GA1CD,CAr7B2C,CAg+B3C;;;AACAvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBid,UAAlB,GAA+B,YAAY;AACvC,QAAI2H,UAAU,GAAG1gB,OAAO,CAAC2gB,eAAzB;AACA,QAAIC,SAAS,GAAG5gB,OAAO,CAAC6gB,aAAxB;AACA,QAAIC,SAAS,GAAG9gB,OAAO,CAAC+gB,cAAxB;AACA,QAAIC,WAAW,GAAGhhB,OAAO,CAACihB,SAAR,GAAoB,cAApB,GAAqC,YAAvD;AACA,QAAIC,aAAa,GAAGlhB,OAAO,CAACihB,SAA5B;AACA,QAAIE,UAAU,GAAGnhB,OAAO,CAACohB,IAAR,CAAaxB,IAAb,KAAsB,SAAtB,GACZsB,aAAa,GAAG,YAAH,GAAkB,gBADnB,GACuC,YADxD;AAEAzhB,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqCX,UAArC,EAAiD,KAAKrP,YAAL,CAAkBiQ,SAAnE,EAA8E,KAAKjQ,YAAnF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqCP,SAArC,EAAgD,KAAKzP,YAAL,CAAkBkQ,SAAlE,EAA6E,KAAKlQ,YAAlF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqCT,SAArC,EAAgD,KAAKvP,YAAL,CAAkBmQ,OAAlE,EAA2E,KAAKnQ,YAAhF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqCL,WAArC,EAAkD,KAAK3P,YAAL,CAAkBoQ,UAApE,EAAgF,KAAKpQ,YAArF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqC,SAArC,EAAgD,KAAKhQ,YAAL,CAAkBqQ,OAAlE,EAA2E,KAAKrQ,YAAhF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqC,OAArC,EAA8C,KAAKhQ,YAAL,CAAkBsQ,KAAhE,EAAuE,KAAKtQ,YAA5E;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqC,UAArC,EAAiD,KAAKhQ,YAAL,CAAkBuQ,WAAnE,EAAgF,KAAKvQ,YAArF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqC,QAArC,EAA+C,KAAKhQ,YAAL,CAAkBwQ,QAAjE,EAA2E,KAAKxQ,YAAhF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiB,KAAKwR,aAAtB,EAAqCF,UAArC,EAAiD,KAAK9P,YAAL,CAAkByQ,UAAnE,EAA+E,KAAKzQ,YAApF;AACA5R,IAAAA,YAAY,CAACoQ,GAAb,CAAiBzC,MAAjB,EAAyB,QAAzB,EAAmC,KAAKiE,YAAL,CAAkB0Q,YAArD,EAAmE,KAAK1Q,YAAxE;AACA,SAAK2Q,cAAL;AACH,GAnBD,CAj+B2C,CAq/B3C;;;AACA5X,EAAAA,OAAO,CAACtO,SAAR,CAAkBgd,YAAlB,GAAiC,YAAY;AACzC,QAAI4H,UAAU,GAAG1gB,OAAO,CAAC2gB,eAAzB;AACA,QAAIG,SAAS,GAAG9gB,OAAO,CAAC+gB,cAAxB;AACA,QAAIC,WAAW,GAAGhhB,OAAO,CAACihB,SAAR,GAAoB,cAApB,GAAqC,YAAvD;AACA,QAAIC,aAAa,GAAGlhB,OAAO,CAACihB,SAA5B;AACA,QAAIE,UAAU,GAAGnhB,OAAO,CAACohB,IAAR,CAAaxB,IAAb,KAAsB,SAAtB,GACZsB,aAAa,GAAG,YAAH,GAAkB,gBADnB,GACuC,YADxD;AAEA,QAAIN,SAAS,GAAG5gB,OAAO,CAAC6gB,aAAxB;AACAphB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwCX,UAAxC,EAAoD,KAAKrP,YAAL,CAAkBiQ,SAAtE;AACA7hB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwCP,SAAxC,EAAmD,KAAKzP,YAAL,CAAkBkQ,SAArE;AACA9hB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwCT,SAAxC,EAAmD,KAAKvP,YAAL,CAAkBmQ,OAArE;AACA/hB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwCL,WAAxC,EAAqD,KAAK3P,YAAL,CAAkBoQ,UAAvE;AACAhiB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwC,SAAxC,EAAmD,KAAKhQ,YAAL,CAAkBqQ,OAArE;AACAjiB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwC,OAAxC,EAAiD,KAAKhQ,YAAL,CAAkBsQ,KAAnE;AACAliB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwC,UAAxC,EAAoD,KAAKhQ,YAAL,CAAkBuQ,WAAtE;AACAniB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwC,QAAxC,EAAkD,KAAKhQ,YAAL,CAAkBwQ,QAApE;AACApiB,IAAAA,YAAY,CAACG,MAAb,CAAoB,KAAKyhB,aAAzB,EAAwCF,UAAxC,EAAoD,KAAK9P,YAAL,CAAkByQ,UAAtE;AACAriB,IAAAA,YAAY,CAACG,MAAb,CAAoBwN,MAApB,EAA4B,QAA5B,EAAsC,KAAKiE,YAAL,CAAkB0Q,YAAxD;AACH,GAlBD,CAt/B2C,CAygC3C;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3X,EAAAA,OAAO,CAACtO,SAAR,CAAkBmmB,MAAlB,GAA2B,UAAUC,OAAV,EAAmBC,iBAAnB,EAAsC;AAC7D,QAAIriB,QAAQ,EAAZ,EAAgB;AACZ,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,OAAO,CAAC3lB,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACrCslB,QAAAA,OAAO,CAACtlB,CAAD,CAAP,GAAa,KAAKyS,SAAL,CAAe6S,OAAO,CAACtlB,CAAD,CAAP,CAAW2O,EAA1B,CAAb;AACH;;AACD2W,MAAAA,OAAO,GAAG,KAAK7S,SAAL,CAAe6S,OAAO,CAAC3W,EAAvB,KAA8B2W,OAAxC;AACH;;AACD,QAAIA,OAAO,IAAI,IAAf,EAAqB;AACjB,WAAK3H,cAAL,CAAoB6H,aAApB,CAAkCF,OAAlC,EAA2CC,iBAA3C;AACH;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;;;AACI/X,EAAAA,OAAO,CAACtO,SAAR,CAAkBumB,SAAlB,GAA8B,YAAY;AACtC,QAAIjP,aAAa,GAAG,EAApB;AACAA,IAAAA,aAAa,GAAG,KAAKkP,iBAAL,CAAuB,KAAKC,WAAL,CAAiBL,OAAxC,CAAhB;AACA,SAAKD,MAAL,CAAY7O,aAAZ;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIhJ,EAAAA,OAAO,CAACtO,SAAR,CAAkB0mB,QAAlB,GAA6B,UAAU9S,GAAV,EAAe;AACxC,QAAI5P,QAAQ,EAAZ,EAAgB;AACZ,WAAKya,cAAL,CAAoBkI,kBAApB,GAAyCxa,WAAW,CAAC,KAAKmL,aAAN,CAApD;AACA1D,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACH;;AACD,QAAIA,GAAG,IAAI3K,UAAU,CAAC,IAAD,EAAO2K,GAAP,CAArB,EAAkC;AAC9B,WAAK6K,cAAL,CAAoBiI,QAApB,CAA6B9S,GAA7B;AACA,WAAK6K,cAAL,CAAoBmI,oBAApB;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;;;AACItY,EAAAA,OAAO,CAACtO,SAAR,CAAkB6mB,cAAlB,GAAmC,YAAY;AAC3C,SAAKpI,cAAL,CAAoBoI,cAApB,CAAmC,IAAnC;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIvY,EAAAA,OAAO,CAACtO,SAAR,CAAkB8mB,cAAlB,GAAmC,YAAY;AAC3C,QAAIC,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKxR,YAAL,CAAkBC,kBAAlB,CAAqC,KAAK/G,OAA1C;AACA,SAAKwY,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GALD;;AAMAzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBknB,UAAlB,GAA+B,YAAY;AACvC,SAAKC,GAAL;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI7Y,EAAAA,OAAO,CAACtO,SAAR,CAAkBmnB,GAAlB,GAAwB,YAAY;AAChC,SAAK1I,cAAL,CAAoB0I,GAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7Y,EAAAA,OAAO,CAACtO,SAAR,CAAkBonB,UAAlB,GAA+B,UAAUC,OAAV,EAAmB3X,QAAnB,EAA6B;AACxD,QAAI,KAAK4X,UAAT,EAAqB;AACjB,WAAKA,UAAL,CAAgBF,UAAhB,CAA2BC,OAA3B,EAAoC3X,QAApC,EAA8C,IAA9C;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,OAAO,CAACtO,SAAR,CAAkBunB,aAAlB,GAAkC,UAAU9X,EAAV,EAAc;AAC5C,QAAI,KAAK6X,UAAT,EAAqB;AACjB,WAAKA,UAAL,CAAgBC,aAAhB,CAA8B9X,EAA9B,EAAkC,IAAlC;AACH;AACJ,GAJD;;AAKAnB,EAAAA,OAAO,CAACtO,SAAR,CAAkBwnB,YAAlB,GAAiC,YAAY;AACzC,SAAKC,KAAL;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEInZ,EAAAA,OAAO,CAACtO,SAAR,CAAkBynB,KAAlB,GAA0B,UAAU7T,GAAV,EAAe;AACrC,SAAK6K,cAAL,CAAoBgJ,KAApB,CAA0B7T,GAA1B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACItF,EAAAA,OAAO,CAACtO,SAAR,CAAkBkiB,SAAlB,GAA8B,UAAU1T,OAAV,EAAmB;AAC7C,QAAIuY,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKvL,QAAL,CAAc0G,SAAd,CAAwB1T,OAAxB;AACA,SAAKyY,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkB0nB,aAAlB,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,QAAIZ,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKvL,QAAL,CAAckM,aAAd,CAA4BC,KAA5B;AACA,SAAKV,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkB4nB,aAAlB,GAAkC,UAAUD,KAAV,EAAiB;AAC/C,QAAIZ,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKvL,QAAL,CAAcoM,aAAd,CAA4BD,KAA5B;AACA,SAAKV,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GALD;;AAMAzY,EAAAA,OAAO,CAACtO,SAAR,CAAkB6nB,WAAlB,GAAgC,YAAY;AACxC,SAAKC,IAAL;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIxZ,EAAAA,OAAO,CAACtO,SAAR,CAAkB8nB,IAAlB,GAAyB,YAAY;AACjC,QAAIlU,GAAG,GAAG,KAAK6K,cAAL,CAAoBqJ,IAApB,EAAV;AACA,WAAOlU,GAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACItF,EAAAA,OAAO,CAACtO,SAAR,CAAkB+nB,KAAlB,GAA0B,YAAY;AAClC,QAAI,KAAKzQ,aAAL,CAAmB5F,KAAnB,CAAyBjR,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,WAAKyP,eAAL,GAAuB,KAAvB;AACA,WAAK8X,0BAAL,CAAgC,KAAK1Q,aAArC;AACA,WAAKmH,cAAL,CAAoBsJ,KAApB;AACA,WAAK7X,eAAL,GAAuB,IAAvB;AACA,WAAKuO,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;;;AACI9R,EAAAA,OAAO,CAACtO,SAAR,CAAkBioB,OAAlB,GAA4B,YAAY;AACpC,SAAK/X,eAAL,GAAuB,KAAvB;AACA,SAAK8X,0BAAL,CAAgC,KAAK1Q,aAArC;AACA,SAAKmH,cAAL,CAAoBwJ,OAApB;AACA,SAAK/X,eAAL,GAAuB,IAAvB;AACA,SAAKuO,cAAL,CAAoB2B,kBAApB;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;;;AACI9R,EAAAA,OAAO,CAACtO,SAAR,CAAkBkoB,UAAlB,GAA+B,YAAY;AACvC,SAAKzJ,cAAL,CAAoByJ,UAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI5Z,EAAAA,OAAO,CAACtO,SAAR,CAAkBmoB,cAAlB,GAAmC,UAAUC,SAAV,EAAqB;AACpD,QAAIC,KAAK,GAAG,KAAK5J,cAAL,CAAoB6J,QAApB,CAA6BF,SAA7B,CAAZ;AACA,SAAK3B,WAAL,GAAmB4B,KAAnB;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI/Z,EAAAA,OAAO,CAACtO,SAAR,CAAkBuoB,QAAlB,GAA6B,UAAUF,KAAV,EAAiBG,WAAjB,EAA8B;AACvD,SAAK/J,cAAL,CAAoB8J,QAApB,CAA6BF,KAA7B,EAAoCG,WAApC;AACH,GAFD;AAGA;;AACA;AACJ;AACA;;;AACIla,EAAAA,OAAO,CAACtO,SAAR,CAAkByoB,eAAlB,GAAoC,UAAUJ,KAAV,EAAiBG,WAAjB,EAA8B;AAC9D,SAAK/J,cAAL,CAAoB8J,QAApB,CAA6BF,KAA7B,EAAoCG,WAApC,EAAiD,KAAjD;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAEIla,EAAAA,OAAO,CAACtO,SAAR,CAAkB0oB,WAAlB,GAAgC,UAAUC,OAAV,EAAmB;AAC/C,SAAKlK,cAAL,CAAoBiK,WAApB,CAAgCC,OAAhC,EAAyC3kB,QAAQ,EAAjD;AACH,GAFD;AAGA;AACJ;AACA;;;AACIsK,EAAAA,OAAO,CAACtO,SAAR,CAAkB4oB,kBAAlB,GAAuC,UAAUD,OAAV,EAAmB;AACtD,SAAKlK,cAAL,CAAoBiK,WAApB,CAAgCC,OAAhC,EAAyC,KAAzC;AACH,GAFD;AAGA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIra,EAAAA,OAAO,CAACtO,SAAR,CAAkB6oB,WAAlB,GAAgC,UAAUzC,OAAV,EAAmB0C,WAAnB,EAAgC;AAC5D,QAAIC,SAAS,GAAG5c,WAAW,CAAC,KAAKsY,MAAN,CAA3B;AACA,SAAK/R,uBAAL,CAA6B,KAA7B;AACA,SAAK+L,cAAL,CAAoBoK,WAApB,CAAgCzC,OAAhC,EAAyC0C,WAAzC;AACA,QAAIhnB,MAAM,GAAG,KAAK2c,cAAL,CAAoBW,UAApB,CAA+B4J,GAA/B,CAAmCD,SAAnC,EAA8C5c,WAAW,CAAC,KAAKsY,MAAN,CAAzD,CAAb;AACA,QAAIwE,SAAS,GAAG,KAAKxK,cAAL,CAAoBW,UAApB,CAA+B8J,WAA/B,CAA2C,EAA3C,EAA+CpnB,MAA/C,CAAhB;AACA,SAAKiN,gBAAL,GAAwB;AAAE0V,MAAAA,MAAM,EAAEwE;AAAV,KAAxB;AACA,SAAKxK,cAAL,CAAoBe,sBAApB;AACH,GARD;AASA;;;AACAlR,EAAAA,OAAO,CAACtO,SAAR,CAAkBmpB,iBAAlB,GAAsC,YAAY;AAC9C,QAAInlB,QAAQ,EAAZ,EAAgB;AACZ,WAAK0O,uBAAL,CAA6B,KAA7B;AACA,WAAK3D,gBAAL,CAAsB,QAAtB,IAAkC,EAAlC;;AACA,WAAK,IAAIjO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC;AACA;AACA,YAAIsoB,WAAW,GAAGjd,WAAW,CAAC,KAAKsY,MAAL,CAAY3jB,CAAZ,CAAD,CAA7B;AACAsoB,QAAAA,WAAW,CAACrW,OAAZ,GAAsB,KAAK0R,MAAL,CAAY3jB,CAAZ,EAAeuoB,MAArC;AACA,aAAKta,gBAAL,CAAsB,QAAtB,EAAgCzL,IAAhC,CAAqC8lB,WAArC;AACH;AACJ;AACJ,GAZD;AAaA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9a,EAAAA,OAAO,CAACtO,SAAR,CAAkBspB,iBAAlB,GAAsC,UAAUlB,SAAV,EAAqB;AACvD,SAAKe,iBAAL;AACA,SAAK1K,cAAL,CAAoB6K,iBAApB,CAAsClB,SAAtC;AACA,SAAK3J,cAAL,CAAoB8K,iBAApB,CAAsC,KAAKxa,gBAA3C,EAA6D,IAA7D;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,OAAO,CAACtO,SAAR,CAAkBwpB,iBAAlB,GAAsC,UAAUpB,SAAV,EAAqB;AACvD,SAAKe,iBAAL;AACA,SAAK1K,cAAL,CAAoB+K,iBAApB,CAAsCpB,SAAtC;AACA,SAAK3J,cAAL,CAAoB8K,iBAApB,CAAsC,KAAKxa,gBAA3C;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,OAAO,CAACtO,SAAR,CAAkBypB,UAAlB,GAA+B,UAAUrB,SAAV,EAAqB;AAChD,SAAK3J,cAAL,CAAoBgL,UAApB,CAA+BrB,SAA/B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI9Z,EAAAA,OAAO,CAACtO,SAAR,CAAkB0pB,YAAlB,GAAiC,YAAY;AACzC,SAAKjL,cAAL,CAAoBiL,YAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIpb,EAAAA,OAAO,CAACtO,SAAR,CAAkB2pB,WAAlB,GAAgC,YAAY;AACxC,SAAKlL,cAAL,CAAoBmL,WAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACItb,EAAAA,OAAO,CAACtO,SAAR,CAAkB6pB,YAAlB,GAAiC,YAAY;AACzC,SAAKpL,cAAL,CAAoBoL,YAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIvb,EAAAA,OAAO,CAACtO,SAAR,CAAkB8pB,SAAlB,GAA8B,UAAUhG,IAAV,EAAgB;AAC1C,WAAO,KAAKvQ,SAAL,CAAeuQ,IAAf,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIxV,EAAAA,OAAO,CAACtO,SAAR,CAAkB+pB,aAAlB,GAAkC,UAAUta,EAAV,EAAc;AAC5C,WAAOtD,WAAW,CAAC,KAAKoH,SAAL,CAAe9D,EAAf,CAAD,CAAlB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkBgqB,kBAAlB,GAAuC,UAAUva,EAAV,EAAc;AACjD,WAAOtD,WAAW,CAAC,KAAKoH,SAAL,CAAe9D,EAAf,CAAD,CAAlB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkBiqB,cAAlB,GAAmC,YAAY;AAC3C,WAAO,KAAKxD,WAAZ;AACH,GAFD;;AAGAnY,EAAAA,OAAO,CAACtO,SAAR,CAAkBkqB,YAAlB,GAAiC,UAAUC,SAAV,EAAqBC,CAArB,EAAwBznB,CAAxB,EAA2B;AACxD,QAAI,OAAOwnB,SAAP,KAAqB,QAArB,IAAiC,CAAC,KAAK7S,aAAL,CAAmB5F,KAAnB,CAAyBjR,MAAzB,IAAmC,KAAK6W,aAAL,CAAmBlF,UAAnB,CAA8B3R,MAAlE,IAA4E,CAAjH,EAAoH;AAChH,WAAK4pB,KAAL,CAAWF,SAAX;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7b,EAAAA,OAAO,CAACtO,SAAR,CAAkBqqB,KAAlB,GAA0B,UAAUF,SAAV,EAAqBC,CAArB,EAAwBznB,CAAxB,EAA2B;AACjD,QAAI2nB,EAAE,GAAG,CAAT;AACA,QAAIC,EAAE,GAAG,CAAT;AACA,QAAIC,iBAAJ;;AACA,QAAIL,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAA1C,EAAmD;AAC/CK,MAAAA,iBAAiB,GAAIL,SAAS,KAAK,MAAnC;AACAG,MAAAA,EAAE,GAAG,CAACE,iBAAiB,GAAG,CAAC,CAAJ,GAAQ,CAA1B,KAAgCJ,CAAC,GAAGA,CAAH,GAAO,CAAxC,CAAL;AACH,KAHD,MAIK;AACDI,MAAAA,iBAAiB,GAAIL,SAAS,KAAK,IAAnC;AACAI,MAAAA,EAAE,GAAG,CAACC,iBAAiB,GAAG,CAAC,CAAJ,GAAQ,CAA1B,KAAgC7nB,CAAC,GAAGA,CAAH,GAAO,CAAxC,CAAL;AACH;;AACD,QAAIiR,GAAG,GAAG,KAAK0D,aAAf;AACA,QAAI6K,UAAU,GAAG,KAAK7K,aAAL,CAAmBE,OAAnB,CAA2B7F,QAA3B,CAAoC,CAApC,CAAjB;;AACA,QAAIwQ,UAAU,YAAY9a,WAA1B,EAAuC;AACnC,WAAKoX,cAAL,CAAoBgM,SAApB,CAA8B7W,GAAG,CAAClC,KAAJ,CAAU,CAAV,CAA9B,EAA4CyQ,UAA5C,EAAwDmI,EAAxD,EAA4DC,EAA5D;AACH,KAFD,MAGK;AACD,UAAInQ,UAAU,GAAGjO,WAAW,CAAC,KAAKmL,aAAN,CAA5B;AACA,WAAK3E,qBAAL,CAA2B,IAA3B;AACA,WAAK+X,IAAL,CAAU9W,GAAV,EAAe0W,EAAf,EAAmBC,EAAnB;AACA,WAAK5X,qBAAL,CAA2B,KAA3B;AACA,UAAIwH,KAAK,GAAG;AACRnI,QAAAA,IAAI,EAAE,iBADE;AAERqI,QAAAA,UAAU,EAAElO,WAAW,CAAC,KAAKmL,aAAN,CAFf;AAEqC8C,QAAAA,UAAU,EAAEA,UAFjD;AAE6DE,QAAAA,QAAQ,EAAE;AAFvE,OAAZ;AAIA,WAAKE,eAAL,CAAqBL,KAArB;AACH;;AACD,SAAKwQ,mBAAL;AACH,GA7BD;;AA8BArc,EAAAA,OAAO,CAACtO,SAAR,CAAkBgoB,0BAAlB,GAA+C,UAAUhX,YAAV,EAAwB;AACnE,QAAIhN,QAAQ,MAAM,EAAE,KAAKsL,aAAL,GAAqB5I,YAAY,CAACkkB,WAApC,CAAlB,EAAoE;AAChE,WAAKlY,uBAAL,CAA6B,KAA7B;;AACA,UAAI1B,YAAY,YAAYpI,QAA5B,EAAsC;AAClC,aAAK,IAAI9H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkQ,YAAY,CAACU,KAAb,CAAmBjR,MAAvC,EAA+CK,CAAC,EAAhD,EAAoD;AAChD,eAAKknB,0BAAL,CAAgChX,YAAY,CAACU,KAAb,CAAmB5Q,CAAnB,CAAhC;AACH;;AACD,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkQ,YAAY,CAACoB,UAAb,CAAwB3R,MAA5C,EAAoDK,CAAC,EAArD,EAAyD;AACrD,eAAKknB,0BAAL,CAAgChX,YAAY,CAACoB,UAAb,CAAwBtR,CAAxB,CAAhC;AACH;AACJ;;AACD,UAAI,EAAEkQ,YAAY,YAAYpI,QAA1B,CAAJ,EAAyC;AACrC;AACA,YAAIoI,YAAY,IAAIA,YAAY,CAACW,QAA7B,IAAyCX,YAAY,CAACW,QAAb,CAAsBlR,MAAtB,GAA+B,CAA5E,EAA+E;AAC3E,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkQ,YAAY,CAACW,QAAb,CAAsBlR,MAA1C,EAAkDK,CAAC,EAAnD,EAAuD;AACnD,iBAAKknB,0BAAL,CAAgC,KAAKzU,SAAL,CAAevC,YAAY,CAACW,QAAb,CAAsB7Q,CAAtB,CAAf,CAAhC;AACH;AACJ;;AACD,YAAI+pB,MAAM,GAAG1e,WAAW,CAAC,KAAKoH,SAAL,CAAevC,YAAY,CAACvB,EAA5B,CAAD,CAAxB;AACA,aAAKwQ,WAAL,CAAiB4K,MAAjB,EAAyB,EAAE5iB,aAAa,CAAC+I,YAAD,CAAb,KAAgCtL,SAAlC,CAAzB;AACH;AACJ;AACJ,GAtBD;AAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4I,EAAAA,OAAO,CAACtO,SAAR,CAAkB0qB,IAAlB,GAAyB,UAAU9W,GAAV,EAAe0W,EAAf,EAAmBC,EAAnB,EAAuB;AAC5C,SAAKvC,0BAAL,CAAgCpU,GAAhC;;AACA,QAAI5P,QAAQ,MAAM4P,GAAG,CAACnE,EAAtB,EAA0B;AACtBmE,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACH;;AACD,QAAI,KAAK0T,UAAL,IAAoB1T,GAAG,YAAY/O,IAAvC,EAA8C;AAC1C,UAAIimB,OAAO,GAAG,KAAKxD,UAAL,CAAgByD,oBAAhB,CAAqCnX,GAArC,EAA0C,IAA1C,EAAgD0W,EAAhD,EAAoDC,EAApD,CAAd;;AACA,UAAIO,OAAJ,EAAa;AACT;AACH;AACJ;;AACD,QAAIlX,GAAG,YAAYhL,QAAnB,EAA6B;AACzB,WAAKqH,uBAAL,GAA+B,IAA/B;;AACA,UAAI2D,GAAG,CAAClC,KAAJ,IAAakC,GAAG,CAAClC,KAAJ,CAAUjR,MAA3B,EAAmC;AAC/B,aAAK,IAAI6T,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGX,GAAG,CAAClC,KAA1B,EAAiC4C,EAAE,GAAGC,EAAE,CAAC9T,MAAzC,EAAiD6T,EAAE,EAAnD,EAAuD;AACnD,cAAInD,IAAI,GAAGoD,EAAE,CAACD,EAAD,CAAb;AACA,eAAKpE,eAAL,GAAuB,KAAvB;AACA,eAAKwa,IAAL,CAAUvZ,IAAV,EAAgBmZ,EAAhB,EAAoBC,EAApB;;AACA,cAAIpZ,IAAI,CAACzB,QAAT,EAAmB;AACf,gBAAIsb,QAAQ,GAAG,KAAKzX,SAAL,CAAepC,IAAI,CAACzB,QAApB,CAAf;;AACA,gBAAIsb,QAAQ,CAACC,MAAb,EAAqB;AACjB,kBAAIC,QAAQ,GAAG,KAAK3X,SAAL,CAAeyX,QAAQ,CAACtb,QAAxB,CAAf;AACAzC,cAAAA,6BAA6B,CAAC+d,QAAD,EAAWE,QAAX,EAAqB/Z,IAArB,EAA2B,IAA3B,CAA7B;AACH;AACJ;AACJ;;AACD,aAAKjB,eAAL,GAAuB,IAAvB;AACH;;AACD,UAAI0D,GAAG,CAACxB,UAAJ,IAAkBwB,GAAG,CAACxB,UAAJ,CAAe3R,MAArC,EAA6C;AACzC,aAAKyP,eAAL,GAAuB,KAAvB;;AACA,aAAK,IAAIuF,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9B,GAAG,CAACxB,UAA1B,EAAsCqD,EAAE,GAAGC,EAAE,CAACjV,MAA9C,EAAsDgV,EAAE,EAAxD,EAA4D;AACxD,cAAI0V,IAAI,GAAGzV,EAAE,CAACD,EAAD,CAAb;AACA,eAAKiV,IAAL,CAAUS,IAAV,EAAgBb,EAAhB,EAAoBC,EAApB;;AACA,cAAI,KAAKpa,uBAAL,CAA6Bib,OAA7B,CAAqCD,IAArC,MAA+C,CAAC,CAApD,EAAuD;AACnD,iBAAKhb,uBAAL,CAA6B7M,IAA7B,CAAkC6nB,IAAlC;AACH;AACJ;;AACD,aAAKjb,eAAL,GAAuB,IAAvB;AACH;;AACD,WAAKmb,cAAL;;AACA,UAAK,KAAKpW,cAAL,GAAsBlO,aAAa,CAACukB,cAAzC,EAA0D;AACtD,aAAKjU,UAAL;AACH;AACJ,KAhCD,MAiCK;AACD,UAAIzD,GAAG,YAAY/O,IAAnB,EAAyB;AACrB,YAAI,KAAKyiB,UAAT,EAAqB;AACjB,eAAKA,UAAL,CAAgByD,oBAAhB,CAAqCnX,GAArC,EAA0C,IAA1C,EAAgD0W,EAAhD,EAAoDC,EAApD;AACH;AACJ;;AACD,WAAK9L,cAAL,CAAoBiM,IAApB,CAAyB9W,GAAzB,EAA8B0W,EAA9B,EAAkCC,EAAlC;AACH;;AACD,QAAI3W,GAAG,YAAYhL,QAAnB,EAA6B;AACzB,WAAKqH,uBAAL,GAA+B,KAA/B;;AACA,WAAK,IAAI8F,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAK7F,uBAA3B,EAAoD4F,EAAE,GAAGC,EAAE,CAACvV,MAA5D,EAAoEsV,EAAE,EAAtE,EAA0E;AACtE,YAAI3D,UAAU,GAAG4D,EAAE,CAACD,EAAD,CAAnB;AACA,aAAKwV,yBAAL,CAA+B,KAAKhY,SAAL,CAAenB,UAAU,CAAC3C,EAA1B,CAA/B;;AACA,YAAI2C,UAAU,CAACL,KAAX,CAAiBC,IAAjB,KAA0B,MAA1B,IAAoCI,UAAU,CAACL,KAAX,CAAiByZ,QAAjB,KAA8B,SAAtE,EAAiF;AAC7E,eAAK/M,cAAL,CAAoBgN,uBAApB,CAA4CrZ,UAA5C;AACH;AACJ;;AACD,WAAKjC,uBAAL,GAA+B,EAA/B;AACH;;AACD,QAAI,EAAE,KAAK8E,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,KAAqD,EAAE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACukB,cAAtC,CAAzD,EAAgH;AAC5G,WAAKD,cAAL;AACH;;AACD,QAAI,KAAKnb,eAAL,IAAyB,EAAE,KAAKZ,aAAL,GAAqB5I,YAAY,CAACkkB,WAApC,CAAzB,IACC,EAAE,KAAKtb,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CADL,EACoE;AAChE,WAAKlN,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GAtED;;AAuEA9R,EAAAA,OAAO,CAACtO,SAAR,CAAkB4rB,4BAAlB,GAAiD,UAAUpU,OAAV,EAAmBqU,OAAnB,EAA4B;AACzE,QAAIrU,OAAO,YAAYrJ,UAAvB,EAAmC;AAC/BqJ,MAAAA,OAAO,CAACsU,eAAR,GAA0BD,OAA1B;AACH;;AACD,QAAIrU,OAAO,CAAC7F,QAAZ,EAAsB;AAClB,WAAK,IAAI2C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGiD,OAAO,CAAC7F,QAA9B,EAAwC2C,EAAE,GAAGC,EAAE,CAAC9T,MAAhD,EAAwD6T,EAAE,EAA1D,EAA8D;AAC1D,YAAIpD,KAAK,GAAGqD,EAAE,CAACD,EAAD,CAAd;AACA,aAAKsX,4BAAL,CAAkC1a,KAAlC,EAAyC,KAAzC;AACH;AACJ;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5C,EAAAA,OAAO,CAACtO,SAAR,CAAkB+rB,KAAlB,GAA0B,UAAUnY,GAAV,EAAeoY,EAAf,EAAmBC,EAAnB,EAAuBC,KAAvB,EAA8B;AACpD,SAAKN,4BAAL,CAAkChY,GAAG,CAAC4D,OAAtC,EAA+C,KAA/C;AACA,SAAKwQ,0BAAL,CAAgCpU,GAAhC;AACA,QAAIuY,wBAAwB,GAAG,IAA/B;;AACA,QAAIvY,GAAG,CAACnE,EAAR,EAAY;AACRmE,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACH;;AACD,QAAIA,GAAG,YAAYhL,QAAnB,EAA6B;AACzB,UAAIgL,GAAG,CAAClC,KAAJ,IAAakC,GAAG,CAAClC,KAAJ,CAAUjR,MAA3B,EAAmC;AAC/B,aAAKyP,eAAL,GAAuB,KAAvB;;AACA,aAAK,IAAIoE,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGX,GAAG,CAAClC,KAA1B,EAAiC4C,EAAE,GAAGC,EAAE,CAAC9T,MAAzC,EAAiD6T,EAAE,EAAnD,EAAuD;AACnD,cAAInD,IAAI,GAAGoD,EAAE,CAACD,EAAD,CAAb;AACA6X,UAAAA,wBAAwB,GAAG,KAAK1N,cAAL,CAAoBsN,KAApB,CAA0B5a,IAA1B,EAAgC6a,EAAhC,EAAoCC,EAApC,EAAwCC,KAAxC,EAA+CtY,GAA/C,CAA3B;;AACA,cAAI,CAAC,KAAK6K,cAAL,CAAoB0N,wBAApB,CAA6Ctc,SAA7C,EAAwDA,SAAxD,EAAmE+D,GAAG,CAAC4D,OAAJ,CAAY4U,MAA/E,CAAL,EAA6F;AACzF,iBAAK3N,cAAL,CAAoBsN,KAApB,CAA0B5a,IAA1B,EAAgC,IAAI6a,EAApC,EAAwC,IAAIC,EAA5C,EAAgDC,KAAhD,EAAuDtY,GAAvD;AACH;AACJ;;AACD,aAAK1D,eAAL,GAAuB,IAAvB;AACH;;AACD,UAAI0D,GAAG,CAACxB,UAAJ,IAAkBwB,GAAG,CAACxB,UAAJ,CAAe3R,MAArC,EAA6C;AACzC,aAAKyP,eAAL,GAAuB,KAAvB;;AACA,aAAK,IAAIuF,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9B,GAAG,CAACxB,UAA1B,EAAsCqD,EAAE,GAAGC,EAAE,CAACjV,MAA9C,EAAsDgV,EAAE,EAAxD,EAA4D;AACxD,cAAI0V,IAAI,GAAGzV,EAAE,CAACD,EAAD,CAAb;AACA,eAAKgJ,cAAL,CAAoBsN,KAApB,CAA0BZ,IAA1B,EAAgCa,EAAhC,EAAoCC,EAApC,EAAwCC,KAAxC,EAA+CtY,GAA/C;;AACA,cAAI,CAAC,KAAK6K,cAAL,CAAoB0N,wBAApB,CAA6Ctc,SAA7C,EAAwDA,SAAxD,EAAmE+D,GAAG,CAAC4D,OAAJ,CAAY4U,MAA/E,CAAL,EAA6F;AACzF,iBAAK3N,cAAL,CAAoBsN,KAApB,CAA0BZ,IAA1B,EAAgC,IAAIa,EAApC,EAAwC,IAAIC,EAA5C,EAAgDC,KAAhD,EAAuDtY,GAAvD;AACH;AACJ;;AACD,aAAK1D,eAAL,GAAuB,IAAvB;AACH;;AACD,WAAKmb,cAAL;AACA,WAAKV,mBAAL;AACH,KAzBD,MA0BK;AACD,WAAKlM,cAAL,CAAoBsN,KAApB,CAA0BnY,GAA1B,EAA+BoY,EAA/B,EAAmCC,EAAnC,EAAuCC,KAAvC,EAA+CtY,GAAG,CAACjC,QAAJ,GAAeiC,GAAf,GAAqB/D,SAApE;AACH;;AACD,QAAI,KAAKK,eAAL,IAAyB,EAAE,KAAKZ,aAAL,GAAqB5I,YAAY,CAACkkB,WAApC,CAAzB,IACC,EAAE,KAAKtb,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CADL,EACoE;AAChE,WAAKlN,cAAL,CAAoB2B,kBAApB;AACH;;AACD,SAAKwL,4BAAL,CAAkChY,GAAG,CAAC4D,OAAtC,EAA+C,IAA/C;AACA,WAAO2U,wBAAP;AACH,GA1CD;AA2CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7d,EAAAA,OAAO,CAACtO,SAAR,CAAkBqsB,MAAlB,GAA2B,UAAUzY,GAAV,EAAe0Y,KAAf,EAAsBJ,KAAtB,EAA6B;AACpD,SAAKlE,0BAAL,CAAgCpU,GAAhC;AACA,QAAIuY,wBAAJ;;AACA,QAAIvY,GAAG,CAACnE,EAAR,EAAY;AACRmE,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACH;;AACD,QAAIA,GAAJ,EAAS;AACLsY,MAAAA,KAAK,GAAGA,KAAK,IAAI;AAAE9B,QAAAA,CAAC,EAAExW,GAAG,CAAC4D,OAAJ,CAAY+U,OAAjB;AAA0B5pB,QAAAA,CAAC,EAAEiR,GAAG,CAAC4D,OAAJ,CAAYgV;AAAzC,OAAjB;;AACA,UAAI5Y,GAAG,YAAYhL,QAAnB,EAA6B;AACzB,aAAKsH,eAAL,GAAuB,KAAvB;AACA0D,QAAAA,GAAG,CAAC6Y,WAAJ,IAAmBH,KAAnB;AACA1Y,QAAAA,GAAG,CAAC4D,OAAJ,CAAYiV,WAAZ,IAA2BH,KAA3B;AACA,YAAIF,MAAM,GAAG9f,SAAS,CAACsH,GAAG,CAAC4D,OAAL,CAAtB;AACA2U,QAAAA,wBAAwB,GAAG,KAAK1N,cAAL,CAAoB0N,wBAApB,CAA6Ctc,SAA7C,EAAwDA,SAAxD,EAAmEuc,MAAnE,CAA3B;;AACA,YAAI,CAACD,wBAAL,EAA+B;AAC3BvY,UAAAA,GAAG,CAAC6Y,WAAJ,IAAmBH,KAAnB;AACA1Y,UAAAA,GAAG,CAAC4D,OAAJ,CAAYiV,WAAZ,IAA2BH,KAA3B;AACA,iBAAOH,wBAAP;AACH;;AACD,YAAI/F,OAAO,GAAG,EAAd;AACAA,QAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe9Y,GAAG,CAAClC,KAAnB,CAAV;AACA0U,QAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe9Y,GAAG,CAACxB,UAAnB,CAAV;AACA,aAAKqM,cAAL,CAAoBkO,aAApB,CAAkC/Y,GAAlC,EAAuCwS,OAAvC,EAAgDkG,KAAhD,EAAuDJ,KAAvD;AACA,aAAKhc,eAAL,GAAuB,IAAvB;AACH,OAhBD,MAiBK;AACD,aAAKuO,cAAL,CAAoBkO,aAApB,CAAkC/Y,GAAlC,EAAuC,CAACA,GAAD,CAAvC,EAA8C0Y,KAA9C,EAAqDJ,KAArD;AACH;AACJ;;AACD,QAAI,KAAKhc,eAAL,IAAyB,EAAE,KAAKZ,aAAL,GAAqB5I,YAAY,CAACkkB,WAApC,CAA7B,EAAgF;AAC5E,WAAKnM,cAAL,CAAoB2B,kBAApB;AACH;;AACD,WAAO+L,wBAAP;AACH,GAjCD;AAkCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7d,EAAAA,OAAO,CAACtO,SAAR,CAAkB4sB,aAAlB,GAAkC,UAAUhZ,GAAV,EAAe0W,EAAf,EAAmBC,EAAnB,EAAuB;AACrD,SAAKvC,0BAAL,CAAgCpU,GAAhC;AACA,SAAK6K,cAAL,CAAoBmO,aAApB,CAAkChZ,GAAlC,EAAuC0W,EAAvC,EAA2CC,EAA3C;;AACA,QAAI,KAAKra,eAAT,EAA0B;AACtB,WAAKuO,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9R,EAAAA,OAAO,CAACtO,SAAR,CAAkB6sB,aAAlB,GAAkC,UAAUjZ,GAAV,EAAe0W,EAAf,EAAmBC,EAAnB,EAAuB;AACrD,SAAKvC,0BAAL,CAAgCpU,GAAhC;AACA,SAAK6K,cAAL,CAAoBoO,aAApB,CAAkCjZ,GAAlC,EAAuC0W,EAAvC,EAA2CC,EAA3C;;AACA,QAAI,KAAKra,eAAT,EAA0B;AACtB,WAAKuO,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI9R,EAAAA,OAAO,CAACtO,SAAR,CAAkB8sB,qBAAlB,GAA0C,UAAUC,QAAV,EAAoBC,MAApB,EAA4B;AAClE,WAAO,KAAKzX,YAAL,CAAkBuX,qBAAlB,CAAwCC,QAAxC,EAAkDC,MAAlD,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1e,EAAAA,OAAO,CAACtO,SAAR,CAAkBitB,oBAAlB,GAAyC,UAAU7G,OAAV,EAAmB8G,MAAnB,EAA2BC,QAA3B,EAAqC;AAC1E,WAAO,KAAK5X,YAAL,CAAkB0X,oBAAlB,CAAuC7G,OAAvC,EAAgD8G,MAAhD,EAAwDC,QAAxD,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7e,EAAAA,OAAO,CAACtO,SAAR,CAAkBotB,0BAAlB,GAA+C,UAAUhH,OAAV,EAAmB8G,MAAnB,EAA2BC,QAA3B,EAAqCJ,QAArC,EAA+CC,MAA/C,EAAuD;AAClG,WAAO,KAAKzX,YAAL,CAAkB8X,oBAAlB,CAAuCjH,OAAvC,EAAgD8G,MAAhD,EAAwDC,QAAxD,EAAkEJ,QAAlE,EAA4EC,MAA5E,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1e,EAAAA,OAAO,CAACtO,SAAR,CAAkBstB,qBAAlB,GAA0C,UAAU1Z,GAAV,EAAemZ,QAAf,EAAyBQ,OAAzB,EAAkC;AACxE,WAAO,KAAKhY,YAAL,CAAkB+X,qBAAlB,CAAwC1Z,GAAxC,EAA6CmZ,QAA7C,EAAuDQ,OAAvD,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjf,EAAAA,OAAO,CAACtO,SAAR,CAAkBwtB,kBAAlB,GAAuC,UAAU5Z,GAAV,EAAe4D,OAAf,EAAwBuV,QAAxB,EAAkC3sB,MAAlC,EAA0C;AAC7E,WAAO,KAAKmV,YAAL,CAAkBiY,kBAAlB,CAAqC5Z,GAArC,EAA0C4D,OAA1C,EAAmDuV,QAAnD,EAA6D3sB,MAA7D,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACIkO,EAAAA,OAAO,CAACtO,SAAR,CAAkBytB,OAAlB,GAA4B,UAAUP,MAAV,EAAkB;AAC1C,QAAI5L,IAAJ;AACA,QAAIoM,aAAa,GAAGrhB,WAAW,CAAC,KAAKqhB,aAAN,CAA/B;;AACA,QAAIA,aAAJ,EAAmB;AACfpM,MAAAA,IAAI,GAAGoM,aAAa,CAACR,MAAD,CAApB;;AACA,UAAI5L,IAAJ,EAAU;AACN,eAAOA,IAAP;AACH;AACJ;;AACD,WAAO,KAAK/L,YAAL,CAAkBkY,OAAlB,CAA0BP,MAA1B,CAAP;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI5e,EAAAA,OAAO,CAACtO,SAAR,CAAkB2tB,SAAlB,GAA8B,UAAUT,MAAV,EAAkBU,MAAlB,EAA0B;AACpD,QAAIC,MAAJ;AACA,QAAIC,eAAe,GAAGzhB,WAAW,CAAC,KAAKyhB,eAAN,CAAjC;;AACA,QAAIA,eAAJ,EAAqB;AACjBD,MAAAA,MAAM,GAAGC,eAAe,CAACZ,MAAD,EAASU,MAAT,CAAxB;;AACA,UAAIC,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;AACJ;;AACD,QAAI,KAAKE,YAAL,CAAkBttB,MAAtB,EAA8B;AAC1B,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKitB,YAAL,CAAkBttB,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/C,YAAI,KAAKitB,YAAL,CAAkBjtB,CAAlB,EAAqBosB,MAArB,KAAgCA,MAApC,EAA4C;AACxC,iBAAO,KAAKa,YAAL,CAAkBjtB,CAAlB,EAAqB+sB,MAA5B;AACH;AACJ;AACJ;;AACD,WAAO,KAAKtY,YAAL,CAAkBoY,SAAlB,CAA4BT,MAA5B,CAAP;AACH,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;;;AACI5e,EAAAA,OAAO,CAACtO,SAAR,CAAkB4f,WAAlB,GAAgC,YAAY;AACxC,QAAI,KAAKoO,cAAT,EAAyB;AACrB,WAAKA,cAAL,CAAoBpO,WAApB,CAAgC,IAAhC;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;;;AACItR,EAAAA,OAAO,CAACtO,SAAR,CAAkBwa,eAAlB,GAAoC,UAAUL,KAAV,EAAiB;AACjD,QAAI,KAAK6T,cAAL,IAAwB,KAAKtW,WAAL,GAAmB/Q,kBAAkB,CAAC6c,QAA9D,KACI,CAAC,KAAKyK,aAAN,IAAuB,KAAKC,kBAAL,CAAwB,KAAKD,aAA7B,EAA4C9T,KAA5C,CAD3B,CAAJ,EACoF;AAChF,UAAIA,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACC,UAAN,CAAiB3K,EAAjB,KAAwB,QAAhD,EAA0D;AACtD;AACH;;AACD,WAAKue,cAAL,CAAoBxT,eAApB,CAAoCL,KAApC,EAA2C,IAA3C;;AACA,UAAIA,KAAK,CAACnI,IAAN,KAAe,YAAf,IAA+BmI,KAAK,CAACnI,IAAN,KAAe,UAAlD,EAA8D;AAC1D,aAAKmc,oBAAL,CAA0BhU,KAA1B,EAAiC,cAAjC;AACH;AACJ;AACJ,GAXD;;AAYA7L,EAAAA,OAAO,CAACtO,SAAR,CAAkBkuB,kBAAlB,GAAuC,UAAUD,aAAV,EAAyB9T,KAAzB,EAAgC;AACnE,QAAIiU,KAAK,GAAG,KAAZ;;AACA,QAAIjU,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,UAA9B,EAA0C;AACtC,UAAIgU,WAAW,GAAGlU,KAAK,CAACC,UAAxB;AACA,UAAIC,UAAU,GAAGF,KAAK,CAACC,UAAvB;;AACA,UAAIC,UAAU,CAAC5K,EAAX,IAAiB4e,WAAW,CAAC5e,EAA7B,IAAmC4K,UAAU,CAAC5K,EAAX,KAAkBwe,aAAa,CAACxe,EAAnE,IAAyE4e,WAAW,CAAC5e,EAAZ,KAAmBwe,aAAa,CAACxe,EAA9G,EAAkH;AAC9G,eAAO2e,KAAK,GAAG,IAAf;AACH,OAFD,MAGK;AACD,eAAOA,KAAP;AACH;AACJ;;AACD,WAAOA,KAAP;AACH,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;;;AACI9f,EAAAA,OAAO,CAACtO,SAAR,CAAkBsuB,qBAAlB,GAA0C,UAAUnU,KAAV,EAAiB;AACvD,QAAInW,QAAQ,MAAM,KAAKgqB,cAAnB,IAAsC,KAAKtW,WAAL,GAAmB/Q,kBAAkB,CAAC6c,QAAhF,EAA2F;AACvFrJ,MAAAA,KAAK,CAACnI,IAAN,GAAanC,SAAb;AACAsK,MAAAA,KAAK,CAACG,QAAN,GAAiB,UAAjB;AACA,WAAK0T,cAAL,CAAoBxT,eAApB,CAAoCL,KAApC,EAA2C,IAA3C;AACH;AACJ,GAND;AAOA;;AACA;;;AACA7L,EAAAA,OAAO,CAACtO,SAAR,CAAkBmuB,oBAAlB,GAAyC,UAAUhU,KAAV,EAAiB+S,MAAjB,EAAyB;AAC9D,QAAIqB,MAAM,GAAG,EAAb;AACA;;AACA,QAAI1Z,QAAQ,GAAG,UAAf;AACA,QAAID,QAAQ,GAAG,UAAf;AACA,QAAI5C,IAAI,GAAG,MAAX;AACA,QAAIwc,SAAS,GAAG,WAAhB;AACA,QAAIxB,MAAM,GAAG,EAAb;;AACA,QAAI7S,KAAK,CAACG,QAAN,KAAmB,UAAvB,EAAmC;AAC/B,UAAIH,KAAK,IAAIA,KAAK,CAACE,UAAf,IAA+BF,KAAK,CAACE,UAAN,CAAiB3I,KAAlB,YAAoC/R,KAAlE,IACEwa,KAAK,CAACE,UAAN,CAAiBjI,UAAlB,YAAyCzS,KAD9C,EACsD;AAClDqtB,QAAAA,MAAM,GAAG7S,KAAK,CAACE,UAAN,CAAiB3I,KAAjB,CAAuBgb,MAAvB,CAA8BvS,KAAK,CAACE,UAAN,CAAiBjI,UAA/C,CAAT;AACH,OAHD,MAIK;AACD,YAAI+H,KAAK,CAACE,UAAV,EAAsB;AAClB2S,UAAAA,MAAM,CAAC1pB,IAAP,CAAY6W,KAAK,CAACE,UAAlB;AACH;AACJ;;AACDkU,MAAAA,MAAM,CAACvc,IAAD,CAAN,GAAemI,KAAK,CAACnI,IAArB;;AACA,UAAIhO,QAAQ,EAAZ,EAAgB;AACZuqB,QAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBrU,KAAK,CAACnI,IAA1B;AACH;;AACD,cAAQmI,KAAK,CAACnI,IAAd;AACI,aAAK,iBAAL;AACIuc,UAAAA,MAAM,CAAC1Z,QAAD,CAAN,GAAmB;AACf0X,YAAAA,OAAO,EAAEpS,KAAK,CAACC,UAAN,CAAiBmS,OADX;AAEfC,YAAAA,OAAO,EAAErS,KAAK,CAACC,UAAN,CAAiBoS;AAFX,WAAnB;AAIA+B,UAAAA,MAAM,CAAC3Z,QAAD,CAAN,GAAmB;AACf2X,YAAAA,OAAO,EAAEpS,KAAK,CAACE,UAAN,CAAiBkS,OADX;AAEfC,YAAAA,OAAO,EAAErS,KAAK,CAACE,UAAN,CAAiBmS;AAFX,WAAnB;AAIA;;AACJ,aAAK,iBAAL;AACI+B,UAAAA,MAAM,CAAC1Z,QAAD,CAAN,GAAmB;AAAE4X,YAAAA,WAAW,EAAEtS,KAAK,CAACC,UAAN,CAAiBqS;AAAhC,WAAnB;AACA8B,UAAAA,MAAM,CAAC3Z,QAAD,CAAN,GAAmB;AAAE6X,YAAAA,WAAW,EAAEtS,KAAK,CAACE,UAAN,CAAiBoS;AAAhC,WAAnB;AACA;;AACJ,aAAK,aAAL;AACI8B,UAAAA,MAAM,CAAC1Z,QAAD,CAAN,GAAmB;AACf0X,YAAAA,OAAO,EAAEpS,KAAK,CAACC,UAAN,CAAiBmS,OADX;AACoBC,YAAAA,OAAO,EAAErS,KAAK,CAACC,UAAN,CAAiBoS,OAD9C;AAEfpX,YAAAA,KAAK,EAAE+E,KAAK,CAACC,UAAN,CAAiBhF,KAFT;AAEgBE,YAAAA,MAAM,EAAE6E,KAAK,CAACC,UAAN,CAAiB9E;AAFzC,WAAnB;AAIAiZ,UAAAA,MAAM,CAAC3Z,QAAD,CAAN,GAAmB;AACf2X,YAAAA,OAAO,EAAEpS,KAAK,CAACE,UAAN,CAAiBkS,OADX;AACoBC,YAAAA,OAAO,EAAErS,KAAK,CAACE,UAAN,CAAiBmS,OAD9C;AAEfpX,YAAAA,KAAK,EAAE+E,KAAK,CAACE,UAAN,CAAiBjF,KAFT;AAEgBE,YAAAA,MAAM,EAAE6E,KAAK,CAACE,UAAN,CAAiB/E;AAFzC,WAAnB;AAIA;;AACJ,aAAK,mBAAL;AACIiZ,UAAAA,MAAM,CAACpU,KAAK,CAACsU,UAAP,CAAN,GAA2BzB,MAA3B;AACA;;AACJ,aAAK,mBAAL;AACIuB,UAAAA,MAAM,CAAC1Z,QAAD,CAAN,GAAmB;AACf0X,YAAAA,OAAO,EAAEpS,KAAK,CAACC,UAAN,CAAiBmS,OADX;AAEfC,YAAAA,OAAO,EAAErS,KAAK,CAACC,UAAN,CAAiBoS;AAFX,WAAnB;AAIA+B,UAAAA,MAAM,CAAC3Z,QAAD,CAAN,GAAmB;AACf2X,YAAAA,OAAO,EAAEpS,KAAK,CAACE,UAAN,CAAiBkS,OADX;AAEfC,YAAAA,OAAO,EAAErS,KAAK,CAACE,UAAN,CAAiBmS;AAFX,WAAnB;AAIA;AArCR;;AAuCA,UAAIpZ,GAAG,GAAG,KAAK,CAAf;AACAA,MAAAA,GAAG,GAAG;AACFiD,QAAAA,KAAK,EAAE8D,KAAK,CAACG,QADX;AACqB0S,QAAAA,MAAM,EAAEjoB,iBAAiB,CAACioB,MAAD,CAD9C;AACwDuB,QAAAA,MAAM,EAAExpB,iBAAiB,CAACwpB,MAAD,CADjF;AAEFrB,QAAAA,MAAM,EAAEA;AAFN,OAAN;;AAIA,UAAIlpB,QAAQ,EAAZ,EAAgB;AACZoP,QAAAA,GAAG,GAAG;AACFiD,UAAAA,KAAK,EAAE8D,KAAK,CAACG,QADX;AACqBiU,UAAAA,MAAM,EAAExpB,iBAAiB,CAACwpB,MAAD,CAD9C;AAEFvB,UAAAA,MAAM,EAAE;AAAE5a,YAAAA,UAAU,EAAEvC,SAAd;AAAyB6B,YAAAA,KAAK,EAAE7B;AAAhC,WAFN;AAEmDqd,UAAAA,MAAM,EAAEA;AAF3D,SAAN;AAIA,YAAIwB,WAAW,GAAGtb,GAAG,CAAC4Z,MAAtB;AACA0B,QAAAA,WAAW,CAACtc,UAAZ,GAAyB,EAAzB;AACAsc,QAAAA,WAAW,CAAChd,KAAZ,GAAoB,EAApB;AACA,YAAImZ,MAAM,GAAG,KAAK,CAAlB;;AACA,aAAK,IAAI/pB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGksB,MAAM,CAACvsB,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC+pB,UAAAA,MAAM,GAAG9lB,iBAAiB,CAACioB,MAAM,CAAClsB,CAAD,CAAP,CAA1B,CADoC,CAEpC;;AACCmH,UAAAA,aAAa,CAAC+kB,MAAM,CAAClsB,CAAD,CAAP,CAAb,KAA6B4E,SAA9B,GACI;AACCgpB,UAAAA,WAAW,CAACtc,UAAZ,CAAuB9O,IAAvB,CAA4BunB,MAA5B,CAFL,GAE6C6D,WAAW,CAAChd,KAAZ,CAAkBpO,IAAlB,CAAuBunB,MAAvB,CAF7C;AAGH;;AACDzX,QAAAA,GAAG,CAAC4Z,MAAJ,GAAa0B,WAAb;AACH;;AACD,UAAI1B,MAAM,CAACvsB,MAAX,EAAmB;AACf,aAAK6V,YAAL,CAAkBxP,YAAY,CAAC6nB,aAA/B,EAA8Cvb,GAA9C;AACH;AACJ;AACJ,GAxFD;AAyFA;AACJ;AACA;AACA;AACA;;;AACI9E,EAAAA,OAAO,CAACtO,SAAR,CAAkB4uB,gBAAlB,GAAqC,YAAY;AAC7C,QAAIzU,KAAK,GAAG;AAAEnI,MAAAA,IAAI,EAAE,YAAR;AAAsBsI,MAAAA,QAAQ,EAAE;AAAhC,KAAZ;;AACA,QAAI,EAAE,KAAKrF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAJ,EAAqD;AACjD,WAAKhJ,eAAL,CAAqBL,KAArB;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACI7L,EAAAA,OAAO,CAACtO,SAAR,CAAkB6uB,cAAlB,GAAmC,YAAY;AAC3C,QAAI1U,KAAK,GAAG;AAAEnI,MAAAA,IAAI,EAAE,UAAR;AAAoBsI,MAAAA,QAAQ,EAAE;AAA9B,KAAZ;;AACA,QAAI,EAAE,KAAKrF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAJ,EAAqD;AACjD,WAAKhJ,eAAL,CAAqBL,KAArB;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACI7L,EAAAA,OAAO,CAACtO,SAAR,CAAkB8uB,IAAlB,GAAyB,YAAY;AACjC,SAAK7f,qBAAL,GAA6B,IAA7B;AACA,SAAKiB,eAAL,GAAuB,KAAvB;;AACA,QAAI,KAAK8d,cAAL,IAAwB,KAAKtW,WAAL,GAAmB/Q,kBAAkB,CAAC6c,QAAlE,EAA6E;AACzE,WAAKwK,cAAL,CAAoBc,IAApB,CAAyB,IAAzB;AACH;;AACD,SAAKrQ,cAAL,CAAoB2B,kBAApB;AACA,SAAKlQ,eAAL,GAAuB,IAAvB;AACA,SAAKjB,qBAAL,GAA6B,KAA7B;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;;;AACIX,EAAAA,OAAO,CAACtO,SAAR,CAAkB+uB,IAAlB,GAAyB,YAAY;AACjC,SAAK9f,qBAAL,GAA6B,IAA7B;AACA,SAAKiB,eAAL,GAAuB,KAAvB;;AACA,QAAI,KAAK8d,cAAL,IAAwB,KAAKtW,WAAL,GAAmB/Q,kBAAkB,CAAC6c,QAAlE,EAA6E;AACzE,WAAKwK,cAAL,CAAoBe,IAApB,CAAyB,IAAzB;AACH;;AACD,SAAKtQ,cAAL,CAAoB2B,kBAApB;AACA,SAAKlQ,eAAL,GAAuB,IAAvB;AACA,SAAKjB,qBAAL,GAA6B,KAA7B;AACH,GATD;;AAUAX,EAAAA,OAAO,CAACtO,SAAR,CAAkBgvB,uBAAlB,GAA4C,UAAU5I,OAAV,EAAmB;AAC3D,QAAIA,OAAJ,EAAa;AACT,WAAK,IAAI/M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+M,OAAO,CAAC3lB,MAA5B,EAAoC4Y,CAAC,EAArC,EAAyC;AACrC,aAAK2O,0BAAL,CAAgC5B,OAAO,CAAC/M,CAAD,CAAvC;AACH;AACJ,KAJD,MAKK;AACD,WAAK2O,0BAAL,CAAgC,KAAK1Q,aAArC;AACH;;AACD,SAAKpH,eAAL,GAAuB,KAAvB;AACA,SAAKjB,qBAAL,GAA6B,IAA7B;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,OAAO,CAACtO,SAAR,CAAkBivB,KAAlB,GAA0B,UAAUC,MAAV,EAAkB9I,OAAlB,EAA2BpU,IAA3B,EAAiC;AACvD,SAAKgd,uBAAL,CAA6B5I,OAA7B;;AACA,QAAI,CAACA,OAAL,EAAc;AACVA,MAAAA,OAAO,GAAG,EAAV;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKpV,aAAL,CAAmB5F,KAAlC,EAAyC,KAAK4F,aAAL,CAAmBlF,UAA5D,CAAV;AACH;;AACD,SAAK6C,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACooB,YAA1D;AACA,SAAK1Q,cAAL,CAAoBwQ,KAApB,CAA0B7I,OAA1B,EAAmC8I,MAAnC,EAA4Cld,IAAI,GAAGA,IAAH,GAAU,QAA1D;AACA,SAAKyM,cAAL,CAAoB2B,kBAApB;AACA,SAAKlQ,eAAL,GAAuB,IAAvB;AACA,SAAKjB,qBAAL,GAA6B,KAA7B;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIX,EAAAA,OAAO,CAACtO,SAAR,CAAkBovB,UAAlB,GAA+B,UAAUF,MAAV,EAAkB9I,OAAlB,EAA2B;AACtD,SAAK4I,uBAAL,CAA6B5I,OAA7B;;AACA,QAAI,CAACA,OAAL,EAAc;AACVA,MAAAA,OAAO,GAAG,EAAV;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKpV,aAAL,CAAmB5F,KAAlC,EAAyC,KAAK4F,aAAL,CAAmBlF,UAA5D,CAAV;AACH;;AACD,SAAK6C,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACooB,YAA1D;AACA,SAAK1Q,cAAL,CAAoB2Q,UAApB,CAA+BhJ,OAA/B,EAAwC8I,MAAxC;AACA,SAAKzQ,cAAL,CAAoB2B,kBAApB;AACA,SAAKnR,qBAAL,GAA6B,KAA7B;AACA,SAAKiB,eAAL,GAAuB,IAAvB;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI5B,EAAAA,OAAO,CAACtO,SAAR,CAAkBqvB,QAAlB,GAA6B,UAAUH,MAAV,EAAkB9I,OAAlB,EAA2B;AACpD,SAAK4I,uBAAL,CAA6B5I,OAA7B;;AACA,QAAI,CAACA,OAAL,EAAc;AACVA,MAAAA,OAAO,GAAG,EAAV;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKpV,aAAL,CAAmB5F,KAAlC,EAAyC,KAAK4F,aAAL,CAAmBlF,UAA5D,CAAV;AACH;;AACD,SAAK6C,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACooB,YAA1D;AACA,SAAK1Q,cAAL,CAAoB4Q,QAApB,CAA6BjJ,OAA7B,EAAsC8I,MAAtC;AACA,SAAKzQ,cAAL,CAAoB2B,kBAApB;AACA,SAAKnR,qBAAL,GAA6B,KAA7B;AACA,SAAKiB,eAAL,GAAuB,IAAvB;AACH,GAXD;;AAYA5B,EAAAA,OAAO,CAACtO,SAAR,CAAkBinB,6BAAlB,GAAkD,UAAUF,SAAV,EAAqBuI,OAArB,EAA8B;AAC5E,QAAItrB,QAAQ,MAAM,CAACsrB,OAAnB,EAA4B;AACxB;AACA,UAAIC,uBAAuB,GAAG,KAAKC,sBAAnC;AACA,WAAK9c,uBAAL,CAA6B,IAA7B;;AACA,WAAK,IAAI5R,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGimB,SAAS,CAACtmB,MAA9B,EAAsCK,CAAC,EAAvC,EAA2C;AACvC,aAAKiO,gBAAL,CAAsBgY,SAAS,CAACjmB,CAAD,CAA/B,IAAsCqL,WAAW,CAAC,KAAK4a,SAAS,CAACjmB,CAAD,CAAd,CAAD,CAAjD;AACH;;AACD,WAAK4R,uBAAL,CAA6B6c,uBAA7B;AACH;;AACD,QAAID,OAAJ,EAAa;AACT,WAAK7Q,cAAL,CAAoBgR,mBAApB,CAAwC,KAAK1gB,gBAA7C,EAA+DgY,SAA/D;AACH;AACJ,GAbD;;AAcAzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBgnB,mBAAlB,GAAwC,YAAY;AAChD,QAAID,SAAS,GAAG,EAAhB;AACAA,IAAAA,SAAS,CAACzjB,IAAV,CAAe,gBAAf;AACAyjB,IAAAA,SAAS,CAACzjB,IAAV,CAAe,cAAf;AACA,WAAOyjB,SAAP;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkB0vB,IAAlB,GAAyB,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACrD,QAAI7I,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKvL,QAAL,CAAckU,IAAd,CAAmBC,MAAnB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCC,YAAjC;;AACA,QAAI,EAAE,KAAKtgB,aAAL,GAAqB5I,YAAY,CAACkkB,WAApC,CAAJ,EAAsD;AAClD,WAAK3D,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkB6vB,MAAlB,GAA2B,UAAUrhB,OAAV,EAAmB;AAC1C,QAAIuY,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,QAAI4I,MAAM,GAAGnhB,OAAO,CAACshB,UAAR,GAAqBthB,OAAO,CAACshB,UAA7B,GAA0C,GAAvD;AACAH,IAAAA,MAAM,GAAGnhB,OAAO,CAACwD,IAAR,KAAiB,SAAjB,GAA6B,KAAK,IAAI2d,MAAT,CAA7B,GAAiD,IAAIA,MAA9D;AACA,SAAKnU,QAAL,CAAckU,IAAd,CAAmBC,MAAnB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCnhB,OAAO,CAACuhB,UAAzC;AACA,SAAK9I,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBgwB,GAAlB,GAAwB,UAAU7O,gBAAV,EAA4BD,cAA5B,EAA4C0O,YAA5C,EAA0D;AAC9E,QAAI7I,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKkJ,SAAL,CAAe,UAAf;AACA,SAAKzU,QAAL,CAAckU,IAAd,CAAmB,CAAnB,EAAsBvO,gBAAtB,EAAwCD,cAAxC,EAAwD0O,YAAxD;AACA,SAAK3I,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBkwB,KAAlB,GAA0B,YAAY;AAClC,QAAInJ,SAAS,GAAG,KAAKC,mBAAL,EAAhB;AACA,SAAKC,6BAAL,CAAmCF,SAAnC;AACA,SAAKvL,QAAL,CAAckU,IAAd,CAAmB,IAAI,KAAKlU,QAAL,CAAcV,WAArC,EAAkD,CAAC,KAAKU,QAAL,CAAc2F,gBAAjE,EAAmF,CAAC,KAAK3F,QAAL,CAAc0F,cAAlG,EAAkH;AAAEkJ,MAAAA,CAAC,EAAE,CAAL;AAAQznB,MAAAA,CAAC,EAAE;AAAX,KAAlH;AACA,SAAKskB,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBmwB,aAAlB,GAAkC,YAAY;AAC1C,QAAI7P,uBAAuB,GAAG,EAA9B;AACA,QAAIC,qBAAqB,GAAG,EAA5B;AACA,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,QAAIxc,QAAQ,EAAZ,EAAgB;AACZ,WAAK,IAAIsQ,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKnC,UAA3B,EAAuCkC,EAAE,GAAGC,EAAE,CAAC9T,MAA/C,EAAuD6T,EAAE,EAAzD,EAA6D;AACzD,YAAIV,GAAG,GAAGW,EAAE,CAACD,EAAD,CAAZ;AACAgM,QAAAA,uBAAuB,CAAChd,IAAxB,CAA6B6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAxC;AACH;AACJ;;AACD,QAAI,KAAK6H,WAAL,GAAmB/Q,kBAAkB,CAAC+c,WAAtC,IAAqD,KAAKrD,iBAA9D,EAAiF;AAC7E,WAAKA,iBAAL,CAAuBI,WAAvB,CAAmC,IAAnC;AACH,KAFD,MAGK;AACD,WAAK9N,qBAAL,CAA2B,IAA3B;AACA,UAAIJ,SAAS,GAAG,KAAK,CAArB;;AACA,WAAK,IAAIzR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7CyR,QAAAA,SAAS,GAAG,KAAKH,UAAL,CAAgBtR,CAAhB,CAAZ;AACAyR,QAAAA,SAAS,CAACsH,QAAV,GAAqB,EAArB;AACA,aAAK7C,uBAAL,CAA6BzE,SAA7B,EAAwC,EAAxC,EAA4C;AAAEsH,UAAAA,QAAQ,EAAEtH,SAAS,CAACsH;AAAtB,SAA5C;AACH;;AACD,WAAKlH,qBAAL,CAA2B,KAA3B;AACH;;AACD,QAAI3O,QAAQ,EAAZ,EAAgB;AACZ,WAAK,IAAIyR,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKtD,UAA3B,EAAuCqD,EAAE,GAAGC,EAAE,CAACjV,MAA/C,EAAuDgV,EAAE,EAAzD,EAA6D;AACzD,YAAI7B,GAAG,GAAG8B,EAAE,CAACD,EAAD,CAAZ;AACA8K,QAAAA,qBAAqB,CAACjd,IAAtB,CAA2B6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAtC;AACH;;AACD,WAAK4O,cAAL,CAAoBiC,gBAApB,CAAqCJ,uBAArC,EAA8DC,qBAA9D,EAAqFC,gBAArF;AACA,UAAIlB,aAAa,GAAG,UAApB;AACA,UAAIlO,MAAM,GAAG,QAAb;AACA,UAAImO,aAAa,GAAG;AAAE7N,QAAAA,KAAK,EAAE,EAAT;AAAaU,QAAAA,UAAU,EAAEoO;AAAzB,OAApB;;AACA,UAAIlP,MAAM,IAAIA,MAAM,CAACF,MAAD,CAApB,EAA8B;AAC1B,YAAIwC,GAAG,GAAG;AAAE,wBAAc,wBAAhB;AAA0C,wBAAc2L;AAAxD,SAAV;AACAjO,QAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACH;AACJ;AACJ,GArCD;AAsCA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACItF,EAAAA,OAAO,CAACtO,SAAR,CAAkBowB,qBAAlB,GAA0C,UAAUhd,GAAV,EAAe;AACrD,QAAI2T,SAAS,GAAG,KAAKC,mBAAL,EAAhB;;AACA,QAAI5T,GAAJ,EAAS;AACL,WAAK6T,6BAAL,CAAmCF,SAAnC;AACH,KAFD,MAGK;AACD,WAAKE,6BAAL,CAAmCF,SAAnC,EAA8C,IAA9C;AACH;AACJ,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzY,EAAAA,OAAO,CAACtO,SAAR,CAAkBsW,YAAlB,GAAiC,UAAU+Z,SAAV,EAAqBvc,IAArB,EAA2B;AACxD,WAAO9S,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIsvB,SAAJ;AACA,aAAOpuB,WAAW,CAAC,IAAD,EAAO,UAAUqS,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAAClS,KAAX;AACI,eAAK,CAAL;AACI,gBAAIyR,IAAJ,EAAU;AACN,mBAAKyc,gBAAL,CAAsBzc,IAAtB;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAc,KAAKkN,OAAL,CAAala,YAAY,CAACupB,SAAD,CAAzB,EAAsCvc,IAAtC,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIwc,YAAAA,SAAS,GAAG/b,EAAE,CAACjS,IAAH,EAAZ;;AACA,gBAAI0B,QAAQ,MAAM,OAAOssB,SAAP,KAAqB,QAAvC,EAAiD;AAC7CA,cAAAA,SAAS,GAAGvN,IAAI,CAACC,KAAL,CAAWsN,SAAX,CAAZ;AACH;;AACD,mBAAO,CAAC;AAAE;AAAH,cAAeA,SAAf,CAAP;AAXR;AAaH,OAdiB,CAAlB;AAeH,KAjBe,CAAhB;AAkBH,GAnBD;;AAoBAhiB,EAAAA,OAAO,CAACtO,SAAR,CAAkBuwB,gBAAlB,GAAqC,UAAUzc,IAAV,EAAgB;AACjD,QAAIrF,OAAO,GAAGqF,IAAI,CAACrF,OAAnB;;AACA,QAAIqF,IAAI,CAACrF,OAAL,IAAgBA,OAAO,YAAY7F,QAAnC,IAAgD6F,OAAO,CAACiD,KAAR,CAAcjR,MAAd,GAAuBgO,OAAO,CAAC2D,UAAR,CAAmB3R,MAA1C,KAAqD,CAAzG,EAA6G;AACzGqT,MAAAA,IAAI,CAACrF,OAAL,GAAgBA,OAAO,CAACiD,KAAR,CAAcjR,MAAd,KAAyB,CAA1B,GAA+BgO,OAAO,CAACiD,KAAR,CAAc,CAAd,CAA/B,GAAkDjD,OAAO,CAAC2D,UAAR,CAAmB,CAAnB,CAAjE;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEI9D,EAAAA,OAAO,CAACtO,SAAR,CAAkBwwB,aAAlB,GAAkC,UAAUrf,IAAV,EAAgBsf,QAAhB,EAA0BC,IAA1B,EAAgC;AAC9D,QAAI,KAAKnd,SAAL,CAAekd,QAAf,CAAJ,EAA8B;AAC1B,UAAIE,YAAY,GAAG,KAAKpd,SAAL,CAAekd,QAAf,CAAnB;AACA,WAAK9d,qBAAL,CAA2B,IAA3B;;AACA,UAAI,KAAKqb,cAAT,EAAyB;AACrB,aAAKzT,cAAL,CAAoBqU,gBAApB;AACH;;AACD,UAAI,CAAC,KAAKrb,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAL,EAA8B;AAC1B0B,QAAAA,IAAI,CAACob,OAAL,GAAeoE,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BhX,KAA5B,GAAoCub,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BhC,CAA/E;AACAjZ,QAAAA,IAAI,CAACqb,OAAL,GAAemE,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4B9W,MAA5B,GAAqCqb,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BzpB,CAAhF;AACAwO,QAAAA,IAAI,GAAG,KAAK4C,GAAL,CAAS5C,IAAT,CAAP;AACH;;AACDA,MAAAA,IAAI,CAACzB,QAAL,GAAgB,EAAhB;;AACA,UAAI,CAACihB,YAAY,CAAC5e,KAAb,CAAmB6e,MAAnB,CAA0BnwB,MAA/B,EAAuC;AACnC,YAAIowB,MAAM,GAAGJ,QAAQ,GAAGC,IAAX,GAAkB,GAA/B;;AACA,YAAI,KAAKnd,SAAL,CAAesd,MAAf,CAAJ,EAA4B;AACxB7jB,UAAAA,mBAAmB,CAAC,IAAD,EAAO,KAAKuG,SAAL,CAAesd,MAAf,CAAP,EAA+B1f,IAA/B,EAAqCtB,SAArC,EAAgD,IAAhD,CAAnB;AACA5C,UAAAA,6BAA6B,CAAC,KAAKsG,SAAL,CAAesd,MAAf,CAAD,EAAyBF,YAAzB,EAAuCxf,IAAvC,EAA6C,IAA7C,CAA7B;AACH;AACJ,OAND,MAOK;AACD,aAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6vB,YAAY,CAAC5e,KAAb,CAAmB6e,MAAnB,CAA0BnwB,MAA9C,EAAsDK,CAAC,EAAvD,EAA2D;AACvD,cAAI+vB,MAAM,GAAGJ,QAAQ,GAAGC,IAAX,GAAkB5vB,CAA/B;;AACA,cAAI,KAAKyS,SAAL,CAAesd,MAAf,KAA0B,KAAKtd,SAAL,CAAesd,MAAf,EAAuB5F,MAArD,EAA6D;AACzD,gBAAI6F,QAAQ,GAAG,KAAKvd,SAAL,CAAesd,MAAf,EAAuBrZ,OAAvB,CAA+B4U,MAA9C;AACA,gBAAI2D,UAAU,GAAG;AACb3F,cAAAA,CAAC,EAAE0G,QAAQ,CAAC1G,CAAT,IACE0G,QAAQ,CAAC1G,CAAT,GAAauG,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BhC,CAAzC,GAA6CjZ,IAAI,CAAC4f,MAAL,CAAYC,IAAzD,GAAiE7f,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoBhX,KAApB,GAA4B,CAD/F,CADU;AAGbzS,cAAAA,CAAC,EAAEmuB,QAAQ,CAACnuB,CAAT,GAAaguB,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BzpB,CAAzC,GAA6CwO,IAAI,CAAC4f,MAAL,CAAYE;AAH/C,aAAjB;;AAKA,gBAAIN,YAAY,CAAC5e,KAAb,CAAmBmf,WAAnB,KAAmC,YAAvC,EAAqD;AACjDnB,cAAAA,UAAU,CAACptB,CAAX,GAAemuB,QAAQ,CAACnuB,CAAxB;AACH,aAFD,MAGK;AACDotB,cAAAA,UAAU,CAAC3F,CAAX,GAAe0G,QAAQ,CAAC1G,CAAxB;AACA,kBAAI+G,YAAY,GAAG,KAAK5d,SAAL,CAAesd,MAAf,EAAuBnhB,QAAvB,GACfihB,YAAY,CAAC5e,KAAb,CAAmBqf,KAAnB,CAAyB,CAAzB,EAA4B3hB,EADb,GACkB,WADrC;AAEAsgB,cAAAA,UAAU,CAACptB,CAAX,GAAemuB,QAAQ,CAACnuB,CAAT,IACVguB,YAAY,CAACnZ,OAAb,CAAqB4U,MAArB,CAA4BzpB,CAA5B,GAAgC,KAAK4Q,SAAL,CAAe4d,YAAf,EAA6B3Z,OAA7B,CAAqC4U,MAArC,CAA4C9W,MAA5E,GACGnE,IAAI,CAAC4f,MAAL,CAAYE,GADf,GACsB9f,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoB9W,MAApB,GAA6B,CAFzC,CAAf;AAGH;;AACD,gBAAIwb,QAAQ,CAACO,aAAT,CAAuBtB,UAAvB,KACCc,MAAM,KAAKJ,QAAQ,GAAGC,IAAX,IAAmBC,YAAY,CAAC5e,KAAb,CAAmB6e,MAAnB,CAA0BnwB,MAA1B,GAAmC,CAAtD,CADhB,EAC2E;AACvEuM,cAAAA,mBAAmB,CAAC,IAAD,EAAO,KAAKuG,SAAL,CAAesd,MAAf,CAAP,EAA+B1f,IAA/B,EAAqCtB,SAArC,EAAgD,IAAhD,CAAnB;AACA5C,cAAAA,6BAA6B,CAAC,KAAKsG,SAAL,CAAesd,MAAf,CAAD,EAAyBF,YAAzB,EAAuCxf,IAAvC,EAA6C,IAA7C,CAA7B;AACA;AACH;AACJ;AACJ;AACJ;;AACD,UAAI,KAAK6c,cAAT,EAAyB;AACrB,aAAKzT,cAAL,CAAoBsU,cAApB;AACH;;AACD,WAAKlc,qBAAL,CAA2B,KAA3B;AACH;;AACD,SAAK2e,wBAAL;AACH,GAxDD;AAyDA;AACJ;AACA;AACA;AACA;;;AACIhjB,EAAAA,OAAO,CAACtO,SAAR,CAAkBuxB,WAAlB,GAAgC,UAAU3d,GAAV,EAAe;AAC3C,QAAIA,GAAG,IAAIA,GAAG,CAACnE,EAAX,IAAiB,CAACmE,GAAG,CAAC4D,OAA1B,EAAmC;AAC/B5D,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,CAAN;AACH;;AACD,QAAI2c,MAAM,GAAG9f,SAAS,CAACsH,GAAG,CAAC4D,OAAL,CAAtB;AACA,QAAIuV,QAAQ,GAAG;AAAE3C,MAAAA,CAAC,EAAE,CAAL;AAAQznB,MAAAA,CAAC,EAAE;AAAX,KAAf;AACA,QAAIsQ,OAAO,GAAGW,GAAG,CAAC4d,OAAJ,CAAYve,OAAZ,GACVW,GAAG,CAAC4d,OAAJ,CAAYve,OADF,GACY,OAAOwe,IAAI,CAACC,KAAL,CAAWtF,MAAM,CAAChC,CAAlB,CAAP,GAA8B,GAA9B,GAAoC,IAApC,GAA2CqH,IAAI,CAACC,KAAL,CAAWtF,MAAM,CAACzpB,CAAlB,CADrE;;AAEA,QAAIiR,GAAG,IAAIA,GAAG,CAAC4d,OAAJ,CAAYG,MAAZ,KAAuB,QAAlC,EAA4C;AACxC,UAAI/d,GAAG,YAAY/O,IAAnB,EAAyB;AACrBkoB,QAAAA,QAAQ,GAAG;AAAE3C,UAAAA,CAAC,EAAExW,GAAG,CAAC2Y,OAAJ,GAAe3Y,GAAG,CAACwB,KAAJ,GAAY,CAAhC;AAAoCzS,UAAAA,CAAC,EAAEiR,GAAG,CAAC4Y,OAAJ,GAAe5Y,GAAG,CAAC0B,MAAJ,GAAa;AAAnE,SAAX;AACH,OAFD,MAGK;AACDyX,QAAAA,QAAQ,GAAG;AAAE3C,UAAAA,CAAC,EAAExW,GAAG,CAACge,WAAJ,CAAgBxH,CAArB;AAAwBznB,UAAAA,CAAC,EAAEiR,GAAG,CAACge,WAAJ,CAAgBxH;AAA3C,SAAX;AACH;;AACD,WAAK3L,cAAL,CAAoB8S,WAApB,CAAgC3d,GAAhC,EAAqCmZ,QAArC,EAA+C9Z,OAA/C,EAAwD,YAAxD,EAAsE,IAAtE;AACH;AACJ,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;;;AACI3E,EAAAA,OAAO,CAACtO,SAAR,CAAkB6xB,WAAlB,GAAgC,UAAUje,GAAV,EAAe;AAC3C,QAAIA,GAAG,IAAIA,GAAG,CAAC4d,OAAJ,CAAYG,MAAZ,KAAuB,QAAlC,EAA4C;AACxC,WAAKlQ,aAAL,CAAmBqQ,KAAnB;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxjB,EAAAA,OAAO,CAACtO,SAAR,CAAkB+xB,OAAlB,GAA4B,UAAUne,GAAV,EAAemU,KAAf,EAAsB;AAC9C,WAAO,KAAKhU,GAAL,CAASH,GAAT,EAAcmU,KAAd,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzZ,EAAAA,OAAO,CAACtO,SAAR,CAAkBgyB,eAAlB,GAAoC,UAAUjK,KAAV,EAAiB7W,KAAjB,EAAwB;AACxD,QAAI+gB,aAAa,GAAG,KAAKzC,sBAAzB;AACA,SAAK9c,uBAAL,CAA6B,KAA7B;AACA,QAAIwf,UAAU,GAAG,KAAKzV,mBAAtB;AACA,SAAK9J,qBAAL,CAA2B,IAA3B;AACAoV,IAAAA,KAAK,GAAG,KAAK+B,SAAL,CAAe/B,KAAK,CAACtY,EAArB,CAAR;;AACA,QAAIzL,QAAQ,EAAZ,EAAgB;AACZ,WAAKic,WAAL,CAAiB8H,KAAjB,EAAwB,IAAxB;AACH;;AACD,QAAIoK,cAAc,GAAI,EAAE,KAAKld,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,KAAmD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC8W,KAAtC,CAAnD,IAClB,EAAE,KAAK5I,cAAL,GAAsBlO,aAAa,CAACqrB,cAAtC,CADJ;;AAEA,QAAID,cAAJ,EAAoB;AAChB,WAAKvD,gBAAL;AACH;;AACD,QAAInf,EAAE,GAAG,KAAK4iB,QAAL,CAActK,KAAd,EAAqB7W,KAArB,CAAT;;AACA,QAAIihB,cAAJ,EAAoB;AAChB,UAAIG,UAAU,GAAG,EAAjB;AACAA,MAAAA,UAAU,CAAC7iB,EAAD,CAAV,GAAiBtD,WAAW,CAAC,KAAK2d,SAAL,CAAera,EAAf,CAAD,CAA5B;AACA,UAAI0K,KAAK,GAAG;AACRnI,QAAAA,IAAI,EAAE,qBADE;AACqByc,QAAAA,UAAU,EAAE,QADjC;AAC2CrU,QAAAA,UAAU,EAAEjO,WAAW,CAAC4b,KAAD,CADlE;AAER1N,QAAAA,UAAU,EAAElO,WAAW,CAAC4b,KAAD,CAFf;AAEwBzN,QAAAA,QAAQ,EAAE,UAFlC;AAE8CiY,QAAAA,QAAQ,EAAE9iB,EAFxD;AAE4D6iB,QAAAA,UAAU,EAAEA;AAFxE,OAAZ;AAIA,WAAK9X,eAAL,CAAqBL,KAArB;AACA,WAAK0U,cAAL;AACH;;AACD,SAAKlc,qBAAL,CAA2Buf,UAA3B;AACA,SAAKxf,uBAAL,CAA6Buf,aAA7B;AACA,SAAK5G,cAAL;;AACA,QAAIrnB,QAAQ,MAAMmuB,cAAlB,EAAkC;AAC9B,WAAK1T,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GA/BD;AAgCA;AACJ;AACA;AACA;AACA;AACA;;;AACI9R,EAAAA,OAAO,CAACtO,SAAR,CAAkBwyB,eAAlB,GAAoC,UAAUC,WAAV,EAAuB;AACvD;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAI7c,IAAI,GAAG4c,WAAW,GAAG,KAAKlY,cAAL,CAAoBoY,SAAvB,GAAmC,KAAKpY,cAAL,CAAoBqY,SAA7E;;AACA,QAAI,KAAKrY,cAAL,CAAoBsY,UAApB,KAAmChjB,SAAvC,EAAkD;AAC9C,WAAK,IAAI/O,CAAC,GAAG+U,IAAI,CAACpV,MAAL,GAAc,CAA3B,EAA8BK,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC4xB,QAAAA,YAAY,CAACpvB,IAAb,CAAkBuS,IAAI,CAAC/U,CAAD,CAAtB;;AACA,YAAI4xB,YAAY,CAACjyB,MAAb,GAAsB,KAAK8Z,cAAL,CAAoBsY,UAA9C,EAA0D;AACtD,iBAAOH,YAAP;AACH;AACJ;AACJ,KAPD,MAQK;AACDA,MAAAA,YAAY,GAAG7c,IAAf;AACH;;AACD,WAAO6c,YAAP;AACH,GAhBD;AAiBA;;AACA;AACJ;AACA;AACA;AACA;AACA;;;AAEIpkB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8yB,QAAlB,GAA6B,UAAUhf,IAAV,EAAgB;AACzC,WAAOA,IAAI,CAAC,SAAD,CAAJ,GAAkB,KAAKP,SAAL,CAAeO,IAAI,CAAC,IAAD,CAAnB,EAA2BJ,QAA7C,GAAwD,KAAKH,SAAL,CAAeO,IAAI,CAAC,IAAD,CAAnB,EAA2BH,OAA1F;AACH,GAFD;AAGA;;AACA;AACJ;AACA;AACA;AACA;AACA;;;AAEIrF,EAAAA,OAAO,CAACtO,SAAR,CAAkB+yB,WAAlB,GAAgC,UAAUtjB,EAAV,EAAc;AAC1C,WAAO,KAAK8D,SAAL,CAAe9D,EAAf,EAAmBC,QAA1B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,OAAO,CAACtO,SAAR,CAAkBgzB,YAAlB,GAAiC,UAAUpf,GAAV,EAAe;AAC5C,WAAO,KAAKG,GAAL,CAASH,GAAT,CAAP;AACH,GAFD;AAGA;;AACA;;;AACAtF,EAAAA,OAAO,CAACtO,SAAR,CAAkBizB,kCAAlB,GAAuD,UAAUrf,GAAV,EAAesf,YAAf,EAA6BC,iBAA7B,EAAgDC,mBAAhD,EAAqE;AACxH;AACA,QAAI,EAAE,KAAK9jB,aAAL,GAAqB5I,YAAY,CAACia,WAApC,CAAJ,EAAsD;AAClD,UAAIrB,aAAa,GAAG,UAApB;AACA,UAAIlO,MAAM,GAAG,QAAb;;AACA,UAAIE,MAAM,IAAIA,MAAM,CAACF,MAAD,CAApB,EAA8B;AAC1B,YAAIiiB,YAAY,GAAG,KAAK,CAAxB;AACA,YAAIC,wBAAwB,GAAG,EAA/B;AACA,YAAIC,sBAAsB,GAAG,EAA7B;AACA,YAAIC,oBAAoB,GAAG,EAA3B;AACA,YAAIC,sBAAsB,GAAG,EAA7B;;AACA,YAAIL,mBAAmB,IAAI,CAACF,YAA5B,EAA0C;AACtC,eAAK,IAAIpyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK6P,2BAAL,CAAiClQ,MAArD,EAA6DK,CAAC,EAA9D,EAAkE;AAC9D0yB,YAAAA,oBAAoB,CAAClwB,IAArB,CAA0B2E,aAAa,CAAC,KAAK0I,2BAAL,CAAiC7P,CAAjC,CAAD,CAAb,KAAuD4E,SAAvD,GAAmE,WAAnE,GAAiF,MAA3G;AACA2tB,YAAAA,YAAY,GAAGtuB,iBAAiB,CAAC,KAAK4L,2BAAL,CAAiC7P,CAAjC,CAAD,CAAhC;AACAyyB,YAAAA,sBAAsB,CAACjwB,IAAvB,CAA4B+vB,YAA5B;AACAI,YAAAA,sBAAsB,GAAG,KAAK7iB,2BAA9B;AACH;AACJ,SAPD,MAQK,IAAK,CAAC,KAAK/B,cAAN,IAAwBskB,iBAA7B,EAAiD;AAClD,eAAKtkB,cAAL,GAAsB,IAAtB;AACA,cAAI6kB,cAAc,GAAG3uB,iBAAiB,CAAC6O,GAAD,CAAtC;AACA,cAAI+f,QAAQ,GAAG,EAAf;AACA,cAAIC,YAAY,GAAG,KAAK,CAAxB;AACA,cAAIC,QAAQ,GAAG,EAAf;;AACA,cAAI,CAACX,YAAL,EAAmB;AACf,gBAAI,CAACC,iBAAL,EAAwB;AACpBU,cAAAA,QAAQ,GAAG,KAAKpV,cAAL,CAAoBqV,WAApB,CAAgClgB,GAAhC,EAAqC+f,QAArC,CAAX;AACH,aAFD,MAGK;AACDE,cAAAA,QAAQ,GAAGV,iBAAX;AACH;;AACD,iBAAK,IAAIryB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+yB,QAAQ,CAACpzB,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACtC4yB,cAAAA,cAAc,GAAG3uB,iBAAiB,CAAC8uB,QAAQ,CAAC/yB,CAAD,CAAT,CAAlC;AACAyyB,cAAAA,sBAAsB,CAACjwB,IAAvB,CAA4BowB,cAA5B;;AACA,kBAAIzrB,aAAa,CAAC4rB,QAAQ,CAAC/yB,CAAD,CAAT,CAAb,KAA+B4E,SAAnC,EAA8C;AAC1CkuB,gBAAAA,YAAY,GAAG,KAAKxhB,UAAL,CAAgBgZ,OAAhB,CAAwByI,QAAQ,CAAC/yB,CAAD,CAAhC,CAAf;AACH,eAFD,MAGK;AACD8yB,gBAAAA,YAAY,GAAG,KAAKliB,KAAL,CAAW0Z,OAAX,CAAmByI,QAAQ,CAAC/yB,CAAD,CAA3B,CAAf;AACH;;AACD2yB,cAAAA,sBAAsB,CAACnwB,IAAvB,CAA4BswB,YAA5B;AACAJ,cAAAA,oBAAoB,CAAClwB,IAArB,CAA0B2E,aAAa,CAAC4rB,QAAQ,CAAC/yB,CAAD,CAAT,CAAb,KAA+B4E,SAA/B,GAA2C,WAA3C,GAAyD,MAAnF;AACH;;AACD,gBAAI,CAACytB,iBAAL,EAAwB;AACpBI,cAAAA,sBAAsB,CAACjwB,IAAvB,CAA4ByB,iBAAiB,CAAC6O,GAAD,CAA7C;AACA6f,cAAAA,sBAAsB,CAACnwB,IAAvB,CAA4B,KAAKoO,KAAL,CAAW0Z,OAAX,CAAmBxX,GAAnB,CAA5B;AACA4f,cAAAA,oBAAoB,CAAClwB,IAArB,CAA0B2E,aAAa,CAAC2L,GAAD,CAAb,KAAuBlO,SAAvB,GAAmC,WAAnC,GAAiD,MAA3E;AACH;AACJ;;AACD,cAAIwtB,YAAY,IAAIA,YAAY,CAACzyB,MAAb,GAAsB,CAA1C,EAA6C;AACzC,iBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoyB,YAAY,CAACzyB,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C4yB,cAAAA,cAAc,GAAG3uB,iBAAiB,CAACmuB,YAAY,CAACpyB,CAAD,CAAb,CAAlC;AACA,kBAAIizB,MAAM,GAAIb,YAAY,CAACpyB,CAAD,CAAZ,YAA2B+D,IAA5B,GAAoC,IAApC,GAA2C,KAAxD;AACA;;AACAkvB,cAAAA,MAAM,GAAGR,sBAAsB,CAACjwB,IAAvB,CAA4BowB,cAA5B,CAAH,GAAiDJ,wBAAwB,CAAChwB,IAAzB,CAA8BowB,cAA9B,CAAvD;AACA;;AACAF,cAAAA,oBAAoB,CAAClwB,IAArB,CAA0B2E,aAAa,CAACirB,YAAY,CAACpyB,CAAD,CAAb,CAAb,KAAmC4E,SAAnC,GAA+C,WAA/C,GAA6D,MAAvF;AACH;AACJ;;AACD,eAAKmJ,cAAL,GAAsB,KAAtB;AACH;;AACD,YAAImlB,MAAM,GAAG;AACT,wBAAc,4BADL;AAET,wBAAc;AACV,uBAAWjR,IAAI,CAACkR,SAAL,CAAeV,sBAAf,CADD;AAEV,0BAAcC,oBAFJ;AAGV,4BAAgBN,YAAY,GAAGrjB,SAAH,GAAe4jB,sBAHjC;AAIV,iCAAqB,IAJX;AAIiB,+BAAmB5jB,SAJpC;AAKV,4BAAgBkT,IAAI,CAACkR,SAAL,CAAeX,wBAAf;AALN;AAFL,SAAb;AAUAhiB,QAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6CwU,MAA7C,EAAqD,IAArD;;AACA,YAAIZ,mBAAmB,IAAI,CAACF,YAA5B,EAA0C;AACtC,eAAKviB,2BAAL,GAAmC,EAAnC;AACA,eAAKC,2BAAL,GAAmC,EAAnC;AACH;AACJ;AACJ;AACJ,GA/ED;AAgFA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItC,EAAAA,OAAO,CAACtO,SAAR,CAAkBk0B,wBAAlB,GAA6C,UAAUtgB,GAAV,EAAeugB,UAAf,EAA2BP,YAA3B,EAAyCQ,mBAAzC,EAA8D;AACvG,QAAI,EAAE,KAAK9kB,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAAJ,EAAkE;AAC9D,UAAIrM,aAAa,GAAG,UAApB;AACA,UAAIlO,MAAM,GAAG,QAAb;;AACA,UAAIE,MAAM,IAAIA,MAAM,CAACF,MAAD,CAAhB,IAA4B,CAAC,KAAKvC,cAAlC,IAAoD,EAAE,KAAKoG,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,CAAxD,EAAsG;AAClG,YAAIhB,YAAY,GAAGtuB,iBAAiB,CAAC6O,GAAD,CAApC;AACA,YAAIogB,MAAM,GAAG;AACT,wBAAc,4BADL;AAET,wBAAc;AACV,uBAAWjR,IAAI,CAACkR,SAAL,CAAeZ,YAAf,CADD;AAEV,0BAAcc,UAFJ;AAEgB,4BAAgBP,YAFhC;AAGV,iCAAqB,KAHX;AAIV,+BAAmBQ,mBAJT;AAI8B,4BAAgBvkB;AAJ9C;AAFL,SAAb;AASAyB,QAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6CwU,MAA7C,EAAqD,IAArD;AACH;AACJ;AACJ,GAlBD,CA7+E2C,CAggF3C;;;AACA1lB,EAAAA,OAAO,CAACtO,SAAR,CAAkBs0B,8BAAlB,GAAmD,UAAU1gB,GAAV,EAAeugB,UAAf,EAA2BP,YAA3B,EAAyCW,SAAzC,EAAoD;AACnG,QAAIjV,aAAa,GAAG,UAApB;AACA,QAAIlO,MAAM,GAAG,QAAb;;AACA,QAAIE,MAAM,IAAIA,MAAM,CAACF,MAAD,CAAhB,IAA4BwC,GAAG,CAACnT,MAAJ,GAAa,CAAzC,IAA8C,CAAC,KAAKoO,cAApD,IAAsE,EAAE,KAAKoG,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,CAA1E,EAAwH;AACpH;AACA,UAAId,sBAAsB,GAAG,EAA7B;AACA,UAAIC,oBAAoB,GAAG,EAA3B;AACA,UAAIgB,mBAAmB,GAAG,EAA1B;;AACA,WAAK,IAAI1zB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACnT,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCyyB,QAAAA,sBAAsB,CAACjwB,IAAvB,CAA4ByB,iBAAiB,CAAC6O,GAAG,CAAC9S,CAAD,CAAJ,CAA7C;AACA0yB,QAAAA,oBAAoB,CAAClwB,IAArB,CAA0B6wB,UAA1B;AACAK,QAAAA,mBAAmB,CAAClxB,IAApB,CAAyBixB,SAAzB;AACH;;AACD,UAAIP,MAAM,GAAG;AACT,sBAAc,4BADL;AAET,sBAAc;AACV,qBAAWjR,IAAI,CAACkR,SAAL,CAAeV,sBAAf,CADD;AAEV,wBAAcC,oBAFJ;AAE0B,0BAAgBI,YAF1C;AAGV,+BAAqB,IAHX;AAIV,6BAAmBY,mBAJT;AAKV,0BAAgB,IALN;AAMV,uBAAcL,UAAU,KAAK,MAAhB,GAA0BK,mBAA1B,GAAgD;AANnD;AAFL,OAAb;AAWAljB,MAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6CwU,MAA7C,EAAqD,IAArD;AACH;AACJ,GA1BD;AA2BA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI1lB,EAAAA,OAAO,CAACtO,SAAR,CAAkBy0B,uBAAlB,GAA4C,YAAY;AACpD,QAAIC,eAAe,GAAG,EAAtB;AACA,QAAIC,mBAAmB,GAAG,EAA1B;;AACA,QAAI,KAAKC,iBAAL,IAA0B,EAAE,KAAKvc,WAAL,GAAmBpR,UAAU,CAACqR,eAAhC,CAA9B,EAAgF;AAC5E,WAAK,IAAIxX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC4zB,QAAAA,eAAe,CAACpxB,IAAhB,CAAqB6I,WAAW,CAAC,KAAKuF,KAAL,CAAW5Q,CAAX,CAAD,EAAgB+O,SAAhB,EAA2BA,SAA3B,EAAsC,IAAtC,CAAhC;AACH;;AACD,WAAK,IAAI/O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7C6zB,QAAAA,mBAAmB,CAACrxB,IAApB,CAAyB6I,WAAW,CAAC,KAAKiG,UAAL,CAAgBtR,CAAhB,CAAD,EAAqB+O,SAArB,EAAgCA,SAAhC,EAA2C,IAA3C,CAApC;AACH;AACJ;;AACD,QAAIyP,aAAa,GAAG,UAApB;AACA,QAAIlO,MAAM,GAAG,QAAb;;AACA,QAAIE,MAAM,IAAIA,MAAM,CAACF,MAAD,CAApB,EAA8B;AAC1B,UAAIwC,GAAG,GAAG;AACN,sBAAc,kBADR;AAEN,sBAAc;AAAE,qBAAWmP,IAAI,CAACkR,SAAL,CAAeS,eAAf,CAAb;AAA8C,yBAAe;AAA7D;AAFR,OAAV;AAIApjB,MAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACAA,MAAAA,GAAG,GAAG;AACF,sBAAc,kBADZ;AAEF,sBAAc;AAAE,qBAAWmP,IAAI,CAACkR,SAAL,CAAeU,mBAAf,CAAb;AAAkD,yBAAe;AAAjE;AAFZ,OAAN;AAIArjB,MAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACH;AACJ,GAzBD;;AA0BAtF,EAAAA,OAAO,CAACtO,SAAR,CAAkB60B,eAAlB,GAAoC,UAAUhR,SAAV,EAAqBpU,EAArB,EAAyBqlB,UAAzB,EAAqC;AACrE,QAAI3jB,IAAI,GAAG,KAAKoC,SAAL,CAAesQ,SAAf,CAAX;AACA,QAAIkR,KAAK,GAAGD,UAAU,GAAG3jB,IAAI,CAACuC,QAAR,GAAmBvC,IAAI,CAACwC,OAA9C;;AACA,QAAIohB,KAAK,CAACt0B,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGi0B,KAAK,CAACt0B,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,YAAIi0B,KAAK,CAACj0B,CAAD,CAAL,KAAa2O,EAAjB,EAAqB;AACjBslB,UAAAA,KAAK,CAACC,MAAN,CAAal0B,CAAb,EAAgB,CAAhB;AACH;AACJ;AACJ;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIwN,EAAAA,OAAO,CAACtO,SAAR,CAAkBi1B,qBAAlB,GAA0C,UAAUrhB,GAAV,EAAe;AACrD,QAAI5P,QAAQ,MAAO4P,GAAG,YAAYlO,SAAlC,EAA8C;AAC1C,UAAIkO,GAAG,CAACshB,QAAJ,IAAgB,KAAK3hB,SAAL,CAAeK,GAAG,CAACshB,QAAnB,CAApB,EAAkD;AAC9C,aAAKjV,WAAL,CAAiB9T,WAAW,CAAC,KAAKoH,SAAL,CAAeK,GAAG,CAACshB,QAAnB,CAAD,CAA5B,EAA4D,IAA5D;AACH;;AACD,UAAIthB,GAAG,CAACuhB,QAAJ,IAAgB,KAAK5hB,SAAL,CAAeK,GAAG,CAACuhB,QAAnB,CAApB,EAAkD;AAC9C,aAAKlV,WAAL,CAAiB9T,WAAW,CAAC,KAAKoH,SAAL,CAAeK,GAAG,CAACuhB,QAAnB,CAAD,CAA5B,EAA4D,IAA5D;AACH;AACJ;AACJ,GATD;AAUA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI7mB,EAAAA,OAAO,CAACtO,SAAR,CAAkB+T,GAAlB,GAAwB,UAAUH,GAAV,EAAemU,KAAf,EAAsB;AAC1C,QAAIqN,MAAJ;AACA,QAAIC,mBAAmB,GAAG,KAAK5Y,mBAA/B;AACA,SAAK9J,qBAAL,CAA2B,IAA3B;;AACA,QAAIiB,GAAJ,EAAS;AACLA,MAAAA,GAAG,GAAGzH,WAAW,CAACyH,GAAD,CAAjB;AACA,UAAIE,IAAI,GAAG,KAAK,CAAhB;AACAA,MAAAA,IAAI,GAAG;AACHrF,QAAAA,OAAO,EAAEmF,GADN;AACWyC,QAAAA,KAAK,EAAE,KAAKpB,cADvB;AACuCqgB,QAAAA,KAAK,EAAE,UAD9C;AAC0DtjB,QAAAA,IAAI,EAAE,UADhE;AAC4EujB,QAAAA,MAAM,EAAE;AADpF,OAAP;;AAGA,UAAI,KAAKC,YAAT,EAAuB;AACnB1hB,QAAAA,IAAI,CAACpE,QAAL,GAAgB,KAAK8lB,YAAL,CAAkB/lB,EAAlC;AACH;;AACD,UAAIzL,QAAQ,EAAZ,EAAgB;AACZ8P,QAAAA,IAAI,GAAG1O,kCAAkC,CAAC0O,IAAD,EAAOF,GAAP,EAAY,UAAZ,EAAwB,UAAxB,CAAzC;AACH;;AACD,UAAIA,GAAG,CAACnE,EAAJ,KAAW,QAAX,IAAuB,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAAC0uB,iCAAtC,CAA3B,EAAqG;AACjG,aAAKnf,YAAL,CAAkBxP,YAAY,CAAC4uB,gBAA/B,EAAiD5hB,IAAjD;AACH;;AACD,UAAIA,IAAI,CAACyhB,MAAL,IAAe,KAAKI,aAAxB,EAAuC;AACnC,aAAKC,cAAL,CAAoB9hB,IAAI,CAACrF,OAAzB;AACA,aAAKgT,aAAL,CAAmBqQ,KAAnB;;AACA,YAAI7pB,aAAa,CAAC6L,IAAI,CAACrF,OAAN,CAAb,KAAgC/I,SAApC,EAA+C;AAC3C,cAAIoO,IAAI,CAACrF,OAAL,CAAaymB,QAAjB,EAA2B;AACvB,iBAAKL,eAAL,CAAqB/gB,IAAI,CAACrF,OAAL,CAAaymB,QAAlC,EAA4CphB,IAAI,CAACrF,OAAL,CAAagB,EAAzD,EAA6D,IAA7D;AACH;;AACD,cAAIqE,IAAI,CAACrF,OAAL,CAAa0mB,QAAjB,EAA2B;AACvB,iBAAKN,eAAL,CAAqB/gB,IAAI,CAACrF,OAAL,CAAa0mB,QAAlC,EAA4CrhB,IAAI,CAACrF,OAAL,CAAagB,EAAzD,EAA6D,KAA7D;AACH;AACJ;AACJ;;AACD,WAAKwF,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACooB,YAA1D;AACAvb,MAAAA,GAAG,CAACnE,EAAJ,GAASmE,GAAG,CAACnE,EAAJ,IAAUvD,QAAQ,EAA3B;AACA,UAAIuY,MAAM,GAAG,KAAKgC,WAAlB;;AACA,UAAI,CAAC3S,IAAI,CAACyhB,MAAN,IAAgB,CAAC9Q,MAAM,CAACoR,IAA5B,EAAkC;AAC9B,YAAIpR,MAAM,CAAC2B,OAAP,CAAegF,OAAf,CAAuBxX,GAAG,CAACnE,EAA3B,IAAiC,CAAjC,IAAsC,CAACgV,MAAM,CAACoR,IAAlD,EAAwD;AACpD,cAAI,CAACpR,MAAM,CAACqR,OAAZ,EAAqB;AACjBrR,YAAAA,MAAM,CAACqR,OAAP,GAAiB,IAAjB;AACA,iBAAK7S,QAAL;AACH;;AACDwB,UAAAA,MAAM,CAAC2B,OAAP,CAAe9iB,IAAf,CAAoBsQ,GAAG,CAACnE,EAAxB;AACH;;AACD,YAAIxH,aAAa,CAAC2L,GAAD,CAAb,KAAuBlO,SAA3B,EAAsC;AAClC0vB,UAAAA,MAAM,GAAG,IAAI1vB,SAAJ,CAAc,IAAd,EAAoB,YAApB,EAAkCkO,GAAlC,EAAuC,IAAvC,CAAT;AACAwhB,UAAAA,MAAM,CAACW,MAAP,GAAgB,KAAhB;AACA5wB,UAAAA,mBAAmB,CAACiwB,MAAD,EAASxhB,GAAT,EAAc,KAAKvB,iBAAnB,CAAnB;AACA,eAAKD,UAAL,CAAgB9O,IAAhB,CAAqB8xB,MAArB;AACA,eAAKY,UAAL,CAAgBZ,MAAhB;;AACA,cAAIpxB,QAAQ,EAAZ,EAAgB;AACZ,gBAAK,KAAKsL,aAAL,GAAqB5I,YAAY,CAACuvB,kBAAvC,EAA4D;AACxD,mBAAKtlB,2BAAL,CAAiCrN,IAAjC,CAAsC8xB,MAAtC;AACH,aAFD,MAGK,IAAI,KAAKzkB,2BAAL,CAAiClQ,MAAjC,GAA0C,CAA9C,EAAiD;AAClD,mBAAKoO,cAAL,GAAsB,KAAtB;AACA,mBAAK8B,2BAAL,CAAiCrN,IAAjC,CAAsC8xB,MAAtC;AACA,mBAAKnC,kCAAL,CAAwCpjB,SAAxC,EAAmD,KAAKc,2BAAxD,EAAqFd,SAArF,EAAgG,IAAhG;AACA,mBAAKc,2BAAL,GAAmC,EAAnC;AACA,mBAAK8N,cAAL,CAAoB2B,kBAApB;AACH,aANI,MAOA,IAAK,CAAC,KAAKvR,cAAP,IAA0B,EAAE,KAAKS,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAA9B,EAA4F;AAC7F,mBAAKuI,wBAAL,CAA8BkB,MAA9B,EAAsC,WAAtC;AACA,mBAAK3W,cAAL,CAAoB2B,kBAApB;AACH;AACJ;;AACD,cAAIxM,GAAG,CAACkiB,OAAJ,KAAgB,KAApB,EAA2B;AACvB,iBAAKI,uBAAL,CAA6Bd,MAAM,CAAC5d,OAApC,EAA6C4d,MAA7C,EAAqDxhB,GAAG,CAACkiB,OAAzD;AACH;;AACD,eAAKK,WAAL,CAAiBf,MAAjB;AACA,eAAKH,qBAAL,CAA2BG,MAA3B;AACH,SA3BD,MA4BK;AACDA,UAAAA,MAAM,GAAG,IAAIvwB,IAAJ,CAAS,IAAT,EAAe,OAAf,EAAwB+O,GAAxB,EAA6B,IAA7B,CAAT;AACAzO,UAAAA,mBAAmB,CAACiwB,MAAD,EAASxhB,GAAT,EAAc,KAAK3B,YAAnB,CAAnB;AACAmjB,UAAAA,MAAM,CAAC1lB,QAAP,GAAmBkE,GAAG,CAAClE,QAAL,GAAiBkE,GAAG,CAAClE,QAArB,GAAgC0lB,MAAM,CAAC1lB,QAAzD;AACA0lB,UAAAA,MAAM,CAACgB,QAAP,GAAkBxiB,GAAG,CAACwiB,QAAtB;AACAhB,UAAAA,MAAM,CAACW,MAAP,GAAgB,KAAhB;AACA,eAAKrkB,KAAL,CAAWpO,IAAX,CAAgB8xB,MAAhB;AACA,eAAKY,UAAL,CAAgBZ,MAAhB,EAAwB3Q,MAAxB,EAAgC5U,SAAhC,EAA2CkY,KAA3C;;AACA,cAAI/jB,QAAQ,EAAZ,EAAgB;AACZ,gBAAK,KAAKsL,aAAL,GAAqB5I,YAAY,CAACuvB,kBAAvC,EAA4D;AACxD,mBAAKtlB,2BAAL,CAAiCrN,IAAjC,CAAsC8xB,MAAtC;AACH,aAFD,MAGK,IAAI,KAAKzkB,2BAAL,CAAiClQ,MAAjC,GAA0C,CAA9C,EAAiD;AAClD,mBAAKkQ,2BAAL,CAAiCrN,IAAjC,CAAsC8xB,MAAtC;AACA,mBAAKvmB,cAAL,GAAsB,KAAtB;AACA,mBAAKokB,kCAAL,CAAwCpjB,SAAxC,EAAmD,KAAKc,2BAAxD,EAAqFd,SAArF,EAAgG,IAAhG;AACA,mBAAK4O,cAAL,CAAoB2B,kBAApB;AACA,mBAAKzP,2BAAL,GAAmC,EAAnC;AACH,aANI,MAOA,IAAK,CAAC,KAAK9B,cAAP,IAA0B,EAAE,KAAKS,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAA9B,EAA4F;AAC7F,mBAAKuI,wBAAL,CAA8BkB,MAA9B,EAAsC,MAAtC;AACA,mBAAK3W,cAAL,CAAoB2B,kBAApB;AACH;AACJ;;AACD,eAAKwB,cAAL;;AACA,cAAI,KAAK0F,UAAT,EAAqB;AACjB,gBAAI8N,MAAM,CAACrjB,KAAP,CAAaI,WAAb,IAA4BijB,MAAM,CAACrjB,KAAP,CAAaI,WAAb,CAAyB1R,MAAzB,KAAoC,CAApE,EAAuE;AACnE,mBAAK,IAAI6T,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAK+S,UAAL,CAAgB+O,qBAAhB,CAAsCjB,MAAtC,CAAtB,EAAqE9gB,EAAE,GAAGC,EAAE,CAAC9T,MAA7E,EAAqF6T,EAAE,EAAvF,EAA2F;AACvF,oBAAIgiB,KAAK,GAAG/hB,EAAE,CAACD,EAAD,CAAd;AACA,qBAAKiiB,cAAL,CAAoBD,KAApB,EAA2B7R,MAA3B,EAAmC,KAAnC;AACH;AACJ;;AACD,gBAAI2Q,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,IAAyBpB,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,CAAsBC,UAAtB,CAAiCC,SAA1D,IACAtB,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,CAAsBC,UAAtB,CAAiCC,SAAjC,CAA2Cj2B,MAD/C,EACuD;AACnD,mBAAK6mB,UAAL,CAAgBqP,WAAhB,CAA4BvB,MAA5B,EAAoC,IAApC;AACH;AACJ;;AACD,cAAI,KAAK/U,iBAAL,IAA2B,KAAK3I,WAAL,GAAmB/Q,kBAAkB,CAAC+c,WAArE,EAAmF;AAC/E,gBAAI0C,OAAO,GAAG,KAAK1H,aAAL,CAAmBkY,WAAnB,CAA+BxB,MAAM,CAAC5d,OAAP,CAAeqf,WAA9C,CAAd;;AACA,iBAAK,IAAI/1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,OAAO,CAAC3lB,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACrC,kBAAI+pB,MAAM,GAAGzE,OAAO,CAACtlB,CAAD,CAApB;;AACA,kBAAI+pB,MAAM,YAAYnlB,SAAtB,EAAiC;AAC7B,qBAAKsR,uBAAL,CAA6B6T,MAA7B,EAAqC,EAArC,EAAyC;AACrCqK,kBAAAA,QAAQ,EAAErK,MAAM,CAACqK,QADoB;AACVC,kBAAAA,QAAQ,EAAEtK,MAAM,CAACsK,QADP;AACiB3b,kBAAAA,YAAY,EAAEqR,MAAM,CAACrR,YADtC;AAErCE,kBAAAA,YAAY,EAAEmR,MAAM,CAACnR,YAFgB;AAEFod,kBAAAA,WAAW,EAAEjM,MAAM,CAACiM,WAFlB;AAE+BlF,kBAAAA,WAAW,EAAE/G,MAAM,CAAC+G;AAFnD,iBAAzC;AAIH;AACJ;AACJ;;AACD,cAAIwD,MAAM,CAACgB,QAAP,GAAkB,CAAC,CAAnB,IAAwBxiB,GAAG,CAAClE,QAA5B,IAAwC,KAAK6D,SAAL,CAAeK,GAAG,CAAClE,QAAnB,CAAxC,IACA,KAAK6D,SAAL,CAAeK,GAAG,CAAClE,QAAnB,EAA6BqC,KAA7B,CAAmCC,IAAnC,KAA4C,eADhD,EACiE;AAC7D,gBAAI+kB,QAAQ,GAAG,KAAKxjB,SAAL,CAAeK,GAAG,CAAClE,QAAnB,CAAf;AACAqnB,YAAAA,QAAQ,CAACplB,QAAT,CAAkBqjB,MAAlB,CAAyBI,MAAM,CAACgB,QAAhC,EAA0C,CAA1C,EAA6ChB,MAAM,CAAC3lB,EAApD;AACAsnB,YAAAA,QAAQ,CAACvf,OAAT,CAAiB7F,QAAjB,CAA0BqjB,MAA1B,CAAiCI,MAAM,CAACgB,QAAxC,EAAkD,CAAlD,EAAqDhB,MAAM,CAAC5d,OAA5D;AACAuf,YAAAA,QAAQ,CAACvf,OAAT,CAAiBwf,OAAjB,CAAyB,IAAI9wB,IAAJ,EAAzB;AACA6wB,YAAAA,QAAQ,CAACvf,OAAT,CAAiByf,OAAjB,CAAyBF,QAAQ,CAACvf,OAAT,CAAiB0f,WAA1C;AACA,iBAAKC,mBAAL,CAAyBJ,QAAzB;AACH;AACJ;;AACDjjB,QAAAA,IAAI,GAAG;AACHrF,UAAAA,OAAO,EAAE2mB,MADN;AACc/e,UAAAA,KAAK,EAAE,KAAKpB,cAD1B;AAC0CqgB,UAAAA,KAAK,EAAE,SADjD;AAC4DtjB,UAAAA,IAAI,EAAE,UADlE;AAC8EujB,UAAAA,MAAM,EAAE;AADtF,SAAP;;AAGA,YAAI,KAAKC,YAAT,EAAuB;AACnB1hB,UAAAA,IAAI,CAACpE,QAAL,GAAgB,KAAK8lB,YAAL,CAAkB/lB,EAAlC;AACH;;AACD,YAAIzL,QAAQ,EAAZ,EAAgB;AACZ8P,UAAAA,IAAI,GAAG1O,kCAAkC,CAAC0O,IAAD,EAAOF,GAAP,EAAY,SAAZ,EAAuB,UAAvB,CAAzC;AACH;;AACD,YAAIA,GAAG,CAACnE,EAAJ,KAAW,QAAX,IAAuB,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAAC0uB,iCAAtC,CAA3B,EAAqG;AACjG,eAAKnf,YAAL,CAAkBxP,YAAY,CAAC4uB,gBAA/B,EAAiD5hB,IAAjD;AACH;;AACD,YAAI,EAAE,KAAKmB,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,KAAmD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC8W,KAAtC,CAAnD,IACA,EAAE,KAAK5I,cAAL,GAAsBlO,aAAa,CAACqrB,cAAtC,CADJ,EAC2D;AACvD,cAAIjY,KAAK,GAAG;AACRnI,YAAAA,IAAI,EAAE,mBADE;AACmByc,YAAAA,UAAU,EAAE,QAD/B;AACyCrU,YAAAA,UAAU,EAAEjO,WAAW,CAACyH,GAAD,CADhE;AAERyG,YAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,YAAAA,QAAQ,EAAE;AAFhC,WAAZ;AAIA,eAAKE,eAAL,CAAqBL,KAArB;AACH;;AACD,aAAKqb,YAAL,GAAoB3lB,SAApB;;AACA,YAAI,KAAK2G,IAAL,KAAc,KAAlB,EAAyB;AACrB,eAAK4gB,cAAL,CAAoBhC,MAApB;AACA,eAAKiC,sBAAL,CAA4BjC,MAA5B;AACA,eAAK+B,mBAAL,CAAyB/B,MAAzB;;AACA,cAAIA,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,IAAyBpB,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,CAAsBC,UAAtB,CAAiCC,SAA1D,IACAtB,MAAM,CAACrjB,KAAP,CAAaykB,QAAb,CAAsBC,UAAtB,CAAiCC,SAAjC,CAA2Cj2B,MAD/C,EACuD;AACnD,iBAAK62B,eAAL,CAAqBlC,MAArB;AACH;;AACD,eAAKle,cAAL;AACH;AACJ;AACJ;;AACD,SAAKvE,qBAAL,CAA2B0iB,mBAA3B;AACA,SAAK5a,mBAAL,CAAyB1T,aAAa,CAACooB,YAAvC;;AACA,QAAIiG,MAAM,IAAI,KAAK3Q,MAAL,CAAYhkB,MAAZ,GAAqB,CAAnC,EAAsC;AAClC,WAAK82B,QAAL,CAAcnC,MAAd;AACH;;AACD,SAAK,IAAI3f,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKC,KAA3B,EAAkCF,EAAE,GAAGC,EAAE,CAACjV,MAA1C,EAAkDgV,EAAE,EAApD,EAAwD;AACpD,UAAII,IAAI,GAAGH,EAAE,CAACD,EAAD,CAAb;AACA,UAAIG,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAX;;AACA,UAAI,EAAED,IAAI,YAAYtH,OAAlB,CAAJ,EAAgC;AAC5B,aAAK0M,yBAAL,CAA+BpF,IAA/B;AACH;AACJ;;AACD,SAAKmE,oBAAL;AACA,WAAOqb,MAAP;AACH,GAhLD;AAiLA;;;AACA9mB,EAAAA,OAAO,CAACtO,SAAR,CAAkBo3B,cAAlB,GAAmC,UAAUjmB,IAAV,EAAgB;AAC/C,QAAIA,IAAI,CAACQ,QAAT,EAAmB;AACf,WAAK,IAAI2C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpD,IAAI,CAACQ,QAA3B,EAAqC2C,EAAE,GAAGC,EAAE,CAAC9T,MAA7C,EAAqD6T,EAAE,EAAvD,EAA2D;AACvD,YAAI+E,CAAC,GAAG9E,EAAE,CAACD,EAAD,CAAV;;AACA,YAAI,KAAKf,SAAL,CAAe8F,CAAf,KAAqB,KAAK9F,SAAL,CAAe8F,CAAf,EAAkB3J,QAA3C,EAAqD;AACjD,cAAIwB,KAAK,GAAGzH,iBAAiB,CAAC4P,CAAC,GAAG,eAAL,EAAsB,KAAK5K,OAAL,CAAagB,EAAnC,CAA7B;;AACA,cAAIyB,KAAJ,EAAW;AACPA,YAAAA,KAAK,CAACmT,UAAN,CAAiBC,WAAjB,CAA6BpT,KAA7B;AACH;AACJ;AACJ;AACJ;AACJ,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5C,EAAAA,OAAO,CAACtO,SAAR,CAAkBs3B,eAAlB,GAAoC,UAAUnmB,IAAV,EAAgB;AAChD,QAAI,KAAKmW,UAAL,IAAmBnW,IAAnB,IAA2BA,IAAI,CAACY,KAAhC,IAAyCZ,IAAI,CAACY,KAAL,CAAWykB,QAApD,IACArlB,IAAI,CAACY,KAAL,CAAWykB,QAAX,CAAoBC,UAApB,CAA+BC,SAD/B,IAEAvlB,IAAI,CAACY,KAAL,CAAWykB,QAAX,CAAoBC,UAApB,CAA+BC,SAA/B,CAAyCj2B,MAF7C,EAEqD;AACjD,UAAIi2B,SAAS,GAAGvlB,IAAI,CAACY,KAAL,CAAWykB,QAAX,CAAoBC,UAApB,CAA+BC,SAA/C;AACA,WAAKc,WAAL,CAAiBrmB,IAAI,CAAC1B,EAAtB;;AACA,WAAK,IAAI6E,EAAE,GAAG,CAAT,EAAYmjB,WAAW,GAAGf,SAA/B,EAA0CpiB,EAAE,GAAGmjB,WAAW,CAACh3B,MAA3D,EAAmE6T,EAAE,EAArE,EAAyE;AACrE,YAAI+E,CAAC,GAAGoe,WAAW,CAACnjB,EAAD,CAAnB;AACA,aAAKkjB,WAAL,CAAiBne,CAAjB;AACA,YAAI0b,KAAK,GAAG,EAAZ;AACAA,QAAAA,KAAK,GAAGA,KAAK,CAACrI,MAAN,CAAa,KAAKnZ,SAAL,CAAe8F,CAAf,EAAkB3F,QAA/B,EAAyC,KAAKH,SAAL,CAAe8F,CAAf,EAAkB1F,OAA3D,CAAR;;AACA,aAAK,IAAI7S,CAAC,GAAGi0B,KAAK,CAACt0B,MAAN,GAAe,CAA5B,EAA+BK,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,eAAK02B,WAAL,CAAiBzC,KAAK,CAACj0B,CAAD,CAAtB;AACH;AACJ;;AACD,WAAK,IAAIyT,EAAE,GAAG,CAAT,EAAYmjB,WAAW,GAAGhB,SAA/B,EAA0CniB,EAAE,GAAGmjB,WAAW,CAACj3B,MAA3D,EAAmE8T,EAAE,EAArE,EAAyE;AACrE,YAAI8E,CAAC,GAAGqe,WAAW,CAACnjB,EAAD,CAAnB;;AACA,YAAI,KAAKhB,SAAL,CAAe8F,CAAf,EAAkBtH,KAAlB,CAAwBykB,QAAxB,CAAiCC,UAAjC,CAA4CC,SAA5C,IACA,KAAKnjB,SAAL,CAAe8F,CAAf,EAAkBtH,KAAlB,CAAwBykB,QAAxB,CAAiCC,UAAjC,CAA4CC,SAA5C,CAAsDj2B,MAD1D,EACkE;AAC9D,eAAK62B,eAAL,CAAqB,KAAK/jB,SAAL,CAAe8F,CAAf,CAArB;AACH;AACJ;AACJ,KArBD,MAsBK;AACD,WAAKme,WAAL,CAAiBrmB,IAAI,CAAC1B,EAAtB;AACH;AACJ,GA1BD;AA2BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkBw3B,WAAlB,GAAgC,UAAUG,MAAV,EAAkB;AAC9C,QAAIzmB,KAAK,GAAGzH,iBAAiB,CAACkuB,MAAM,GAAG,eAAV,EAA2B,KAAKlpB,OAAL,CAAagB,EAAxC,CAA7B;AACA,QAAImoB,MAAM,GAAG1mB,KAAK,CAAC2mB,aAAnB;AACA3mB,IAAAA,KAAK,CAACmT,UAAN,CAAiBC,WAAjB,CAA6BpT,KAA7B;AACA0mB,IAAAA,MAAM,CAACE,WAAP,CAAmB5mB,KAAnB;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI5C,EAAAA,OAAO,CAACtO,SAAR,CAAkB+3B,iBAAlB,GAAsC,UAAU5V,UAAV,EAAsBhR,IAAtB,EAA4B;AAC9D,QAAI,KAAKmW,UAAT,EAAqB;AACjB,UAAI/U,SAAS,GAAG,KAAK+U,UAAL,CAAgB0Q,aAAhB,CAA8B7mB,IAA9B,EAAoCgR,UAApC,EAAgD,IAAhD,CAAhB;AACA,WAAKoU,cAAL,CAAoBhkB,SAApB,EAA+B,KAAKkM,cAAL,CAAoBwZ,cAApB,CAAmC9mB,IAAI,CAAC1B,EAAxC,CAA/B,EAA4E,KAA5E;AACA,WAAK0nB,mBAAL,CAAyBhmB,IAAzB;;AACA,UAAI,EAAE,KAAK8D,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,KAAmD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC8W,KAAtC,CAAvD,EAAqG;AACjG,YAAI1D,KAAK,GAAG;AACRnI,UAAAA,IAAI,EAAE,mBADE;AACmByc,UAAAA,UAAU,EAAE,QAD/B;AACyCrU,UAAAA,UAAU,EAAEjO,WAAW,CAACgW,UAAD,CADhE;AAER9H,UAAAA,UAAU,EAAElO,WAAW,CAACgW,UAAD,CAFf;AAE6B7H,UAAAA,QAAQ,EAAE;AAFvC,SAAZ;AAIA,aAAKE,eAAL,CAAqBL,KAArB;AACH;AACJ;AACJ,GAbD,CAz1F2C,CAu2F3C;;;AACA7L,EAAAA,OAAO,CAACtO,SAAR,CAAkBk4B,oBAAlB,GAAyC,UAAU3lB,SAAV,EAAqB4lB,QAArB,EAA+B;AACpE;AACA,QAAIpD,KAAK,GAAG,EAAZ,CAFoE,CAGpE;;AACA,QAAI5jB,IAAI,GAAGgnB,QAAQ,GAAG,KAAK5kB,SAAL,CAAehB,SAAS,CAAC2iB,QAAzB,CAAH,GAAwC,KAAK3hB,SAAL,CAAehB,SAAS,CAAC4iB,QAAzB,CAA3D;;AACA,QAAIhkB,IAAJ,EAAU;AACN4jB,MAAAA,KAAK,GAAGoD,QAAQ,GAAGhnB,IAAI,CAACuC,QAAR,GAAmBvC,IAAI,CAACwC,OAAxC;;AACA,WAAK,IAAI7S,CAAC,GAAGi0B,KAAK,CAACt0B,MAAN,GAAe,CAA5B,EAA+BK,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,YAAIi0B,KAAK,CAACj0B,CAAD,CAAL,KAAayR,SAAS,CAAC9C,EAA3B,EAA+B;AAC3BslB,UAAAA,KAAK,CAACC,MAAN,CAAal0B,CAAb,EAAgB,CAAhB;AACH;AACJ;;AACD,WAAK,IAAIuY,CAAC,GAAG,CAAb,EAAgBlI,IAAI,CAACiI,KAAL,IAAcC,CAAC,GAAGlI,IAAI,CAACiI,KAAL,CAAW3Y,MAA7C,EAAqD4Y,CAAC,EAAtD,EAA0D;AACtD,YAAI+e,QAAQ,GAAGD,QAAQ,GAAG,KAAH,GAAW,IAAlC;AACA,aAAKE,eAAL,CAAqBlnB,IAArB,EAA2BA,IAAI,CAACiI,KAAL,CAAWC,CAAX,EAAc5J,EAAzC,EAA6C8C,SAAS,CAAC9C,EAAvD,EAA2D2oB,QAA3D;AACH;AACJ;AACJ,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI9pB,EAAAA,OAAO,CAACtO,SAAR,CAAkBs4B,wBAAlB,GAA6C,UAAUnnB,IAAV,EAAgB;AACzD,QAAIoB,SAAJ;AACA,QAAIwiB,KAAK,GAAG,EAAZ;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACrI,MAAN,CAAavb,IAAI,CAACuC,QAAlB,EAA4BvC,IAAI,CAACwC,OAAjC,CAAR;;AACA,SAAK,IAAI7S,CAAC,GAAGi0B,KAAK,CAACt0B,MAAN,GAAe,CAA5B,EAA+BK,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxCyR,MAAAA,SAAS,GAAG,KAAKgB,SAAL,CAAewhB,KAAK,CAACj0B,CAAD,CAApB,CAAZ;;AACA,UAAIyR,SAAJ,EAAe;AACX,aAAKrD,cAAL,CAAoBqD,SAAS,CAAC9C,EAA9B,IAAoCtD,WAAW,CAACoG,SAAD,CAA/C;AACA,aAAKzO,MAAL,CAAYyO,SAAZ;AACH;AACJ;AACJ,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIjE,EAAAA,OAAO,CAACtO,SAAR,CAAkBu4B,sBAAlB,GAA2C,UAAU3kB,GAAV,EAAe;AACtD,QAAIA,GAAG,CAACjC,QAAR,EAAkB;AACd,WAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,YAAI+pB,MAAM,GAAG,KAAKtX,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAb;;AACA,YAAI+pB,MAAJ,EAAY;AACR,eAAK0N,sBAAL,CAA4B1N,MAA5B;AACH;AACJ;AACJ;;AACD,QAAIxC,KAAK,GAAG,KAAK5D,MAAL,CAAY2G,OAAZ,CAAoB,KAAK3M,cAAL,CAAoBwZ,cAApB,CAAmCrkB,GAAG,CAACnE,EAAvC,CAApB,CAAZ;AACA,QAAI2W,OAAO,GAAG,KAAK3B,MAAL,CAAY4D,KAAZ,EAAmBjC,OAAjC;AACA,QAAIoS,QAAQ,GAAGpS,OAAO,CAACgF,OAAR,CAAgBxX,GAAG,CAACnE,EAApB,CAAf;;AACA,QAAI+oB,QAAQ,GAAG,CAAC,CAAhB,EAAmB;AACf,UAAIvvB,UAAU,CAAC,IAAD,EAAO2K,GAAP,CAAd,EAA2B;AACvB,aAAK8S,QAAL,CAAc9S,GAAd;AACH;;AACD,WAAK6Q,MAAL,CAAY4D,KAAZ,EAAmBjC,OAAnB,CAA2B4O,MAA3B,CAAkCwD,QAAlC,EAA4C,CAA5C;AACA,aAAO,KAAK/T,MAAL,CAAY4D,KAAZ,EAAmB1D,WAAnB,CAA+B,KAAKpR,SAAL,CAAeK,GAAG,CAACnE,EAAnB,EAAuB4Z,MAAtD,CAAP;AACH;AACJ,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/a,EAAAA,OAAO,CAACtO,SAAR,CAAkB41B,cAAlB,GAAmC,UAAU6C,UAAV,EAAsB;AACrD,QAAI,KAAKjiB,IAAL,KAAc,KAAd,IAAwB,KAAKA,IAAL,KAAc,QAAd,IAA0BiiB,UAAU,CAAC1mB,KAAX,CAAiBC,IAAjB,KAA0B,QAAhF,EAA2F;AACvF,UAAI0mB,eAAe,GAAGjvB,iBAAiB,CAACgvB,UAAU,CAAChpB,EAAX,GAAgB,eAAjB,EAAkC,KAAKhB,OAAL,CAAagB,EAA/C,CAAvC;AACA,UAAIob,MAAM,GAAG4N,UAAb;;AACA,UAAK5N,MAAD,CAASzR,KAAT,IAAmByR,MAAD,CAASzR,KAAT,CAAe3Y,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAI+pB,MAAD,CAASzR,KAAT,CAAe3Y,MAAnC,EAA2CK,CAAC,EAA5C,EAAgD;AAC5C,cAAI63B,IAAI,GAAI9N,MAAD,CAASzR,KAAT,CAAetY,CAAf,CAAX;AACA,cAAI83B,UAAU,GAAGnvB,iBAAiB,CAACohB,MAAM,CAACpb,EAAP,GAAY,GAAZ,GAAkBkpB,IAAI,CAAClpB,EAAvB,GAA4B,eAA7B,EAA8C,KAAKhB,OAAL,CAAagB,EAA3D,CAAlC;;AACA,cAAImpB,UAAJ,EAAgB;AACZA,YAAAA,UAAU,CAACvU,UAAX,CAAsBC,WAAtB,CAAkCsU,UAAlC;AACH;AACJ;AACJ;;AACD,UAAIF,eAAJ,EAAqB;AACjBA,QAAAA,eAAe,CAACrU,UAAhB,CAA2BC,WAA3B,CAAuCoU,eAAvC;AACH;AACJ;;AACD,SAAK/N,mBAAL;;AACA,QAAI8N,UAAU,CAACjhB,OAAf,EAAwB;AACpB,UAAI7F,QAAQ,GAAG8mB,UAAU,CAACjhB,OAAX,CAAmB7F,QAAlC;AACA,UAAIlD,OAAO,GAAG,KAAK,CAAnB;AACA,UAAImH,IAAI,GAAG,KAAK,CAAhB;;AACA,UAAIjE,QAAJ,EAAc;AACV,aAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6Q,QAAQ,CAAClR,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACtC,cAAI6Q,QAAQ,CAAC7Q,CAAD,CAAR,YAAuB8L,oBAAvB,IAAiD+E,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAb,IAAqBkC,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAb,CAAiB2b,OAAjB,CAAyB,cAAzB,IAA2C,CAAnH,EAAuH;AACnH,gBAAKzZ,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAb,CAAiB2b,OAAjB,CAAyB,cAAzB,IAA2C,CAA3C,IAAgD,KAAK5U,IAAL,KAAc,KAAlE,EAAyE;AACrE/H,cAAAA,OAAO,GAAGhF,iBAAiB,CAACkI,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAZ,GAAiB,qBAAlB,EAAyC,KAAKhB,OAAL,CAAagB,EAAtD,CAA3B;;AACA,kBAAIhB,OAAJ,EAAa;AACTA,gBAAAA,OAAO,CAAC4V,UAAR,CAAmBC,WAAnB,CAA+B7V,OAA/B;AACH;;AACDA,cAAAA,OAAO,GAAGhF,iBAAiB,CAACkI,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAZ,GAAiB,oBAAlB,EAAwC,KAAKhB,OAAL,CAAagB,EAArD,CAA3B;;AACA,kBAAIhB,OAAJ,EAAa;AACTA,gBAAAA,OAAO,CAAC4V,UAAR,CAAmBC,WAAnB,CAA+B7V,OAA/B;AACH;AACJ;;AACD,iBAAK,IAAI6F,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,kBAAIuP,SAAS,GAAGtP,EAAE,CAACD,EAAD,CAAlB;AACAhL,cAAAA,aAAa,CAACqI,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAZ,GAAiB,eAAlB,EAAmCoU,SAAnC,CAAb;AACA,kBAAI0Q,SAAS,GAAG,KAAK/Y,QAAL,CAAcqd,gBAAd,CAA+BzN,OAA/B,CAAuCqN,UAAU,CAAChpB,EAAlD,CAAhB;AACA,mBAAK+L,QAAL,CAAcqd,gBAAd,CAA+B7D,MAA/B,CAAsCT,SAAtC,EAAiD,CAAjD;AACH;AACJ,WAjBD,MAkBK,IAAI5iB,QAAQ,CAAC7Q,CAAD,CAAR,YAAuB+L,kBAA3B,EAA+C;AAChD,iBAAK,IAAI4I,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKC,KAA3B,EAAkCF,EAAE,GAAGC,EAAE,CAACjV,MAA1C,EAAkDgV,EAAE,EAApD,EAAwD;AACpD,kBAAIoO,SAAS,GAAGnO,EAAE,CAACD,EAAD,CAAlB;AACAnM,cAAAA,aAAa,CAACmvB,UAAU,CAAChpB,EAAX,GAAgB,eAAjB,EAAkCoU,SAAlC,CAAb;AACAva,cAAAA,aAAa,CAACqI,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAZ,GAAiB,eAAlB,EAAmCoU,SAAnC,CAAb;AACA,mBAAKK,aAAL,CAAmB,CAAC,iBAAiB,GAAjB,GAAuBuU,UAAU,CAAChpB,EAAnC,CAAnB;;AACA,kBAAIkC,QAAQ,CAAC7Q,CAAD,CAAR,CAAYg4B,YAAhB,EAA8B;AAC1B,qBAAK5U,aAAL,CAAmB,CAAC,uBAAuB,GAAvB,GAA6BuU,UAAU,CAAChpB,EAAxC,GAA8CkC,QAAQ,CAAC7Q,CAAD,CAAR,CAAYg4B,YAA3D,CAAnB;AACH;AACJ;AACJ;;AACD5wB,UAAAA,cAAc,CAACyJ,QAAQ,CAAC7Q,CAAD,CAAR,CAAY2O,EAAb,CAAd;AACH;AACJ;AACJ;AACJ,GAzDD;;AA0DAnB,EAAAA,OAAO,CAACtO,SAAR,CAAkB+4B,aAAlB,GAAkC,YAAY;AAC1C,SAAKj1B,MAAL;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;AACI;;;AACAwK,EAAAA,OAAO,CAACtO,SAAR,CAAkB8D,MAAlB,GAA2B,UAAU8P,GAAV,EAAe;AACtC,QAAI0D,aAAa,GAAG,EAApB;AACAA,IAAAA,aAAa,GAAGA,aAAa,CAACoV,MAAd,CAAqB,KAAKpV,aAAL,CAAmB5F,KAAxC,EAA+C,KAAK4F,aAAL,CAAmBlF,UAAlE,CAAhB;AACA,QAAI0B,IAAJ;AACA,QAAIklB,WAAW,GAAG,KAAlB;;AACA,QAAIplB,GAAJ,EAAS;AACLA,MAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,CAAN;AACA,WAAKwlB,qBAAL,CAA2BrhB,GAA3B;;AACA,UAAIA,GAAG,KAAKjJ,SAAS,CAACiJ,GAAD,CAAT,IAAmB,KAAKqB,cAAL,GAAsBlO,aAAa,CAACstB,KAA5D,CAAP,EAA4E;AACxEvgB,QAAAA,IAAI,GAAG;AACHrF,UAAAA,OAAO,EAAEmF,GADN;AACWyC,UAAAA,KAAK,EAAE,KAAKpB,cADvB;AAEHqgB,UAAAA,KAAK,EAAE,UAFJ;AAEgBtjB,UAAAA,IAAI,EAAE,SAFtB;AAEiCujB,UAAAA,MAAM,EAAE;AAFzC,SAAP;;AAIA,YAAIvxB,QAAQ,EAAZ,EAAgB;AACZ8P,UAAAA,IAAI,GAAG1O,kCAAkC,CAAC0O,IAAD,EAAOF,GAAP,EAAY,UAAZ,EAAwB,SAAxB,CAAzC;AACH;;AACD,YAAI,EAAE,KAAKqB,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,KAAiDzgB,GAAG,CAACnE,EAAJ,KAAW,QAAhE,EAA2E;AACvE,eAAK6G,YAAL,CAAkBxP,YAAY,CAAC4uB,gBAA/B,EAAiD5hB,IAAjD;AACH;;AACD,YAAI,CAACA,IAAI,CAACyhB,MAAV,EAAkB;AACd,cAAI5qB,SAAS,CAACiJ,GAAD,CAAb,EAAoB;AAChB,gBAAIA,GAAG,IAAIA,GAAG,CAAC7B,KAAX,IAAoB6B,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,UAA3C,EAAuD;AACnDpE,cAAAA,cAAc,CAAC,IAAD,EAAOgG,GAAP,CAAd;AACH;AACJ;;AACD,cAAI,KAAK0T,UAAT,EAAqB;AACjB,gBAAI,KAAKA,UAAL,CAAgB2R,yBAAhB,CAA0CrlB,GAA1C,EAA+C,IAA/C,CAAJ,EAA0D;AACtD,mBAAK+W,mBAAL;AACA;AACH;AACJ;;AACD,cAAK,EAAE,KAAK1V,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAD,IAAqD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAACqrB,cAAtC,CAArD,KACCxe,GAAG,YAAY/O,IAAf,IAAuB+O,GAAG,YAAYlO,SADvC,CAAJ,EACuD;AACnD,gBAAIyU,KAAK,GAAG;AACRnI,cAAAA,IAAI,EAAE,mBADE;AACmByc,cAAAA,UAAU,EAAE,QAD/B;AACyCrU,cAAAA,UAAU,EAAEjO,WAAW,CAACyH,GAAD,CADhE;AAERyG,cAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,cAAAA,QAAQ,EAAE;AAFhC,aAAZ;;AAIA,gBAAI,EAAE,KAAKrF,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,CAAJ,EAAkD;AAC9C,kBAAIzgB,GAAG,CAACjC,QAAJ,IAAgB,CAACiC,GAAG,CAACqX,MAArB,IAA+B,CAACrX,GAAG,CAACslB,OAApC,IAA+CtlB,GAAG,CAACjC,QAAJ,CAAalR,MAAb,GAAsB,CAArE,IAA0E,KAAKutB,cAA/E,IAAiG,KAAKjW,MAAL,CAAY/F,IAAZ,KAAqB,MAA1H,EAAkI;AAC9H,qBAAKuI,cAAL,CAAoBqU,gBAApB;AACAoK,gBAAAA,WAAW,GAAG,IAAd;AACH;AACJ;;AACD,gBAAIplB,GAAG,YAAY/O,IAAnB,EAAyB;AACrB,mBAAKyzB,wBAAL,CAA8B1kB,GAA9B;AACH;;AACD,gBAAI,CAACA,GAAG,CAACqX,MAAL,IAAe,CAACrX,GAAG,CAACslB,OAAxB,EAAiC;AAC7B,kBAAI,EAAE,KAAKjkB,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,KAAgD,CAAC,KAAK8E,YAAL,CAAkBvlB,GAAlB,CAArD,EAA6E;AACzE,qBAAK4G,eAAL,CAAqBL,KAArB;AACH;AACJ;AACJ;;AACD,cAAIvG,GAAG,CAACjC,QAAJ,IAAgB,CAACiC,GAAG,CAACqX,MAArB,IAA+B,CAACrX,GAAG,CAACslB,OAApC,KACC,CAACl1B,QAAQ,EAAT,IAAe,EAAE,KAAKiR,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CADhB,CAAJ,EACsE;AAClE,iBAAK4V,WAAL,CAAiBxlB,GAAjB;AACH;;AACD,cAAIA,GAAG,CAAClE,QAAR,EAAkB;AACd,iBAAK2pB,WAAL,CAAiBzlB,GAAjB;;AACA,gBAAI,KAAKL,SAAL,CAAeK,GAAG,CAAClE,QAAnB,KAAgC,KAAK6D,SAAL,CAAeK,GAAG,CAAClE,QAAnB,EAA6BqC,KAA7B,CAAmCC,IAAnC,KAA4C,eAAhF,EAAiG;AAC7F,mBAAKmlB,mBAAL,CAAyB,KAAK5jB,SAAL,CAAeK,GAAG,CAAClE,QAAnB,CAAzB;AACA,mBAAKuH,oBAAL,CAA0B,KAAK1D,SAAL,CAAeK,GAAG,CAAClE,QAAnB,CAA1B;AACH;AACJ;;AACD,cAAIuG,KAAK,GAAG,KAAK,CAAjB;AACA,eAAKhB,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACooB,YAA1D;AACA,cAAIsJ,UAAU,GAAG,KAAKllB,SAAL,CAAeK,GAAG,CAACnE,EAAnB,CAAjB;;AACA,cAAIgpB,UAAU,YAAY5zB,IAA1B,EAAgC;AAC5B,gBAAI4zB,UAAU,CAAC1mB,KAAX,CAAiBC,IAAjB,KAA0B,MAA1B,IAAoC,KAAKsV,UAA7C,EAAyD;AACrD,mBAAKA,UAAL,CAAgBgS,mBAAhB,CAAoCb,UAApC,EAAgD,IAAhD;AACH;;AACD,gBAAIA,UAAU,CAACxN,MAAX,IAAqBwN,UAAU,CAACS,OAAhC,IAA2CT,UAAU,CAAC1mB,KAAX,CAAiBC,IAAjB,KAA0B,UAAzE,EAAqF;AACjF,kBAAIunB,YAAY,GAAId,UAAU,CAACxN,MAAX,IAAqBwN,UAAU,CAACS,OAAjC,GACf,KAAK3lB,SAAL,CAAeklB,UAAU,CAAC/oB,QAA1B,CADe,GACuB,KAAK6D,SAAL,CAAeklB,UAAU,CAAChpB,EAA1B,CAD1C;AAEA,kBAAI+pB,IAAI,GAAGD,YAAY,CAAC/hB,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAX;;AACA,kBAAI8mB,UAAU,CAACxN,MAAf,EAAuB;AACnBpd,gBAAAA,UAAU,CAAC,IAAD,EAAO4qB,UAAP,EAAmBc,YAAnB,CAAV;AACH,eAFD,MAGK,IAAId,UAAU,CAACS,OAAf,EAAwB;AACzBprB,gBAAAA,WAAW,CAAC,IAAD,EAAO2qB,UAAP,EAAmBc,YAAnB,CAAX;AACH;AACJ;;AACDtjB,YAAAA,KAAK,GAAG,KAAKvE,KAAL,CAAW0Z,OAAX,CAAmBqN,UAAnB,CAAR;;AACA,gBAAIz0B,QAAQ,MAAO4P,GAAG,CAACnE,EAAJ,KAAW,QAA9B,EAAyC;AACrC,kBAAI,KAAKH,aAAL,GAAqB5I,YAAY,CAACuvB,kBAAtC,EAA0D;AACtD,qBAAKrlB,2BAAL,CAAiCokB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8C/e,KAA9C;AACA,qBAAKtF,2BAAL,CAAiCqkB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8CphB,GAA9C;AACH,eAHD,MAIK,IAAI,KAAKjD,2BAAL,CAAiClQ,MAAjC,GAA0C,CAA9C,EAAiD;AAClD,qBAAKge,cAAL,CAAoB2B,kBAApB;AACA,qBAAKxP,2BAAL,CAAiCokB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8C/e,KAA9C;AACA,qBAAKtF,2BAAL,CAAiCqkB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8CphB,GAA9C;AACA,qBAAKqf,kCAAL,CAAwCpjB,SAAxC,EAAmDA,SAAnD,EAA8DA,SAA9D,EAAyE,IAAzE;AACH,eALI,MAMA,IAAK,CAAC,KAAKhB,cAAP,IAA0B,EAAE,KAAKS,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAA9B,EAA4F;AAC7F,qBAAKuI,wBAAL,CAA8BtgB,GAA9B,EAAmC,MAAnC,EAA2CqC,KAA3C;AACH;AACJ;;AACD,gBAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,mBAAKvF,eAAL,CAAqBpN,IAArB,CAA0B,KAAKiQ,SAAL,CAAeklB,UAAU,CAAChpB,EAA1B,CAA1B;AACA,mBAAKiC,KAAL,CAAWsjB,MAAX,CAAkB/e,KAAlB,EAAyB,CAAzB;AACA,mBAAKwjB,eAAL,CAAqBhB,UAArB;AACH;AACJ,WApCD,MAqCK;AACDxiB,YAAAA,KAAK,GAAG,KAAK7D,UAAL,CAAgBgZ,OAAhB,CAAwBqN,UAAxB,CAAR;;AACA,gBAAIz0B,QAAQ,EAAZ,EAAgB;AACZ,kBAAI,KAAKsL,aAAL,GAAqB5I,YAAY,CAACuvB,kBAAtC,EAA0D;AACtD,qBAAKtlB,2BAAL,CAAiCqkB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8CphB,GAA9C;AACA,qBAAKhD,2BAAL,CAAiCokB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8C/e,KAA9C;AACH,eAHD,MAIK,IAAI,KAAKtF,2BAAL,CAAiClQ,MAAjC,GAA0C,CAA9C,EAAiD;AAClD,qBAAKge,cAAL,CAAoB2B,kBAApB;AACA,qBAAKzP,2BAAL,CAAiCqkB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8CphB,GAA9C;AACA,qBAAKhD,2BAAL,CAAiCokB,MAAjC,CAAwC,CAAxC,EAA2C,CAA3C,EAA8C/e,KAA9C;AACA,qBAAKgd,kCAAL,CAAwCpjB,SAAxC,EAAmDA,SAAnD,EAA8DA,SAA9D,EAAyE,IAAzE;AACH,eALI,MAMA,IAAK,CAAC,KAAKhB,cAAP,IAA0B,EAAE,KAAKS,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAA9B,EAA4F;AAC7F,qBAAKuI,wBAAL,CAA8BtgB,GAA9B,EAAmC,WAAnC,EAAgDqC,KAAhD;AACH;AACJ;;AACD,gBAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,mBAAKvF,eAAL,CAAqBpN,IAArB,CAA0B,KAAKiQ,SAAL,CAAeklB,UAAU,CAAChpB,EAA1B,CAA1B;AACA,mBAAK2C,UAAL,CAAgB4iB,MAAhB,CAAuB/e,KAAvB,EAA8B,CAA9B;AACH;;AACD,iBAAKkgB,WAAL,CAAiBsC,UAAjB;AACA,iBAAKP,oBAAL,CAA0BtkB,GAA1B,EAA+B,IAA/B;AACA,iBAAKskB,oBAAL,CAA0BtkB,GAA1B,EAA+B,KAA/B;AACH;;AACD,cAAK,CAAC,KAAK/E,cAAP,IAA0B,EAAE,KAAKS,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAA9B,EAA4F;AACxF,iBAAKlN,cAAL,CAAoB2B,kBAApB;AACH;;AACD,cAAI4Y,WAAJ,EAAiB;AACb,iBAAKze,cAAL,CAAoBsU,cAApB;AACH;;AACD,cAAI5lB,UAAU,CAAC,IAAD,EAAOwvB,UAAP,CAAd,EAAkC;AAC9B,iBAAK/R,QAAL,CAAc+R,UAAd;AACH;;AACD,cAAI,CAACA,UAAU,CAACS,OAAhB,EAAyB;AACrB,iBAAKX,sBAAL,CAA4B3kB,GAA5B;;AACA,gBAAI,KAAK8lB,oBAAT,EAA+B;AAC3B,mBAAKA,oBAAL,CAA0BliB,OAA1B,GAAoC3H,SAApC;AACH;;AACD,mBAAO,KAAK0D,SAAL,CAAeK,GAAG,CAACnE,EAAnB,CAAP;;AACA,gBAAI6H,aAAa,CAAC7W,MAAd,GAAuB,CAAvB,IAA4B6W,aAAa,CAAC,CAAD,CAAb,CAAiB7H,EAAjB,KAAwBgpB,UAAU,CAAChpB,EAA/D,IAAqEgpB,UAAU,CAAC/oB,QAApF,EAA8F;AAC1F,kBAAIiqB,UAAU,GAAG,KAAKpmB,SAAL,CAAeklB,UAAU,CAAC/oB,QAA1B,CAAjB;;AACA,kBAAIiqB,UAAU,IAAIA,UAAU,CAAC1O,MAAzB,IAAmC,KAAK1X,SAAL,CAAeomB,UAAU,CAACjqB,QAA1B,EAAoCqC,KAApC,CAA0CC,IAA1C,KAAmD,UAA1F,EAAsG;AAClG,oBAAIunB,YAAY,GAAG,KAAKhmB,SAAL,CAAeomB,UAAU,CAACjqB,QAA1B,CAAnB;AACA3B,gBAAAA,mBAAmB,CAAC,IAAD,EAAOwrB,YAAP,EAAqBI,UAArB,EAAiClB,UAAjC,CAAnB;AACH;AACJ;;AACD,iBAAK7C,cAAL,CAAoB6C,UAApB;AACA,iBAAKvhB,cAAL;;AACA,gBAAI,KAAKV,IAAL,KAAc,KAAlB,EAAyB;AACrB,mBAAKC,mBAAL;AACH;;AACD,gBAAI,EAAE,KAAKxB,cAAL,GAAsBlO,aAAa,CAACstB,KAAtC,CAAJ,EAAkD;AAC9C,mBAAKuF,eAAL,CAAqBnB,UAArB;AACA3kB,cAAAA,IAAI,GAAG;AACHrF,gBAAAA,OAAO,EAAEmF,GADN;AACWyC,gBAAAA,KAAK,EAAE,KAAKpB,cADvB;AAEHqgB,gBAAAA,KAAK,EAAE,SAFJ;AAEetjB,gBAAAA,IAAI,EAAE,SAFrB;AAEgCujB,gBAAAA,MAAM,EAAE;AAFxC,eAAP;;AAIA,kBAAIvxB,QAAQ,EAAZ,EAAgB;AACZ8P,gBAAAA,IAAI,GAAG1O,kCAAkC,CAAC0O,IAAD,EAAOF,GAAP,EAAY,SAAZ,EAAuB,SAAvB,CAAzC;AACH;;AACD,kBAAIA,GAAG,CAACnE,EAAJ,KAAW,QAAf,EAAyB;AACrB,qBAAK6G,YAAL,CAAkBxP,YAAY,CAAC4uB,gBAA/B,EAAiD5hB,IAAjD;AACH;;AACD,mBAAK+lB,SAAL;AACH;AACJ;AACJ;AACJ;AACJ,KAvKD,MAwKK,IAAIviB,aAAa,CAAC7W,MAAd,GAAuB,CAA3B,EAA8B;AAC/B,UAAI,KAAKutB,cAAT,EAAyB;AACrB,aAAKzT,cAAL,CAAoBqU,gBAApB;AACA,aAAKtf,aAAL,IAAsB5I,YAAY,CAACuvB,kBAAnC;AACA+C,QAAAA,WAAW,GAAG,IAAd;AACH;;AACD,UAAIh1B,QAAQ,MAAMsT,aAAa,CAAC7W,MAAd,GAAuB,CAAzC,EAA4C;AACxC,aAAKomB,cAAL;AACH;;AACD,WAAK,IAAI/lB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwW,aAAa,CAAC7W,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C,YAAIqQ,IAAI,GAAGmG,aAAa,CAACxW,CAAD,CAAxB;;AACA,YAAI,KAAKyS,SAAL,CAAe+D,aAAa,CAACxW,CAAD,CAAb,CAAiB2O,EAAhC,CAAJ,EAAyC;AACrC,cAAK6H,aAAa,CAACxW,CAAD,CAAb,YAA4B4E,SAA7B,IAA2C,KAAK4hB,UAAhD,IACA,KAAKA,UAAL,CAAgBwS,wBAAhB,CAAyC1O,OAAzC,CAAiD9T,aAAa,CAACxW,CAAD,CAA9D,IAAqE,CAAC,CAD1E,EAC6E;AACzE,iBAAKgD,MAAL,CAAY,KAAKyP,SAAL,CAAe+D,aAAa,CAACxW,CAAD,CAAb,CAAiBq0B,QAAhC,CAAZ;AACA;AACH;;AACD,cAAInxB,QAAQ,EAAZ,EAAgB;AACZ,gBAAI,CAAC,KAAK6K,cAAN,IAAwByI,aAAxB,IAAyCA,aAAa,CAAC7W,MAAd,GAAuB,CAApE,EAAuE;AACnE,mBAAKoO,cAAL,GAAsB,IAAtB;AACH;;AACD,gBAAIyI,aAAa,CAACxW,CAAD,CAAb,CAAiB4O,QAArB,EAA+B;AAC3B,mBAAKsY,0BAAL,CAAgC,KAAKzU,SAAL,CAAe+D,aAAa,CAACxW,CAAD,CAAb,CAAiB4O,QAAhC,CAAhC;AACH;AACJ;;AACD,eAAK5L,MAAL,CAAYwT,aAAa,CAACxW,CAAD,CAAzB;;AACA,cAAIkD,QAAQ,MAAMsT,aAAa,CAACxW,CAAD,CAAb,CAAiB4O,QAAnC,EAA6C;AACzC,iBAAK+O,cAAL,CAAoB2B,kBAApB;AACA,iBAAKvR,cAAL,GAAsB,KAAtB;AACH;AACJ;AACJ;;AACD,UAAImqB,WAAJ,EAAiB;AACb,aAAK1pB,aAAL,IAAsB,CAAC5I,YAAY,CAACuvB,kBAApC;AACA,aAAKpnB,cAAL,GAAsB,IAAtB;AACA,aAAK4P,cAAL,CAAoB2B,kBAApB;AACA,aAAK6S,kCAAL,CAAwCpjB,SAAxC,EAAmDA,SAAnD,EAA8DA,SAA9D,EAAyE,IAAzE;AACA,aAAK0K,cAAL,CAAoBsU,cAApB;AACA,aAAKhgB,cAAL,GAAsB,KAAtB;AACH;;AACD,WAAKgY,cAAL;AACH;;AACD,SAAKpF,aAAL,CAAmBqQ,KAAnB;;AACA,QAAI9tB,QAAQ,MAAMsT,aAAd,IAA+BA,aAAa,CAAC7W,MAAd,GAAuB,CAA1D,EAA6D;AACzD,UAAI2tB,KAAK,GAAG,IAAZ;;AACA,WAAK,IAAI2L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGziB,aAAa,CAAC7W,MAAlC,EAA0Cs5B,CAAC,EAA3C,EAA+C;AAC3C,YAAI,KAAKxmB,SAAL,CAAe+D,aAAa,CAACyiB,CAAD,CAAb,CAAiBtqB,EAAhC,CAAJ,EAAyC;AACrC2e,UAAAA,KAAK,GAAG,KAAR;AACH;AACJ;;AACD,UAAIA,KAAJ,EAAW;AACP,aAAKvf,cAAL,GAAsB,KAAtB;AACH;AACJ;AACJ,GAnOD;AAoOA;;;AACAP,EAAAA,OAAO,CAACtO,SAAR,CAAkBm5B,YAAlB,GAAiC,UAAUvlB,GAAV,EAAe;AAC5C,QAAIomB,OAAJ;AACA,QAAIpC,MAAM,GAAG,KAAKrkB,SAAL,CAAeK,GAAG,CAAClE,QAAnB,CAAb;;AACA,QAAIkE,GAAG,IAAIA,GAAG,CAAClE,QAAX,IAAuBkoB,MAAM,CAACqC,SAA9B,IACCrC,MAAM,CAACqC,SAAP,CAAiBjoB,IAAjB,KAA0B,OAA1B,IACG,KAAKuB,SAAL,CAAeK,GAAG,CAAClE,QAAnB,EAA6BqC,KAA7B,CAAmCC,IAAnC,KAA4C,eAFpD,EAEsE;AAClEgoB,MAAAA,OAAO,GAAG,IAAV;AACA,UAAIE,WAAW,GAAG;AACdC,QAAAA,WAAW,EAAEvC,MAAM,CAACpgB,OAAP,CAAe7F,QAAf,CAAwByZ,OAAxB,CAAgCxX,GAAG,CAAC4D,OAApC,CADC;AAC6CwV,QAAAA,MAAM,EAAEpZ,GADrD;AAEdxT,QAAAA,MAAM,EAAEyP,SAFM;AAEKuqB,QAAAA,WAAW,EAAEvqB;AAFlB,OAAlB;AAIA,UAAIsK,KAAK,GAAG;AACRnI,QAAAA,IAAI,EAAE,2BADE;AAC2BqI,QAAAA,UAAU,EAAE;AAC3C8f,UAAAA,WAAW,EAAEtqB,SAD8B;AACnBmd,UAAAA,MAAM,EAAEpZ,GADW;AAE3CxT,UAAAA,MAAM,EAAEyP,SAFmC;AAExBuqB,UAAAA,WAAW,EAAEvqB;AAFW,SADvC;AAKRuK,QAAAA,UAAU,EAAE8f,WALJ;AAMR5f,QAAAA,QAAQ,EAAE;AANF,OAAZ;;AAQA,UAAI,EAAE,KAAKrF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAJ,EAAqD;AACjD,aAAKhJ,eAAL,CAAqBL,KAArB;AACH;AACJ;;AACD,WAAO6f,OAAP;AACH,GAxBD;AAyBA;;;AACA1rB,EAAAA,OAAO,CAACtO,SAAR,CAAkBq5B,WAAlB,GAAgC,UAAUloB,IAAV,EAAgBkT,UAAhB,EAA4B;AACxD,QAAI5U,EAAJ;AACA4U,IAAAA,UAAU,GAAGA,UAAU,GAAG,KAAK9Q,SAAL,CAAe8Q,UAAU,CAAC5U,EAA1B,CAAH,GAAmC,KAAK8D,SAAL,CAAepC,IAAI,CAACzB,QAApB,CAA1D;;AACA,QAAI,OAAOyB,IAAP,KAAgB,QAApB,EAA8B;AAC1B1B,MAAAA,EAAE,GAAG0B,IAAL;AACH,KAFD,MAGK;AACD1B,MAAAA,EAAE,GAAG0B,IAAI,CAAC1B,EAAV;AACH;;AACD,QAAI4U,UAAU,IAAIA,UAAU,CAAC1S,QAA7B,EAAuC;AACnC,WAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGujB,UAAU,CAAC1S,QAAX,CAAoBlR,MAAxC,EAAgDK,CAAC,EAAjD,EAAqD;AACjD,YAAIujB,UAAU,CAAC1S,QAAX,CAAoB7Q,CAApB,MAA2B2O,EAA/B,EAAmC;AAC/B4U,UAAAA,UAAU,CAAC1S,QAAX,CAAoBqjB,MAApB,CAA2Bl0B,CAA3B,EAA8B,CAA9B;;AACA,eAAK,IAAIuY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgL,UAAU,CAAC7M,OAAX,CAAmB7F,QAAnB,CAA4BlR,MAAhD,EAAwD4Y,CAAC,EAAzD,EAA6D;AACzD,gBAAIgL,UAAU,CAAC7M,OAAX,CAAmB7F,QAAnB,CAA4B0H,CAA5B,EAA+B5J,EAA/B,KAAsCA,EAA1C,EAA8C;AAC1C4U,cAAAA,UAAU,CAAC7M,OAAX,CAAmB7F,QAAnB,CAA4BqjB,MAA5B,CAAmC3b,CAAnC,EAAsC,CAAtC;AACH;AACJ;AACJ;AACJ;;AACDgL,MAAAA,UAAU,CAAC7M,OAAX,CAAmBwf,OAAnB,CAA2B,IAAI9wB,IAAJ,EAA3B;AACAme,MAAAA,UAAU,CAAC7M,OAAX,CAAmByf,OAAnB,CAA2B5S,UAAU,CAAC7M,OAAX,CAAmB0f,WAA9C;AACH;AACJ,GAvBD;AAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBqyB,QAAlB,GAA6B,UAAUlhB,IAAV,EAAgBD,KAAhB,EAAuB+E,KAAvB,EAA8B;AACvD,QAAIxG,EAAJ;AACA,QAAI4U,UAAU,GAAG,KAAK9Q,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAjB;;AACA,QAAI,CAAC4U,UAAU,CAAC1S,QAAhB,EAA0B;AACtB0S,MAAAA,UAAU,CAAC1S,QAAX,GAAsB,EAAtB;AACH;;AACD,QAAI0S,UAAU,CAAC1S,QAAf,EAAyB;AACrB,UAAI,OAAOT,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAI,KAAKqC,SAAL,CAAerC,KAAf,CAAJ,EAA2B;AACvBzB,UAAAA,EAAE,GAAGyB,KAAL;AACH;AACJ,OAJD,MAKK;AACDzB,QAAAA,EAAE,GAAGyB,KAAK,CAACzB,EAAN,GAAWyB,KAAK,CAACzB,EAAN,IAAYvD,QAAQ,EAApC;AACA,aAAK6H,GAAL,CAAS7C,KAAT;AACH;;AACD,UAAIzB,EAAE,KAAK,CAACyB,KAAK,CAACklB,QAAP,IAAmBllB,KAAK,CAACklB,QAAN,KAAmB,CAAC,CAA5C,CAAN,EAAsD;AAClD,YAAIiE,SAAS,GAAG,KAAK9mB,SAAL,CAAe9D,EAAf,CAAhB;AACA4qB,QAAAA,SAAS,CAAC3qB,QAAV,GAAqB2U,UAAU,CAAC5U,EAAhC;;AACA,YAAI4U,UAAU,CAAC4V,SAAX,IAAwB5V,UAAU,CAAC4V,SAAX,CAAqBjoB,IAArB,KAA8B,OAA1D,EAAmE;AAC/D,eAAKsoB,mBAAL,CAAyBjW,UAAzB,EAAqCgW,SAArC;AACH;;AACD,YAAIpkB,KAAJ,EAAW;AACPoO,UAAAA,UAAU,CAAC1S,QAAX,CAAoBqjB,MAApB,CAA2B/e,KAA3B,EAAkC,CAAlC,EAAqCxG,EAArC;AACA4U,UAAAA,UAAU,CAAC7M,OAAX,CAAmB7F,QAAnB,CAA4BqjB,MAA5B,CAAmC/e,KAAnC,EAA0C,CAA1C,EAA6CokB,SAAS,CAAC7iB,OAAvD;AACH,SAHD,MAIK;AACD6M,UAAAA,UAAU,CAAC1S,QAAX,CAAoBrO,IAApB,CAAyBmM,EAAzB;AACA4U,UAAAA,UAAU,CAAC7M,OAAX,CAAmB7F,QAAnB,CAA4BrO,IAA5B,CAAiC+2B,SAAS,CAAC7iB,OAA3C;AACH;;AACD6M,QAAAA,UAAU,CAAC7M,OAAX,CAAmBwf,OAAnB,CAA2B,IAAI9wB,IAAJ,EAA3B;AACAme,QAAAA,UAAU,CAAC7M,OAAX,CAAmByf,OAAnB,CAA2B5S,UAAU,CAAC7M,OAAX,CAAmB0f,WAA9C;;AACA,YAAI,CAAC7S,UAAU,CAAC4G,MAAhB,EAAwB;AACpB,eAAK1X,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB2F,KAAxB,GAAgCiP,UAAU,CAAC7M,OAAX,CAAmB+iB,UAAnB,CAA8BnlB,KAA9D;AACA,eAAK7B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB6F,MAAxB,GAAiC+O,UAAU,CAAC7M,OAAX,CAAmB+iB,UAAnB,CAA8BjlB,MAA/D;AACA,eAAK/B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB8c,OAAxB,GAAkClI,UAAU,CAAC7M,OAAX,CAAmB+U,OAArD;AACA,eAAKhZ,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB+c,OAAxB,GAAkCnI,UAAU,CAAC7M,OAAX,CAAmBgV,OAArD;AACH;;AACD,YAAInI,UAAU,CAAC4V,SAAX,KAAyBpqB,SAA7B,EAAwC;AACpCwqB,UAAAA,SAAS,CAAC9N,OAAV,GAAoB8N,SAAS,CAAC7iB,OAAV,CAAkB+U,OAAtC;AACA8N,UAAAA,SAAS,CAAC7N,OAAV,GAAoB6N,SAAS,CAAC7iB,OAAV,CAAkBgV,OAAtC;AACH;;AACD,YAAI,CAACnI,UAAU,CAAC3U,QAAZ,IACC,KAAK6D,SAAL,CAAe8Q,UAAU,CAAC3U,QAA1B,KACG,KAAK6D,SAAL,CAAe8Q,UAAU,CAAC3U,QAA1B,EAAoCqC,KAApC,CAA0CC,IAA1C,KAAmD,UAF3D,EAEwE;AACpE,eAAKmlB,mBAAL,CAAyB9S,UAAzB;AACH;AACJ;AACJ;;AACD,WAAO5U,EAAP;AACH,GAlDD;AAmDA;AACJ;AACA;AACA;AACA;;;AAEInB,EAAAA,OAAO,CAACtO,SAAR,CAAkB6X,KAAlB,GAA0B,YAAY;AAClC,SAAKrD,YAAL;AACH,GAFD;;AAGAlG,EAAAA,OAAO,CAACtO,SAAR,CAAkBwU,YAAlB,GAAiC,UAAUH,UAAV,EAAsB;AACnD,QAAI+R,OAAO,GAAG,EAAd;;AACA,QAAI,CAAC/R,UAAL,EAAiB;AACb+R,MAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKhb,KAApB,CAAV;AACA0U,MAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKta,UAApB,CAAV;AACH,KAHD,MAIK;AACDgU,MAAAA,OAAO,GAAG/R,UAAV;AACH;;AACD,SAAKY,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAACstB,KAA1D;;AACA,SAAK,IAAI/f,EAAE,GAAG,CAAT,EAAYkmB,SAAS,GAAGpU,OAA7B,EAAsC9R,EAAE,GAAGkmB,SAAS,CAAC/5B,MAArD,EAA6D6T,EAAE,EAA/D,EAAmE;AAC/D,UAAIV,GAAG,GAAG4mB,SAAS,CAAClmB,EAAD,CAAnB;;AACA,UAAI,KAAKf,SAAL,CAAeK,GAAG,CAACnE,EAAnB,CAAJ,EAA4B;AACxB,aAAK3L,MAAL,CAAY8P,GAAZ;AACH;AACJ;;AACD,SAAKqB,cAAL,GAAsB,KAAKA,cAAL,GAAsB,CAAClO,aAAa,CAACstB,KAA3D;AACA,SAAK3V,aAAL,GAAqB,IAAIxV,aAAJ,CAAkB,KAAKqK,SAAvB,CAArB;AACA,SAAKqM,WAAL;AACH,GAnBD;;AAoBAtR,EAAAA,OAAO,CAACtO,SAAR,CAAkBy6B,eAAlB,GAAoC,YAAY;AAC5C,QAAIC,UAAJ;AACA,QAAIvpB,IAAI,GAAI,KAAKmG,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,CAAD,GAAgC,KAAK4F,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,CAAhC,GAA8D7B,SAAzE;;AACA,QAAIsB,IAAI,IAAIA,IAAI,YAAYtM,IAA5B,EAAkC;AAC9B,UAAIsM,IAAI,CAAC8Z,MAAL,IAAe9Z,IAAI,CAACzB,QAAxB,EAAkC;AAC9B,YAAIwb,QAAQ,GAAG,KAAK3X,SAAL,CAAepC,IAAI,CAACzB,QAApB,CAAf;AACA,YAAI0hB,KAAK,GAAGlG,QAAQ,CAACnZ,KAAT,CAAeqf,KAA3B;AACA,YAAIuJ,QAAQ,GAAIxpB,IAAI,CAAC1B,EAAL,CAAQmrB,KAAR,CAAc1P,QAAQ,CAACzb,EAAT,CAAYhP,MAA1B,CAAhB;AACA,YAAIo6B,eAAe,GAAGF,QAAQ,CAACG,SAAT,CAAmB,CAAnB,EAAsBH,QAAQ,CAACl6B,MAAT,GAAkB,CAAxC,CAAtB;;AACA,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGswB,KAAK,CAAC3wB,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,cAAIqQ,IAAI,CAAC8Z,MAAL,IAAe4P,eAAe,KAAKzJ,KAAK,CAACtwB,CAAD,CAAL,CAAS2O,EAAhD,EAAoD;AAChDirB,YAAAA,UAAU,GAAG,KAAKnnB,SAAL,CAAe6d,KAAK,CAACtwB,CAAD,CAAL,CAASi6B,MAAT,CAAgBtrB,EAA/B,CAAb;AACH;AACJ;AACJ,OAVD,MAWK,IAAI0B,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,UAApB,IAAkCb,IAAI,CAACY,KAAL,CAAWgpB,MAA7C,IAAuD5pB,IAAI,CAACY,KAAL,CAAWipB,SAAtE,EAAiF;AAClF,YAAIvrB,EAAE,GAAG0B,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,EAAyBspB,IAAzB,CAA8B,CAA9B,EAAiCC,KAAjC,CAAuC,CAAvC,EAA0CvpB,QAA1C,CAAmD,CAAnD,EAAsDlC,EAA/D;AACAirB,QAAAA,UAAU,GAAG,KAAKnnB,SAAL,CAAe9D,EAAf,CAAb;AACH;AACJ;;AACD,SAAK0rB,aAAL,CAAmBT,UAAnB;AACH,GArBD;AAsBA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpsB,EAAAA,OAAO,CAACtO,SAAR,CAAkBm7B,aAAlB,GAAkC,UAAUhqB,IAAV,EAAgB1B,EAAhB,EAAoB;AAClD,QAAK,CAACpE,UAAU,CAAC,IAAD,CAAX,IAAqB,CAACE,cAAc,CAAC,IAAD,CAArC,IAAgDH,eAAe,CAAC,IAAD,CAAnE,EAA2E;AACvE,WAAK0E,WAAL,GAAmB,IAAnB;AACA,UAAI2L,SAAS,GAAG,KAAKD,QAAL,CAAcC,SAA9B;AACA,UAAIsQ,KAAK,GAAGzgB,eAAe,CAAC,IAAD,CAAf,GAAwBmQ,SAAS,CAACsQ,KAAlC,GAA0C,CAAtD;AACA,UAAIqP,QAAQ,GAAG,EAAf;AACA,UAAIxrB,IAAI,GAAG,KAAK,CAAhB;AACA,UAAIwc,MAAM,GAAG,KAAK,CAAlB;AACA,UAAIiP,UAAU,GAAG,KAAK,CAAtB;AACA,UAAIjR,CAAC,GAAG,KAAK,CAAb;AACA,UAAIznB,CAAC,GAAG,KAAK,CAAb;AACA,UAAI24B,WAAW,GAAG,KAAK,CAAvB;;AACA,UAAI,CAACnqB,IAAL,EAAW;AACPA,QAAAA,IAAI,GAAI,KAAKmG,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,CAAD,GAAgC,KAAK4F,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,CAAhC,GAA8D,KAAK4F,aAAL,CAAmBlF,UAAnB,CAA8B,CAA9B,CAArE;AACH;;AACD,UAAIjB,IAAJ,EAAU;AACN,YAAInN,QAAQ,EAAZ,EAAgB;AACZ,cAAIu3B,YAAY,GAAGpvB,WAAW,CAACgF,IAAD,CAA9B;;AACA,cAAIoqB,YAAY,CAACppB,WAAb,CAAyB1R,MAAzB,GAAkC,CAAtC,EAAyC;AACrC,iBAAKwf,WAAL,CAAiBsb,YAAjB,EAAgCpqB,IAAI,YAAYtM,IAAjB,GAAyB,IAAzB,GAAgC,KAA/D;AACH;;AACDsM,UAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAApB,KAA2B0B,IAAlC;AACH;;AACD,YAAIA,IAAI,CAACY,KAAL,IAAcZ,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,eAAtC,EAAuD;AACnDb,UAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAepC,IAAI,CAACQ,QAAL,CAAc,CAAd,CAAf,CAAP;AACH;;AACD,YAAI6pB,cAAc,GAAG,KAArB;;AACA,YAAI,KAAKlU,UAAT,EAAqB;AACjBgU,UAAAA,WAAW,GAAG,KAAKhU,UAAL,CAAgBmU,wBAAhB,CAAyCtqB,IAAzC,EAA+C1B,EAA/C,CAAd;;AACA,cAAI6rB,WAAJ,EAAiB;AACbnqB,YAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAAL,CAAQqD,KAAR,CAAc,kBAAd,EAAkC,CAAlC,CAAf,CAAP;AACH;AACJ;;AACD,YAAI,CAACwoB,WAAL,EAAkB;AACd,cAAInqB,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAApB,IAA8Bb,IAAI,CAACgB,WAAL,CAAiB1R,MAAjB,KAA4B,CAA9D,EAAiE;AAC7D,gBAAI,EAAE0Q,IAAI,CAACuG,WAAL,GAAmBnR,eAAe,CAACm1B,QAArC,CAAJ,EAAoD;AAChD,mBAAKlsB,WAAL,CAAiBG,OAAjB,GAA2B,IAA3B;AACA,mBAAKif,gBAAL;AACA,mBAAK+M,SAAL,CAAexqB,IAAf,EAAqB,CAAC;AAAE1B,gBAAAA,EAAE,EAAEvD,QAAQ,EAAd;AAAkB+G,gBAAAA,OAAO,EAAE;AAA3B,eAAD,CAArB;AACH;AACJ;;AACD,cAAI,CAACxD,EAAD,KAAS0B,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAApB,IAA8Bb,IAAI,CAACgB,WAAL,CAAiB1R,MAAjB,GAA0B,CAAzD,IAAgE0Q,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAA5F,CAAJ,EAA0G;AACtGvC,YAAAA,EAAE,GAAI0B,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAArB,GAAgCb,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,EAAyBlC,EAA1B,CAA8BqD,KAA9B,CAAoC,GAApC,EAAyC,CAAzC,CAA/B,GAA6E3B,IAAI,CAACgB,WAAL,CAAiB,CAAjB,EAAoB1C,EAAtG;AACH;;AACD,cAAIA,EAAJ,EAAQ;AACJ6rB,YAAAA,WAAW,GAAG,KAAKM,UAAL,CAAgBzqB,IAAI,CAACqG,OAArB,EAA8B/H,EAA9B,CAAd;AACH;AACJ,SAdD,MAeK;AACD+rB,UAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,YAAIrqB,IAAI,IAAImqB,WAAR,IAAuB,EAAEA,WAAW,YAAYzuB,kBAAzB,CAAvB,KACC,CAAClB,cAAc,CAAC2vB,WAAD,EAAcnqB,IAAd,CAAf,IAAsCqqB,cADvC,CAAJ,EAC4D;AACxD,cAAI5pB,KAAK,GAAI0pB,WAAW,CAAC1pB,KAAzB;AACA,cAAIiqB,QAAQ,GAAG,KAAK,CAApB;AACAA,UAAAA,QAAQ,GAAGP,WAAW,CAAClP,MAAZ,CAAmBhX,KAAnB,GAA2BjE,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoBhX,KAA/C,GAAuDkmB,WAAW,CAAClP,MAAZ,CAAmBhX,KAA1E,GAAkFjE,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoBhX,KAAjH;AACAymB,UAAAA,QAAQ,GAAGT,QAAQ,GAAGS,QAAX,GAAsBT,QAAtB,GAAiCS,QAA5C;AACA,cAAI/rB,WAAW,GAAGqN,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,iBAA1C,CAAlB;AACA,cAAIqsB,QAAQ,GAAG3e,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,UAA1C,CAAf;AACAG,UAAAA,IAAI,GAAGksB,QAAQ,GAAGA,QAAQ,CAACr6B,KAAZ,GAAoB65B,WAAW,CAACroB,OAA/C;AACA,eAAKzD,WAAL,CAAiBI,IAAjB,GAAwBA,IAAxB;;AACA,cAAI,CAACE,WAAD,IAAgB,CAACgsB,QAArB,EAA+B;AAC3BhsB,YAAAA,WAAW,GAAGhG,iBAAiB,CAAC,KAAD,EAAQ,EAAR,CAA/B;AACAgyB,YAAAA,QAAQ,GAAGhyB,iBAAiB,CAAC,UAAD,EAAa,EAAb,CAA5B;AACA,iBAAKyb,aAAL,CAAmBuS,WAAnB,CAA+BhoB,WAA/B;AACAA,YAAAA,WAAW,CAACgoB,WAAZ,CAAwBgE,QAAxB;AACAA,YAAAA,QAAQ,CAAChE,WAAT,CAAqB3a,QAAQ,CAAC4e,cAAT,CAAwBnsB,IAAxB,CAArB;AACH;;AACDwc,UAAAA,MAAM,GAAG/iB,eAAe,CAACiyB,WAAW,CAAC1pB,KAAb,EAAoBhC,IAApB,EAA0BC,SAA1B,EAAqCA,SAArC,EAAgDgsB,QAAhD,CAAxB;;AACA,cAAIzP,MAAM,CAAC4P,OAAP,EAAJ,EAAsB;AAClB,gBAAI7qB,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAAxB,EAAgC;AAC5Boa,cAAAA,MAAM,GAAG,IAAIlmB,IAAJ,CAAS2F,cAAc,CAACsF,IAAD,EAAQmqB,WAAW,CAAC7rB,EAAb,CAAiBqD,KAAjB,CAAuB3B,IAAI,CAAC1B,EAAL,GAAU,GAAjC,EAAsC,CAAtC,CAAP,CAAd,CAA+D2F,KAA/D,IAAwE,EAAjF,EAAqFkmB,WAAW,CAAC1pB,KAAZ,CAAkBqqB,QAAvG,CAAT;AACH,aAFD,MAGK;AACD7P,cAAAA,MAAM,GAAG,IAAIlmB,IAAJ,CAAUiL,IAAI,CAACiE,KAAL,GAAa,EAAd,GAAoB,EAApB,GAAyBjE,IAAI,CAACiE,KAAvC,EAA8CkmB,WAAW,CAAC1pB,KAAZ,CAAkBqqB,QAAhE,CAAT;AACH;AACJ;;AACD,cAAI9qB,IAAI,CAACzB,QAAL,IAAiB,KAAK6D,SAAL,CAAepC,IAAI,CAACzB,QAApB,EAA8BqC,KAA9B,CAAoCC,IAApC,KAA6C,eAAlE,EAAmF;AAC/Eoa,YAAAA,MAAM,CAAChX,KAAP,GAAejE,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoBhX,KAApB,GAA4B,EAA3C;AACAgV,YAAAA,CAAC,GAAM,CAACjZ,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoB8P,MAApB,CAA2B9R,CAA3B,GAA+B3O,SAAS,CAAC6O,EAA1C,IAAgD7O,SAAS,CAACsQ,KAA3D,GAAqEK,MAAM,CAAChX,KAAP,GAAe,CAAhB,GAAqB2W,KAA1F,GAAmG,GAAxG;AACAppB,YAAAA,CAAC,GAAM,CAACwO,IAAI,CAACqG,OAAL,CAAa4U,MAAb,CAAoB8P,MAApB,CAA2Bv5B,CAA3B,GAA+B8Y,SAAS,CAAC8O,EAA1C,IAAgD9O,SAAS,CAACsQ,KAA3D,GAAqEK,MAAM,CAAC9W,MAAP,GAAgB,CAAjB,GAAsByW,KAA3F,GAAoG,CAAzG;AACAuP,YAAAA,WAAW,CAAC1pB,KAAZ,CAAkBuqB,SAAlB,GAA8B,MAA9B;AACH,WALD,MAMK;AACD/P,YAAAA,MAAM,CAAChX,KAAP,GAAeqc,IAAI,CAAC2K,GAAL,CAAShQ,MAAM,CAAChX,KAAhB,EAAuB,EAAvB,CAAf;AACAgV,YAAAA,CAAC,GAAM,CAACkR,WAAW,CAAClP,MAAZ,CAAmB8P,MAAnB,CAA0B9R,CAA1B,GAA8B3O,SAAS,CAAC6O,EAAzC,IAA+C7O,SAAS,CAACsQ,KAA1D,GAAoEK,MAAM,CAAChX,KAAP,GAAe,CAAhB,GAAqB2W,KAAzF,GAAkG,GAAvG;AACAppB,YAAAA,CAAC,GAAM,CAAC24B,WAAW,CAAClP,MAAZ,CAAmB8P,MAAnB,CAA0Bv5B,CAA1B,GAA8B8Y,SAAS,CAAC8O,EAAzC,IAA+C9O,SAAS,CAACsQ,KAA1D,GAAoEK,MAAM,CAAC9W,MAAP,GAAgB,CAAjB,GAAsByW,KAA1F,GAAmG,CAAxG;AACH;;AACDsP,UAAAA,UAAU,GAAG;AACT,kBAAM,KAAK5sB,OAAL,CAAagB,EAAb,GAAkB,iBADf;AACkC,qBAAS,uBAAuB,QAAvB,GAAkC2a,CAAlC,GAAsC,SAAtC,GAChDznB,CADgD,GAC5C,WAD4C,GAC7B,CAACypB,MAAM,CAAChX,KAAP,GAAe,CAAhB,IAAqB2W,KADQ,GACC,YADD,GACiBK,MAAM,CAAC9W,MAAP,GAAgByW,KADjC,GAEhD,oBAFgD,GAEzB5a,IAAI,CAAC1B,EAFoB,GAEf;AAH5B,WAAb;AAKArG,UAAAA,gBAAgB,CAAC0G,WAAD,EAAcurB,UAAd,CAAhB;AACAA,UAAAA,UAAU,GAAG;AACT,kBAAM,KAAK5sB,OAAL,CAAagB,EAAb,GAAkB,UADf;AAC2B,qBAAS,WAAY,CAAC2c,MAAM,CAAChX,KAAP,GAAe,CAAhB,IAAqB2W,KAAjC,GACzC,YADyC,GACzBK,MAAM,CAAC9W,MAAP,GAAgByW,KADS,GACA,iDADA,GAEzC,eAFyC,GAEvBna,KAAK,CAACyqB,UAFiB,GAGzC,aAHyC,GAGxBzqB,KAAK,CAACqqB,QAAN,GAAiBlQ,KAHO,GAGE,gBAHF,GAIxCuP,WAAW,CAAC1pB,KAAZ,CAAkBuqB,SAAlB,CAA4BG,iBAA5B,EAJwC,GAIW,GAL/C;AAKoD,qBAAS;AAL7D,WAAb;AAOAlzB,UAAAA,gBAAgB,CAAC0yB,QAAD,EAAWT,UAAX,CAAhB;AACAS,UAAAA,QAAQ,CAAClqB,KAAT,CAAe2qB,UAAf,GAA6B3qB,KAAK,CAAC4qB,IAAP,GAAe,MAAf,GAAwB,EAApD;AACAV,UAAAA,QAAQ,CAAClqB,KAAT,CAAe6qB,SAAf,GAA4B7qB,KAAK,CAAC8qB,MAAP,GAAiB,QAAjB,GAA4B,EAAvD;AACAZ,UAAAA,QAAQ,CAAClqB,KAAT,CAAe+qB,UAAf,GAA4B,CAAC/qB,KAAK,CAACqqB,QAAN,GAAiB,GAAjB,GAAuB,KAAxB,EAA+BW,QAA/B,EAA5B;AACAd,UAAAA,QAAQ,CAAClqB,KAAT,CAAeirB,cAAf,GAAiCjrB,KAAK,CAACirB,cAAP,GAAyBjrB,KAAK,CAACirB,cAA/B,GAAgD,EAAhF;AACA,eAAKrtB,WAAL,CAAiBE,QAAjB,GAA4ByB,IAAI,CAAC1B,EAAjC;AACA,eAAKD,WAAL,CAAiBC,EAAjB,GAAsBA,EAAtB;AACA6rB,UAAAA,WAAW,CAACxF,OAAZ,GAAsB,KAAtB;AACA,eAAKqB,mBAAL,CAAyBhmB,IAAzB;AACA,eAAK8D,cAAL,GAAsB,KAAKA,cAAL,GAAsBlO,aAAa,CAAC+1B,QAA1D;;AACA,cAAI,CAAC,KAAK/sB,cAAV,EAA0B;AACtBpM,YAAAA,YAAY,CAACoQ,GAAb,CAAiB+nB,QAAjB,EAA2B,OAA3B,EAAoC,KAAKvmB,YAAL,CAAkBwnB,WAAtD,EAAmE,KAAKxnB,YAAxE;AACA5R,YAAAA,YAAY,CAACoQ,GAAb,CAAiB+nB,QAAjB,EAA2B,UAA3B,EAAuC,KAAKkB,YAA5C,EAA0D,IAA1D;AACAlB,YAAAA,QAAQ,CAAC3V,MAAT;AACH;AACJ;AACJ;AACJ;AACJ,GAvHD;;AAwHA7X,EAAAA,OAAO,CAACtO,SAAR,CAAkBi9B,+BAAlB,GAAoD,UAAU1qB,SAAV,EAAqB;AACrE,QAAIA,SAAS,CAAC2qB,gBAAV,CAA2Bz8B,MAA/B,EAAuC;AACnC,UAAI08B,sBAAsB,GAAG,KAAK,CAAlC;;AACA,WAAK,IAAI7oB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGhC,SAAS,CAAC2qB,gBAAhC,EAAkD5oB,EAAE,GAAGC,EAAE,CAAC9T,MAA1D,EAAkE6T,EAAE,EAApE,EAAwE;AACpE,YAAI8oB,eAAe,GAAG7oB,EAAE,CAACD,EAAD,CAAxB;AACA6oB,QAAAA,sBAAsB,GAAG,KAAKvB,UAAL,CAAgBrpB,SAAS,CAACiF,OAA1B,EAAmC4lB,eAAe,CAAC3tB,EAAnD,CAAzB;AACA8C,QAAAA,SAAS,CAAC8qB,gBAAV,CAA2BD,eAA3B,EAA4C7qB,SAAS,CAAC+qB,kBAAtD,EAA0E/qB,SAAS,CAACiF,OAAV,CAAkB4U,MAA5F,EAAoG+Q,sBAApG;AACH;AACJ;;AACD5qB,IAAAA,SAAS,CAACiF,OAAV,CAAkBwf,OAAlB,CAA0B,IAAI9wB,IAAJ,CAASqM,SAAS,CAACiF,OAAV,CAAkBpC,KAA3B,EAAkC7C,SAAS,CAACiF,OAAV,CAAkBlC,MAApD,CAA1B;AACA/C,IAAAA,SAAS,CAACiF,OAAV,CAAkByf,OAAlB,CAA0B1kB,SAAS,CAACiF,OAAV,CAAkB0f,WAA5C;AACH,GAXD;AAYA;;;AACA5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBu9B,gBAAlB,GAAqC,UAAUpsB,IAAV,EAAgBqsB,UAAhB,EAA4B;AAC7D,SAAK,IAAI18B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACuC,QAAL,CAAcjT,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C,UAAIyR,SAAS,GAAG,KAAKgB,SAAL,CAAepC,IAAI,CAACuC,QAAL,CAAc5S,CAAd,CAAf,CAAhB;AACA,UAAIV,MAAM,GAAG,KAAKmT,SAAL,CAAehB,SAAS,CAAC4iB,QAAzB,CAAb;AACA5iB,MAAAA,SAAS,CAACujB,OAAV,GAAoB0H,UAApB;;AACA,UAAI,CAACA,UAAL,EAAiB;AACb,aAAKtH,uBAAL,CAA6B3jB,SAAS,CAACiF,OAAvC,EAAgDjF,SAAhD,EAA2D,KAA3D;AACAnS,QAAAA,MAAM,CAAC8f,UAAP,GAAoBsd,UAApB;AACH;;AACD,WAAKD,gBAAL,CAAsBn9B,MAAtB,EAA8BA,MAAM,CAAC8f,UAArC;AACA9f,MAAAA,MAAM,CAAC01B,OAAP,GAAiB0H,UAAjB;;AACA,UAAI,CAACA,UAAL,EAAiB;AACb,aAAKtH,uBAAL,CAA6B91B,MAAM,CAACoX,OAApC,EAA6CpX,MAA7C,EAAqD,KAArD;AACH;AACJ;AACJ,GAfD;;AAgBAkO,EAAAA,OAAO,CAACtO,SAAR,CAAkBy9B,yBAAlB,GAA8C,UAAUlrB,SAAV,EAAqB;AAC/D,QAAIA,SAAS,CAACJ,WAAV,CAAsB1R,MAA1B,EAAkC;AAC9B,UAAIi9B,iBAAiB,GAAG,KAAK,CAA7B;;AACA,WAAK,IAAIppB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGhC,SAAS,CAACJ,WAAhC,EAA6CmC,EAAE,GAAGC,EAAE,CAAC9T,MAArD,EAA6D6T,EAAE,EAA/D,EAAmE;AAC/D,YAAI6N,UAAU,GAAG5N,EAAE,CAACD,EAAD,CAAnB;AACAopB,QAAAA,iBAAiB,GAAG,KAAK9B,UAAL,CAAgBrpB,SAAS,CAACiF,OAA1B,EAAmC2K,UAAU,CAAC1S,EAA9C,CAApB;AACA8C,QAAAA,SAAS,CAAC8qB,gBAAV,CAA2Blb,UAA3B,EAAuC5P,SAAS,CAAC+qB,kBAAjD,EAAqE/qB,SAAS,CAACiF,OAAV,CAAkB4U,MAAvF,EAA+FsR,iBAA/F,EAAmH,KAAKzoB,cAAL,GAAsBlO,aAAa,CAAC42B,YAAvJ;AACH;AACJ;;AACDprB,IAAAA,SAAS,CAACiF,OAAV,CAAkBwf,OAAlB,CAA0B,IAAI9wB,IAAJ,CAASqM,SAAS,CAACiF,OAAV,CAAkBpC,KAA3B,EAAkC7C,SAAS,CAACiF,OAAV,CAAkBlC,MAApD,CAA1B;AACA/C,IAAAA,SAAS,CAACiF,OAAV,CAAkByf,OAAlB,CAA0B1kB,SAAS,CAACiF,OAAV,CAAkB0f,WAA5C;AACH,GAXD;;AAYA5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkB49B,wBAAlB,GAA6C,UAAUlsB,KAAV,EAAiB;AAC1D,QAAIgjB,eAAe,GAAG,EAAtB;AACA,QAAIvjB,IAAJ;AACA,QAAIzB,QAAQ,GAAG,UAAf;AACA,QAAImuB,SAAS,GAAG,WAAhB;;AACA,SAAK,IAAI/8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4Q,KAAK,CAACjR,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnCqQ,MAAAA,IAAI,GAAGO,KAAK,CAAC5Q,CAAD,CAAZ;;AACA,UAAI,CAACqQ,IAAI,CAACzB,QAAD,CAAL,IAAmB,CAACyB,IAAI,CAAC0sB,SAAD,CAA5B,EAAyC;AACrCnJ,QAAAA,eAAe,CAACpxB,IAAhB,CAAqB6N,IAArB;AACH;AACJ;;AACD,WAAOujB,eAAP;AACH,GAZD;AAaA;;AACA;AACJ;AACA;AACA;;;AACIpmB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8Z,QAAlB,GAA6B,YAAY;AACrC,QAAIgkB,MAAM,GAAG,KAAb;AACA,QAAI/lB,MAAJ;AACA,QAAIgmB,YAAY,GAAI,KAAKhmB,MAAL,CAAY/F,IAAZ,KAAqB,yBAArB,IAAkD,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAA3F;AACA,QAAIkgB,UAAU,GAAG,KAAKzV,mBAAtB;AACA,SAAK9J,qBAAL,CAA2B,IAA3B;AACA,QAAIjB,KAAK,GAAG,KAAKksB,wBAAL,CAA8B,KAAKlsB,KAAnC,CAAZ;AACA,QAAIssB,gBAAgB,GAAG,KAAKjmB,MAAL,CAAYoB,aAAZ,IAA6B,KAAKpB,MAAL,CAAY/F,IAAZ,KAAqB,yBAAzE;AACA,QAAIisB,QAAQ,GAAG;AAAE7T,MAAAA,CAAC,EAAE,KAAK5O,QAAL,CAAc0iB,aAAnB;AAAkCv7B,MAAAA,CAAC,EAAE,KAAK6Y,QAAL,CAAc2iB;AAAnD,KAAf;;AACA,QAAI,KAAKpmB,MAAL,CAAY/F,IAAZ,KAAqB,MAAzB,EAAiC;AAC7B,UAAIgsB,gBAAgB,IAAK,KAAKjmB,MAAL,CAAYmB,qBAAZ,KAAsC,gBAAtC,IAA0D,KAAKklB,sBAA/D,IAAyFL,YAA9G,IAA+H,KAAKhmB,MAAL,CAAY4L,WAAZ,KAA4B,QAA/J,EAAyK;AACrK,aAAKya,sBAAL,CAA4BC,oBAA5B,CAAiD,KAAKtmB,MAAtD,EAA8D,IAA9D;AACH;;AACD,UAAI,KAAKumB,yBAAT,EAAoC;AAChCvmB,QAAAA,MAAM,GAAG,KAAKumB,yBAAL,CAA+BC,YAA/B,CAA4C7sB,KAA5C,EAAmD,KAAK6B,SAAxD,EAAmE,KAAKwE,MAAxE,EAAgFkmB,QAAhF,EAA0F,KAAK1sB,kBAAL,CAAwB9B,EAAlH,EAAsH,KAAKwF,cAA3H,CAAT;AACA6oB,QAAAA,MAAM,GAAG,IAAT;;AACA,YAAI,KAAKU,mBAAL,IAA4BzmB,MAAM,CAAC0mB,QAAnC,IAA+C,CAAC,KAAKxpB,cAAzD,EAAyE;AACrE,eAAKsoB,gBAAL,CAAsBxlB,MAAM,CAAC0mB,QAA7B,EAAuC1mB,MAAM,CAAC0mB,QAAP,CAAgBve,UAAvD;AACH;AACJ,OAND,MAOK,IAAI,KAAKwe,kBAAT,EAA6B;AAC9B,YAAIhtB,KAAK,IAAIA,KAAK,CAACjR,MAAN,GAAe,CAA5B,EAA+B;AAC3B,eAAKi+B,kBAAL,CAAwBH,YAAxB,CAAqC7sB,KAArC,EAA4C,KAAK6B,SAAjD,EAA4D,KAAKwE,MAAjE,EAAyEkmB,QAAzE,EAAmF,KAAK1sB,kBAAL,CAAwB9B,EAA3G,EAA+G,KAAK8B,kBAAL,CAAwBotB,IAAvI;AACH;;AACDb,QAAAA,MAAM,GAAG,IAAT;AACH,OALI,MAMA,IAAI,KAAKc,gBAAT,EAA2B;AAC5B,aAAKA,gBAAL,CAAsBL,YAAtB,CAAmC7sB,KAAnC,EAA0C,KAAK6B,SAA/C,EAA0D,KAAKwE,MAA/D,EAAuEkmB,QAAvE;AACAH,QAAAA,MAAM,GAAG,IAAT;AACH,OAHI,MAIA,IAAI,KAAKe,uBAAT,EAAkC;AACnC,aAAKA,uBAAL,CAA6BC,YAA7B,GAA4C,KAAK/mB,MAAL,CAAY+mB,YAAxD;AACA,aAAKD,uBAAL,CAA6BE,YAA7B,GAA4C,KAAKhnB,MAAL,CAAYgnB,YAAxD;AACA,aAAKF,uBAAL,CAA6BG,YAA7B,GAA4C,KAAKjnB,MAAL,CAAYinB,YAAxD;AACA,aAAKH,uBAAL,CAA6BN,YAA7B,CAA0C7sB,KAA1C,EAAiD,KAAKU,UAAtD,EAAkE,KAAKysB,uBAAvE,EAAgG,KAAKtrB,SAArG,EAAgH,KAAKwE,MAArH,EAA6HkmB,QAA7H;AACAH,QAAAA,MAAM,GAAG,IAAT;AACH,OANI,MAOA,IAAI,KAAKmB,6BAAT,EAAwC;AACzC,YAAIC,OAAO,GAAG,KAAKD,6BAAL,CAAmCE,wBAAnC,CAA4D,KAAKztB,KAAjE,CAAd;;AACA,YAAIwtB,OAAO,CAACz+B,MAAR,GAAiB,CAArB,EAAwB;AACpB;AACA,eAAKw+B,6BAAL,CAAmCnlB,QAAnC,CAA4ColB,OAA5C,EAAqD,KAAK3rB,SAA1D,EAAqE,KAAKwE,MAA1E,EAAkFkmB,QAAlF,EAA4F,KAAKG,sBAAjG;AACH;;AACDN,QAAAA,MAAM,GAAG,IAAT;AACH;;AACD,UAAIA,MAAJ,EAAY;AACR,aAAKsB,oBAAL,GAA4B,IAA5B;AACA,YAAIhtB,UAAU,GAAG,EAAjB;AACA,YAAIitB,YAAY,GAAG3tB,KAAnB;;AACA,YAAI1N,QAAQ,EAAZ,EAAgB;AACZ,eAAK4d,cAAL;AACH;;AACD,aAAK,IAAItN,EAAE,GAAG,CAAT,EAAYgrB,cAAc,GAAGD,YAAlC,EAAgD/qB,EAAE,GAAGgrB,cAAc,CAAC7+B,MAApE,EAA4E6T,EAAE,EAA9E,EAAkF;AAC9E,cAAIV,GAAG,GAAG0rB,cAAc,CAAChrB,EAAD,CAAxB;AACA,cAAInD,IAAI,GAAGyC,GAAX;;AACA,cAAI,CAAC,KAAK5D,kBAAN,KAA6B,CAAC,KAAKiF,cAAN,IAAwB,EAAE,KAAKA,cAAL,GAAsBlO,aAAa,CAACw4B,kBAAtC,CAArD,CAAJ,EAAqH;AACjH,iBAAKC,UAAL,CAAgBruB,IAAhB;AACA,iBAAKsuB,wBAAL,CAA8BtuB,IAA9B;AACH;;AACD,eAAKnB,kBAAL,GAA0B,IAA1B;AACA,eAAKoG,kBAAL,CAAwBjF,IAAxB,EAA8B,EAA9B,EAAkC;AAAEob,YAAAA,OAAO,EAAEpb,IAAI,CAACob,OAAhB;AAAyBC,YAAAA,OAAO,EAAErb,IAAI,CAACqb;AAAvC,WAAlC,EAAoF,IAApF;AACA,eAAKxc,kBAAL,GAA0B,KAA1B;AACAmB,UAAAA,IAAI,CAACqG,OAAL,CAAawf,OAAb,CAAqB,IAAI9wB,IAAJ,CAASiL,IAAI,CAACqG,OAAL,CAAapC,KAAtB,EAA6BjE,IAAI,CAACqG,OAAL,CAAalC,MAA1C,CAArB;AACAnE,UAAAA,IAAI,CAACqG,OAAL,CAAayf,OAAb,CAAqB9lB,IAAI,CAACqG,OAAL,CAAa0f,WAAlC;AACA,eAAKC,mBAAL,CAAyBhmB,IAAzB,EAA+B,IAA/B;;AACA,cAAIA,IAAI,CAACwC,OAAL,CAAalT,MAAb,GAAsB,CAA1B,EAA6B;AACzB,iBAAK,IAAI4Y,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlI,IAAI,CAACwC,OAAL,CAAalT,MAAjC,EAAyC4Y,CAAC,EAA1C,EAA8C;AAC1C,kBAAI9G,SAAS,GAAG,KAAKgB,SAAL,CAAepC,IAAI,CAACwC,OAAL,CAAa0F,CAAb,CAAf,CAAhB;AACAjH,cAAAA,UAAU,CAACG,SAAS,CAAC9C,EAAX,CAAV,GAA2B8C,SAA3B;AACH;AACJ;;AACD,cAAIpB,IAAI,CAACuC,QAAL,CAAcjT,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,iBAAK,IAAIs5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5oB,IAAI,CAACuC,QAAL,CAAcjT,MAAlC,EAA0Cs5B,CAAC,EAA3C,EAA+C;AAC3C,kBAAI2F,UAAU,GAAG,KAAKnsB,SAAL,CAAepC,IAAI,CAACuC,QAAL,CAAcqmB,CAAd,CAAf,CAAjB;AACA3nB,cAAAA,UAAU,CAACstB,UAAU,CAACjwB,EAAZ,CAAV,GAA4BiwB,UAA5B;AACH;AACJ;AACJ;;AACD,aAAK,IAAInrB,EAAE,GAAG,CAAT,EAAYkB,EAAE,GAAGjW,MAAM,CAACoT,IAAP,CAAYR,UAAZ,CAAtB,EAA+CmC,EAAE,GAAGkB,EAAE,CAAChV,MAAvD,EAA+D8T,EAAE,EAAjE,EAAqE;AACjE,cAAI4W,IAAI,GAAG1V,EAAE,CAAClB,EAAD,CAAb;;AACA,cAAIypB,gBAAJ,EAAsB;AAClB,iBAAKI,sBAAL,CAA4BuB,sBAA5B,CAAmD,KAAKpsB,SAAL,CAAe4X,IAAf,CAAnD;AACH;;AACD,cAAI5Y,SAAS,GAAGH,UAAU,CAAC+Y,IAAD,CAA1B;AACA,cAAIyU,MAAM,GAAG,KAAKC,SAAL,CAAettB,SAAf,CAAb;;AACA,cAAIyrB,gBAAJ,EAAsB;AAClB,iBAAKI,sBAAL,CAA4B0B,oBAA5B,CAAiDvtB,SAAjD,EAA4D,IAA5D,EAAkEqtB,MAAlE;AACH;;AACDp4B,UAAAA,eAAe,CAAC+K,SAAD,EAAYqtB,MAAZ,CAAf;;AACA,cAAIrtB,SAAS,CAACR,KAAV,CAAgBC,IAAhB,KAAyB,MAAzB,IAAmCO,SAAS,CAACR,KAAV,CAAgByZ,QAAhB,KAA6B,SAApE,EAA+E;AAC3E,iBAAK/M,cAAL,CAAoBgN,uBAApB,CAA4ClZ,SAA5C;AACH;;AACDA,UAAAA,SAAS,CAACiF,OAAV,CAAkBwf,OAAlB,CAA0B,IAAI9wB,IAAJ,CAAS2J,SAAT,EAAoBA,SAApB,CAA1B;AACA0C,UAAAA,SAAS,CAACiF,OAAV,CAAkByf,OAAlB,CAA0B1kB,SAAS,CAACiF,OAAV,CAAkB0f,WAA5C;AACA,eAAKuG,yBAAL,CAA+BlrB,SAA/B;AACA,eAAK0qB,+BAAL,CAAqC1qB,SAArC;AACA,eAAKwtB,UAAL,CAAgBxtB,SAAhB;AACA,eAAK4kB,mBAAL,CAAyB5kB,SAAzB,EAAoC,IAApC;AACH;;AACD,YAAIyrB,gBAAgB,IAAI,KAAKjmB,MAAL,CAAYmB,qBAAZ,KAAsC,gBAAtC,IAA0D,KAAKklB,sBAA/D,IAAyFL,YAAjH,EAA+H;AAC3H,eAAKK,sBAAL,CAA4B4B,eAA5B,CAA4C,KAAKjoB,MAAjD,EAAyD,IAAzD;AACH;;AACD,aAAKqnB,oBAAL,GAA4B,KAA5B;AACA,aAAK/nB,UAAL;;AACA,YAAK,EAAE,KAAKpC,cAAL,GAAsBlO,aAAa,CAACmO,MAAtC,CAAD,IAAmD,KAAKsB,IAAL,KAAc,QAArE,EAA+E;AAC3E,eAAKC,mBAAL;AACH;AACJ;;AACD,UAAI,CAACyb,UAAL,EAAiB;AACb,aAAKvf,qBAAL,CAA2Buf,UAA3B;AACH;AACJ;;AACD,QAAI4L,MAAJ,EAAY;AACR,WAAKxM,wBAAL;AACH;;AACD,WAAS,KAAKhiB,aAAL,GAAqB5I,YAAY,CAACyZ,UAAnC,GAAiDpI,MAAjD,GAA0D/T,QAAQ,KAAK,IAAL,GAAY,IAAtF;AACH,GApHD;AAqHA;;AACA;AACJ;AACA;AACA;;;AACIsK,EAAAA,OAAO,CAACtO,SAAR,CAAkBigC,WAAlB,GAAgC,YAAY;AACxC,WAAOn4B,SAAS,CAAC,IAAD,CAAhB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AAEIwG,EAAAA,OAAO,CAACtO,SAAR,CAAkBkU,WAAlB,GAAgC,UAAUD,IAAV,EAAgB;AAC5C,WAAOlM,WAAW,CAACkM,IAAD,EAAO,IAAP,CAAlB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;;;AACI3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBkgC,iBAAlB,GAAsC,UAAUC,WAAV,EAAuB;AACzD,QAAI,KAAKC,oBAAT,EAA+B;AAC3B,UAAInsB,IAAI,GAAG,KAAKmsB,oBAAL,CAA0BF,iBAA1B,CAA4CC,WAA5C,CAAX;AACA,aAAOlsB,IAAP;AACH;;AACD,WAAO,EAAP;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBqgC,WAAlB,GAAgC,UAAUC,KAAV,EAAiB9xB,OAAjB,EAA0B;AACtD,QAAI,KAAK4xB,oBAAT,EAA+B;AAC3B,WAAKA,oBAAL,CAA0BG,YAA1B,CAAuCD,KAAvC,EAA8C9xB,OAA9C;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,OAAO,CAACtO,SAAR,CAAkBwgC,UAAlB,GAA+B,UAAUF,KAAV,EAAiB9xB,OAAjB,EAA0B;AACrD,QAAI,KAAK4xB,oBAAT,EAA+B;AAC3B5xB,MAAAA,OAAO,CAACiyB,YAAR,GAAuB,IAAvB;AACA,WAAKL,oBAAL,CAA0BG,YAA1B,CAAuCD,KAAvC,EAA8C9xB,OAA9C;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,OAAO,CAACtO,SAAR,CAAkB0gC,aAAlB,GAAkC,UAAU7N,UAAV,EAAsB;AACpD,QAAI,KAAK7E,cAAL,IAAuB6E,UAA3B,EAAuC;AACnC,WAAKtY,cAAL,CAAoBsY,UAApB,GAAiCA,UAAjC;AACA,WAAK7E,cAAL,CAAoB2S,UAApB,CAA+B,KAAKpmB,cAAL,CAAoBqmB,YAAnD,EAAiE/N,UAAjE,EAA6E,IAA7E,EAAmF,IAAnF;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;;;AACIvkB,EAAAA,OAAO,CAACtO,SAAR,CAAkB6gC,YAAlB,GAAiC,YAAY;AACzC,QAAI,KAAK7S,cAAT,EAAyB;AACrB,WAAKA,cAAL,CAAoB6S,YAApB,CAAiC,IAAjC;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;;;AACIvyB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8gC,gBAAlB,GAAqC,YAAY;AAC7C,QAAI,KAAKV,oBAAT,EAA+B;AAC3B,UAAIhU,MAAM,GAAG,KAAKgU,oBAAL,CAA0BU,gBAA1B,CAA2C,EAA3C,EAA+C,EAA/C,CAAb;AACA1U,MAAAA,MAAM,CAAChX,KAAP,GAAegX,MAAM,CAAChX,KAAP,GAAe,KAAKuF,cAAL,CAAoBujB,aAAnC,GACX9R,MAAM,CAAChX,KAAP,IAAgBgX,MAAM,CAAChC,CAAP,GAAW,CAAX,GAAegC,MAAM,CAAChC,CAAtB,GAA0B,CAA1C,CADW,GACoC,KAAKzP,cAAL,CAAoBujB,aADvE;AAEA9R,MAAAA,MAAM,CAAC9W,MAAP,GAAgB8W,MAAM,CAAC9W,MAAP,GAAgB,KAAKqF,cAAL,CAAoBwjB,cAApC,GACZ/R,MAAM,CAAC9W,MAAP,IAAiB8W,MAAM,CAACzpB,CAAP,GAAW,CAAX,GAAeypB,MAAM,CAACzpB,CAAtB,GAA0B,CAA3C,CADY,GACoC,KAAKgY,cAAL,CAAoBwjB,cADxE;AAEA/R,MAAAA,MAAM,CAAChC,CAAP,GAAWgC,MAAM,CAAChC,CAAP,GAAW,CAAX,GAAe,CAAf,GAAmBgC,MAAM,CAAChC,CAArC;AACAgC,MAAAA,MAAM,CAACzpB,CAAP,GAAWypB,MAAM,CAACzpB,CAAP,GAAW,CAAX,GAAe,CAAf,GAAmBypB,MAAM,CAACzpB,CAArC;AACA,aAAOypB,MAAP;AACH;;AACD,WAAO,IAAIjkB,IAAJ,EAAP;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;;;AACImG,EAAAA,OAAO,CAACtO,SAAR,CAAkB+gC,aAAlB,GAAkC,UAAUvyB,OAAV,EAAmB;AACjD,QAAI,KAAK4xB,oBAAT,EAA+B;AAC3B,UAAInsB,IAAI,GAAG,KAAKmsB,oBAAL,CAA0BW,aAA1B,CAAwCvyB,OAAxC,CAAX;AACA,aAAOyF,IAAP;AACH;;AACD,WAAO,EAAP;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;;;AACI3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBghC,KAAlB,GAA0B,UAAUxyB,OAAV,EAAmB;AACzC,QAAI,KAAK4xB,oBAAT,EAA+B;AAC3B,WAAKA,oBAAL,CAA0BY,KAA1B,CAAgCxyB,OAAhC;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,OAAO,CAACtO,SAAR,CAAkBihC,QAAlB,GAA6B,UAAUrtB,GAAV,EAAewF,KAAf,EAAsB;AAC/C,SAAKzG,qBAAL,CAA2B,IAA3B;AACA,QAAIuuB,cAAc,GAAG,EAArB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;;AACA,QAAIn9B,QAAQ,MAAM4P,GAAG,KAAK,IAAtB,IAA+BA,GAAG,CAACwF,KAAJ,CAAU3Y,MAAV,GAAmB,CAAnB,IAAwB,EAAE,KAAKwU,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAA3D,EAA6G;AACzG,UAAIvN,KAAK,GAAGjD,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAMwF,KAAK,CAAC,CAAD,CAAL,CAAS3J,EAAf,EAAmB,KAAnB,CAAhB,CAAlB;;AACA,UAAIwG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdkrB,QAAAA,iBAAiB,GAAG,KAApB;AACH;AACJ;;AACDvtB,IAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACA,QAAIwhB,MAAJ;;AACA,QAAIhc,KAAK,CAAC3Y,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAKmuB,gBAAL;AACH;;AACD,SAAK,IAAI9tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsY,KAAK,CAAC3Y,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnCs0B,MAAAA,MAAM,GAAG,IAAI3oB,SAAJ,CAAcmH,GAAd,EAAmB,OAAnB,EAA4BwF,KAAK,CAACtY,CAAD,CAAjC,EAAsC,IAAtC,CAAT;AACA8S,MAAAA,GAAG,CAACwF,KAAJ,CAAU9V,IAAV,CAAe8xB,MAAf;;AACA,UAAIpxB,QAAQ,MAAMm9B,iBAAlB,EAAqC;AACjCD,QAAAA,cAAc,CAAC59B,IAAf,CAAoB8xB,MAApB;AACH;;AACD,UAAIxhB,GAAG,CAACjC,QAAR,EAAkB;AACd,YAAIsoB,SAAS,GAAGrmB,GAAG,CAAC4D,OAApB;AACA5D,QAAAA,GAAG,CAACwtB,QAAJ,CAAa,KAAKC,cAAlB,EAAkCztB,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBsoB,SAAS,CAACtoB,QAAV,CAAmBlR,MAAnB,GAA4B,CAAjD,CAAlC,EAAuF20B,MAAvF;AACH,OAHD,MAIK;AACD,YAAIkM,MAAM,GAAG1tB,GAAG,CAAC4D,OAAjB;AACA8pB,QAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqBsQ,GAAG,CAAC2tB,eAAJ,CAAoB3tB,GAAG,CAACwF,KAAJ,CAAUxF,GAAG,CAACwF,KAAJ,CAAU3Y,MAAV,GAAmB,CAA7B,CAApB,CAArB;AACH;;AACD,UAAI,EAAE,KAAKwU,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,KAAmD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC8W,KAAtC,CAAvD,EAAqG;AACjG,YAAI1D,KAAK,GAAG;AACRnI,UAAAA,IAAI,EAAE,uBADE;AACuByc,UAAAA,UAAU,EAAE,QADnC;AAC6CrU,UAAAA,UAAU,EAAEjO,WAAW,CAACipB,MAAD,CADpE;AAER/a,UAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,UAAAA,QAAQ,EAAE;AAFhC,SAAZ;AAIA,aAAKE,eAAL,CAAqBL,KAArB;AACH;AACJ;;AACD,QAAIf,KAAK,CAAC3Y,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAKouB,cAAL;AACH;;AACD,QAAI7qB,QAAQ,MAAMm9B,iBAAlB,EAAqC;AACjC,WAAK7M,8BAAL,CAAoC4M,cAApC,EAAoD,MAApD,EAA4DrxB,SAA5D,EAAuE,KAAK6B,KAAL,CAAW0Z,OAAX,CAAmBxX,GAAnB,CAAvE;AACH;;AACDA,IAAAA,GAAG,CAAC4D,OAAJ,CAAYwf,OAAZ,CAAoB,IAAI9wB,IAAJ,CAAS0N,GAAG,CAACwB,KAAb,EAAoBxB,GAAG,CAAC0B,MAAxB,CAApB;AACA1B,IAAAA,GAAG,CAAC4D,OAAJ,CAAYyf,OAAZ,CAAoBrjB,GAAG,CAAC4D,OAAJ,CAAY0f,WAAhC;AACA,SAAKC,mBAAL,CAAyBvjB,GAAzB;AACA,SAAKjB,qBAAL,CAA2B,KAA3B;AACH,GA/CD;AAgDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrE,EAAAA,OAAO,CAACtO,SAAR,CAAkBwhC,cAAlB,GAAmC,UAAUC,eAAV,EAA2BC,gBAA3B,EAA6C;AAC5E,WAAOD,eAAe,GAAGC,gBAAzB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpzB,EAAAA,OAAO,CAACtO,SAAR,CAAkB2hC,iBAAlB,GAAsC,UAAUF,eAAV,EAA2BC,gBAA3B,EAA6C;AAC/E,WAAOD,eAAe,GAAG,CAACC,gBAA1B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpzB,EAAAA,OAAO,CAACtO,SAAR,CAAkB4hC,aAAlB,GAAkC,UAAUhuB,GAAV,EAAeiuB,MAAf,EAAuB;AACrD,SAAKlG,SAAL,CAAe/nB,GAAf,EAAoBiuB,MAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvzB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8hC,kBAAlB,GAAuC,UAAUluB,GAAV,EAAeiuB,MAAf,EAAuB;AAC1D,SAAKlG,SAAL,CAAe/nB,GAAf,EAAoBiuB,MAApB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvzB,EAAAA,OAAO,CAACtO,SAAR,CAAkB27B,SAAlB,GAA8B,UAAU/nB,GAAV,EAAeiuB,MAAf,EAAuB;AACjD,SAAKlvB,qBAAL,CAA2B,IAA3B;AACA,QAAIovB,kBAAkB,GAAG,IAAzB;AACA,QAAIC,oBAAoB,GAAG,EAA3B;;AACA,QAAIh+B,QAAQ,MAAM4P,GAAG,IAAI,IAArB,IAA6BA,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyB,CAAtD,IAA2D,EAAE,KAAKwU,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAA/D,EAAgH;AAC5G,UAAIvN,KAAK,GAAGjD,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAMiuB,MAAM,CAAC,CAAD,CAAN,CAAUpyB,EAAhB,EAAoB,IAApB,CAAhB,CAAlB;;AACA,UAAIwG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd8rB,QAAAA,kBAAkB,GAAG,KAArB;AACH;AACJ;;AACDnuB,IAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;AACA,QAAI0tB,MAAM,GAAG1tB,GAAG,CAAC4D,OAAjB;AACA,QAAI4d,MAAJ;;AACA,QAAIyM,MAAM,CAACphC,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKmuB,gBAAL;AACH;;AACD,SAAK,IAAI9tB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+gC,MAAM,CAACphC,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,UAAI8S,GAAG,YAAY/O,IAAnB,EAAyB;AACrBuwB,QAAAA,MAAM,GAAG,IAAI/sB,eAAJ,CAAoBuL,GAApB,EAAyB,aAAzB,EAAwCiuB,MAAM,CAAC/gC,CAAD,CAA9C,EAAmD,IAAnD,CAAT;AACA8S,QAAAA,GAAG,CAACzB,WAAJ,CAAgB7O,IAAhB,CAAqB8xB,MAArB;;AACA,YAAIpxB,QAAQ,MAAM+9B,kBAAlB,EAAsC;AAClCC,UAAAA,oBAAoB,CAAC1+B,IAArB,CAA0B8xB,MAA1B;AACH;;AACD,YAAIxhB,GAAG,CAACjC,QAAR,EAAkB;AACd,cAAIR,IAAI,GAAGyC,GAAX;;AACA,eAAK,IAAIquB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG9wB,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsBlR,MAA9C,EAAsDwhC,GAAG,EAAzD,EAA6D;AACzD,gBAAI9wB,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsBswB,GAAtB,EAA2BxyB,EAA3B,KAAkC0B,IAAI,CAAC1B,EAAL,GAAU,iBAAhD,EAAmE;AAC/D,kBAAIwqB,SAAS,GAAG9oB,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsBswB,GAAtB,CAAhB;AACAhI,cAAAA,SAAS,CAACtoB,QAAV,CAAmBrO,IAAnB,CAAwBsQ,GAAG,CAACsuB,qBAAJ,CAA0BtuB,GAAG,CAACzB,WAAJ,CAAgByB,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyB,CAAzC,CAA1B,EAAuE,KAAKgO,OAAL,CAAagB,EAApF,CAAxB;AACH;AACJ;AACJ,SARD,MASK;AACD6xB,UAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqBsQ,GAAG,CAACsuB,qBAAJ,CAA0BtuB,GAAG,CAACzB,WAAJ,CAAgByB,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyB,CAAzC,CAA1B,EAAuE,KAAKgO,OAAL,CAAagB,EAApF,CAArB;AACH;AACJ,OAlBD,MAmBK,IAAImE,GAAG,YAAYlO,SAAnB,EAA8B;AAC/B0vB,QAAAA,MAAM,GAAG,IAAI9sB,cAAJ,CAAmBsL,GAAnB,EAAwB,aAAxB,EAAuCiuB,MAAM,CAAC/gC,CAAD,CAA7C,EAAkD,IAAlD,CAAT;AACA8S,QAAAA,GAAG,CAACzB,WAAJ,CAAgB7O,IAAhB,CAAqB8xB,MAArB;;AACA,YAAIpxB,QAAQ,MAAM+9B,kBAAlB,EAAsC;AAClCC,UAAAA,oBAAoB,CAAC1+B,IAArB,CAA0B8xB,MAA1B;AACH;;AACD,YAAI+M,OAAO,GAAGb,MAAM,CAAC3vB,QAAP,CAAgB,CAAhB,CAAd;AACA,YAAIya,MAAM,GAAG,IAAIjkB,IAAJ,CAASg6B,OAAO,CAAC5V,OAAR,GAAkB4V,OAAO,CAAC/sB,KAAR,GAAgB,CAA3C,EAA8C+sB,OAAO,CAAC3V,OAAR,GAAkB2V,OAAO,CAAC7sB,MAAR,GAAiB,CAAjF,EAAoF6sB,OAAO,CAAC/sB,KAA5F,EAAmG+sB,OAAO,CAAC7sB,MAA3G,CAAb;AACAgsB,QAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqBsQ,GAAG,CAACwuB,oBAAJ,CAAyBxuB,GAAG,CAACzB,WAAJ,CAAgByB,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyB,CAAzC,CAAzB,EAAsEmT,GAAG,CAAC0pB,kBAA1E,EAA8FlR,MAA9F,EAAsG,KAAKiV,cAA3G,EAA2H,KAAK5yB,OAAL,CAAagB,EAAxI,CAArB;AACH;;AACD,UAAI,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,KAAmD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC8W,KAAtC,CAAvD,EAAqG;AACjG,YAAI1D,KAAK,GAAG;AACRnI,UAAAA,IAAI,EAAE,wBADE;AACwByc,UAAAA,UAAU,EAAE,QADpC;AAC8CrU,UAAAA,UAAU,EAAEjO,WAAW,CAACipB,MAAD,CADrE;AAER/a,UAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,UAAAA,QAAQ,EAAE;AAFhC,SAAZ;AAIA,aAAKE,eAAL,CAAqBL,KAArB;AACH;AACJ;;AACD,QAAI0nB,MAAM,CAACphC,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKouB,cAAL;AACH;;AACD,QAAI7qB,QAAQ,MAAM+9B,kBAAlB,EAAsC;AAClC,WAAKzN,8BAAL,CAAoC0N,oBAApC,EAA2DpuB,GAAG,YAAY/O,IAAhB,GAAwB,gBAAxB,GAA2C,qBAArG,EAA4HgL,SAA5H,EAAwI+D,GAAG,YAAY/O,IAAhB,GAAwB,KAAK6M,KAAL,CAAW0Z,OAAX,CAAmBxX,GAAnB,CAAxB,GAAkD,KAAKxB,UAAL,CAAgBgZ,OAAhB,CAAwBxX,GAAxB,CAAzL;AACH;;AACDA,IAAAA,GAAG,CAAC4D,OAAJ,CAAYwf,OAAZ,CAAoB,IAAI9wB,IAAJ,CAASo7B,MAAM,CAAClsB,KAAhB,EAAuBksB,MAAM,CAAChsB,MAA9B,CAApB;AACA1B,IAAAA,GAAG,CAAC4D,OAAJ,CAAYyf,OAAZ,CAAoBqK,MAAM,CAACpK,WAA3B;AACA,SAAKC,mBAAL,CAAyBvjB,GAAzB;AACA,SAAKjB,qBAAL,CAA2B,KAA3B;AACH,GAhED;AAiEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrE,EAAAA,OAAO,CAACtO,SAAR,CAAkBqiC,QAAlB,GAA6B,UAAUlxB,IAAV,EAAgBuf,IAAhB,EAAsBza,KAAtB,EAA6B;AACtD9E,IAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAApB,KAA2B0B,IAAlC;;AACA,SAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4vB,IAAI,CAACjwB,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC2M,MAAAA,OAAO,CAAC,IAAD,EAAO0D,IAAP,EAAauf,IAAI,CAAC5vB,CAAD,CAAjB,EAAsBmV,KAAtB,CAAP;;AACA,UAAIA,KAAK,KAAKpG,SAAd,EAAyB;AACrBoG,QAAAA,KAAK,IAAI,CAAT;AACH;AACJ;;AACD,SAAKqb,wBAAL;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhjB,EAAAA,OAAO,CAACtO,SAAR,CAAkBsiC,SAAlB,GAA8B,UAAUnxB,IAAV,EAAgByf,MAAhB,EAAwB;AAClDzf,IAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAApB,KAA2B0B,IAAlC;;AACA,SAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8vB,MAAM,CAACnwB,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC4M,MAAAA,QAAQ,CAAC,IAAD,EAAOyD,IAAP,EAAayf,MAAM,CAAC9vB,CAAD,CAAnB,CAAR;AACH;;AACD,SAAKwwB,wBAAL;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhjB,EAAAA,OAAO,CAACtO,SAAR,CAAkB6N,UAAlB,GAA+B,UAAUsD,IAAV,EAAgBuf,IAAhB,EAAsB;AACjD7iB,IAAAA,UAAU,CAAC,IAAD,EAAOgC,SAAP,EAAkBsB,IAAlB,EAAwBuf,IAAxB,CAAV;AACA,SAAKY,wBAAL;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhjB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8N,WAAlB,GAAgC,UAAUqD,IAAV,EAAgBoxB,KAAhB,EAAuB;AACnDz0B,IAAAA,WAAW,CAAC,IAAD,EAAO+B,SAAP,EAAkBsB,IAAlB,EAAwBoxB,KAAxB,CAAX;AACA,SAAKjR,wBAAL;AACH,GAHD;;AAIAhjB,EAAAA,OAAO,CAACtO,SAAR,CAAkBwiC,oBAAlB,GAAyC,UAAU5uB,GAAV,EAAeiuB,MAAf,EAAuBxoB,CAAvB,EAA0B7B,OAA1B,EAAmC;AACxE,SAAK,IAAI1W,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0W,OAAO,CAAC7F,QAAR,CAAiBlR,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,UAAIwgC,MAAM,GAAG9pB,OAAO,CAAC7F,QAAR,CAAiB7Q,CAAjB,CAAb;;AACA,UAAKwgC,MAAM,YAAYj6B,WAAnB,IAAoCi6B,MAAM,YAAYz0B,kBAA1D,EAA+E;AAC3E,YAAIy0B,MAAM,CAAC7xB,EAAP,CAAUgzB,KAAV,CAAgB,MAAMZ,MAAM,CAACxoB,CAAD,CAAN,CAAU5J,EAAhB,GAAqB,GAArC,CAAJ,EAA+C;AAC3C,eAAK,IAAIsqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnmB,GAAG,CAACzB,WAAJ,CAAgB1R,MAApC,EAA4Cs5B,CAAC,EAA7C,EAAiD;AAC7C,gBAAIuH,MAAM,CAAC7xB,EAAP,CAAUgzB,KAAV,CAAgB,MAAM7uB,GAAG,CAACzB,WAAJ,CAAgB4nB,CAAhB,EAAmBtqB,EAAzB,GAA8B,GAA9C,CAAJ,EAAwD;AACpD,kBAAI,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAJ,EAAqD;AACjD,oBAAIrJ,KAAK,GAAG;AACRnI,kBAAAA,IAAI,EAAE,wBADE;AACwByc,kBAAAA,UAAU,EAAE,QADpC;AAC8CrU,kBAAAA,UAAU,EAAEjO,WAAW,CAACyH,GAAG,CAACzB,WAAJ,CAAgB4nB,CAAhB,CAAD,CADrE;AAER1f,kBAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,kBAAAA,QAAQ,EAAE;AAFhC,iBAAZ;AAIA,qBAAKE,eAAL,CAAqBL,KAArB;AACH;;AACDvG,cAAAA,GAAG,CAACzB,WAAJ,CAAgB6iB,MAAhB,CAAuB+E,CAAvB,EAA0B,CAA1B;AACH;AACJ;;AACDviB,UAAAA,OAAO,CAAC7F,QAAR,CAAiBqjB,MAAjB,CAAwBl0B,CAAxB,EAA2B,CAA3B;;AACA,cAAI,KAAK0V,IAAL,KAAc,KAAlB,EAAyB;AACrB,gBAAI/H,OAAO,GAAGhF,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAR,EAAY,KAAKhB,OAAL,CAAagB,EAAzB,CAA/B;;AACA,gBAAIhB,OAAJ,EAAa;AACT,kBAAIi0B,SAAS,GAAGj5B,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAR,EAAY,KAAKhB,OAAL,CAAagB,EAAzB,CAAjC;AACAizB,cAAAA,SAAS,CAACre,UAAV,CAAqBC,WAArB,CAAiCoe,SAAjC;AACH;;AACD,gBAAIC,WAAW,GAAGl5B,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAP,GAAY,OAAb,EAAsB,KAAKhB,OAAL,CAAagB,EAAnC,CAAnC;;AACA,gBAAIkzB,WAAJ,EAAiB;AACbl0B,cAAAA,OAAO,GAAGhF,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAP,GAAY,OAAb,EAAsB,KAAKhB,OAAL,CAAagB,EAAnC,CAA3B;AACAhB,cAAAA,OAAO,CAAC4V,UAAR,CAAmBC,WAAnB,CAA+B7V,OAA/B;AACH;;AACD,gBAAIm0B,WAAW,GAAGn5B,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAP,GAAY,eAAb,EAA8B,KAAKhB,OAAL,CAAagB,EAA3C,CAAnC;;AACA,gBAAImzB,WAAJ,EAAiB;AACbA,cAAAA,WAAW,CAACve,UAAZ,CAAuBC,WAAvB,CAAmCse,WAAnC;AACH;AACJ,WAfD,MAgBK;AACD,iBAAKjY,mBAAL;AACH;AACJ;AACJ;AACJ;AACJ,GAxCD;AAyCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrc,EAAAA,OAAO,CAACtO,SAAR,CAAkB6iC,YAAlB,GAAiC,UAAUjvB,GAAV,EAAeiuB,MAAf,EAAuB;AACpD,QAAIE,kBAAkB,GAAG,IAAzB;;AACA,QAAI/9B,QAAQ,MAAM4P,GAAG,KAAK,IAAtB,IAA8B,EAAE,KAAKqB,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAlC,EAAmF;AAC/E,UAAIvN,KAAK,GAAIrC,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyB,CAA1B,GAA+BuS,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAOiuB,MAAM,CAAC,CAAD,CAAP,CAAYpyB,EAAlB,EAAsB,IAAtB,CAAhB,CAArC,GAAoF,CAAC,CAAjG;;AACA,UAAIwG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd8rB,QAAAA,kBAAkB,GAAG,KAArB;AACH;AACJ;;AACDnuB,IAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;;AACA,QAAI5P,QAAQ,MAAM+9B,kBAAlB,EAAsC;AAClC,UAAIC,oBAAoB,GAAG,EAA3B;AACA,UAAIvO,sBAAsB,GAAG,EAA7B;;AACA,WAAK,IAAIpa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwoB,MAAM,CAACphC,MAA3B,EAAmC4Y,CAAC,EAApC,EAAwC;AACpC,YAAIpD,KAAK,GAAGjD,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAMiuB,MAAM,CAACxoB,CAAD,CAAN,CAAU5J,EAAhB,EAAoB,IAApB,CAAhB,CAAlB;AACAgkB,QAAAA,sBAAsB,CAACnwB,IAAvB,CAA4B2S,KAA5B;AACA+rB,QAAAA,oBAAoB,CAAC1+B,IAArB,CAA0Bu+B,MAAM,CAACxoB,CAAD,CAAhC;AACH;;AACD,WAAKib,8BAAL,CAAoC0N,oBAApC,EAA2DpuB,GAAG,YAAY/O,IAAhB,GAAwB,gBAAxB,GAA2C,qBAArG,EAA4H4uB,sBAA5H,EAAqJ7f,GAAG,YAAY/O,IAAhB,GAAwB,KAAK6M,KAAL,CAAW0Z,OAAX,CAAmBxX,GAAnB,CAAxB,GAAkD,KAAKxB,UAAL,CAAgBgZ,OAAhB,CAAwBxX,GAAxB,CAAtM;AACH;;AACD,QAAIiuB,MAAM,CAACphC,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKmuB,gBAAL;AACH;;AACD,SAAK,IAAIvV,CAAC,GAAGwoB,MAAM,CAACphC,MAAP,GAAgB,CAA7B,EAAgC4Y,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AACzC,UAAIzF,GAAG,CAACjC,QAAJ,IAAgBiC,GAAG,CAACjC,QAAJ,CAAalR,MAAb,GAAsB,CAA1C,EAA6C;AACzC,aAAK,IAAIs5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnmB,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBlR,MAAzC,EAAiDs5B,CAAC,EAAlD,EAAsD;AAClD,eAAKyI,oBAAL,CAA0B5uB,GAA1B,EAA+BiuB,MAA/B,EAAuCxoB,CAAvC,EAA0CzF,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBooB,CAArB,CAA1C;AACH;AACJ,OAJD,MAKK;AACD,aAAKyI,oBAAL,CAA0B5uB,GAA1B,EAA+BiuB,MAA/B,EAAuCxoB,CAAvC,EAA0CzF,GAAG,CAAC4D,OAA9C;AACH;AACJ;;AACD,QAAIqqB,MAAM,CAACphC,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKouB,cAAL;AACH;AACJ,GAnCD;;AAoCAvgB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8iC,mBAAlB,GAAwC,UAAUlvB,GAAV,EAAewF,KAAf,EAAsBC,CAAtB,EAAyB7B,OAAzB,EAAkC;AACtE,SAAK,IAAI1W,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0W,OAAO,CAAC7F,QAAR,CAAiBlR,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,UAAIwgC,MAAM,GAAG9pB,OAAO,CAAC7F,QAAR,CAAiB7Q,CAAjB,CAAb;;AACA,UAAIwgC,MAAM,YAAYl6B,WAAtB,EAAmC;AAC/B,YAAIk6B,MAAM,CAAC7xB,EAAP,CAAUgzB,KAAV,CAAgB,MAAMrpB,KAAK,CAACC,CAAD,CAAL,CAAS5J,EAAf,GAAoB,GAApC,CAAJ,EAA8C;AAC1C,eAAK,IAAIsqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnmB,GAAG,CAACwF,KAAJ,CAAU3Y,MAA9B,EAAsCs5B,CAAC,EAAvC,EAA2C;AACvC,gBAAIuH,MAAM,CAAC7xB,EAAP,CAAUgzB,KAAV,CAAgB,MAAM7uB,GAAG,CAACwF,KAAJ,CAAU2gB,CAAV,EAAatqB,EAAnB,GAAwB,GAAxC,CAAJ,EAAkD;AAC9C,kBAAI,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAJ,EAAqD;AACjD,oBAAIrJ,KAAK,GAAG;AACRnI,kBAAAA,IAAI,EAAE,uBADE;AACuByc,kBAAAA,UAAU,EAAE,QADnC;AAC6CrU,kBAAAA,UAAU,EAAEjO,WAAW,CAACyH,GAAG,CAACwF,KAAJ,CAAU2gB,CAAV,CAAD,CADpE;AAER1f,kBAAAA,UAAU,EAAElO,WAAW,CAACyH,GAAD,CAFf;AAEsB0G,kBAAAA,QAAQ,EAAE;AAFhC,iBAAZ;AAIA,qBAAKE,eAAL,CAAqBL,KAArB;AACH;;AACDvG,cAAAA,GAAG,CAACwF,KAAJ,CAAU4b,MAAV,CAAiB+E,CAAjB,EAAoB,CAApB;AACH;AACJ;;AACDviB,UAAAA,OAAO,CAAC7F,QAAR,CAAiBqjB,MAAjB,CAAwBl0B,CAAxB,EAA2B,CAA3B;;AACA,cAAI,KAAK0V,IAAL,KAAc,KAAlB,EAAyB;AACrB,gBAAI/H,OAAO,GAAGhF,iBAAiB,CAAC63B,MAAM,CAAC7xB,EAAR,EAAY,KAAKhB,OAAL,CAAagB,EAAzB,CAA/B;AACAhB,YAAAA,OAAO,CAAC4V,UAAR,CAAmBC,WAAnB,CAA+B7V,OAA/B;AACH,WAHD,MAIK;AACD,iBAAKkc,mBAAL;AACH;AACJ;AACJ;AACJ;AACJ,GA5BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrc,EAAAA,OAAO,CAACtO,SAAR,CAAkBsZ,WAAlB,GAAgC,UAAU1F,GAAV,EAAewF,KAAf,EAAsB;AAClD,QAAI+nB,iBAAiB,GAAG,IAAxB;;AACA,QAAIn9B,QAAQ,MAAM4P,GAAG,KAAK,IAAtB,IAA8B,EAAE,KAAKqB,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAlC,EAAmF;AAC/E,UAAIvN,KAAK,GAAIrC,GAAG,CAACwF,KAAJ,CAAU3Y,MAAV,GAAmB,CAApB,GAAyBuS,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAMwF,KAAK,CAAC,CAAD,CAAL,CAAS3J,EAAf,EAAmB,KAAnB,CAAhB,CAA/B,GAA4E,CAAC,CAAzF;;AACA,UAAIwG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdkrB,QAAAA,iBAAiB,GAAG,KAApB;AACH;AACJ;;AACDvtB,IAAAA,GAAG,GAAG,KAAKL,SAAL,CAAeK,GAAG,CAACnE,EAAnB,KAA0BmE,GAAhC;;AACA,QAAI5P,QAAQ,MAAMm9B,iBAAlB,EAAqC;AACjC,UAAI1N,sBAAsB,GAAG,EAA7B;AACA,UAAIyN,cAAc,GAAG,EAArB;;AACA,WAAK,IAAI7nB,CAAC,GAAGD,KAAK,CAAC3Y,MAAN,GAAe,CAA5B,EAA+B4Y,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,YAAIpD,KAAK,GAAGjD,MAAM,CAAC/N,eAAe,CAAC2O,GAAD,EAAMwF,KAAK,CAACC,CAAD,CAAL,CAAS5J,EAAf,EAAmB,KAAnB,CAAhB,CAAlB;AACAgkB,QAAAA,sBAAsB,CAACnwB,IAAvB,CAA4B2S,KAA5B;AACAirB,QAAAA,cAAc,CAAC59B,IAAf,CAAoB8V,KAAK,CAACC,CAAD,CAAzB;AACH;;AACD,WAAKib,8BAAL,CAAoC4M,cAApC,EAAoD,MAApD,EAA4DzN,sBAA5D,EAAoF,KAAK/hB,KAAL,CAAW0Z,OAAX,CAAmBxX,GAAnB,CAApF;AACH;;AACD,QAAIwF,KAAK,CAAC3Y,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAKmuB,gBAAL;AACH;;AACD,SAAK,IAAIvV,CAAC,GAAGD,KAAK,CAAC3Y,MAAN,GAAe,CAA5B,EAA+B4Y,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,UAAIzF,GAAG,CAACjC,QAAJ,IAAgBiC,GAAG,CAACjC,QAAJ,CAAalR,MAAb,GAAsB,CAA1C,EAA6C;AACzC,aAAK,IAAIs5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnmB,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBlR,MAAzC,EAAiDs5B,CAAC,EAAlD,EAAsD;AAClD,eAAK+I,mBAAL,CAAyBlvB,GAAzB,EAA8BwF,KAA9B,EAAqCC,CAArC,EAAwCzF,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBooB,CAArB,CAAxC;AACH;AACJ,OAJD,MAKK;AACD,aAAK+I,mBAAL,CAAyBlvB,GAAzB,EAA8BwF,KAA9B,EAAqCC,CAArC,EAAwCzF,GAAG,CAAC4D,OAA5C;AACH;AACJ;;AACD,QAAI4B,KAAK,CAAC3Y,MAAN,GAAe,CAAnB,EAAsB;AAClB,WAAKouB,cAAL;AACH;AACJ,GAnCD,CAjoI2C,CAqqI3C;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvgB,EAAAA,OAAO,CAACtO,SAAR,CAAkBqV,YAAlB,GAAiC,UAAU0tB,IAAV,EAAgBC,SAAhB,EAA2B;AACxD,QAAIvhC,KAAJ;;AACA,QAAIshC,IAAI,CAACnG,QAAL,GAAgBxR,OAAhB,CAAwB,IAAxB,IAAgC,CAApC,EAAuC;AACnC3pB,MAAAA,KAAK,GAAGshC,IAAI,CAACnG,QAAL,EAAR;AACH,KAFD,MAGK,IAAImG,IAAI,CAACnG,QAAL,GAAgBxR,OAAhB,CAAwB,GAAxB,IAA+B,CAAnC,EAAsC;AACvC3pB,MAAAA,KAAK,GAAGuhC,SAAS,KAAKnzB,SAAd,GAA0B,MAA1B,GAAmCkzB,IAAI,CAACnG,QAAL,EAA3C;AACH,KAFI,MAGA;AACDn7B,MAAAA,KAAK,GAAGshC,IAAI,CAACnG,QAAL,KAAkB,IAA1B;AACH;;AACD,QAAIoG,SAAJ,EAAe;AACX,UAAIjW,QAAQ,GAAGhnB,YAAY,CAAC,IAAD,CAA3B;AACAtE,MAAAA,KAAK,GAAG,UAAUA,KAAV,GAAkB,KAAlB,GAA0BuhC,SAA1B,GAAsC,KAA9C;AACH;;AACD,WAAOvhC,KAAP;AACH,GAhBD;;AAiBA6M,EAAAA,OAAO,CAACtO,SAAR,CAAkBgc,YAAlB,GAAiC,YAAY;AACzC,QAAI,KAAKN,aAAL,CAAmBI,UAAvB,EAAmC;AAC/B7V,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAD,MAAAA,WAAW,CAAC,IAAD,EAAO,IAAP,CAAX;AACAA,MAAAA,WAAW,CAAC,IAAD,EAAO,KAAP,CAAX;AACH,KAJD,MAKK;AACDH,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH;AACJ,GATD;;AAUAyI,EAAAA,OAAO,CAACtO,SAAR,CAAkBmX,oBAAlB,GAAyC,YAAY;AACjD,QAAI4V,QAAQ,GAAG,IAAI7mB,IAAJ,EAAf;AACA6mB,IAAAA,QAAQ,GAAGhnB,YAAY,CAAC,IAAD,CAAvB;AACA,QAAI0I,OAAO,GAAG0O,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,SAA1C,CAAd;AACA,QAAI2F,KAAK,GAAG,KAAKC,YAAL,CAAkB,KAAKD,KAAvB,EAA8B2X,QAAQ,CAAC3X,KAAvC,CAAZ;AACA,QAAIE,MAAM,GAAG,KAAKD,YAAL,CAAkB,KAAKC,MAAvB,EAA+ByX,QAAQ,CAACzX,MAAxC,CAAb;AACA,QAAI1D,KAAK,GAAG,KAAK8J,aAAL,CAAmBI,UAAnB,GACR,WAAW1G,KAAX,GAAmB,WAAnB,GAAiCE,MAAjC,GAA0C,GAA1C,GACI,MADJ,GACayX,QAAQ,CAACzX,MADtB,GAC+B,UAD/B,GAC4CyX,QAAQ,CAAC3X,KADrD,GAC6D,KAD7D,GAEI,mDAHI,GAIR,WAAWA,KAAX,GAAmB,WAAnB,GAAiCE,MAAjC,GAA0C,qBAA1C,GACI,qCALR;AAMA,QAAI2tB,IAAI,GAAG;AACP,YAAM,KAAKx0B,OAAL,CAAagB,EAAb,GAAkB,SADjB;AAEP,kBAAY,GAFL;AAGP,eAASmC;AAHF,KAAX;;AAKA,QAAI,CAACnD,OAAL,EAAc;AACV,WAAK8W,aAAL,GAAqBzb,iBAAiB,CAAC,KAAD,EAAQm5B,IAAR,CAAtC;AACA,WAAKx0B,OAAL,CAAaqpB,WAAb,CAAyB,KAAKvS,aAA9B;AACH,KAHD,MAIK;AACD,WAAKA,aAAL,GAAqB9W,OAArB;AACArE,MAAAA,oBAAoB,CAAC,KAAKmb,aAAN,EAAqB3T,KAArB,CAApB;AACH;;AACD,SAAK2T,aAAL,CAAmB3T,KAAnB,CAAyBsxB,UAAzB,GAAsC,KAAKC,eAA3C;AACH,GA1BD;;AA2BA70B,EAAAA,OAAO,CAACtO,SAAR,CAAkB8c,WAAlB,GAAgC,YAAY;AACxC,SAAK3F,oBAAL;AACA/N,IAAAA,gBAAgB,CAAC,KAAKqF,OAAN,EAAe;AAC3BmD,MAAAA,KAAK,EAAE,WAAW,KAAKyD,YAAL,CAAkB,KAAKD,KAAvB,CAAX,GAA2C,WAA3C,GACD,KAAKC,YAAL,CAAkB,KAAKC,MAAvB,CADC,GACgC;AAFZ,KAAf,CAAhB;AAIH,GAND;;AAOAhH,EAAAA,OAAO,CAACtO,SAAR,CAAkBojC,mCAAlB,GAAwD,UAAUhX,MAAV,EAAkB;AACtE;AACA,QAAIiP,UAAU,GAAG;AACb,eAAS,KAAK5sB,OAAL,CAAagB,EAAb,GAAkB,2BADd;AAEb,eAAS,WAAW2c,MAAM,CAAChX,KAAlB,GAA0B,aAA1B,GAA0CgX,MAAM,CAAC9W,MAAjD,GAA0D,KAA1D,GAAkE;AAF9D,KAAjB;AAIA,QAAI7G,OAAO,GAAG3E,iBAAiB,CAAC,KAAD,EAAQuxB,UAAR,CAA/B;AACA,SAAK5sB,OAAL,CAAaqpB,WAAb,CAAyBrpB,OAAzB;AACH,GARD;;AASAH,EAAAA,OAAO,CAACtO,SAAR,CAAkBqjC,qBAAlB,GAA0C,UAAUjX,MAAV,EAAkBkX,WAAlB,EAA+B;AACrE,QAAIC,OAAO,GAAG,KAAKC,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,sBAAjC,EAAyD2c,MAAM,CAAChX,KAAhE,EAAuEgX,MAAM,CAAC9W,MAA9E,CAAd;AACAlL,IAAAA,oBAAoB,CAACm5B,OAAD,EAAUD,WAAV,CAApB;AACA,QAAIG,eAAe,GAAG15B,gBAAgB,CAAC,GAAD,EAAM;AACxC,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,uBADgB;AAExC,eAAS;AAF+B,KAAN,CAAtC;AAIA8zB,IAAAA,OAAO,CAACzL,WAAR,CAAoB2L,eAApB;AACA,QAAIR,IAAI,GAAG;AAAE,YAAM,KAAKx0B,OAAL,CAAagB,EAAb,GAAkB,kBAA1B;AAA8C,eAAS;AAAvD,KAAX;AACA,QAAIyzB,UAAU,GAAGn5B,gBAAgB,CAAC,GAAD,EAAMk5B,IAAN,CAAjC;AACAM,IAAAA,OAAO,CAACzL,WAAR,CAAoBoL,UAApB;AACA,SAAK3d,aAAL,CAAmBuS,WAAnB,CAA+ByL,OAA/B;AACH,GAZD;;AAaAj1B,EAAAA,OAAO,CAACtO,SAAR,CAAkB0jC,eAAlB,GAAoC,UAAUtX,MAAV,EAAkBkX,WAAlB,EAA+B;AAC/D,QAAIK,UAAU,GAAG,KAAKH,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,eAAjC,EAAkD2c,MAAM,CAAChX,KAAzD,EAAgEgX,MAAM,CAAC9W,MAAvE,CAAjB;AACAquB,IAAAA,UAAU,CAACC,YAAX,CAAwB,OAAxB,EAAiC,cAAjC;AACA,QAAIC,OAAO,GAAG95B,gBAAgB,CAAC,GAAD,EAAM;AAAE,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,WAA1B;AAAuC,eAAS,MAAhD;AAAwD,gBAAU;AAAlE,KAAN,CAA9B;AACA,QAAIq0B,IAAI,GAAG/5B,gBAAgB,CAAC,MAAD,EAAS;AAChC,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,YADQ;AACM,WAAK,GADX;AACgB,WAAK,GADrB;AAC0B,eAAS,MADnC;AAC2C,gBAAU;AADrD,KAAT,CAA3B;;AAGA,QAAIvK,gBAAgB,EAApB,EAAwB;AACpB4+B,MAAAA,IAAI,CAACF,YAAL,CAAkB,MAAlB,EAA0B,SAASG,QAAQ,CAACC,QAAlB,GAA6B,IAA7B,GAAoCD,QAAQ,CAACE,IAA7C,GAAoDF,QAAQ,CAACG,QAA7D,GACtB,GADsB,GAChB,KAAKz1B,OAAL,CAAagB,EADG,GACE,WAD5B;AAEH,KAHD,MAIK;AACDq0B,MAAAA,IAAI,CAACF,YAAL,CAAkB,MAAlB,EAA0B,UAAU,KAAKn1B,OAAL,CAAagB,EAAvB,GAA4B,WAAtD;AACH;;AACDo0B,IAAAA,OAAO,CAAC/L,WAAR,CAAoBgM,IAApB;AACAH,IAAAA,UAAU,CAAC7L,WAAX,CAAuB+L,OAAvB;AACA,SAAKte,aAAL,CAAmBuS,WAAnB,CAA+B6L,UAA/B;AACAx6B,IAAAA,eAAe,CAACw6B,UAAD,EAAa;AAAE,eAASL;AAAX,KAAb,CAAf;AACH,GAlBD;;AAmBAh1B,EAAAA,OAAO,CAACtO,SAAR,CAAkBmkC,kBAAlB,GAAuC,UAAU/X,MAAV,EAAkBkX,WAAlB,EAA+B;AAClE,QAAIjI,UAAU,GAAG;AACb,YAAM,KAAK5sB,OAAL,CAAagB,EAAb,GAAkB,mBADX;AAEb,eAAS,WAAW2c,MAAM,CAAChX,KAAlB,GAA0B,aAA1B,GAA0CgX,MAAM,CAAC9W,MAAjD,GAA0D,KAA1D,GAAkEguB;AAF9D,KAAjB;AAIA,SAAKc,eAAL,GAAuBt6B,iBAAiB,CAAC,KAAD,EAAQuxB,UAAR,CAAxC;;AACA,QAAI,KAAK7kB,IAAL,KAAc,KAAlB,EAAyB;AACrB,UAAI6tB,UAAU,GAAG,KAAKb,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,mBAAjC,EAAsD2c,MAAM,CAAChX,KAA7D,EAAoEgX,MAAM,CAAC9W,MAA3E,CAAjB;AACA+uB,MAAAA,UAAU,CAACzyB,KAAX,CAAiB,gBAAjB,IAAqC,MAArC;AACAyyB,MAAAA,UAAU,CAACT,YAAX,CAAwB,OAAxB,EAAiC,iBAAjC;AACA,UAAIU,YAAY,GAAGv6B,gBAAgB,CAAC,GAAD,EAAM;AAAE,cAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB;AAA1B,OAAN,CAAnC;AACA,UAAI80B,mBAAmB,GAAGx6B,gBAAgB,CAAC,GAAD,EAAM,EAAN,CAA1C;AACA,WAAKu6B,YAAL,GAAoBA,YAApB;AACAD,MAAAA,UAAU,CAACzyB,KAAX,CAAiB,gBAAjB,IAAqC,KAArC;AACA2yB,MAAAA,mBAAmB,CAACzM,WAApB,CAAgCwM,YAAhC;AACAD,MAAAA,UAAU,CAACvM,WAAX,CAAuByM,mBAAvB;AACA,WAAKH,eAAL,CAAqBtM,WAArB,CAAiCuM,UAAjC;AACH,KAXD,MAYK;AACD,WAAKC,YAAL,GAAoBhgC,cAAc,CAACkgC,YAAf,CAA4B,KAAK/1B,OAAL,CAAagB,EAAb,GAAkB,UAA9C,EAA0D2c,MAAM,CAAChX,KAAjE,EAAwEgX,MAAM,CAAC9W,MAA/E,CAApB;AACAlL,MAAAA,oBAAoB,CAAC,KAAKk6B,YAAN,EAAoB,qCAApB,CAApB;AACA,WAAKF,eAAL,CAAqBtM,WAArB,CAAiC,KAAKwM,YAAtC;AACH;;AACD,SAAK/e,aAAL,CAAmBuS,WAAnB,CAA+B,KAAKsM,eAApC;AACH,GAxBD;;AAyBA91B,EAAAA,OAAO,CAACtO,SAAR,CAAkB6f,UAAlB,GAA+B,YAAY;AACvC,QAAIyjB,WAAW,GAAG,yEAAlB;AACA,QAAIrJ,SAAS,GAAG9c,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAArC,CAAhB;AACA,QAAI2c,MAAM,GAAG6N,SAAS,CAACwK,qBAAV,EAAb;AACA,QAAIC,YAAY,GAAGh7B,gBAAgB,EAAnC;AACA,SAAK8R,QAAL,CAAcmpB,aAAd,GAA8BD,YAA9B;AACA,SAAKlpB,QAAL,CAAcopB,eAAd,CAA8BxY,MAAM,CAAChX,KAArC,EAA4CgX,MAAM,CAAC9W,MAAnD;AACA,SAAK0G,YAAL;AACA,QAAIa,oBAAoB,GAAG,gBAA3B;;AACA,QAAIvL,MAAM,CAACuL,oBAAD,CAAV,EAAkC;AAC9BvL,MAAAA,MAAM,CAACuL,oBAAD,CAAN,GAA+B,IAA/B;AACA,UAAIgoB,eAAe,GAAG1nB,QAAQ,CAACgH,cAAT,CAAwB,gBAAxB,CAAtB;AACA0gB,MAAAA,eAAe,CAAC/gC,MAAhB;AACH;;AACDyF,IAAAA,qBAAqB,GAdkB,CAevC;;AACA,SAAK85B,qBAAL,CAA2BjX,MAA3B,EAAmCkX,WAAnC;AACA,SAAKI,eAAL,CAAqBtX,MAArB,EAA6BkX,WAA7B;AACA,SAAKa,kBAAL,CAAwB/X,MAAxB,EAAgCkX,WAAhC;AACA,SAAKwB,eAAL,CAAqB1Y,MAArB,EAA6BkX,WAA7B;AACA,SAAKyB,sBAAL,CAA4B3Y,MAA5B,EAAoCkX,WAApC;AACA,SAAK0B,iBAAL,CAAuB5Y,MAAvB,EAA+BkX,WAA/B;AACA,SAAK2B,kBAAL,CAAwB7Y,MAAxB,EAAgCkX,WAAhC;AACA,SAAKF,mCAAL,CAAyChX,MAAzC;AACH,GAxBD;;AAyBA9d,EAAAA,OAAO,CAACtO,SAAR,CAAkBilC,kBAAlB,GAAuC,UAAU7Y,MAAV,EAAkBkX,WAAlB,EAA+B;AAClE,QAAI4B,UAAU,GAAGp7B,iBAAiB,CAAC,KAAD,EAAQ;AACtC,YAAM,KAAK2E,OAAL,CAAagB,EAAb,GAAkB,sBADc;AAEtC,eAAS,WAAW2c,MAAM,CAAChX,KAAlB,GAA0B,YAA1B,GAAyCgX,MAAM,CAAC9W,MAAhD,GAAyD,KAAzD,GAAiEguB;AAFpC,KAAR,CAAlC;AAIA,QAAI70B,OAAO,GAAG3E,iBAAiB,CAAC,KAAD,EAAQ;AACnC,YAAM,KAAK2E,OAAL,CAAagB,EAAb,GAAkB,yBADW;AAEnC,eAAS,WAAW2c,MAAM,CAAChX,KAAlB,GAA0B,YAA1B,GAAyCgX,MAAM,CAAC9W,MAAhD,GAAyD,KAAzD,GAAiEguB;AAFvC,KAAR,CAA/B;AAIA70B,IAAAA,OAAO,CAACm1B,YAAR,CAAqB,OAArB,EAA8B,oBAA9B;AACAsB,IAAAA,UAAU,CAACpN,WAAX,CAAuBrpB,OAAvB;AACA,QAAI02B,aAAa,GAAG,KAAK3B,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,qBAAjC,EAAwD2c,MAAM,CAAChX,KAA/D,EAAsEgX,MAAM,CAAC9W,MAA7E,CAApB;AACA6vB,IAAAA,aAAa,CAACvB,YAAd,CAA2B,OAA3B,EAAoC,iBAApC;AACAuB,IAAAA,aAAa,CAACvzB,KAAd,CAAoB,gBAApB,IAAwC,MAAxC;AACA,SAAKwzB,YAAL,GAAoBr7B,gBAAgB,CAAC,GAAD,EAAM;AAAE,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB;AAA1B,KAAN,CAApC;AACA,SAAK21B,YAAL,CAAkBxzB,KAAlB,CAAwB,iBAAxB,IAA6C,KAA7C;AACAuzB,IAAAA,aAAa,CAACrN,WAAd,CAA0B,KAAKsN,YAA/B;AACAF,IAAAA,UAAU,CAACpN,WAAX,CAAuBqN,aAAvB;AACA,SAAK5f,aAAL,CAAmBuS,WAAnB,CAA+BoN,UAA/B;AACA,QAAIG,WAAW,GAAGt7B,gBAAgB,CAAC,GAAD,EAAM;AAAE,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB;AAA1B,KAAN,CAAlC;AACA,SAAK21B,YAAL,CAAkBtN,WAAlB,CAA8BuN,WAA9B;AACAl8B,IAAAA,eAAe,CAACg8B,aAAD,EAAgB;AAAEvzB,MAAAA,KAAK,EAAE;AAAT,KAAhB,CAAf;AACH,GAtBD;;AAuBAtD,EAAAA,OAAO,CAACtO,SAAR,CAAkB+kC,sBAAlB,GAA2C,UAAU3Y,MAAV,EAAkBkX,WAAlB,EAA+B;AACtE,QAAIgC,WAAW,GAAG,KAAK9B,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,mBAAjC,EAAsD2c,MAAM,CAAChX,KAA7D,EAAoEgX,MAAM,CAAC9W,MAA3E,CAAlB;AACAgwB,IAAAA,WAAW,CAAC1B,YAAZ,CAAyB,OAAzB,EAAkC,sBAAlC;AACA,QAAI2B,aAAa,GAAGx7B,gBAAgB,CAAC,GAAD,EAAM;AACtC,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,eADc;AAEtC,eAAS,eAF6B;AAGtC,eAAS;AAH6B,KAAN,CAApC;AAKA61B,IAAAA,WAAW,CAACxN,WAAZ,CAAwByN,aAAxB;AACA,QAAIC,cAAc,GAAGz7B,gBAAgB,CAAC,GAAD,EAAM;AACvC,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,kBADe;AAEvC,eAAS,gBAF8B;AAGvC,eAAS;AAH8B,KAAN,CAArC;AAKA61B,IAAAA,WAAW,CAACxN,WAAZ,CAAwB0N,cAAxB;AACA,SAAKjgB,aAAL,CAAmBuS,WAAnB,CAA+BwN,WAA/B;AACAn8B,IAAAA,eAAe,CAACm8B,WAAD,EAAc;AAAE,eAAShC;AAAX,KAAd,CAAf;AACH,GAjBD;;AAkBAh1B,EAAAA,OAAO,CAACtO,SAAR,CAAkB8kC,eAAlB,GAAoC,UAAU1Y,MAAV,EAAkBkX,WAAlB,EAA+B;AAC/D,SAAKmC,SAAL,GAAiB37B,iBAAiB,CAAC,KAAD,EAAQ;AACtC,YAAM,KAAK2E,OAAL,CAAagB,EAAb,GAAkB,YADc;AAEtC,eAAS,WAAW2c,MAAM,CAAChX,KAAlB,GAA0B,aAA1B,GAA0CgX,MAAM,CAAC9W,MAAjD,GAA0D,+BAA1D,GACL,+CAHkC;AAItC,eAAS;AAJ6B,KAAR,CAAlC;AAMA,QAAIowB,YAAY,GAAG57B,iBAAiB,CAAC,KAAD,EAAQ;AACxC,YAAM,KAAK2E,OAAL,CAAagB,EAAb,GAAkB,gBADgB;AAExC,eAAS;AAF+B,KAAR,CAApC;AAIA,SAAKg2B,SAAL,CAAe3N,WAAf,CAA2B4N,YAA3B;AACA,SAAKngB,aAAL,CAAmBuS,WAAnB,CAA+B,KAAK2N,SAApC;AACH,GAbD;;AAcAn3B,EAAAA,OAAO,CAACtO,SAAR,CAAkBglC,iBAAlB,GAAsC,UAAU5Y,MAAV,EAAkBkX,WAAlB,EAA+B;AACjE,QAAIqC,cAAc,GAAG,KAAKnC,SAAL,CAAe,KAAK/0B,OAAL,CAAagB,EAAb,GAAkB,kBAAjC,EAAqD2c,MAAM,CAAChX,KAA5D,EAAmEgX,MAAM,CAAC9W,MAA1E,CAArB;AACA,QAAIswB,WAAW,GAAG77B,gBAAgB,CAAC,GAAD,EAAM;AAAE,YAAM,KAAK0E,OAAL,CAAagB,EAAb,GAAkB,cAA1B;AAA0C,eAAS;AAAnD,KAAN,CAAlC;AACAk2B,IAAAA,cAAc,CAAC7N,WAAf,CAA2B8N,WAA3B;AACA,SAAKxB,eAAL,CAAqBtM,WAArB,CAAiC6N,cAAjC;AACAx8B,IAAAA,eAAe,CAACw8B,cAAD,EAAiB;AAAE,eAAS,gBAAX;AAA6B,eAASrC;AAAtC,KAAjB,CAAf;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIh1B,EAAAA,OAAO,CAACtO,SAAR,CAAkBwjC,SAAlB,GAA8B,UAAU/zB,EAAV,EAAc2F,KAAd,EAAqBE,MAArB,EAA6B;AACvD,QAAIuwB,MAAM,GAAG1oB,QAAQ,CAAC2oB,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,CAAb;AACA38B,IAAAA,eAAe,CAAC08B,MAAD,EAAS;AAAE,YAAMp2B,EAAR;AAAY,eAAS2F,KAArB;AAA4B,gBAAUE;AAAtC,KAAT,CAAf;AACA,WAAOuwB,MAAP;AACH,GAJD;;AAKAv3B,EAAAA,OAAO,CAACtO,SAAR,CAAkB+lC,gBAAlB,GAAqC,YAAY;AAC7C,SAAK,IAAIjlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAIqQ,IAAI,GAAG,KAAKO,KAAL,CAAW5Q,CAAX,CAAX;;AACA,cAAQqQ,IAAI,CAACY,KAAL,CAAWC,IAAnB;AACI,aAAK,MAAL;AACIb,UAAAA,IAAI,CAACY,KAAL,CAAWi0B,SAAX,GACI70B,IAAI,CAACY,KAAL,CAAWA,KAAX,GAAmBZ,IAAI,CAACY,KAAL,CAAWA,KAA9B,GACMZ,IAAI,CAACY,KAAL,CAAWi0B,SAFrB;AAGA;;AACJ,aAAK,aAAL;AACI70B,UAAAA,IAAI,CAACY,KAAL,CAAWk0B,gBAAX,GACI90B,IAAI,CAACY,KAAL,CAAWA,KAAX,GAAmBZ,IAAI,CAACY,KAAL,CAAWA,KAA9B,GACMZ,IAAI,CAACY,KAAL,CAAWk0B,gBAFrB;AAGA;;AACJ,aAAK,MAAL;AACI90B,UAAAA,IAAI,CAACY,KAAL,CAAWm0B,SAAX,GACI/0B,IAAI,CAACY,KAAL,CAAWA,KAAX,GAAmBZ,IAAI,CAACY,KAAL,CAAWA,KAA9B,GACMZ,IAAI,CAACY,KAAL,CAAWm0B,SAFrB;AAGA;;AACJ,aAAK,OAAL;AACI/0B,UAAAA,IAAI,CAACY,KAAL,CAAWo0B,UAAX,GACIh1B,IAAI,CAACY,KAAL,CAAWA,KAAX,GAAmBZ,IAAI,CAACY,KAAL,CAAWA,KAA9B,GACMZ,IAAI,CAACY,KAAL,CAAWo0B,UAFrB;AAGA;;AACJ,aAAK,MAAL;AACIh1B,UAAAA,IAAI,CAACY,KAAL,CAAWq0B,WAAX,GACIj1B,IAAI,CAACY,KAAL,CAAWkB,OAAX,GAAqB9B,IAAI,CAACY,KAAL,CAAWkB,OAAhC,GACM9B,IAAI,CAACY,KAAL,CAAWq0B,WAFrB;AAGA;AAzBR;AA2BH;AACJ,GA/BD;;AAgCA93B,EAAAA,OAAO,CAACtO,SAAR,CAAkB8X,WAAlB,GAAgC,UAAUuuB,MAAV,EAAkB;AAC9C,SAAKN,gBAAL;;AACA,QAAI,CAAC,KAAKvnB,SAAV,EAAqB;AACjB,WAAK8nB,QAAL;AACH;;AACD,SAAKC,gBAAL;AACA,SAAKrvB,cAAL,CAAoBmvB,MAApB;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/3B,EAAAA,OAAO,CAACtO,SAAR,CAAkBumC,gBAAlB,GAAqC,YAAY;AAC7C,QAAIC,SAAS,GAAG,KAAK/hB,MAAL,CAAYhkB,MAAZ,GAAqB,CAArC,CAD6C,CACL;;AACxC,QAAI2R,UAAU,GAAG,EAAjB;AACA,QAAIhB,MAAM,GAAG,QAAb;AACA,QAAIC,cAAc,GAAGC,MAAM,IAAIA,MAAM,CAACF,MAAD,CAAhB,IAA4B,CAAC,KAAKG,kBAAL,CAAwBC,UAA1E;AACA,QAAIi1B,SAAS,GAAG,EAAhB;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAI7S,QAAQ,GAAG,EAAf;AACA,QAAI8S,MAAM,GAAG,EAAb;AACA,QAAI7lC,CAAC,GAAG,CAAR;AACA,QAAI8lC,kBAAkB,GAAG,EAAzB;AACA,QAAItmB,uBAAuB,GAAG,EAA9B;AACA,QAAIumB,gBAAgB,GAAG,EAAvB;AACA,QAAItmB,qBAAqB,GAAG,EAA5B;AACA,QAAIumB,WAAW,GAAG,EAAlB;AACA,QAAItmB,gBAAgB,GAAG,EAAvB;;AACA,QAAIxc,QAAQ,MAAMqN,cAAlB,EAAkC;AAC9Bu1B,MAAAA,kBAAkB,GAAG,KAAKp2B,sBAA1B;AACA8P,MAAAA,uBAAuB,GAAG,KAAK7P,2BAA/B;AACH;;AACD,SAAK,IAAI6D,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAK7C,KAA3B,EAAkC4C,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIV,GAAG,GAAGW,EAAE,CAACD,EAAD,CAAZ;AACAV,MAAAA,GAAG,CAACnE,EAAJ,GAASmE,GAAG,CAACnE,EAAJ,IAAUvD,QAAQ,EAA3B;AACA,WAAK66B,UAAL,CAAgBnzB,GAAhB,EAAqB4yB,SAArB;AACAC,MAAAA,SAAS,CAAC7yB,GAAG,CAACnE,EAAL,CAAT,GAAoBmE,GAApB;AACH;;AACD,SAAK,IAAI6B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKtD,UAA3B,EAAuCqD,EAAE,GAAGC,EAAE,CAACjV,MAA/C,EAAuDgV,EAAE,EAAzD,EAA6D;AACzD,UAAI7B,GAAG,GAAG8B,EAAE,CAACD,EAAD,CAAZ;AACA7B,MAAAA,GAAG,CAACnE,EAAJ,GAASmE,GAAG,CAACnE,EAAJ,IAAUvD,QAAQ,EAA3B;AACA,WAAK66B,UAAL,CAAgBnzB,GAAhB,EAAqB4yB,SAArB;AACAC,MAAAA,SAAS,CAAC7yB,GAAG,CAACnE,EAAL,CAAT,GAAoBmE,GAApB;AACH;;AACD,SAAK,IAAImC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKyO,MAA3B,EAAmC1O,EAAE,GAAGC,EAAE,CAACvV,MAA3C,EAAmDsV,EAAE,EAArD,EAAyD;AACrD,UAAIsS,KAAK,GAAGrS,EAAE,CAACD,EAAD,CAAd;;AACA,WAAK,IAAIY,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGyR,KAAK,CAACjC,OAA5B,EAAqCzP,EAAE,GAAGC,EAAE,CAACnW,MAA7C,EAAqDkW,EAAE,EAAvD,EAA2D;AACvD,YAAI/C,GAAG,GAAGgD,EAAE,CAACD,EAAD,CAAZ;;AACA,YAAI8vB,SAAS,CAAC7yB,GAAD,CAAb,EAAoB;AAChB,cAAI,EAAE6yB,SAAS,CAAC7yB,GAAD,CAAT,YAA0BlO,SAA5B,CAAJ,EAA4C;AACxC,gBAAI+gC,SAAS,CAAC7yB,GAAD,CAAT,CAAejC,QAAnB,EAA6B;AACzBg1B,cAAAA,MAAM,CAACrjC,IAAP,CAAYsQ,GAAZ;AACH,aAFD,MAGK,IAAK6yB,SAAS,CAAC7yB,GAAD,CAAT,CAAe7B,KAAf,YAAgCjN,SAAjC,IACL2hC,SAAS,CAAC7yB,GAAD,CAAT,CAAe7B,KAAf,CAAqBykB,QAArB,CAA8BC,UAA9B,CAAyCC,SADpC,IAEL+P,SAAS,CAAC7yB,GAAD,CAAT,CAAe7B,KAAf,CAAqBykB,QAArB,CAA8BC,UAA9B,CAAyCC,SAAzC,CAAmDj2B,MAAnD,GAA4D,CAF3D,EAE8D;AAC/DimC,cAAAA,SAAS,CAACD,SAAS,CAAC7yB,GAAD,CAAT,CAAenE,EAAhB,CAAT,GAA+BmE,GAA/B;AACH,aAJI,MAKA;AACD,mBAAKozB,SAAL,CAAeP,SAAS,CAAC7yB,GAAD,CAAxB,EAA+ByU,KAA/B;AACH;AACJ,WAZD,MAaK;AACD,gBAAI9V,SAAS,GAAGk0B,SAAS,CAAC7yB,GAAD,CAAzB;;AACA,gBAAIrB,SAAS,CAAC2iB,QAAV,IAAsB3iB,SAAS,CAAC4iB,QAApC,EAA8C;AAC1C,kBAAI8R,UAAU,GAAGR,SAAS,CAACl0B,SAAS,CAAC2iB,QAAX,CAA1B;AACA,kBAAIgS,UAAU,GAAGT,SAAS,CAACl0B,SAAS,CAAC4iB,QAAX,CAA1B;;AACA,kBAAI8R,UAAU,IAAIA,UAAU,CAACzvB,OAAzB,IAAoC0vB,UAApC,IAAkDA,UAAU,CAAC1vB,OAAjE,EAA0E;AACtE,qBAAK+e,cAAL,CAAoBkQ,SAAS,CAAC7yB,GAAD,CAA7B,EAAoCyU,KAApC;AACH,eAFD,MAGK;AACDjW,gBAAAA,UAAU,CAAC9O,IAAX,CAAgBmjC,SAAS,CAAC7yB,GAAD,CAAzB;AACH;AACJ,aATD,MAUK;AACD,mBAAK2iB,cAAL,CAAoBkQ,SAAS,CAAC7yB,GAAD,CAA7B,EAAoCyU,KAApC;AACH;AACJ;AACJ;AACJ;;AACD,UAAI,KAAKf,UAAT,EAAqB;AACjB,aAAK,IAAI1O,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKyO,UAAL,CAAgBwS,wBAAtC,EAAgElhB,EAAE,GAAGC,EAAE,CAACpY,MAAxE,EAAgFmY,EAAE,EAAlF,EAAsF;AAClF,cAAIhF,GAAG,GAAGiF,EAAE,CAACD,EAAD,CAAZ;AACA,eAAK2d,cAAL,CAAoB3iB,GAApB,EAAyByU,KAAzB,EAAgC,KAAhC;AACH;AACJ;AACJ;;AACD,SAAK,IAAIzN,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGrb,MAAM,CAACoT,IAAP,CAAY8zB,SAAZ,CAAtB,EAA8C9rB,EAAE,GAAGC,EAAE,CAACpa,MAAtD,EAA8Dma,EAAE,EAAhE,EAAoE;AAChE,UAAIhH,GAAG,GAAGiH,EAAE,CAACD,EAAD,CAAZ;AACA,WAAKob,UAAL,CAAgByQ,SAAS,CAAC7yB,GAAD,CAAzB;AACA,WAAK0T,UAAL,CAAgBqP,WAAhB,CAA4B8P,SAAS,CAAC7yB,GAAD,CAArC,EAA4C,IAA5C;AACH;;AACD,QAAIuzB,aAAa,GAAG,KAAKC,UAAL,CAAgBT,MAAhB,EAAwBF,SAAxB,CAApB;;AACA,SAAK,IAAIY,EAAE,GAAG,CAAT,EAAYC,eAAe,GAAGH,aAAnC,EAAkDE,EAAE,GAAGC,eAAe,CAAC7mC,MAAvE,EAA+E4mC,EAAE,EAAjF,EAAqF;AACjF,UAAIzzB,GAAG,GAAG0zB,eAAe,CAACD,EAAD,CAAzB;AACA,UAAIhf,KAAK,GAAG,KAAK5J,cAAL,CAAoBwZ,cAApB,CAAmCrkB,GAAnC,CAAZ;AACA,WAAKozB,SAAL,CAAeP,SAAS,CAAC7yB,GAAD,CAAxB,EAA+ByU,KAA/B;AACH;;AACD,SAAK,IAAIkf,EAAE,GAAG,CAAT,EAAYC,YAAY,GAAGp1B,UAAhC,EAA4Cm1B,EAAE,GAAGC,YAAY,CAAC/mC,MAA9D,EAAsE8mC,EAAE,EAAxE,EAA4E;AACxE,UAAIh1B,SAAS,GAAGi1B,YAAY,CAACD,EAAD,CAA5B;AACA,UAAIlf,KAAK,GAAG,KAAK5J,cAAL,CAAoBwZ,cAApB,CAAmC1lB,SAAS,CAAC9C,EAA7C,CAAZ;AACA,WAAK8mB,cAAL,CAAoBhkB,SAApB,EAA+B8V,KAA/B;AACH;;AACD,QAAIrkB,QAAQ,MAAMqN,cAAlB,EAAkC;AAC9B,WAAK,IAAIo2B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKh2B,KAA3B,EAAkC+1B,EAAE,GAAGC,EAAE,CAACjnC,MAA1C,EAAkDgnC,EAAE,EAApD,EAAwD;AACpD,YAAI7zB,GAAG,GAAG8zB,EAAE,CAACD,EAAD,CAAZ;AACAZ,QAAAA,gBAAgB,CAACvjC,IAAjB,CAAsB6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAjC;AACH;;AACD,WAAK,IAAI83B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKx1B,UAA3B,EAAuCu1B,EAAE,GAAGC,EAAE,CAACnnC,MAA/C,EAAuDknC,EAAE,EAAzD,EAA6D;AACzD,YAAI/zB,GAAG,GAAGg0B,EAAE,CAACD,EAAD,CAAZ;AACApnB,QAAAA,qBAAqB,CAACjd,IAAtB,CAA2B6I,WAAW,CAACyH,GAAD,EAAM/D,SAAN,EAAiBA,SAAjB,EAA4B,IAA5B,CAAtC;AACH;;AACD,WAAK4O,cAAL,CAAoBiC,gBAApB,CAAqCkmB,kBAArC,EAAyDC,gBAAzD,EAA2EC,WAA3E;AACA,WAAKroB,cAAL,CAAoBiC,gBAApB,CAAqCJ,uBAArC,EAA8DC,qBAA9D,EAAqFC,gBAArF;;AACA,UAAI,EAAE,KAAKlR,aAAL,GAAqB5I,YAAY,CAACia,WAApC,CAAJ,EAAsD;AAClD,YAAIrB,aAAa,GAAG,UAApB;AACA,YAAIC,aAAa,GAAG;AAAE7N,UAAAA,KAAK,EAAEo1B,WAAT;AAAsB10B,UAAAA,UAAU,EAAEoO;AAAlC,SAApB;AACA,YAAI5M,GAAG,GAAG;AACN,wBAAc,wBADR;AAEN,wBAAc2L;AAFR,SAAV;AAIAjO,QAAAA,MAAM,CAACgO,aAAD,CAAN,CAAsBE,sBAAtB,CAA6C5L,GAA7C,EAAkD,IAAlD;AACH;AACJ;AACJ,GAhHD;;AAiHAtF,EAAAA,OAAO,CAACtO,SAAR,CAAkBonC,UAAlB,GAA+B,UAAUS,OAAV,EAAmBpB,SAAnB,EAA8B;AACzD,QAAIqB,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAI72B,KAAJ;AACA,QAAImpB,SAAJ;AACA,QAAIv5B,CAAJ;AACA,QAAIuY,CAAJ;;AACA,SAAKvY,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG+mC,OAAO,CAACpnC,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCoQ,MAAAA,KAAK,GAAG22B,OAAO,CAAC/mC,CAAD,CAAf;AACAu5B,MAAAA,SAAS,GAAGoM,SAAS,CAACv1B,KAAD,CAArB;AACA,UAAIC,IAAI,GAAG,KAAK,CAAhB;;AACA,UAAIkpB,SAAS,IAAIA,SAAS,CAAC1oB,QAAV,CAAmBlR,MAApC,EAA4C;AACxC,aAAK4Y,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGghB,SAAS,CAAC1oB,QAAV,CAAmBlR,MAAnC,EAA2C4Y,CAAC,EAA5C,EAAgD;AAC5ClI,UAAAA,IAAI,GAAGkpB,SAAS,CAAC1oB,QAAV,CAAmB0H,CAAnB,CAAP;;AACA,cAAIwuB,OAAO,CAACzc,OAAR,CAAgBja,IAAhB,IAAwB,CAAC,CAAzB,IAA+B22B,OAAO,CAAC1c,OAAR,CAAgBja,IAAhB,MAA0B,CAAC,CAA1D,IACC42B,SAAS,CAAC3c,OAAV,CAAkBja,IAAlB,MAA4B,CAAC,CADlC,EACsC;AAClC22B,YAAAA,OAAO,CAAC9S,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqB7jB,IAArB;AACH;AACJ;AACJ;;AACD,UAAI22B,OAAO,CAAC1c,OAAR,CAAgBla,KAAhB,MAA2B,CAAC,CAAhC,EAAmC;AAC/B62B,QAAAA,SAAS,CAACzkC,IAAV,CAAe4N,KAAf;AACH;AACJ;;AACD42B,IAAAA,OAAO,GAAGA,OAAO,CAACpb,MAAR,CAAeqb,SAAf,CAAV;AACA,WAAOD,OAAP;AACH,GA1BD;;AA2BAx5B,EAAAA,OAAO,CAACtO,SAAR,CAAkB+mC,UAAlB,GAA+B,UAAUnzB,GAAV,EAAe4yB,SAAf,EAA0B;AACrD,QAAIne,KAAJ;;AACA,QAAIme,SAAJ,EAAe;AACXne,MAAAA,KAAK,GAAG,KAAK5J,cAAL,CAAoBwZ,cAApB,CAAmCrkB,GAAG,CAACnE,EAAvC,CAAR;AACH;;AACD,QAAI,CAAC+2B,SAAD,IAAc,CAACne,KAAnB,EAA0B;AACtB,UAAI,KAAK5B,WAAL,CAAiBL,OAAjB,CAAyBgF,OAAzB,CAAiCxX,GAAG,CAACnE,EAArC,MAA6C,CAAC,CAAlD,EAAqD;AACjD,aAAKgX,WAAL,CAAiBL,OAAjB,CAAyB9iB,IAAzB,CAA8BsQ,GAAG,CAACnE,EAAlC;AACH;AACJ;;AACD,SAAKu4B,SAAL,CAAe3f,KAAK,IAAI,KAAK5B,WAA7B,EAA0C7S,GAA1C;AACH,GAXD;;AAYAtF,EAAAA,OAAO,CAACtO,SAAR,CAAkBiY,WAAlB,GAAgC,UAAUvD,OAAV,EAAmB;AAC/C,SAAK,IAAIJ,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAAC+P,MAApB,CAAtB,EAAmDnQ,EAAE,GAAGC,EAAE,CAAC9T,MAA3D,EAAmE6T,EAAE,EAArE,EAAyE;AACrE,UAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACA,UAAIkU,WAAW,GAAG,KAAK/D,MAAL,CAAYpkB,GAAZ,EAAiB+lB,OAAnC;;AACA,WAAK,IAAI3Q,EAAE,GAAG,CAAT,EAAYwyB,aAAa,GAAGzf,WAAjC,EAA8C/S,EAAE,GAAGwyB,aAAa,CAACxnC,MAAjE,EAAyEgV,EAAE,EAA3E,EAA+E;AAC3E,YAAI7B,GAAG,GAAGq0B,aAAa,CAACxyB,EAAD,CAAvB;AACA,YAAItE,IAAI,GAAG,KAAKoC,SAAL,CAAeK,GAAf,CAAX;;AACA,YAAIc,OAAO,CAAC+P,MAAR,CAAepkB,GAAf,EAAoBy1B,OAApB,KAAgCjmB,SAApC,EAA+C;AAC3C,eAAKqmB,uBAAL,CAA6B/kB,IAAI,CAACqG,OAAlC,EAA2CrG,IAA3C,EAAiDuD,OAAO,CAAC+P,MAAR,CAAepkB,GAAf,EAAoBy1B,OAArE;AACH,SAFD,MAGK,IAAIphB,OAAO,CAAC+P,MAAR,CAAepkB,GAAf,EAAoBw1B,IAApB,KAA6B,IAAjC,EAAuC;AACxC,eAAKnP,QAAL,CAAcvV,IAAd;AACH;AACJ;;AACD,UAAIuD,OAAO,CAAC+P,MAAR,CAAepkB,GAAf,EAAoBw1B,IAApB,KAA6BhmB,SAAjC,EAA4C;AACxC,aAAK4U,MAAL,CAAYpkB,GAAZ,EAAiBw1B,IAAjB,GAAwBnhB,OAAO,CAAC+P,MAAR,CAAepkB,GAAf,EAAoBw1B,IAA5C;AACH;AACJ;;AACD,QAAI,KAAKrf,IAAL,KAAc,KAAlB,EAAyB;AACrB,WAAKC,mBAAL;AACH;AACJ,GArBD;;AAsBAnI,EAAAA,OAAO,CAACtO,SAAR,CAAkBmY,oBAAlB,GAAyC,UAAUzD,OAAV,EAAmB;AACxD,QAAIwzB,IAAI,GAAI,CAAC,KAAK1sB,QAAL,CAAc2F,gBAAf,GAAkCzM,OAAO,CAACiG,cAAR,CAAuBwG,gBAAzD,IAA6E,CAAzF;AACA,QAAIgnB,IAAI,GAAI,KAAK3sB,QAAL,CAAc0F,cAAd,GAA+BxM,OAAO,CAACiG,cAAR,CAAuBuG,cAAtD,IAAwE,CAApF;AACA,QAAIrM,QAAQ,GAAG;AACXuzB,MAAAA,cAAc,EAAE,KAAKztB,cAAL,CAAoBuG,cADzB;AACyCmnB,MAAAA,gBAAgB,EAAE,KAAK1tB,cAAL,CAAoBwG,gBAD/E;AAEXmnB,MAAAA,cAAc,EAAE,KAAK3tB,cAAL,CAAoBwjB,cAFzB;AAEyCoK,MAAAA,aAAa,EAAE,KAAK5tB,cAAL,CAAoBujB,aAF5E;AAGXsK,MAAAA,WAAW,EAAE,KAAKhtB,QAAL,CAAcV;AAHhB,KAAf;;AAKA,QAAIotB,IAAI,KAAK,CAAT,IAAcC,IAAI,KAAK,CAA3B,EAA8B;AAC1B,WAAKnY,GAAL,CAASkY,IAAT,EAAeC,IAAf;AACH;;AACD,QAAIvzB,QAAQ,GAAG;AACXwzB,MAAAA,cAAc,EAAE,KAAKztB,cAAL,CAAoBuG,cADzB;AACyCmnB,MAAAA,gBAAgB,EAAE,KAAK1tB,cAAL,CAAoBwG,gBAD/E;AAEXmnB,MAAAA,cAAc,EAAE,KAAK3tB,cAAL,CAAoBwjB,cAFzB;AAEyCoK,MAAAA,aAAa,EAAE,KAAK5tB,cAAL,CAAoBujB,aAF5E;AAGXsK,MAAAA,WAAW,EAAE,KAAKhtB,QAAL,CAAcV;AAHhB,KAAf;AAKA,QAAI2tB,SAAS,GAAG,OAAhB;;AACA,QAAI,KAAKpwB,WAAL,GAAmBpR,UAAU,CAACyhC,aAAlC,EAAiD;AAC7CD,MAAAA,SAAS,GAAG,UAAZ;AACH;;AACD,QAAIr1B,GAAG,GAAG;AACNyB,MAAAA,QAAQ,EAAEA,QADJ;AAEND,MAAAA,QAAQ,EAAEA,QAFJ;AAEcoY,MAAAA,MAAM,EAAE,IAFtB;AAGN2b,MAAAA,QAAQ,EAAEF;AAHJ,KAAV;;AAKA,QAAIzkC,QAAQ,MAAM,KAAK4kC,YAAvB,EAAqC;AACjCx1B,MAAAA,GAAG,GAAG;AACFyB,QAAAA,QAAQ,EAAEA,QADR;AAEFD,QAAAA,QAAQ,EAAEA,QAFR;AAGFi0B,QAAAA,QAAQ,EAAE,KAAKp6B,OAAL,CAAagB,EAHrB;AAIFk5B,QAAAA,QAAQ,EAAEF;AAJR,OAAN;AAMH;;AACD,SAAKnyB,YAAL,CAAkBxP,YAAY,CAAC8hC,YAA/B,EAA6Cx1B,GAA7C;AACA,SAAKqL,cAAL,CAAoBqqB,cAApB,CAAmC,IAAnC;;AACA,QAAI,KAAKtyB,IAAL,KAAc,QAAd,IAA2B,KAAKkB,WAAL,GAAmB/Q,kBAAkB,CAACoiC,cAArE,EAAsF;AAClF,WAAKtyB,mBAAL;AACH;AACJ,GAtCD;;AAuCAnI,EAAAA,OAAO,CAACtO,SAAR,CAAkBsmC,QAAlB,GAA6B,YAAY;AACrC,QAAI/0B,kBAAkB,GAAG,KAAKA,kBAAL,CAAwBuR,WAAxB,IAAuC,KAAKvR,kBAAL,CAAwBC,UAAxF;AACA,QAAIw3B,OAAO,GAAG,aAAd;;AACA,QAAI,KAAKpU,iBAAL,IAA0B,EAAE,KAAKvc,WAAL,GAAmBpR,UAAU,CAACqR,eAAhC,CAA9B,EAAgF;AAC5E,UAAI/G,kBAAkB,IAAI,KAAKA,kBAAL,CAAwB4R,oBAAxB,CAA6CL,WAAvE,EAAoF;AAChF,YAAIA,WAAW,GAAG,KAAKvR,kBAAL,CAAwBuR,WAAxB,IAAuC,KAAKvR,kBAAL,CAAwBC,UAAjF;AACA,aAAKE,KAAL,GAAa,KAAKu3B,YAAL,CAAkBnmB,WAAlB,EAA+B,IAA/B,CAAb;AACA,aAAK1Q,UAAL,GAAkB,KAAK62B,YAAL,CAAkB,KAAK13B,kBAAL,CAAwB4R,oBAAxB,CAA6CL,WAA/D,EAA4E,KAA5E,CAAlB;AACH,OAJD,MAKK,IAAIvR,kBAAkB,IAAIA,kBAAkB,CAACC,UAAzC,KACJD,kBAAkB,CAACC,UAAnB,CAA8B03B,GAA9B,IAAsC33B,kBAAkB,CAACy3B,OAAD,CAAlB,KAAgC,eAAhC,IACnC,CAACz3B,kBAAkB,CAACC,UAAnB,CAA8B03B,GAF9B,CAAJ,EAEyC;AAC1C,aAAKtU,iBAAL,CAAuBuU,UAAvB,CAAkC,KAAK53B,kBAAvC,EAA2D,IAA3D;AACH,OAJI,MAKA;AACD,aAAKqjB,iBAAL,CAAuB0R,QAAvB,CAAgC,KAAK/0B,kBAArC,EAAyD,IAAzD;AACH;AACJ;AACJ,GAlBD;;AAmBAjD,EAAAA,OAAO,CAACtO,SAAR,CAAkBipC,YAAlB,GAAiC,UAAUz3B,UAAV,EAAsBuiB,MAAtB,EAA8B;AAC3D,QAAIriB,KAAK,GAAG,EAAZ;AACA,QAAI5Q,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0Q,UAAU,CAAC/Q,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,UAAIsoC,GAAG,GAAG53B,UAAU,CAAC1Q,CAAD,CAApB;AACA,UAAIqQ,IAAI,GAAG4iB,MAAM,GAAG,KAAKsV,QAAL,CAAcD,GAAd,EAAmB,IAAnB,CAAH,GAA8B,KAAKC,QAAL,CAAcD,GAAd,EAAmB,KAAnB,CAA/C;;AACA,UAAIj4B,IAAI,IAAIA,IAAI,CAAC1B,EAAb,KAAoB,CAAC9H,cAAc,CAAC+J,KAAD,EAAQP,IAAI,CAAC1B,EAAb,CAAf,IAAmC,CAAC9H,cAAc,CAAC+J,KAAD,EAAQP,IAAI,CAAC1B,EAAb,CAAtE,CAAJ,EAA6F;AACzFiC,QAAAA,KAAK,CAACpO,IAAN,CAAW6N,IAAX;AACH;AACJ;;AACD,WAAQO,KAAR;AACH,GAXD;;AAYApD,EAAAA,OAAO,CAACtO,SAAR,CAAkBqpC,QAAlB,GAA6B,UAAUD,GAAV,EAAerV,MAAf,EAAuB;AAChD,QAAIjzB,CAAJ;AACA,QAAIwoC,MAAM,GAAGvV,MAAM,GAAG,KAAKxiB,kBAAR,GAA6B,KAAKA,kBAAL,CAAwB4R,oBAAxE;AACA,QAAIlP,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAACxE,EAAL,GAAU25B,GAAG,CAACE,MAAM,CAAC75B,EAAR,CAAH,GAAiB25B,GAAG,CAACE,MAAM,CAAC75B,EAAR,CAApB,GAAkCvD,QAAQ,EAApD;;AACA,QAAIo9B,MAAM,CAACpU,QAAX,EAAqB;AACjBjhB,MAAAA,IAAI,CAACihB,QAAL,GAAgBkU,GAAG,CAACE,MAAM,CAACpU,QAAR,CAAnB;AACH;;AACD,QAAIoU,MAAM,CAACnU,QAAX,EAAqB;AACjBlhB,MAAAA,IAAI,CAACkhB,QAAL,GAAgBiU,GAAG,CAACE,MAAM,CAACnU,QAAR,CAAnB;AACH;;AACD,QAAIiU,GAAG,CAACE,MAAM,CAACC,YAAR,CAAH,IAA4BH,GAAG,CAACE,MAAM,CAACE,YAAR,CAAnC,EAA0D;AACtDv1B,MAAAA,IAAI,CAAC6iB,WAAL,GAAmB;AAAE,aAAK9jB,MAAM,CAACo2B,GAAG,CAACE,MAAM,CAACC,YAAR,CAAJ,CAAb;AAAyC,aAAKv2B,MAAM,CAACo2B,GAAG,CAACE,MAAM,CAACE,YAAR,CAAJ;AAApD,OAAnB;AACH;;AACD,QAAIJ,GAAG,CAACE,MAAM,CAACG,YAAR,CAAH,IAA4BL,GAAG,CAACE,MAAM,CAACI,YAAR,CAAnC,EAA0D;AACtDz1B,MAAAA,IAAI,CAAC2d,WAAL,GAAmB;AAAE,aAAK5e,MAAM,CAACo2B,GAAG,CAACE,MAAM,CAACG,YAAR,CAAJ,CAAb;AAAyC,aAAKz2B,MAAM,CAACo2B,GAAG,CAACE,MAAM,CAACI,YAAR,CAAJ;AAApD,OAAnB;AACH;;AACD,QAAIJ,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,IAAkCL,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+BlpC,MAA/B,GAAwC,CAA9E,EAAiF;AAC7E,WAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwoC,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+BlpC,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxDmT,QAAAA,IAAI,CAACq1B,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+B7oC,CAA/B,CAAD,CAAJ,GAA0CsoC,GAAG,CAACE,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+B7oC,CAA/B,CAAD,CAA7C;AACH;AACJ;;AACD,WAAOmT,IAAP;AACH,GAvBD;;AAwBA3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBgnC,SAAlB,GAA8B,UAAUpzB,GAAV,EAAeyU,KAAf,EAAsB;AAChD,SAAK+W,oBAAL,GAA4B,IAA5B;AACA,SAAKpJ,UAAL,CAAgBpiB,GAAhB,EAAqByU,KAArB;AACA,SAAK+W,oBAAL,GAA4B,KAA5B;AACH,GAJD;;AAKA9wB,EAAAA,OAAO,CAACtO,SAAR,CAAkBu2B,cAAlB,GAAmC,UAAU3iB,GAAV,EAAeyU,KAAf,EAAsBuhB,cAAtB,EAAsC;AACrE,SAAKxK,oBAAL,GAA4B,IAA5B;AACA,SAAKpJ,UAAL,CAAgBpiB,GAAhB,EAAqByU,KAArB,EAA4BuhB,cAA5B;AACA,SAAKzT,WAAL,CAAiBviB,GAAjB;AACA,SAAKwrB,oBAAL,GAA4B,KAA5B;AACH,GALD;;AAMA9wB,EAAAA,OAAO,CAACtO,SAAR,CAAkBgoC,SAAlB,GAA8B,UAAU3f,KAAV,EAAiBzU,GAAjB,EAAsB;AAChD;AACA,QAAI8Q,YAAY,GAAG2D,KAAnB;;AACA,QAAKzU,GAAD,CAAMyV,MAAN,KAAiB,CAAC,CAAtB,EAAyB;AACrB,aAAO3E,YAAY,CAACC,WAAb,CAAyBD,YAAY,CAACmlB,YAAb,GAA4B,CAArD,CAAP,EAAgE;AAC5DxhB,QAAAA,KAAK,CAACwhB,YAAN;AACH;;AACDj2B,MAAAA,GAAG,CAACyV,MAAJ,GAAa,EAAE3E,YAAY,CAACmlB,YAA5B;AACH,KALD,MAMK;AACD,UAAI5zB,KAAK,GAAGrC,GAAG,CAACyV,MAAhB;;AACA,UAAI3E,YAAY,CAACC,WAAb,CAAyB1O,KAAzB,CAAJ,EAAqC;AACjC,YAAI6zB,WAAW,GAAGtqC,MAAM,CAACoT,IAAP,CAAY8R,YAAY,CAACC,WAAzB,EAAsClkB,MAAxD;AACA,YAAI4Y,CAAC,GAAG,CAAR;;AACA,aAAK,IAAIvY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgpC,WAApB,EAAiChpC,CAAC,EAAlC,EAAsC;AAClC,cAAIA,CAAC,KAAKmV,KAAV,EAAiB;AACb,iBAAK,IAAI8zB,GAAG,GAAGD,WAAf,EAA4BC,GAAG,GAAG9zB,KAAlC,EAAyC8zB,GAAG,EAA5C,EAAgD;AAC5CrlB,cAAAA,YAAY,CAACC,WAAb,CAAyBolB,GAAzB,IAAgCrlB,YAAY,CAACC,WAAb,CAAyBolB,GAAG,GAAG,CAA/B,CAAhC;;AACA,kBAAI,KAAKx2B,SAAL,CAAemR,YAAY,CAACC,WAAb,CAAyBolB,GAAzB,CAAf,CAAJ,EAAmD;AAC/C,qBAAKx2B,SAAL,CAAemR,YAAY,CAACC,WAAb,CAAyBolB,GAAzB,CAAf,EAA8C1gB,MAA9C,GAAuD0gB,GAAvD;AACH;AACJ;;AACDrlB,YAAAA,YAAY,CAACC,WAAb,CAAyB7jB,CAAzB,IAA8B8S,GAAG,CAACnE,EAAlC;AACH;;AACD4J,UAAAA,CAAC;AACJ;AACJ;AACJ;AACJ,GA5BD;;AA6BA/K,EAAAA,OAAO,CAACtO,SAAR,CAAkB8f,uBAAlB,GAA4C,YAAY;AACpD;AACA,SAAK,IAAIhf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,UAAI,KAAK2jB,MAAL,CAAY3jB,CAAZ,EAAeuoB,MAAf,KAA0B,CAAC,CAA/B,EAAkC;AAC9B,YAAIxT,IAAI,GAAG,KAAK4O,MAAL,CAAY3jB,CAAZ,CAAX;AACA,aAAK2jB,MAAL,CAAY3jB,CAAZ,IAAiB,KAAK2jB,MAAL,CAAY,KAAKA,MAAL,CAAY3jB,CAAZ,EAAeuoB,MAA3B,CAAjB;AACA,aAAK5E,MAAL,CAAY5O,IAAI,CAACwT,MAAjB,IAA2BxT,IAA3B;AACH;AACJ;;AACD,SAAK,IAAIvB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKkQ,MAA3B,EAAmCnQ,EAAE,GAAGC,EAAE,CAAC9T,MAA3C,EAAmD6T,EAAE,EAArD,EAAyD;AACrD,UAAI+T,KAAK,GAAG9T,EAAE,CAACD,EAAD,CAAd;AACA+T,MAAAA,KAAK,CAACgB,MAAN,GAAehB,KAAK,CAACgB,MAAN,KAAiB,CAAC,CAAlB,GAAsBhB,KAAK,CAACgB,MAA5B,GAAqC,KAAK5E,MAAL,CAAY2G,OAAZ,CAAoB/C,KAApB,CAApD;AACA,WAAKhK,gBAAL,CAAsBgK,KAAK,CAACgB,MAA5B,IAAsChB,KAAK,CAAC5Y,EAA5C;AACH;;AACD,SAAK,IAAI3O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,WAAK,IAAIuY,CAAC,GAAGvY,CAAC,GAAG,CAAjB,EAAoBuY,CAAC,GAAG,KAAKoL,MAAL,CAAYhkB,MAApC,EAA4C4Y,CAAC,EAA7C,EAAiD;AAC7C,YAAI,KAAKoL,MAAL,CAAY3jB,CAAZ,EAAeuoB,MAAf,GAAwB,KAAK5E,MAAL,CAAYpL,CAAZ,EAAegQ,MAA3C,EAAmD;AAC/C,cAAIxT,IAAI,GAAG,KAAK4O,MAAL,CAAY3jB,CAAZ,CAAX;AACA,eAAK2jB,MAAL,CAAY3jB,CAAZ,IAAiB,KAAK2jB,MAAL,CAAYpL,CAAZ,CAAjB;AACA,eAAKoL,MAAL,CAAYpL,CAAZ,IAAiBxD,IAAjB;AACH;AACJ;AACJ;;AACD,QAAI,KAAK4O,MAAL,CAAYhkB,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,UAAIupC,YAAY,GAAG;AACfv6B,QAAAA,EAAE,EAAE,eADW;AACMqmB,QAAAA,OAAO,EAAE,IADf;AACqBD,QAAAA,IAAI,EAAE,KAD3B;AACkCzP,QAAAA,OAAO,EAAE,EAD3C;AAC+CiD,QAAAA,MAAM,EAAE,CADvD;AAEfwgB,QAAAA,YAAY,EAAE,CAAC,CAFA;AAEGllB,QAAAA,WAAW,EAAE;AAFhB,OAAnB;AAIA,WAAKlG,cAAL,CAAoB8J,QAApB,CAA6ByhB,YAA7B,EAA2C,IAA3C,EAAiD,IAAjD;AACH;;AACD,SAAK7hB,cAAL,CAAoB,KAAK1D,MAAL,CAAY,KAAKA,MAAL,CAAYhkB,MAAZ,GAAqB,CAAjC,EAAoCgP,EAAxD;AACH,GA/BD;AAgCA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkB65B,SAAlB,GAA8B,YAAY;AACtC,SAAKtkB,YAAL,CAAkBskB,SAAlB;AACH,GAFD;;AAGAvrB,EAAAA,OAAO,CAACtO,SAAR,CAAkBiqC,gBAAlB,GAAqC,UAAUr2B,GAAV,EAAeyU,KAAf,EAAsBuhB,cAAtB,EAAsC;AACvE,QAAIA,cAAJ,EAAoB;AAChB,UAAIzd,wBAAwB,GAAG,KAAK1N,cAAL,CAAoB0N,wBAApB,CAA6Ctc,SAA7C,EAAwDA,SAAxD,EAAmE+D,GAAG,CAAC4D,OAAJ,CAAY4U,MAA/E,CAA/B;;AACA,WAAK,IAAItrB,CAAC,GAAG,CAAR,EAAWopC,CAAC,GAAG1qC,MAAM,CAACoT,IAAP,CAAYyV,KAAK,CAAC1D,WAAlB,CAApB,EAAoD7jB,CAAC,GAAGopC,CAAC,CAACzpC,MAA1D,EAAkEK,CAAC,EAAnE,EAAuE;AACnE,YAAIunB,KAAK,CAAC1D,WAAN,CAAkBulB,CAAC,CAACppC,CAAD,CAAnB,KAA2BunB,KAAK,CAAC1D,WAAN,CAAkBulB,CAAC,CAACppC,CAAD,CAAnB,MAA4B8S,GAAG,CAACnE,EAA/D,EAAmE;AAC/D,iBAAO4Y,KAAK,CAAC1D,WAAN,CAAkBulB,CAAC,CAACppC,CAAD,CAAnB,CAAP;AACH;AACJ;;AACDunB,MAAAA,KAAK,CAAC1D,WAAN,CAAkB/Q,GAAG,CAACyV,MAAtB,IAAgCzV,GAAG,CAACnE,EAApC;;AACA,UAAI,CAAC0c,wBAAL,EAA+B;AAC3B,YAAIhb,IAAI,GAAGyC,GAAG,YAAY/O,IAAf,GAAsB,KAAK6M,KAA3B,GAAmC,KAAKU,UAAnD;;AACA,aAAK,IAAItR,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIqQ,IAAI,CAAC1Q,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,cAAIqQ,IAAI,CAACrQ,CAAD,CAAJ,IAAW8S,GAAG,CAACnE,EAAJ,KAAW0B,IAAI,CAACrQ,CAAD,CAAJ,CAAQ2O,EAAlC,EAAsC;AAClC0B,YAAAA,IAAI,CAAC6jB,MAAL,CAAYl0B,CAAZ,EAAe,CAAf;AACH;AACJ;;AACD,eAAOunB,KAAK,CAAC1D,WAAN,CAAkB/Q,GAAG,CAACyV,MAAtB,CAAP;AACH;AACJ;AACJ,GAnBD;AAoBA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/a,EAAAA,OAAO,CAACtO,SAAR,CAAkBg2B,UAAlB,GAA+B,UAAUpiB,GAAV,EAAeyU,KAAf,EAAsBuhB,cAAtB,EAAsC7hB,KAAtC,EAA6C;AACxE,QAAI6hB,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,MAAAA,cAAc,GAAG,IAAjB;AAAwB;;AACzD,QAAIh2B,GAAG,KAAK/D,SAAZ,EAAuB;AACnB,UAAI+5B,cAAJ,EAAoB;AAChB,YAAI,CAACvhB,KAAL,EAAY;AACR,eAAK0e,UAAL,CAAgBnzB,GAAhB,EAAqB,KAArB;AACAyU,UAAAA,KAAK,GAAG,KAAK5B,WAAb;AACH,SAJe,CAKhB;;;AACA,YAAI7S,GAAG,YAAY/O,IAAf,IAAuB+O,GAAG,YAAYlO,SAA1C,EAAqD;AACjD,eAAKsiC,SAAL,CAAe3f,KAAf,EAAsBzU,GAAtB;AACH;AACJ;;AACD,UAAIA,GAAG,YAAY/O,IAAnB,EAAyB;AACrB,YAAI+kC,cAAJ,EAAoB;AAChB,cAAIh2B,GAAG,CAACnE,EAAJ,KAAW,QAAf,EAAyB;AACrB,gBAAI06B,WAAW,GAAG99B,WAAW,CAAC,KAAK+9B,eAAN,CAA7B;;AACA,gBAAID,WAAJ,EAAiB;AACb,kBAAIE,QAAQ,GAAGF,WAAW,CAACv2B,GAAD,EAAM,IAAN,CAA1B;;AACA,kBAAIy2B,QAAQ,IAAIA,QAAQ,CAACjxB,KAAzB,EAAgC;AAC5B,qBAAK,IAAItY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGupC,QAAQ,CAACjxB,KAAT,CAAe3Y,MAAnC,EAA2CK,CAAC,EAA5C,EAAgD;AAC5CupC,kBAAAA,QAAQ,CAACjxB,KAAT,CAAetY,CAAf,EAAkB6S,OAAlB,GAA4B,EAA5B;AACA02B,kBAAAA,QAAQ,CAACjxB,KAAT,CAAetY,CAAf,EAAkB4S,QAAlB,GAA6B,EAA7B;AACH;AACJ;;AACD,kBAAI22B,QAAQ,IAAIA,QAAQ,KAAKz2B,GAA7B,EAAkC;AAC9BxH,gBAAAA,YAAY,CAACi+B,QAAD,EAAWz2B,GAAX,CAAZ;AACH;AACJ;AACJ;;AACD,eAAK02B,QAAL,CAAc12B,GAAd,EAAmB,KAAKnF,OAAL,CAAagB,EAAhC;AACH;AACJ,OAnBD,MAoBK,IAAImE,GAAG,YAAYlO,SAAnB,EAA8B;AAC/B,YAAIykC,WAAW,GAAG99B,WAAW,CAAC,KAAKk+B,oBAAN,CAA7B;;AACA,YAAIJ,WAAJ,EAAiB;AACb,cAAIE,QAAQ,GAAGF,WAAW,CAACv2B,GAAD,EAAM,IAAN,CAA1B;;AACA,cAAIy2B,QAAQ,IAAIA,QAAQ,KAAKz2B,GAA7B,EAAkC;AAC9BxH,YAAAA,YAAY,CAACi+B,QAAD,EAAWz2B,GAAX,CAAZ;AACH;;AACD,cAAIA,GAAG,CAACiG,QAAJ,CAAapZ,MAAjB,EAAyB;AACrB,gBAAImT,GAAG,CAAC5B,IAAJ,KAAa4B,GAAG,CAACiG,QAAJ,CAAa,CAAb,EAAgB7H,IAAjC,EAAuC;AACnC4B,cAAAA,GAAG,CAACiG,QAAJ,GAAe,EAAf;AACH;AACJ;AACJ;;AACD,YAAIotB,UAAU,GAAG,KAAK1zB,SAAL,CAAeK,GAAG,CAACshB,QAAnB,CAAjB;AACA,YAAIgS,UAAU,GAAG,KAAK3zB,SAAL,CAAeK,GAAG,CAACuhB,QAAnB,CAAjB;AACA,YAAIwD,IAAI,GAAG,KAAK6R,gBAAL,CAAsBvD,UAAtB,EAAkCrzB,GAAlC,EAAuC,IAAvC,CAAX;AACA,YAAI62B,UAAU,GAAG,KAAKD,gBAAL,CAAsBtD,UAAtB,EAAkCtzB,GAAlC,CAAjB;AACA,YAAI82B,OAAO,GAAG,KAAKC,qBAAL,CAA2B1D,UAA3B,EAAuC,KAAvC,CAAd;AACA,YAAI2D,MAAM,GAAG,KAAKD,qBAAL,CAA2BzD,UAA3B,EAAuC,IAAvC,CAAb;;AACA,YAAKD,UAAU,KAAKp3B,SAAf,IAA4BhF,aAAa,CAACo8B,UAAD,CAA1C,IAA4DrzB,GAAG,CAAC4F,YAAJ,KAAqB,EAArB,IACzDtO,iBAAiB,CAACw/B,OAAD,CADxB,EACoC;AAChC92B,UAAAA,GAAG,CAACi3B,aAAJ,GAAoB,KAAKC,iBAAL,CAAuB7D,UAAvB,EAAmCrzB,GAAnC,EAAwC,IAAxC,CAApB;;AACA,cAAIA,GAAG,CAAC4F,YAAR,EAAsB;AAClB;AACA,gBAAImf,IAAI,IAAIA,IAAI,CAACjhB,WAAb,IAA4B,EAAEihB,IAAI,CAACjhB,WAAL,GAAmBvQ,eAAe,CAACkI,IAArC,CAA5B,IAA2EspB,IAAI,CAACjhB,WAAL,GAAmBvQ,eAAe,CAAC4jC,UAAlH,EAA+H;AAC3Hn3B,cAAAA,GAAG,CAAC+F,iBAAJ,GAAwB,KAAKiiB,UAAL,CAAgBqL,UAAU,CAACzvB,OAA3B,EAAoC5D,GAAG,CAAC4F,YAAxC,CAAxB;AACH;AACJ;AACJ;;AACD,YAAK0tB,UAAU,KAAKr3B,SAAf,IAA4BjF,YAAY,CAACs8B,UAAD,CAAzC,IAA2DtzB,GAAG,CAAC8F,YAAJ,KAAqB,EAArB,IACxDzO,gBAAgB,CAAC2/B,MAAD,CADvB,EACkC;AAC9Bh3B,UAAAA,GAAG,CAACo3B,aAAJ,GAAoB,KAAKF,iBAAL,CAAuB5D,UAAvB,EAAmCtzB,GAAnC,EAAwC,KAAxC,CAApB;;AACA,cAAIA,GAAG,CAAC8F,YAAR,EAAsB;AAClB;AACA,gBAAI+wB,UAAU,IAAIA,UAAU,CAAC/yB,WAAzB,IAAwC,EAAE+yB,UAAU,CAAC/yB,WAAX,GAAyBvQ,eAAe,CAACkI,IAA3C,CAAxC,IAA6Fo7B,UAAU,CAAC/yB,WAAX,GAAyBvQ,eAAe,CAAC8jC,SAA1I,EAAsJ;AAClJr3B,cAAAA,GAAG,CAACgG,iBAAJ,GAAwB,KAAKgiB,UAAL,CAAgBsL,UAAU,CAAC1vB,OAA3B,EAAoC5D,GAAG,CAAC8F,YAAxC,CAAxB;AACH;AACJ;AACJ;;AACD,YAAI,CAACkwB,cAAL,EAAqB;AACjB,cAAIhK,MAAM,GAAGhsB,GAAG,CAACs3B,kBAAJ,CAAuBt3B,GAAG,CAAC5B,IAA3B,CAAb;AACAxK,UAAAA,eAAe,CAACoM,GAAD,EAAMgsB,MAAN,CAAf;AACH;;AACD,YAAIgK,cAAJ,EAAoB;AAChBh2B,UAAAA,GAAG,CAACu3B,IAAJ,CAAS,IAAT;AACH;;AACD,aAAK,IAAIpR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnmB,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBlR,MAAzC,EAAiDs5B,CAAC,EAAlD,EAAsD;AAClD,cAAI,KAAKzb,SAAL,CAAe1K,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBooB,CAArB,EAAwB9lB,IAAvC,CAAJ,EAAkD;AAC9CL,YAAAA,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBooB,CAArB,EAAwBqR,cAAxB,GACI,KAAK9sB,SAAL,CAAe1K,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBooB,CAArB,EAAwB9lB,IAAvC,EAA6Cm3B,cADjD;AAEH;AACJ;;AACDx3B,QAAAA,GAAG,CAAC4D,OAAJ,CAAYwf,OAAZ,CAAoB,IAAI9wB,IAAJ,CAAS2J,SAAT,EAAoBA,SAApB,CAApB;AACA+D,QAAAA,GAAG,CAAC4D,OAAJ,CAAYyf,OAAZ,CAAoBrjB,GAAG,CAAC4D,OAAJ,CAAY0f,WAAhC;;AACA,YAAItjB,GAAG,YAAYlO,SAAf,IAA4BkO,GAAG,CAAC5B,IAAJ,KAAa,QAA7C,EAAuD;AACnD,eAAKyrB,yBAAL,CAA+B7pB,GAA/B;AACA,eAAKqpB,+BAAL,CAAqCrpB,GAArC;AACH;;AACD,aAAK,IAAIyF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzF,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBlR,MAAzC,EAAiD4Y,CAAC,EAAlD,EAAsD;AAClD,eAAKiF,SAAL,CAAe1K,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqB0H,CAArB,EAAwBpF,IAAvC,IAA+C,EAA/C;AACA,eAAKqK,SAAL,CAAe1K,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqB0H,CAArB,EAAwBpF,IAAvC,EAA6Cm3B,cAA7C,GACIx3B,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqB0H,CAArB,EAAwB+xB,cAD5B;AAEH;AACJ;;AACD,UAAIx3B,GAAG,YAAY/O,IAAf,IAAuB+O,GAAG,CAACjC,QAA3B,IAAuCiC,GAAG,CAACqmB,SAA/C,EAA0D;AACtD,aAAK,IAAIn5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,eAAKyS,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,EAAgCyrB,OAAhC,GAA0C,KAAKhZ,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,EAAgC0W,OAAhC,CAAwC+U,OAAlF;AACA,eAAKhZ,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,EAAgC0rB,OAAhC,GAA0C,KAAKjZ,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,EAAgC0W,OAAhC,CAAwCgV,OAAlF;AACH;AACJ;;AACD,UAAI,KAAKlF,UAAL,IAAmB1T,GAAG,YAAY/O,IAAlC,IACG+O,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MADtB,IACgC4B,GAAG,CAAC7B,KAAJ,CAAUI,WAAV,CAAsB1R,MAAtB,GAA+B,CADnE,EACsE;AAClE,aAAK6mB,UAAL,CAAgByY,UAAhB,CAA2BnsB,GAA3B,EAAgC,IAAhC;AACH;;AACD,WAAKq2B,gBAAL,CAAsBr2B,GAAtB,EAA2ByU,KAA3B,EAAkCuhB,cAAlC;AACA,WAAKr2B,SAAL,CAAeK,GAAG,CAACnE,EAAnB,IAAyBmE,GAAzB;;AACA,UAAIA,GAAG,YAAY/O,IAAf,IAAuB+O,GAAG,CAACjC,QAA/B,EAAyC;AACrC,aAAK3B,kBAAL,GAA0B,IAA1B;AACA,aAAKC,uBAAL,GAA+B,IAA/B;;AACA,YAAI,CAAC8X,KAAD,IAAU,CAACnU,GAAG,CAACqmB,SAAnB,EAA8B;AAC1B,eAAKoR,iBAAL,CAAuBz3B,GAAvB,EAA4B,IAA5B;AACH;;AACD,aAAKzE,UAAL,CAAgByE,GAAG,CAACnE,EAApB,IAA0BmE,GAAG,CAACjC,QAA9B;;AACA,aAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,cAAIqQ,IAAI,GAAI,KAAKoC,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAZ;;AACA,cAAIqQ,IAAJ,EAAU;AACNA,YAAAA,IAAI,CAACzB,QAAL,GAAgBkE,GAAG,CAACnE,EAApB;AACH;AACJ;;AACD,YAAI,CAAC,KAAK+O,SAAN,IAAmB5K,GAAG,CAAC6Y,WAAvB,IAAsC,CAAC7Y,GAAG,CAACqmB,SAA/C,EAA0D;AACtD,eAAKxb,cAAL,CAAoBkO,aAApB,CAAkC/Y,GAAlC,EAAuC,CAACA,GAAD,CAAvC,EAA8CA,GAAG,CAAC6Y,WAAlD,EAA+D;AAAErC,YAAAA,CAAC,EAAExW,GAAG,CAAC2Y,OAAT;AAAkB5pB,YAAAA,CAAC,EAAEiR,GAAG,CAAC4Y;AAAzB,WAA/D,EAAmG,KAAnG;AACH;;AACD,aAAKxc,kBAAL,GAA0B,KAA1B;AACA,aAAKC,uBAAL,GAA+B,KAA/B;AACH;;AACD,UAAI,KAAK,aAAL,MAAwBJ,SAA5B,EAAuC;AACnC,aAAKkwB,UAAL,CAAgBnsB,GAAhB;AACH;AACJ;;AACD,QAAIA,GAAG,CAACkiB,OAAJ,KAAgB,KAApB,EAA2B;AACvB,WAAKI,uBAAL,CAA6BtiB,GAAG,CAAC4D,OAAjC,EAA0C5D,GAA1C,EAA+C,KAA/C;AACH;AACJ,GAvID;AAwIA;;;AACAtF,EAAAA,OAAO,CAACtO,SAAR,CAAkBwqC,gBAAlB,GAAqC,UAAUr5B,IAAV,EAAgBoB,SAAhB,EAA2B4lB,QAA3B,EAAqC;AACtE,QAAIhnB,IAAI,IAAIA,IAAI,CAACiI,KAAjB,EAAwB;AACpB,WAAK,IAAI9E,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpD,IAAI,CAACiI,KAA3B,EAAkC9E,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIqkB,IAAI,GAAGpkB,EAAE,CAACD,EAAD,CAAb;;AACA,YAAIqkB,IAAI,CAAClpB,EAAL,KAAY8C,SAAS,CAACiH,YAAtB,IAAsC2e,QAA1C,EAAoD;AAChD,iBAAOQ,IAAP;AACH,SAFD,MAGK,IAAIA,IAAI,CAAClpB,EAAL,KAAY8C,SAAS,CAACmH,YAAtB,IAAsC,CAACye,QAA3C,EAAqD;AACtD,iBAAOQ,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,IAAP;AACH,GAbD;;AAcArqB,EAAAA,OAAO,CAACtO,SAAR,CAAkBsrC,WAAlB,GAAgC,UAAU13B,GAAV,EAAe23B,IAAf,EAAqBC,OAArB,EAA8B;AAC1D,QAAIjR,UAAU,GAAGiR,OAAO,GAAG53B,GAAG,CAAC4D,OAAJ,CAAY+iB,UAAZ,CAAuBnlB,KAA1B,GAAkCxB,GAAG,CAAC4D,OAAJ,CAAY+iB,UAAZ,CAAuBjlB,MAAjF;AACA,QAAIm2B,EAAE,GAAID,OAAD,GAAY,IAAK,CAACD,IAAI,GAAGhR,UAAR,IAAsBA,UAAvC,GAAqD,CAA9D;AACA,QAAImR,EAAE,GAAIF,OAAD,GAAY,CAAZ,GAAgB,IAAK,CAACD,IAAI,GAAGhR,UAAR,IAAsBA,UAApD,CAH0D,CAI1D;;AACA,SAAKliB,WAAL,IAAoBpR,UAAU,CAAC0kC,WAA/B;AACA,SAAK5f,KAAL,CAAWnY,GAAX,EAAgB63B,EAAhB,EAAoBC,EAApB,EAAwB;AAAEthB,MAAAA,CAAC,EAAE,GAAL;AAAUznB,MAAAA,CAAC,EAAE;AAAb,KAAxB;AACA,SAAK0V,WAAL,IAAoB,CAACpR,UAAU,CAAC0kC,WAAhC;AACH,GARD;;AASAr9B,EAAAA,OAAO,CAACtO,SAAR,CAAkBy/B,wBAAlB,GAA6C,UAAUtuB,IAAV,EAAgB;AACzD,QAAI,KAAK4G,MAAL,CAAY/F,IAAZ,KAAqB,qBAArB,IAA8C,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAAnE,IACA,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,yBADzB,EACoD;AAChD;AACI,aAAK45B,uBAAL,CAA6Bz6B,IAA7B,EAAmCA,IAAI,CAAC06B,UAAxC;AACA,aAAKD,uBAAL,CAA6Bz6B,IAA7B,EAAmCA,IAAI,CAAC26B,YAAxC;AACH;AACJ;AACJ,GARD;;AASAx9B,EAAAA,OAAO,CAACtO,SAAR,CAAkB4rC,uBAAlB,GAA4C,UAAUz6B,IAAV,EAAgB46B,IAAhB,EAAsB;AAC9D,QAAIA,IAAI,CAACh6B,KAAL,KAAe,MAAnB,EAA2B;AACvB,UAAIg6B,IAAI,CAACC,mBAAL,KAA6B,MAA7B,IAAuCD,IAAI,CAACE,iBAAL,KAA2B,MAAlE,IACAF,IAAI,CAACG,MAAL,CAAY9hB,CAAZ,KAAkB,EADlB,IACwB2hB,IAAI,CAACG,MAAL,CAAYvpC,CAAZ,KAAkB,CAD9C,EACiD;AAC7C,YAAIwpC,WAAW,GAAG,KAAKvQ,UAAL,CAAgBzqB,IAAI,CAACqG,OAArB,EAA8B,cAA9B,CAAlB;AACA,YAAI+U,OAAO,GAAG,KAAK,CAAnB;AACA,YAAIC,OAAO,GAAG,KAAK,CAAnB;;AACA,YAAI,KAAKzU,MAAL,CAAYmZ,WAAZ,KAA4B,aAA5B,IAA6C,KAAKnZ,MAAL,CAAYmZ,WAAZ,KAA4B,aAA7E,EAA4F;AACxF3E,UAAAA,OAAO,GAAG,EAAV;AACAC,UAAAA,OAAO,GAAG,KAAKzU,MAAL,CAAYmZ,WAAZ,KAA4B,aAA5B,GAA4C,CAA5C,GAAgD,CAA1D;AACH,SAHD,MAIK,IAAI,KAAKnZ,MAAL,CAAYmZ,WAAZ,KAA4B,aAA5B,IAA6C,KAAKnZ,MAAL,CAAYmZ,WAAZ,KAA4B,aAA7E,EAA4F;AAC7F3E,UAAAA,OAAO,GAAG,KAAKxU,MAAL,CAAYmZ,WAAZ,KAA4B,aAA5B,GAA4C,CAA5C,GAAgD,CAA1D;AACA1E,UAAAA,OAAO,GAAG,EAAV;AACH;;AACD2f,QAAAA,WAAW,CAACC,4BAAZ,CAAyC7f,OAAzC,EAAkDC,OAAlD,EAA2D,UAA3D;AACA2f,QAAAA,WAAW,CAACH,mBAAZ,GAAkC,QAAlC;AACAG,QAAAA,WAAW,CAACF,iBAAZ,GAAgC,QAAhC;AACA96B,QAAAA,IAAI,CAACqG,OAAL,CAAawf,OAAb,CAAqB,IAAI9wB,IAAJ,CAASiL,IAAI,CAACqG,OAAL,CAAapC,KAAtB,EAA6BjE,IAAI,CAACqG,OAAL,CAAalC,MAA1C,CAArB;AACAnE,QAAAA,IAAI,CAACqG,OAAL,CAAayf,OAAb,CAAqB9lB,IAAI,CAACqG,OAAL,CAAa0f,WAAlC;AACH;AACJ;AACJ,GAtBD;AAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBqrC,iBAAlB,GAAsC,UAAUl6B,IAAV,EAAgBk7B,YAAhB,EAA8B;AAChE,QAAIC,qBAAqB,GAAG,KAA5B;;AACA,QAAKn7B,IAAI,CAACQ,QAAL,IAAiBR,IAAI,CAACQ,QAAL,CAAclR,MAAd,GAAuB,CAAxC,IAA8C,CAAC0Q,IAAI,CAAC8oB,SAArD,IAAqE9oB,IAAI,CAAC0sB,SAA9E,EAA0F;AACtF,UAAI0O,KAAK,GAAG,KAAKh5B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAZ;;AACA,UAAI,EAAE,KAAK4I,WAAL,GAAmBpR,UAAU,CAACulC,YAAhC,KAAiD,EAAE,KAAKn0B,WAAL,GAAmBpR,UAAU,CAAC0kC,WAAhC,CAArD,EAAmG;AAC/F,YAAIY,KAAK,CAAChgB,OAAN,KAAmB,KAAKlU,WAAL,GAAmBpR,UAAU,CAACwlC,iBAA/B,IAChB,EAAE,KAAKx3B,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAD,IAAsD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,KAChD,EAAE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACooB,YAAtC,CAFP,CAAJ,EAEmE;AAC/D,eAAK9W,WAAL,IAAoBpR,UAAU,CAACulC,YAA/B;AACA,cAAIE,KAAK,GAAIH,KAAK,CAAChgB,OAAN,GAAgBpb,IAAI,CAACqG,OAAL,CAAa+U,OAA1C;AACAggB,UAAAA,KAAK,CAAChgB,OAAN,GAAgBpb,IAAI,CAACqG,OAAL,CAAa+U,OAA7B;AACA,cAAIogB,KAAK,GAAIJ,KAAK,CAAC/f,OAAN,GAAgBrb,IAAI,CAACqG,OAAL,CAAagV,OAA1C;AACA+f,UAAAA,KAAK,CAAC/f,OAAN,GAAgBrb,IAAI,CAACqG,OAAL,CAAagV,OAA7B;;AACA,cAAIrb,IAAI,CAACy7B,IAAL,KAAc,MAAlB,EAA0B;AACtB,iBAAKliB,IAAL,CAAU6hB,KAAV,EAAiBG,KAAjB,EAAwBC,KAAxB;AACH;;AACD,eAAKt0B,WAAL,IAAoB,CAACpR,UAAU,CAACulC,YAAhC;AACH,SAZD,MAaK;AACD,cAAIxoC,QAAQ,EAAZ,EAAgB;AACZ,iBAAKic,WAAL,CAAiB9T,WAAW,CAACogC,KAAD,CAA5B,EAAqC,IAArC;AACAD,YAAAA,qBAAqB,GAAG,IAAxB;AACH;;AACDC,UAAAA,KAAK,CAAChgB,OAAN,GAAgBpb,IAAI,CAACqG,OAAL,CAAa+U,OAA7B;AACH;;AACD,YAAIggB,KAAK,CAAC/f,OAAN,KAAmB,KAAKnU,WAAL,GAAmBpR,UAAU,CAACwlC,iBAA/B,IAChB,EAAE,KAAKx3B,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAD,IAAsD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,KAChD,EAAE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACooB,YAAtC,CAFP,CAAJ,EAEmE;AAC/D,eAAK9W,WAAL,IAAoBpR,UAAU,CAACulC,YAA/B;AACA,cAAIG,KAAK,GAAIJ,KAAK,CAAC/f,OAAN,GAAgBrb,IAAI,CAACqG,OAAL,CAAagV,OAA1C;AACA+f,UAAAA,KAAK,CAAC/f,OAAN,GAAgBrb,IAAI,CAACqG,OAAL,CAAagV,OAA7B;;AACA,cAAIrb,IAAI,CAACy7B,IAAL,KAAc,MAAlB,EAA0B;AACtB,iBAAKliB,IAAL,CAAU6hB,KAAV,EAAiB,CAAjB,EAAoBI,KAApB;AACH;;AACD,eAAKt0B,WAAL,IAAoB,CAACpR,UAAU,CAACulC,YAAhC;AACH,SAVD,MAWK;AACD,cAAIxoC,QAAQ,EAAZ,EAAgB;AACZ,iBAAKic,WAAL,CAAiB9T,WAAW,CAACogC,KAAD,CAA5B,EAAqC,IAArC;AACAD,YAAAA,qBAAqB,GAAG,IAAxB;AACH;;AACDC,UAAAA,KAAK,CAAC/f,OAAN,GAAgBrb,IAAI,CAACqG,OAAL,CAAagV,OAA7B;AACH;;AACD,YAAI,KAAKvX,cAAT,EAAyB;AACrB,cAAIjR,QAAQ,EAAZ,EAAgB;AACZ,iBAAKic,WAAL,CAAiB9T,WAAW,CAACogC,KAAD,CAA5B,EAAqC,IAArC;AACAD,YAAAA,qBAAqB,GAAG,IAAxB;AACH;;AACDC,UAAAA,KAAK,CAACn3B,KAAN,GAAcjE,IAAI,CAACqG,OAAL,CAAa+iB,UAAb,CAAwBnlB,KAAtC;AACAm3B,UAAAA,KAAK,CAACj3B,MAAN,GAAenE,IAAI,CAACqG,OAAL,CAAa+iB,UAAb,CAAwBjlB,MAAvC;AACH;AACJ;AACJ;;AACD,QAAI+2B,YAAJ,EAAkB;AACd,UAAKl7B,IAAI,CAACQ,QAAL,IAAiBR,IAAI,CAACQ,QAAL,CAAclR,MAAd,GAAuB,CAA7C,EAAiD;AAC7C,YAAI,KAAK8S,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB2F,KAAxB,KAAkCvF,SAAtC,EAAiD;AAC7C,eAAKy7B,WAAL,CAAiBn6B,IAAjB,EAAuB,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB2F,KAA/C,EAAsD,IAAtD;AACH,SAFD,MAGK;AACD,cAAIpR,QAAQ,EAAZ,EAAgB;AACZ,iBAAKic,WAAL,CAAiB9T,WAAW,CAAC,KAAKoH,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAD,CAA5B,EAAuD,IAAvD;AACA68B,YAAAA,qBAAqB,GAAG,IAAxB;AACH;;AACD,eAAK/4B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB2F,KAAxB,GAAgCjE,IAAI,CAACqG,OAAL,CAAa+iB,UAAb,CAAwBnlB,KAAxD;AACH;;AACD,YAAI,KAAK7B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB6F,MAAxB,KAAmCzF,SAAvC,EAAkD;AAC9C,eAAKy7B,WAAL,CAAiBn6B,IAAjB,EAAuB,KAAKoC,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB6F,MAA/C,EAAuD,KAAvD;AACH,SAFD,MAGK;AACD,cAAItR,QAAQ,EAAZ,EAAgB;AACZ,iBAAKic,WAAL,CAAiB9T,WAAW,CAAC,KAAKoH,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAD,CAA5B,EAAuD,IAAvD;AACA68B,YAAAA,qBAAqB,GAAG,IAAxB;AACH;;AACD,eAAK/4B,SAAL,CAAepC,IAAI,CAAC1B,EAApB,EAAwB6F,MAAxB,GAAiCnE,IAAI,CAACqG,OAAL,CAAa+iB,UAAb,CAAwBjlB,MAAzD;AACH;AACJ;AACJ;;AACD,QAAIg3B,qBAAqB,IAAI,EAAE,KAAKr3B,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CAAzB,IACA,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CADA,IAEA,EAAE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACooB,YAAtC,CAFJ,EAEyD;AACrD,WAAK1Q,cAAL,CAAoB2B,kBAApB;AACH;AACJ,GAlFD;AAmFA;;;AACA9R,EAAAA,OAAO,CAACtO,SAAR,CAAkBsqC,QAAlB,GAA6B,UAAU12B,GAAV,EAAei5B,SAAf,EAA0B9kB,KAA1B,EAAiC;AAC1D,QAAIuZ,MAAM,GAAG1tB,GAAG,CAACk5B,aAAJ,EAAb;AACA,QAAIC,aAAa,GAAG,IAAIxkC,MAAJ,EAApB;AACA,QAAI0K,OAAJ;;AACA,QAAI,CAAC,KAAK+5B,eAAL,CAAqBC,iBAA1B,EAA6C;AACzC3L,MAAAA,MAAM,CAAC2L,iBAAP,GAA2B,KAA3B;AACH;;AACD,QAAI,CAAC3L,MAAM,CAAC3vB,QAAZ,EAAsB;AAClB2vB,MAAAA,MAAM,CAAC3vB,QAAP,GAAkB,EAAlB;AACH;;AACD,QAAIiC,GAAG,CAACjC,QAAR,EAAkB;AACd2vB,MAAAA,MAAM,CAAC4L,eAAP,GAAyB,KAAzB;AACAH,MAAAA,aAAa,CAACt9B,EAAd,GAAmBmE,GAAG,CAACnE,EAAJ,GAAS,iBAA5B;AACAs9B,MAAAA,aAAa,CAACn7B,KAAd,CAAoBC,IAApB,GAA2B,MAA3B;AACAk7B,MAAAA,aAAa,CAACn7B,KAAd,CAAoBE,WAApB,GAAkC,MAAlC;AACAi7B,MAAAA,aAAa,CAACf,mBAAd,GAAoC,SAApC;AACAe,MAAAA,aAAa,CAACd,iBAAd,GAAkC,SAAlC;AACA3K,MAAAA,MAAM,CAAC1vB,KAAP,GAAegC,GAAG,CAAChC,KAAnB;AACAm7B,MAAAA,aAAa,CAACp7B,QAAd,GAAyB,EAAzB;AACAo7B,MAAAA,aAAa,CAACI,gBAAd,GAAiC,IAAjC;;AACA,UAAIv5B,GAAG,CAACqmB,SAAR,EAAmB;AACf8S,QAAAA,aAAa,CAACK,YAAd,GAA6B,QAA7B;AACH;;AACD,UAAIC,UAAU,GAAIz5B,GAAG,CAACwF,KAAJ,IAAaxF,GAAG,CAACwF,KAAJ,CAAU3Y,MAAV,GAAmB,CAAjC,GAAsC,IAAtC,GAA6C,KAA9D;;AACA,UAAIwD,iBAAiB,CAAC2P,GAAG,CAACqmB,SAAL,CAAjB,IAAoC,CAACoT,UAAzC,EAAqD;AACjD/L,QAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqBypC,aAArB;AACH;;AACD,UAAIn5B,GAAG,CAACqmB,SAAJ,IAAkBrmB,GAAG,CAACqmB,SAAJ,CAAcjoB,IAAd,KAAuB,MAA7C,EAAsD;AAClD,aAAK,IAAIlR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,cAAIwsC,eAAe,GAAG,IAAI/kC,MAAJ,EAAtB;AACA,cAAI2I,KAAK,GAAG,KAAKqC,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAZ;AACAwsC,UAAAA,eAAe,CAAC37B,QAAhB,GAA2B,EAA3B;AACA27B,UAAAA,eAAe,CAAC37B,QAAhB,CAAyBrO,IAAzB,CAA8B4N,KAAK,CAACsG,OAApC;;AACA,cAAItG,KAAJ,EAAW;AACPowB,YAAAA,MAAM,CAACiM,SAAP,CAAiBr8B,KAAK,CAACsG,OAAvB,EAAgCtG,KAAK,CAACs8B,QAAtC,EAAgDt8B,KAAK,CAACu8B,WAAtD,EAAmEv8B,KAAK,CAACw8B,OAAzE,EAAkFx8B,KAAK,CAACy8B,UAAxF;AACH;AACJ;AACJ,OAVD,MAWK;AACD,aAAK,IAAI7sC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,cAAI,KAAKyS,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAJ,EAAqC;AACjC,gBAAIoQ,KAAK,GAAG,KAAKqC,SAAL,CAAeK,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAZ;AACA,iBAAKw5B,mBAAL,CAAyB1mB,GAAzB,EAA8B1C,KAA9B,EAAqCpQ,CAArC;AACAwgC,YAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqB4N,KAAK,CAACsG,OAA3B;AACA8pB,YAAAA,MAAM,CAACsM,cAAP,GAAwBtM,MAAM,CAACsM,cAAP,GAAwB1mC,aAAa,CAAC2mC,cAA9D;AACA38B,YAAAA,KAAK,CAACsG,OAAN,CAAco1B,IAAd,GAAqB17B,KAAK,CAACsG,OAAN,CAAco1B,IAAd,KAAuB,MAAvB,GACjBh5B,GAAG,CAAC4D,OAAJ,CAAYo1B,IADK,GACE17B,KAAK,CAACsG,OAAN,CAAco1B,IADrC;AAEH;AACJ;AACJ;;AACD,UAAIS,UAAU,IAAKz5B,GAAG,CAACqmB,SAAJ,IAAkBrmB,GAAG,CAACqmB,SAAJ,CAAcjoB,IAAd,KAAuB,MAA5D,EAAsE;AAClEsvB,QAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqBypC,aAArB;AACH;AACJ,KA3CD,MA4CK;AACD,UAAIe,eAAe,GAAGzhC,WAAW,CAAC,KAAKyhC,eAAN,CAAjC;;AACA,UAAIA,eAAe,IAAIl6B,GAAG,CAACnE,EAAJ,KAAW,QAAlC,EAA4C;AACxCwD,QAAAA,OAAO,GAAG66B,eAAe,CAACl6B,GAAD,EAAM,IAAN,CAAzB;AACH;;AACD,UAAI,CAACX,OAAL,EAAc;AACVA,QAAAA,OAAO,GAAGW,GAAG,CAACu3B,IAAJ,CAAS,IAAT,CAAV;AACH;;AACD7J,MAAAA,MAAM,CAAC3vB,QAAP,CAAgBrO,IAAhB,CAAqB2P,OAArB;AACH,KA/DyD,CAgE1D;;;AACA,QAAI86B,cAAJ;AACAA,IAAAA,cAAc,GAAG1hC,WAAW,CAAC,KAAKg1B,cAAN,CAA5B;;AACA,QAAI0M,cAAJ,EAAoB;AAChB,OAACn6B,GAAG,CAACjC,QAAJ,GAAe2vB,MAAf,GAAwBruB,OAAzB,EAAkC+6B,WAAlC,GAAgDD,cAAhD;AACH,KAFD,MAGK;AACD,OAACn6B,GAAG,CAACjC,QAAJ,GAAe2vB,MAAf,GAAwBruB,OAAzB,EAAkC+6B,WAAlC,GAAgDp6B,GAAG,CAACzB,WAAJ,CAAgB1R,MAAhB,GAAyBmT,GAAG,CAACzB,WAAJ,CAAgB,CAAhB,EAAmBc,OAA5C,GAAsDW,GAAG,CAACnE,EAA1G;AACH;;AACD,QAAIwqB,SAAS,GAAGrmB,GAAG,CAACjC,QAAJ,GAAeo7B,aAAf,GAA+BzL,MAA/C;AACA1tB,IAAAA,GAAG,CAACq6B,eAAJ,CAAoB,KAAK5M,cAAzB,EAAyCpH,SAAzC,EAAoD,KAAKxrB,OAAL,CAAagB,EAAjE,EAAqE1E,YAAY,CAAC,IAAD,CAAZ,GAAqB,IAArB,GAA4B,KAAjG,EAAwG,KAAKmjC,kBAA7G;AACAt6B,IAAAA,GAAG,CAACu6B,SAAJ,CAAc,KAAK9M,cAAnB,EAAmCpH,SAAnC;AACArmB,IAAAA,GAAG,CAACw6B,SAAJ,CAAc,KAAK/M,cAAnB,EAAmC,KAAKtpB,MAAxC,EAAgDkiB,SAAhD,EAA2D4S,SAA3D;;AACA,SAAK,IAAI/rC,CAAC,GAAG,CAAb,EAAgB8S,GAAG,CAACspB,gBAAJ,KAAyBrtB,SAAzB,EAAoC/O,CAAC,GAAG8S,GAAG,CAACspB,gBAAJ,CAAqBz8B,MAA7E,EAAqFK,CAAC,EAAtF,EAA0F;AACtF,UAAIo8B,gBAAgB,GAAGtpB,GAAG,CAACy6B,oBAAJ,CAAyBz6B,GAAG,CAACspB,gBAAJ,CAAqBp8B,CAArB,CAAzB,CAAvB;AACAm5B,MAAAA,SAAS,CAACtoB,QAAV,CAAmBrO,IAAnB,CAAwB45B,gBAAxB;AACH;;AACD,QAAItpB,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,UAAnB,IAAiC4B,GAAG,CAAC4D,OAArC,IAAgD5D,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqBlR,MAArB,GAA8B,CAA9E,IACAmT,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqB,CAArB,aAAmCnJ,SADvC,EACkD;AAC9C6E,MAAAA,yBAAyB,CAACuG,GAAD,CAAzB;AACAtG,MAAAA,2BAA2B,CAAC,IAAD,EAAOsG,GAAP,CAA3B;AACA,WAAK0d,wBAAL;AACH,KALD,MAMK;AACDgQ,MAAAA,MAAM,CAACtK,OAAP,CAAe,IAAI9wB,IAAJ,CAAS0N,GAAG,CAACwB,KAAb,EAAoBxB,GAAG,CAAC0B,MAAxB,CAAf,EAAgD1B,GAAG,CAACnE,EAApD,EAAwD,KAAK6+B,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAxD;;AACA,UAAIjN,MAAM,YAAY94B,SAAtB,EAAiC;AAC7B84B,QAAAA,MAAM,CAACrK,OAAP,CAAeqK,MAAM,CAACpK,WAAtB,EAAmC,IAAnC;AACH,OAFD,MAGK;AACDoK,QAAAA,MAAM,CAACrK,OAAP,CAAeqK,MAAM,CAACpK,WAAtB;AACH;AACJ;;AACD,QAAItjB,GAAG,CAAC4D,OAAJ,CAAYo1B,IAAZ,KAAqB,MAArB,IAA+Bh5B,GAAG,CAAC4D,OAAJ,CAAYo2B,cAAZ,GAA6B1mC,aAAa,CAAC2mC,cAA9E,EAA8F;AAC1FtoC,MAAAA,YAAY,CAACqO,GAAG,CAAC4D,OAAL,EAAc5D,GAAG,CAAC4D,OAAJ,CAAY+U,OAA1B,EAAmC3Y,GAAG,CAAC4D,OAAJ,CAAYgV,OAA/C,EAAwD,IAAxD,EAA8D5Y,GAAG,CAAC4D,OAAJ,CAAYo1B,IAA1E,CAAZ;AACH;;AACD,QAAIh5B,GAAG,YAAY/O,IAAf,IAAuB+O,GAAG,CAACqmB,SAA3B,KAAyCrmB,GAAG,CAACwB,KAAJ,GAAYksB,MAAM,CAACzK,WAAP,CAAmBzhB,KAA/B,IAAwCxB,GAAG,CAAC0B,MAAJ,GAAagsB,MAAM,CAACzK,WAAP,CAAmBvhB,MAAjH,KACAgsB,MAAM,CAAClV,MAAP,CAAchC,CAAd,IAAmBkX,MAAM,CAACzK,WAAP,CAAmBzM,CADtC,IAC2CkX,MAAM,CAAClV,MAAP,CAAczpB,CAAd,IAAmB2+B,MAAM,CAACzK,WAAP,CAAmBl0B,CADrF,EACwF;AACpFiR,MAAAA,GAAG,CAACwB,KAAJ,GAAYksB,MAAM,CAAClsB,KAAP,GAAeksB,MAAM,CAACzK,WAAP,CAAmBzhB,KAA9C;AACAxB,MAAAA,GAAG,CAAC0B,MAAJ,GAAagsB,MAAM,CAAChsB,MAAP,GAAgBgsB,MAAM,CAACzK,WAAP,CAAmBvhB,MAAhD;AACAgsB,MAAAA,MAAM,CAACtK,OAAP,CAAe,IAAI9wB,IAAJ,CAAS0N,GAAG,CAACwB,KAAb,EAAoBxB,GAAG,CAAC0B,MAAxB,CAAf;AACAgsB,MAAAA,MAAM,CAACrK,OAAP,CAAeqK,MAAM,CAACpK,WAAtB;AACH;;AACD,QAAItjB,GAAG,CAACqmB,SAAJ,IAAiBrmB,GAAG,CAACqmB,SAAJ,CAAcjoB,IAAd,KAAuB,MAAxC,IAAkD4B,GAAG,CAACjC,QAAtD,IAAkEiC,GAAG,CAACjC,QAAJ,CAAalR,MAAb,GAAsB,CAA5F,EAA+F;AAC3F,WAAK+tC,mBAAL,CAAyB56B,GAAzB;AACH;AACJ,GA7GD;AA8GA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACItF,EAAAA,OAAO,CAACtO,SAAR,CAAkBsxB,wBAAlB,GAA6C,YAAY;AACrD,SAAK,IAAIxwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAI,KAAK4Q,KAAL,CAAW5Q,CAAX,EAAc0W,OAAd,IAA0B,KAAK9F,KAAL,CAAW5Q,CAAX,EAAc0W,OAAd,YAAiC5S,SAA/D,EAA2E;AACvE,aAAKm7B,UAAL,CAAgB,KAAKruB,KAAL,CAAW5Q,CAAX,CAAhB;AACH;AACJ;AACJ,GAND;;AAOAwN,EAAAA,OAAO,CAACtO,SAAR,CAAkBsuC,eAAlB,GAAoC,UAAU7+B,EAAV,EAAc87B,IAAd,EAAoB;AACpD,QAAI33B,GAAG,GAAG,KAAKkW,SAAL,CAAera,EAAf,CAAV;AACA,QAAI6wB,KAAK,GAAGnjB,QAAQ,CAACgH,cAAT,CAAwB1U,EAAE,GAAG,cAA7B,CAAZ;;AACA,QAAI6wB,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACjc,UAAN,CAAiBC,WAAjB,CAA6Bgc,KAA7B;AACH;;AACD,SAAKlqB,kBAAL,CAAwBxC,GAAxB,EAA6B,EAA7B,EAAiC;AAAEwB,MAAAA,KAAK,EAAEm2B,IAAI,CAACn2B,KAAd;AAAqBE,MAAAA,MAAM,EAAEi2B,IAAI,CAACj2B;AAAlC,KAAjC;AACA,QAAIxB,IAAI,GAAG;AAAErF,MAAAA,OAAO,EAAEtC,WAAW,CAACyH,GAAD,CAAtB;AAA6B23B,MAAAA,IAAI,EAAEA;AAAnC,KAAX;AACA,SAAKj1B,YAAL,CAAkBxP,YAAY,CAAC2nC,WAA/B,EAA4C36B,IAA5C;AACH,GATD;;AAUAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkBwuC,mBAAlB,GAAwC,UAAU56B,GAAV,EAAe;AACnD,SAAK,IAAI9S,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8S,GAAG,CAACjC,QAAJ,CAAalR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,UAAIoQ,KAAK,GAAG,KAAK4Y,SAAL,CAAelW,GAAG,CAACjC,QAAJ,CAAa7Q,CAAb,CAAf,CAAZ;AACAoQ,MAAAA,KAAK,CAACqb,OAAN,GAAgBrb,KAAK,CAACsG,OAAN,CAAc+U,OAA9B;AACArb,MAAAA,KAAK,CAACsb,OAAN,GAAgBtb,KAAK,CAACsG,OAAN,CAAcgV,OAA9B;;AACA,UAAItb,KAAK,CAACS,QAAN,IAAkBT,KAAK,CAACS,QAAN,CAAelR,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,aAAK+tC,mBAAL,CAAyBt9B,KAAzB;AACH;AACJ;AACJ,GATD;;AAUA5C,EAAAA,OAAO,CAACtO,SAAR,CAAkB0uC,UAAlB,GAA+B,YAAY;AACvC,WAAO,IAAP;AACH,GAFD;;AAGApgC,EAAAA,OAAO,CAACtO,SAAR,CAAkBs6B,mBAAlB,GAAwC,UAAU1mB,GAAV,EAAe1C,KAAf,EAAsB+E,KAAtB,EAA6B;AACjE,QAAIrC,GAAG,CAACqmB,SAAJ,IAAiBrmB,GAAG,CAACqmB,SAAJ,CAAcjoB,IAAd,KAAuB,OAA5C,EAAqD;AACjD,UAAI,CAACd,KAAK,CAACkE,KAAX,EAAkB;AACdlE,QAAAA,KAAK,CAACsG,OAAN,CAAcw0B,mBAAd,GAAoC,SAApC;AACA96B,QAAAA,KAAK,CAAC86B,mBAAN,GAA4B,SAA5B;AACH;;AACD,UAAI,CAAC96B,KAAK,CAACoE,MAAX,EAAmB;AACfpE,QAAAA,KAAK,CAAC+6B,iBAAN,GAA0B,SAA1B;AACA/6B,QAAAA,KAAK,CAACsG,OAAN,CAAcy0B,iBAAd,GAAkC,SAAlC;AACH;;AACD,UAAIh2B,KAAK,IAAIrC,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,eAAhC,EAAiD;AAC7Cd,QAAAA,KAAK,CAACklB,QAAN,GAAiBngB,KAAjB;AACH;AACJ;AACJ,GAdD;;AAeA3H,EAAAA,OAAO,CAACtO,SAAR,CAAkB+c,SAAlB,GAA8B,YAAY;AACtC,QAAI,CAAC,KAAKyB,SAAV,EAAqB;AACjB,WAAK7I,KAAL,CAAWrS,IAAX,CAAgB,KAAKmL,OAAL,CAAagB,EAA7B;AACA,WAAKkG,KAAL,CAAW,KAAKlH,OAAL,CAAagB,EAAxB,IAA8B,IAA9B;AACH;AACJ,GALD;;AAMAnB,EAAAA,OAAO,CAACtO,SAAR,CAAkB4X,YAAlB,GAAiC,YAAY;AACzC,QAAI9W,CAAJ;AACA,QAAI6tC,WAAW,GAAG,KAAKC,cAAL,CAAoBrwB,QAAtC;AACA,QAAIA,QAAQ,GAAG;AACX,cAAQ;AACJswB,QAAAA,OAAO,EAAE,KAAKhnB,WAAL,CAAiB0mB,IAAjB,CAAsB,IAAtB,CADL;AACkCG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAD9C;AAEJO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC4oC,CAAZ;AAAeC,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFL,OADG;AAKX,eAAS;AACLJ,QAAAA,OAAO,EAAE,KAAKrnB,YAAL,CAAkB+mB,IAAlB,CAAuB,IAAvB,CADJ;AACkCG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAD9C;AAELO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC+oC,CAAZ;AAAeF,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFJ,OALE;AASX,aAAO;AACHJ,QAAAA,OAAO,EAAE,KAAK3nB,UAAL,CAAgBqnB,IAAhB,CAAqB,IAArB,CADN;AACkCG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAD9C;AAEHO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACgpC,CAAZ;AAAeH,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFN,OATI;AAaX,gBAAU;AACNJ,QAAAA,OAAO,EAAE,KAAK9V,aAAL,CAAmBwV,IAAnB,CAAwB,IAAxB,CADH;AACkCG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAD9C;AAENO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACipC;AAAZ;AAFH,OAbC;AAiBX,mBAAa;AACTP,QAAAA,OAAO,EAAE,KAAKtoB,SAAL,CAAegoB,IAAf,CAAoB,IAApB,CADA;AAC2BG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CADvC;AAETO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACkpC,CAAZ;AAAeL,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFA,OAjBF;AAqBX,cAAQ;AACJJ,QAAAA,OAAO,EAAE,KAAK/f,IAAL,CAAUyf,IAAV,CAAe,IAAf,CADL;AAC2BG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CADvC;AAEJO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACmpC,CAAZ;AAAeN,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFL,OArBG;AAyBX,cAAQ;AACJJ,QAAAA,OAAO,EAAE,KAAK9f,IAAL,CAAUwf,IAAV,CAAe,IAAf,CADL;AAC2BG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CADvC;AAEJO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACopC,CAAZ;AAAeP,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA1C;AAFL,OAzBG;AA6BX,iBAAW;AACPJ,QAAAA,OAAO,EAAE,KAAK3kB,YAAL,CAAkBqkB,IAAlB,CAAuB,IAAvB,EAA6B,IAA7B,CADF;AAEPG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFL;AAEiCO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACqpC;AAAZ,SAF1C;AAGPC,QAAAA,SAAS,EAAE;AAHJ,OA7BA;AAkCX,oBAAc;AACVZ,QAAAA,OAAO,EAAE,KAAK3kB,YAAL,CAAkBqkB,IAAlB,CAAuB,IAAvB,EAA6B,OAA7B,CADC;AAEVG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFF;AAE8BO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACupC;AAAZ,SAFvC;AAGVD,QAAAA,SAAS,EAAE;AAHD,OAlCH;AAuCX,mBAAa;AACTZ,QAAAA,OAAO,EAAE,KAAK3kB,YAAL,CAAkBqkB,IAAlB,CAAuB,IAAvB,EAA6B,MAA7B,CADA;AAETG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFH;AAE+BO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACwpC;AAAZ,SAFxC;AAGTF,QAAAA,SAAS,EAAE;AAHF,OAvCF;AA4CX,mBAAa;AACTZ,QAAAA,OAAO,EAAE,KAAK3kB,YAAL,CAAkBqkB,IAAlB,CAAuB,IAAvB,EAA6B,MAA7B,CADA;AAETG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFH;AAE+BO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAACypC;AAAZ,SAFxC;AAGTH,QAAAA,SAAS,EAAE;AAHF,OA5CF;AAiDX,mBAAa;AACTZ,QAAAA,OAAO,EAAE,KAAKpU,eAAL,CAAqB8T,IAArB,CAA0B,IAA1B,CADA;AAETG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFH;AAE+BO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC0pC;AAAZ;AAFxC,OAjDF;AAqDX,iBAAW;AACPhB,QAAAA,OAAO,EAAE,KAAKiB,cAAL,CAAoBvB,IAApB,CAAyB,IAAzB,CADF;AAEPG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFL;AAEiCO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC4pC;AAAZ;AAF1C,OArDA;AAyDX,yBAAmB;AACf;AACArB,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFG;AAEyBO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC6pC;AAAZ;AAFlC,OAzDR;AA6DX,6BAAuB;AACnB;AACAtB,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFO;AAEqBO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC6pC,GAAZ;AAAiBhB,UAAAA,YAAY,EAAE5oC,YAAY,CAAC6oC;AAA5C;AAF9B,OA7DZ;AAiEX,2BAAqB;AACjBJ,QAAAA,OAAO,EAAE,KAAKpU,eAAL,CAAqB8T,IAArB,CAA0B,IAA1B,CADQ;AAEjBG,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAFK;AAEuBO,QAAAA,OAAO,EAAE;AAAEzuC,UAAAA,GAAG,EAAE8F,IAAI,CAAC8pC;AAAZ;AAFhC;AAjEV,KAAf;AAsEA,SAAKC,kBAAL,CAAwBvB,WAAxB,EAAqCpwB,QAArC;AACH,GA1ED;;AA2EAjQ,EAAAA,OAAO,CAACtO,SAAR,CAAkBmwC,gBAAlB,GAAqC,UAAUC,UAAV,EAAsB7xB,QAAtB,EAAgC;AACjE,QAAI8xB,OAAJ;;AACA,SAAK,IAAI/7B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY2L,QAAZ,CAAtB,EAA6CjK,EAAE,GAAGC,EAAE,CAAC9T,MAArD,EAA6D6T,EAAE,EAA/D,EAAmE;AAC/D,UAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACA+7B,MAAAA,OAAO,GAAG9xB,QAAQ,CAACle,GAAD,CAAlB;;AACA,UAAI+vC,UAAU,CAACtB,OAAX,CAAmBzuC,GAAnB,KAA2BgwC,OAAO,CAACvB,OAAR,CAAgBzuC,GAA3C,IAAkD+vC,UAAU,CAACtB,OAAX,CAAmBE,YAAnB,KAAoCqB,OAAO,CAACvB,OAAR,CAAgBE,YAA1G,EAAwH;AACpH,eAAOzwB,QAAQ,CAACle,GAAD,CAAf;AACA;AACH;AACJ;AACJ,GAVD;;AAWAiO,EAAAA,OAAO,CAACtO,SAAR,CAAkBkwC,kBAAlB,GAAuC,UAAUvB,WAAV,EAAuBpwB,QAAvB,EAAiC;AACpE,QAAIzd,CAAC,GAAG,CAAR;;AACA,QAAI6tC,WAAJ,EAAiB;AACb,WAAK7tC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG6tC,WAAW,CAACluC,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACrC,YAAIyd,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,IAAiC6qB,WAAW,CAAC7tC,CAAD,CAAhD,EAAqD;AACjD,cAAI6tC,WAAW,CAAC7tC,CAAD,CAAX,CAAe4tC,UAAnB,EAA+B;AAC3BnwB,YAAAA,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,CAA8B4qB,UAA9B,GAA2CC,WAAW,CAAC7tC,CAAD,CAAX,CAAe4tC,UAA1D;AACH;;AACD,cAAIC,WAAW,CAAC7tC,CAAD,CAAX,CAAe+tC,OAAnB,EAA4B;AACxBtwB,YAAAA,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,CAA8B+qB,OAA9B,GAAwCF,WAAW,CAAC7tC,CAAD,CAAX,CAAe+tC,OAAvD;AACH;;AACD,cAAIF,WAAW,CAAC7tC,CAAD,CAAX,CAAeguC,OAAf,CAAuBzuC,GAAvB,IAA8BsuC,WAAW,CAAC7tC,CAAD,CAAX,CAAeguC,OAAf,CAAuBE,YAAzD,EAAuE;AACnEzwB,YAAAA,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,CAA8BgrB,OAA9B,GAAwCH,WAAW,CAAC7tC,CAAD,CAAX,CAAeguC,OAAvD;AACH;;AACD,cAAIH,WAAW,CAAC7tC,CAAD,CAAX,CAAe2uC,SAAf,KAA6B,EAAjC,EAAqC;AACjClxB,YAAAA,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,CAA8B2rB,SAA9B,GAA0Cd,WAAW,CAAC7tC,CAAD,CAAX,CAAe2uC,SAAzD;AACH;AACJ,SAbD,MAcK;AACD,eAAKU,gBAAL,CAAsBxB,WAAW,CAAC7tC,CAAD,CAAjC,EAAsCyd,QAAtC;AACAA,UAAAA,QAAQ,CAACowB,WAAW,CAAC7tC,CAAD,CAAX,CAAegjB,IAAhB,CAAR,GAAgC;AAC5B+qB,YAAAA,OAAO,EAAEF,WAAW,CAAC7tC,CAAD,CAAX,CAAe+tC,OADI;AACKH,YAAAA,UAAU,EAAEC,WAAW,CAAC7tC,CAAD,CAAX,CAAe4tC,UADhC;AAC4CI,YAAAA,OAAO,EAAEH,WAAW,CAAC7tC,CAAD,CAAX,CAAeguC,OADpE;AAE5BW,YAAAA,SAAS,EAAEd,WAAW,CAAC7tC,CAAD,CAAX,CAAe2uC;AAFE,WAAhC;AAIH;AACJ;AACJ;;AACD,SAAKlxB,QAAL,GAAgBA,QAAhB;AACH,GA5BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjQ,EAAAA,OAAO,CAACtO,SAAR,CAAkBy5B,eAAlB,GAAoC,UAAUtoB,IAAV,EAAgB;AAChD,SAAK,IAAImD,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpD,IAAI,CAACwC,OAA3B,EAAoCW,EAAE,GAAGC,EAAE,CAAC9T,MAA5C,EAAoD6T,EAAE,EAAtD,EAA0D;AACtD,UAAIg8B,IAAI,GAAG/7B,EAAE,CAACD,EAAD,CAAb;;AACA,UAAI,KAAKf,SAAL,CAAe+8B,IAAf,CAAJ,EAA0B;AACtB,aAAK/8B,SAAL,CAAe+8B,IAAf,EAAqBnb,QAArB,GAAgC,EAAhC;AACH;AACJ;;AACD,SAAK,IAAI1f,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGvE,IAAI,CAACuC,QAA3B,EAAqC+B,EAAE,GAAGC,EAAE,CAACjV,MAA7C,EAAqDgV,EAAE,EAAvD,EAA2D;AACvD,UAAI66B,IAAI,GAAG56B,EAAE,CAACD,EAAD,CAAb;;AACA,UAAI,KAAKlC,SAAL,CAAe+8B,IAAf,CAAJ,EAA0B;AACtB,aAAK/8B,SAAL,CAAe+8B,IAAf,EAAqBpb,QAArB,GAAgC,EAAhC;AACH;AACJ;;AACD/jB,IAAAA,IAAI,CAACwC,OAAL,GAAe,EAAf;AACAxC,IAAAA,IAAI,CAACuC,QAAL,GAAgB,EAAhB;AACH,GAfD;AAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpF,EAAAA,OAAO,CAACtO,SAAR,CAAkBuwC,oBAAlB,GAAyC,UAAUp/B,IAAV,EAAgBqsB,UAAhB,EAA4B;AACjE,SAAK,IAAI18B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsBlR,MAA1C,EAAkDK,CAAC,EAAnD,EAAuD;AACnD,UAAIoQ,KAAK,GAAGC,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB7Q,CAAtB,CAAZ;;AACA,UAAIoQ,KAAK,CAACzB,EAAV,EAAc;AACV,YAAIA,EAAE,GAAGyB,KAAK,CAACzB,EAAN,CAASqD,KAAT,CAAe3B,IAAI,CAAC1B,EAApB,EAAwB,CAAxB,CAAT;;AACA,YAAIA,EAAE,IAAIA,EAAE,CAACgzB,KAAH,CAAS,QAAT,CAAV,EAA8B;AAC1BvxB,UAAAA,KAAK,CAAC4kB,OAAN,GAAgB0H,UAAhB;AACA,eAAKgT,gCAAL,CAAsCt/B,KAAtC,EAA6CssB,UAA7C;AACH;AACJ;AACJ;AACJ,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBm2B,WAAlB,GAAgC,UAAUviB,GAAV,EAAe;AAC3C,QAAIA,GAAG,CAACshB,QAAJ,KAAiBrlB,SAAjB,IAA8B+D,GAAG,CAACshB,QAAJ,KAAiB,EAAnD,EAAuD;AACnD,UAAI/jB,IAAI,GAAG,KAAKoC,SAAL,CAAeK,GAAG,CAACshB,QAAnB,CAAX;;AACA,UAAI/jB,IAAI,IAAIA,IAAI,CAACuC,QAAb,IAAyBvC,IAAI,CAACuC,QAAL,CAAcjT,MAAd,KAAyB,CAAtD,EAAyD;AACrD0Q,QAAAA,IAAI,CAACuC,QAAL,GAAgB,EAAhB;AACH;;AACD,UAAIvC,IAAI,IAAIA,IAAI,CAACuC,QAAb,IAAyBvC,IAAI,CAACuC,QAAL,CAAc0X,OAAd,CAAsBxX,GAAG,CAACnE,EAA1B,MAAkC,CAAC,CAAhE,EAAmE;AAC/D0B,QAAAA,IAAI,CAACuC,QAAL,CAAcpQ,IAAd,CAAmBsQ,GAAG,CAACnE,EAAvB;AACH;;AACD,WAAKnK,eAAL,CAAqB6L,IAArB,EAA2ByC,GAA3B,EAAgC,KAAhC;AACH;;AACD,QAAIA,GAAG,CAACuhB,QAAJ,KAAiBtlB,SAAjB,IAA8B+D,GAAG,CAACuhB,QAAJ,KAAiB,EAAnD,EAAuD;AACnD,UAAIhkB,IAAI,GAAG,KAAKoC,SAAL,CAAeK,GAAG,CAACuhB,QAAnB,CAAX;;AACA,UAAIhkB,IAAI,IAAIA,IAAI,CAACwC,OAAb,IAAwBxC,IAAI,CAACwC,OAAL,CAAalT,MAAb,KAAwB,CAApD,EAAuD;AACnD0Q,QAAAA,IAAI,CAACwC,OAAL,GAAe,EAAf;AACH;;AACD,UAAIxC,IAAI,IAAIA,IAAI,CAACwC,OAAb,IAAwBxC,IAAI,CAACwC,OAAL,CAAayX,OAAb,CAAqBxX,GAAG,CAACnE,EAAzB,MAAiC,CAAC,CAA9D,EAAiE;AAC7D0B,QAAAA,IAAI,CAACwC,OAAL,CAAarQ,IAAb,CAAkBsQ,GAAG,CAACnE,EAAtB;AACH;;AACD,WAAKnK,eAAL,CAAqB6L,IAArB,EAA2ByC,GAA3B,EAAgC,IAAhC;;AACA,UAAIzC,IAAI,IAAIA,IAAI,CAAC2kB,OAAb,IAAwB3kB,IAAI,CAACuC,QAAjC,EAA2C;AACvC,YAAIjS,KAAK,GAAG0P,IAAI,CAACuC,QAAL,CAAcjT,MAAd,KAAyB,CAAzB,GAA6B,KAA7B,GAAqC,IAAjD;AACA,aAAK8vC,oBAAL,CAA0Bp/B,IAA1B,EAAgC1P,KAAhC;AACH;AACJ;AACJ,GAzBD;AA0BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI6M,EAAAA,OAAO,CAACtO,SAAR,CAAkBsF,eAAlB,GAAoC,UAAU6L,IAAV,EAAgByC,GAAhB,EAAqB68B,SAArB,EAAgC;AAChE,QAAIt/B,IAAJ,EAAU;AACN,WAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACiI,KAAL,CAAW3Y,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAI63B,IAAI,GAAGxnB,IAAI,CAACiI,KAAL,CAAWtY,CAAX,CAAX;AACA,YAAI4vC,MAAM,GAAID,SAAD,GAAc78B,GAAG,CAAC8F,YAAlB,GAAiC9F,GAAG,CAAC4F,YAAlD;;AACA,YAAImf,IAAI,CAAClpB,EAAL,KAAYihC,MAAhB,EAAwB;AACpB,cAAIC,SAAS,GAAIF,SAAD,GAAc9X,IAAI,CAAChlB,OAAnB,GAA6BglB,IAAI,CAACjlB,QAAlD;;AACA,cAAIi9B,SAAS,CAACvlB,OAAV,CAAkBxX,GAAG,CAACnE,EAAtB,MAA8B,CAAC,CAAnC,EAAsC;AAClCkhC,YAAAA,SAAS,CAACrtC,IAAV,CAAesQ,GAAG,CAACnE,EAAnB;AACH;AACJ;AACJ;AACJ;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkB4wC,cAAlB,GAAmC,YAAY;AAC3C,SAAKrK,gBAAL;AACA,SAAKzsB,QAAL;AACA,SAAK5C,cAAL;AACA,SAAKsE,QAAL,CAAcO,OAAd;AACA,SAAK0Y,uBAAL;;AACA,QAAIzwB,QAAQ,MAAM,KAAK+T,MAAnB,IAA6B,KAAKA,MAAL,CAAY84B,UAAzC,IAAuD,KAAK94B,MAAL,CAAY84B,UAAZ,CAAuBC,aAA9E,IAA+F,KAAKp/B,KAAL,CAAWjR,MAAX,GAAoB,CAAvH,EAA0H;AACtH,UAAIg+B,QAAQ,GAAG,KAAK/sB,KAAL,CAAW,CAAX,CAAf;;AACA,UAAI+sB,QAAQ,CAAC/qB,QAAT,CAAkBjT,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,YAAIswC,iBAAiB,GAAG,KAAKt0B,mBAA7B;;AACA,aAAK,IAAI3b,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG29B,QAAQ,CAAC/qB,QAAT,CAAkBjT,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/C,cAAIyR,SAAS,GAAG,KAAKgB,SAAL,CAAekrB,QAAQ,CAAC/qB,QAAT,CAAkB5S,CAAlB,CAAf,CAAhB;AACA,cAAIkwC,mBAAmB,GAAG,KAAKxhB,sBAA/B;AACA,eAAK7c,qBAAL,CAA2B,KAA3B;AACA,eAAKD,uBAAL,CAA6B,KAA7B;AACA,eAAK0sB,oBAAL,GAA4B,IAA5B;AACA,cAAIh/B,MAAM,GAAG,KAAK0pB,SAAL,CAAevX,SAAS,CAAC4iB,QAAzB,CAAb,CAN+C,CAO/C;;AACA,cAAI/0B,MAAM,CAAC6T,IAAP,CAAYg9B,MAAZ,KAAuB,MAA3B,EAAmC;AAC/B1+B,YAAAA,SAAS,CAACiH,YAAV,GAAyBilB,QAAQ,CAACrlB,KAAT,CAAe,CAAf,EAAkB3J,EAA3C;AACH;;AACD,eAAKwT,QAAL;AACA,eAAKmc,oBAAL,GAA4B,KAA5B;AACA,eAAK1sB,uBAAL,CAA6Bs+B,mBAA7B;AACA,eAAKr+B,qBAAL,CAA2Bo+B,iBAA3B;AACH;AACJ;AACJ;;AACD,QAAI/sC,QAAQ,EAAZ,EAAgB;AACZ,UAAI4R,IAAI,GAAG,KAAK,CAAhB;;AACA,WAAK,IAAItB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACAsB,QAAAA,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAP;;AACA,YAAID,IAAI,CAACs7B,cAAT,EAAyB;AACrBt7B,UAAAA,IAAI,CAACs7B,cAAL,CAAoBt7B,IAApB;AACAA,UAAAA,IAAI,CAAC0F,eAAL,CAAqByE,SAArB;AACAnK,UAAAA,IAAI,CAACE,UAAL,CAAgBF,IAAhB;AACA,eAAKu7B,WAAL,CAAiBv7B,IAAjB;AACH;AACJ;AACJ;;AACD,SAAKkM,eAAL;AACH,GA1CD;;AA2CAxT,EAAAA,OAAO,CAACtO,SAAR,CAAkBoxC,oBAAlB,GAAyC,UAAU3iC,OAAV,EAAmBhN,KAAnB,EAA0B;AAC/D,SAAK,IAAI4X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5K,OAAO,CAAChO,MAA5B,EAAoC4Y,CAAC,EAArC,EAAyC;AACrC,UAAI5K,OAAO,CAAC4K,CAAD,CAAP,CAAW1H,QAAf,EAAyB;AACrB,aAAKy/B,oBAAL,CAA0B3iC,OAAO,CAAC4K,CAAD,CAAP,CAAW1H,QAArC,EAA+ClQ,KAA/C;AACH;;AACDgN,MAAAA,OAAO,CAAC4K,CAAD,CAAP,CAAWg4B,aAAX,GAA2B5vC,KAA3B;AACH;AACJ,GAPD;;AAQA6M,EAAAA,OAAO,CAACtO,SAAR,CAAkBsxC,iBAAlB,GAAsC,UAAU19B,GAAV,EAAe29B,MAAf,EAAuB;AACzD,QAAInrB,OAAO,GAAG,EAAd;AACA,QAAInQ,KAAK,GAAGpG,SAAZ;AACAuW,IAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKhb,KAApB,CAAV;AACA0U,IAAAA,OAAO,GAAGA,OAAO,CAACsG,MAAR,CAAe,KAAKta,UAApB,CAAV;AACA,QAAIJ,IAAJ;;AACA,QAAI4B,GAAG,CAACyV,MAAJ,KAAe,CAAC,CAApB,EAAuB;AACnB,WAAK,IAAIvoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGslB,OAAO,CAAC3lB,MAA5B,EAAoCK,CAAC,EAArC,EAAyC;AACrC,YAAIslB,OAAO,CAACtlB,CAAD,CAAP,CAAWuoB,MAAX,GAAoBzV,GAAG,CAACyV,MAA5B,EAAoC;AAChC,cAAIzV,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MAAnB,IAA6B4B,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,QAApD,EAA8D;AAC1DA,YAAAA,IAAI,GAAG4B,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MAAnB,GAA4B,MAA5B,GAAqC,QAA5C;AACH;;AACDiE,UAAAA,KAAK,GAAGzM,WAAW,CAAC+nC,MAAD,EAASnrB,OAAO,CAACtlB,CAAD,CAAP,CAAW2O,EAApB,EAAwBuC,IAAxB,CAAnB;AACA;AACH;AACJ;AACJ;;AACD,WAAOiE,KAAP;AACH,GAlBD;AAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3H,EAAAA,OAAO,CAACtO,SAAR,CAAkBm3B,mBAAlB,GAAwC,UAAUvjB,GAAV,EAAe49B,cAAf,EAA+BC,cAA/B,EAA+C;AACnF,QAAI77B,IAAJ;AACA,QAAIoJ,QAAQ,GAAG,UAAf;;AACA,SAAK,IAAI1K,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACAsB,MAAAA,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAP;;AACA,UAAI,KAAKZ,cAAT,EAAyB;AACrB,YAAIW,IAAI,CAACY,IAAL,KAAc,KAAlB,EAAyB;AACrB,cAAIgwB,SAAS,GAAG,KAAK/hB,MAAL,CAAYhkB,MAAZ,GAAqB,CAArC;AACA,cAAI4nB,KAAK,GAAG,KAAK,CAAjB;;AACA,cAAIme,SAAJ,EAAe;AACXne,YAAAA,KAAK,GAAG,KAAK5J,cAAL,CAAoBwZ,cAApB,CAAmCrkB,GAAG,CAACnE,EAAvC,CAAR;AACH;;AACD,cAAK4Y,KAAK,KAAKxY,SAAV,IAAwBwY,KAAK,IAAIA,KAAK,CAACyN,OAAxC,IAAqD2b,cAAzD,EAAyE;AACrE,gBAAIhM,SAAS,GAAG97B,YAAY,CAAC,KAAK8E,OAAL,CAAagB,EAAd,CAA5B;;AACA,gBAAI,CAAC6B,MAAM,CAAC0N,QAAD,CAAN,CAAiBpJ,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAAnC,CAAL,EAA0D;AACtD6B,cAAAA,MAAM,CAAC0N,QAAD,CAAN,CAAiBpJ,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAAnC,IACI0N,QAAQ,CAACgH,cAAT,CAAwBvO,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAA1C,CADJ;AAEH;;AACD,gBAAIiiC,oBAAoB,GAAGpgC,MAAM,CAAC0N,QAAD,CAAN,CAAiBpJ,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAAnC,CAA3B;;AACA,gBAAI,KAAKwF,cAAL,GAAsBlO,aAAa,CAAC42B,YAAxC,EAAsD;AAClD,mBAAKyT,oBAAL,CAA0Bx9B,GAAG,CAAC4D,OAAJ,CAAY7F,QAAtC,EAAgD,IAAhD;AACH;;AACD,iBAAK2J,eAAL,CAAqBq2B,UAArB,CAAgC/9B,GAAG,CAAC4D,OAApC,EAA6Ck6B,oBAA7C,EAAmEjM,SAAnE,EAA8E51B,SAA9E,EAAyF2hC,cAAc,GAAG3hC,SAAH,GAAe,KAAKyhC,iBAAL,CAAuB19B,GAAvB,EAA4BgC,IAAI,CAACnH,OAAL,CAAagB,EAAzC,CAAtH;AACA,iBAAK2hC,oBAAL,CAA0Bx9B,GAAG,CAAC4D,OAAJ,CAAY7F,QAAtC,EAAgD,IAAhD;AACH;AACJ;AACJ;AACJ;AACJ,GA7BD;AA8BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrD,EAAAA,OAAO,CAACtO,SAAR,CAAkB4xC,mBAAlB,GAAwC,UAAUpY,IAAV,EAAgB;AACpD,QAAI5jB,IAAJ;AACA,QAAI6vB,SAAS,GAAG97B,YAAY,CAAC,KAAK8E,OAAL,CAAagB,EAAd,CAA5B;;AACA,SAAK,IAAI6E,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACAsB,MAAAA,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAP;;AACA,UAAID,IAAI,CAACY,IAAL,KAAc,KAAd,IAAuB,KAAKvB,cAAhC,EAAgD;AAC5C,YAAIy8B,oBAAoB,GAAGv0B,QAAQ,CAACgH,cAAT,CAAwBvO,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAA1C,CAA3B;AACA,aAAK6L,eAAL,CAAqBq2B,UAArB,CAAgCnY,IAAhC,EAAsCkY,oBAAtC,EAA4DjM,SAA5D,EAAuE51B,SAAvE;AACH,OAHD,MAIK;AACD,aAAKmL,yBAAL,CAA+BpF,IAA/B;AACH;AACJ;AACJ,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItH,EAAAA,OAAO,CAACtO,SAAR,CAAkBwmB,iBAAlB,GAAsC,UAAUqrB,WAAV,EAAuB;AACzD,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIx9B,EAAE,GAAG,CAAT,EAAYy9B,aAAa,GAAGF,WAAjC,EAA8Cv9B,EAAE,GAAGy9B,aAAa,CAACtxC,MAAjE,EAAyE6T,EAAE,EAA3E,EAA+E;AAC3E,UAAIV,GAAG,GAAGm+B,aAAa,CAACz9B,EAAD,CAAvB;;AACA,UAAI,KAAKf,SAAL,CAAeK,GAAf,CAAJ,EAAyB;AACrBk+B,QAAAA,SAAS,CAACxuC,IAAV,CAAe,KAAKiQ,SAAL,CAAeK,GAAf,CAAf;AACH;AACJ;;AACD,WAAOk+B,SAAP;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIxjC,EAAAA,OAAO,CAACtO,SAAR,CAAkByW,mBAAlB,GAAwC,YAAY;AAChD,QAAIb,IAAJ;;AACA,SAAK,IAAItB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACAsB,MAAAA,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAP;;AACA,cAAQD,IAAI,CAACY,IAAb;AACI,aAAK,KAAL;AACI,eAAKw7B,sBAAL,CAA4Bp8B,IAA5B;AACA;;AACJ,aAAK,QAAL;AACI,eAAK+U,mBAAL,CAAyB/U,IAAzB;AACA;AANR;AAQH;AACJ,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItH,EAAAA,OAAO,CAACtO,SAAR,CAAkB2qB,mBAAlB,GAAwC,UAAU/U,IAAV,EAAgB;AACpD,QAAI,CAACA,IAAL,EAAW;AACP,WAAK,IAAItB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACA,YAAI29B,MAAM,GAAG,KAAKt8B,KAAL,CAAWE,IAAX,CAAb;AACA,aAAKmF,yBAAL,CAA+Bi3B,MAA/B;AACH;AACJ,KAND,MAOK;AACD,WAAKj3B,yBAAL,CAA+BpF,IAA/B;AACH;AACJ,GAXD;;AAYAtH,EAAAA,OAAO,CAACtO,SAAR,CAAkBkyC,kBAAlB,GAAuC,UAAUt8B,IAAV,EAAgB;AACnD,QAAI6vB,SAAS,GAAG97B,YAAY,CAACiM,IAAI,CAACnH,OAAL,CAAagB,EAAd,CAA5B;;AACA,SAAK,IAAI3O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKqxC,aAAL,CAAmB1xC,MAAvC,EAA+CK,CAAC,EAAhD,EAAoD;AAChD,UAAI2N,OAAO,GAAG,KAAK0jC,aAAL,CAAmBrxC,CAAnB,CAAd;;AACA,UAAI2N,OAAO,YAAY7J,SAAvB,EAAkC;AAC9B6J,QAAAA,OAAO,CAAC2jC,eAAR,GAA0B,CAA1B;AACH;;AACD3jC,MAAAA,OAAO,CAACuoB,OAAR,CAAgB,IAAI9wB,IAAJ,CAASuI,OAAO,CAAC2G,KAAjB,EAAwB3G,OAAO,CAAC6G,MAAhC,CAAhB;AACA7G,MAAAA,OAAO,CAACwoB,OAAR,CAAgBxoB,OAAO,CAACyoB,WAAxB;AACAthB,MAAAA,IAAI,CAAC0F,eAAL,CAAqB+2B,aAArB,CAAmC5jC,OAAnC,EAA4CmH,IAAI,CAAC0uB,YAAjD,EAA+DmB,SAA/D;AACH;AACJ,GAXD;;AAYAn3B,EAAAA,OAAO,CAACtO,SAAR,CAAkBsyC,eAAlB,GAAoC,UAAU18B,IAAV,EAAgB;AAChD,QAAI,CAAC,KAAK28B,WAAV,EAAuB;AACnB,WAAKC,WAAL,CAAiB58B,IAAjB;;AACA,UAAIA,IAAI,YAAYtH,OAApB,EAA6B;AACzBsH,QAAAA,IAAI,CAAC0uB,YAAL,CAAkBmO,UAAlB,CAA6B,IAA7B,EAAmCC,YAAnC,CAAgD98B,IAAI,CAAC4F,QAAL,CAAcV,WAA9D,EAA2E,CAA3E,EAA8E,CAA9E,EAAiFlF,IAAI,CAAC4F,QAAL,CAAcV,WAA/F,EAA4G,CAA5G,EAA+G,CAA/G;AACAlF,QAAAA,IAAI,CAAC0uB,YAAL,CAAkBmO,UAAlB,CAA6B,IAA7B,EAAmC1mB,KAAnC,CAAyC,GAAzC,EAA8C,GAA9C;AACH,OAHD,MAIK;AACD,YAAItd,OAAO,GAAG0O,QAAQ,CAACgH,cAAT,CAAwBvO,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,cAA1C,CAAd;;AACA,YAAIhB,OAAO,CAACkD,QAAR,CAAiBlR,MAAjB,GAA0B,CAA9B,EAAiC;AAC7BmV,UAAAA,IAAI,CAACE,UAAL,CAAgBF,IAAhB;AACH;AACJ;;AACD,UAAI6vB,SAAS,GAAG97B,YAAY,CAACiM,IAAI,CAACnH,OAAL,CAAagB,EAAd,CAA5B,CAZmB,CAanB;;AACA,WAAKkjC,qBAAL,CAA2B/8B,IAAI,CAAC0uB,YAAhC,EAA8C1uB,IAAI,CAAC0F,eAAnD,EAAoEmqB,SAApE;;AACA,WAAK,IAAI3kC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKqxC,aAAL,CAAmB1xC,MAAvC,EAA+CK,CAAC,EAAhD,EAAoD;AAChD,YAAI2N,OAAO,GAAG,KAAK0jC,aAAL,CAAmBrxC,CAAnB,CAAd;AACA2N,QAAAA,OAAO,CAACuoB,OAAR,CAAgB,IAAI9wB,IAAJ,CAASuI,OAAO,CAAC2G,KAAjB,EAAwB3G,OAAO,CAAC6G,MAAhC,CAAhB;AACA7G,QAAAA,OAAO,CAACwoB,OAAR,CAAgBxoB,OAAO,CAACyoB,WAAxB;AACAthB,QAAAA,IAAI,CAAC0F,eAAL,CAAqB+2B,aAArB,CAAmC5jC,OAAnC,EAA4CmH,IAAI,CAAC0uB,YAAjD,EAA+DmB,SAA/D;AACH;;AACD,UAAI7vB,IAAI,YAAYtH,OAApB,EAA6B;AACzBsH,QAAAA,IAAI,CAAC0uB,YAAL,CAAkB1yB,KAAlB,CAAwB6J,SAAxB,GAAoC,WAAY,IAAI,CAAhB,GAAqB,GAAzD;AACA7F,QAAAA,IAAI,CAAC0uB,YAAL,CAAkB1yB,KAAlB,CAAwBghC,eAAxB,GAA0C,KAA1C;AACH;;AACD,WAAK3hC,WAAL,GAAmB,IAAnB;AACH;AACJ,GA5BD;AA6BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3C,EAAAA,OAAO,CAACtO,SAAR,CAAkBgb,yBAAlB,GAA8C,UAAUpF,IAAV,EAAgB;AAC1D,QAAIlH,KAAK,GAAG,IAAZ;;AACA,QAAIkH,IAAI,CAACY,IAAL,KAAc,KAAd,IAAuB,CAAC,KAAK+7B,WAAjC,EAA8C;AAC1C,UAAI,KAAKJ,aAAL,CAAmB1xC,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,aAAKyxC,kBAAL,CAAwBt8B,IAAxB;AACH;;AACD,UAAK,CAAC,KAAKX,cAAN,IAAwB,CAAC,KAAKA,cAAL,GAAsBlO,aAAa,CAACmO,MAArC,MAAiD,CAA1E,IACInO,aAAa,CAAC2kB,UAAd,GAA2B,KAAKzW,cADpC,IACuDlK,YAAY,CAAC,IAAD,CADnE,IAC8E,KAAKyQ,QAAL,CAAcV,WAAd,KAA8B,CADhH,EACoH;AAChH,aAAKw3B,eAAL,CAAqB18B,IAArB;AACH,OAHD,MAIK,IAAI,CAAC,KAAK3E,WAAV,EAAuB;AACxB,aAAKA,WAAL,GAAmB4hC,UAAU,CAAC,YAAY;AACtCnkC,UAAAA,KAAK,CAAC4jC,eAAN,CAAsB18B,IAAtB;AACH,SAF4B,EAE1B,EAF0B,CAA7B;AAGH;AACJ;AACJ,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItH,EAAAA,OAAO,CAACtO,SAAR,CAAkB8yC,oBAAlB,GAAyC,UAAU3hC,IAAV,EAAgB4hC,cAAhB,EAAgCC,OAAhC,EAAyC;AAC9E,QAAIC,WAAJ;AACA,QAAItd,aAAa,GAAG,EAAE,KAAKA,aAAL,IAAsB,KAAKA,aAAL,CAAmB5jB,KAA3C,IAAoD,IAApD,GAA2D,KAA/E;;AACA,QAAIZ,IAAI,YAAYtM,IAAhB,IAAwB8wB,aAAxB,IAAyC/pB,OAAO,CAACuF,IAAD,CAApD,EAA4D;AACxD,UAAIiI,KAAK,GAAGjI,IAAI,CAACiI,KAAjB;AACA,UAAI85B,OAAO,GAAG,KAAd;;AACA,WAAK,IAAIpyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsY,KAAK,CAAC3Y,MAA1B,EAAkCK,CAAC,EAAnC,EAAuC;AACnCmyC,QAAAA,WAAW,GAAG,KAAKrX,UAAL,CAAgBzqB,IAAI,CAACqG,OAArB,EAA8B4B,KAAK,CAACtY,CAAD,CAAL,CAAS2O,EAAvC,CAAd;;AACA,YAAKsjC,cAAc,GAAGlsC,cAAc,CAACssC,KAAhC,IAAyCJ,cAAc,GAAGlsC,cAAc,CAACusC,OAA9E,EAAwF;AACpF,cAAIvrC,oBAAoB,CAACuR,KAAK,CAACtY,CAAD,CAAN,EAAWiyC,cAAX,CAAxB,EAAoD;AAChDE,YAAAA,WAAW,CAACnd,OAAZ,GAAsB,CAACkd,OAAvB;AACAE,YAAAA,OAAO,GAAG,IAAV;AACH;AACJ;AACJ;;AACD,UAAIA,OAAJ,EAAa;AACT,aAAK/b,mBAAL,CAAyBhmB,IAAzB;AACH;AACJ;AACJ,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7C,EAAAA,OAAO,CAACtO,SAAR,CAAkBgyC,sBAAlB,GAA2C,UAAUp8B,IAAV,EAAgB;AACvD,QAAInH,OAAJ;AACA,QAAIijC,oBAAoB,GAAGv0B,QAAQ,CAACgH,cAAT,CAAwBvO,IAAI,CAACnH,OAAL,CAAagB,EAAb,GAAkB,eAA1C,CAA3B;AACA,QAAIg2B,SAAS,GAAG97B,YAAY,CAACiM,IAAI,CAACnH,OAAL,CAAagB,EAAd,CAA5B;;AACA,QAAI,CAAC1E,YAAY,CAAC,IAAD,CAAjB,EAAyB;AACrB,WAAK,IAAIjK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKqxC,aAAL,CAAmB1xC,MAAvC,EAA+CK,CAAC,EAAhD,EAAoD;AAChD2N,QAAAA,OAAO,GAAG,KAAK0jC,aAAL,CAAmBrxC,CAAnB,CAAV;AACA2N,QAAAA,OAAO,CAACuoB,OAAR,CAAgB,IAAI9wB,IAAJ,CAASuI,OAAO,CAAC2G,KAAjB,EAAwB3G,OAAO,CAAC6G,MAAhC,CAAhB;AACA7G,QAAAA,OAAO,CAACwoB,OAAR,CAAgBxoB,OAAO,CAACyoB,WAAxB,EAAsC,EAAE,KAAKjiB,cAAL,GAAsBlO,aAAa,CAACmO,MAAtC,IAAgD,IAAhD,GAAuD,KAA7F;AACA,aAAKoG,eAAL,CAAqB+2B,aAArB,CAAmC5jC,OAAnC,EAA4CijC,oBAA5C,EAAkEjM,SAAlE;AACH;;AACD,WAAKkN,qBAAL,CAA2BjB,oBAA3B,EAAiD,KAAKp2B,eAAtD,EAAuEmqB,SAAvE;AACH,KARD,MASK;AACD,WAAKjqB,QAAL,CAAc63B,kBAAd;AACH;AACJ,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/kC,EAAAA,OAAO,CAACtO,SAAR,CAAkBszC,oBAAlB,GAAyC,UAAUC,gBAAV,EAA4B;AACjE,QAAI,KAAKnjC,mBAAT,EAA8B;AAC1B,WAAK,IAAItP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK0a,QAAL,CAAcqd,gBAAd,CAA+Bp4B,MAAnD,EAA2DK,CAAC,EAA5D,EAAgE;AAC5D,YAAI8S,GAAG,GAAG,KAAKL,SAAL,CAAe,KAAKiI,QAAL,CAAcqd,gBAAd,CAA+B/3B,CAA/B,CAAf,CAAV;AACA,aAAK80B,cAAL,CAAoBhiB,GAApB;AACH;;AACD,WAAKxD,mBAAL,GAA2B,KAA3B;AACH;;AACD4T,IAAAA,aAAa,CAACuvB,gBAAD,CAAb;AACH,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjlC,EAAAA,OAAO,CAACtO,SAAR,CAAkBq3B,sBAAlB,GAA2C,UAAUxM,MAAV,EAAkB;AACzD,SAAK,IAAIxR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwR,MAAM,CAACrT,OAAP,CAAe7F,QAAf,CAAwBlR,MAA5C,EAAoD4Y,CAAC,EAArD,EAAyD;AACrD,UAAI5K,OAAO,GAAGoc,MAAM,CAACrT,OAAP,CAAe7F,QAAf,CAAwB0H,CAAxB,CAAd;;AACA,UAAI5K,OAAO,YAAYpH,WAAvB,EAAoC;AAChCoH,QAAAA,OAAO,CAAC+kC,UAAR,GAAqB,IAArB;AACA/kC,QAAAA,OAAO,CAACuoB,OAAR,CAAgB,IAAI9wB,IAAJ,CAAS2kB,MAAM,CAACzV,KAAhB,EAAuByV,MAAM,CAACvV,MAA9B,CAAhB;AACA7G,QAAAA,OAAO,CAACwoB,OAAR,CAAgBxoB,OAAO,CAACyoB,WAAxB;AACH;AACJ;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkByzC,oBAAlB,GAAyC,UAAUp/B,UAAV,EAAsBvQ,MAAtB,EAA8B4vC,WAA9B,EAA2C;AAChF,QAAIhC,oBAAoB,GAAGv0B,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,eAA1C,CAA3B;AACA,QAAIg2B,SAAS,GAAG97B,YAAY,CAAC,KAAK8E,OAAL,CAAagB,EAAd,CAA5B;;AACA,QAAI,KAAK+G,IAAL,KAAc,KAAlB,EAAyB;AACrB,WAAK,IAAI1V,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuT,UAAU,CAAC5T,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAImV,KAAK,GAAG,KAAKuF,QAAL,CAAcqd,gBAAd,CAA+BzN,OAA/B,CAAuC/W,UAAU,CAACvT,CAAD,CAAjD,CAAZ;;AACA,YAAImV,KAAK,IAAI,CAAb,EAAgB;AACZ,eAAKuF,QAAL,CAAcqd,gBAAd,CAA+B7D,MAA/B,CAAsC/e,KAAtC,EAA6C,CAA7C;AACH;;AACD,YAAI4U,MAAM,GAAG,KAAKtX,SAAL,CAAec,UAAU,CAACvT,CAAD,CAAzB,CAAb;AACA,aAAKu2B,sBAAL,CAA4BxM,MAA5B;AACA,aAAKvP,eAAL,CAAqB+2B,aAArB,CAAmCxnB,MAAM,CAACrT,OAA1C,EAAmDk6B,oBAAnD,EAAyEjM,SAAzE,EAAoF51B,SAApF,EAA+FA,SAA/F,EAA0GA,SAA1G,EAAqHA,SAArH,EAAgIgb,MAAM,CAACxB,MAAvI;AACH;;AACD,WAAK,IAAI0Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2Z,WAAW,CAACjzC,MAAhC,EAAwCs5B,CAAC,EAAzC,EAA6C;AACzC,aAAKve,QAAL,CAAcqd,gBAAd,CAA+Bv1B,IAA/B,CAAoCowC,WAAW,CAAC3Z,CAAD,CAA/C;AACH;;AACD,UAAI,KAAKve,QAAL,CAAcV,WAAd,KAA8B,CAAlC,EAAqC;AACjC,aAAKvF,YAAL,CAAkBo+B,oBAAlB;AACH;AACJ,KAhBD,MAiBK,IAAI,KAAK1+B,cAAT,EAAyB;AAC1B,WAAKwB,mBAAL;AACH;AACJ,GAvBD;AAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInI,EAAAA,OAAO,CAACtO,SAAR,CAAkB2yC,qBAAlB,GAA0C,UAAUrR,MAAV,EAAkBsS,QAAlB,EAA4BnO,SAA5B,EAAuChqB,SAAvC,EAAkDo4B,UAAlD,EAA8DC,UAA9D,EAA0E;AAChH,QAAIr4B,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,MAAAA,SAAS,GAAG,IAAZ;AAAmB;;AAC/C,QAAIs4B,UAAU,GAAG,KAAKv4B,QAAL,CAAcw4B,aAAd,EAAjB;AACAD,IAAAA,UAAU,CAAC3pB,CAAX,IAAgB,KAAK5O,QAAL,CAAcV,WAA9B;AACAi5B,IAAAA,UAAU,CAACpxC,CAAX,IAAgB,KAAK6Y,QAAL,CAAcV,WAA9B;AACAi5B,IAAAA,UAAU,CAAC3+B,KAAX,IAAoB,KAAKoG,QAAL,CAAcV,WAAlC;AACAi5B,IAAAA,UAAU,CAACz+B,MAAX,IAAqB,KAAKkG,QAAL,CAAcV,WAAnC;AACA,QAAIm5B,IAAI,GAAG,CAAC,KAAKz4B,QAAL,CAAc2F,gBAAf,GAAkC4yB,UAAU,CAAC3pB,CAAxD;AACA,QAAI8pB,IAAI,GAAG,CAAC,KAAK14B,QAAL,CAAc0F,cAAf,GAAgC6yB,UAAU,CAACpxC,CAAtD;;AACA,SAAK,IAAI2R,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY,KAAKyL,gBAAjB,CAAtB,EAA0D/J,EAAE,GAAGC,EAAE,CAAC9T,MAAlE,EAA0E6T,EAAE,EAA5E,EAAgF;AAC5E,UAAIqU,OAAO,GAAGpU,EAAE,CAACD,EAAD,CAAhB;AACA,UAAI+T,KAAK,GAAG,KAAK5J,cAAL,CAAoB6J,QAApB,CAA6B,KAAKjK,gBAAL,CAAsBsK,OAAtB,CAA7B,CAAZ;AACA,UAAIqI,IAAI,GAAG,KAAK,CAAhB;AACA,UAAImjB,KAAK,GAAG,KAAK,CAAjB;;AACA,UAAI,KAAK39B,IAAL,KAAc,QAAd,IAA0BzL,YAAY,CAAC,IAAD,CAAtC,IAAgD,CAAC,KAAKkK,cAA1D,EAA0E;AACtE,aAAKuG,QAAL,CAAc63B,kBAAd;AACH;;AACD,UAAI5jC,EAAE,GAAI,KAAK+G,IAAL,KAAc,QAAd,IAA0BzL,YAAY,CAAC,IAAD,CAAtC,IACN,KAAKyQ,QAAL,CAAc44B,oBAAd,CAAmC3zC,MAAnC,GAA4C,CADvC,GAEL,KAAK+a,QAAL,CAAc44B,oBAFT,GAEgCvkC,SAFzC;;AAGA,WAAK,IAAI4F,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGlW,MAAM,CAACoT,IAAP,CAAYnD,EAAE,IAAI4Y,KAAK,CAAC1D,WAAxB,CAAtB,EAA4DlP,EAAE,GAAGC,EAAE,CAACjV,MAApE,EAA4EgV,EAAE,EAA9E,EAAkF;AAC9E,YAAItE,IAAI,GAAGuE,EAAE,CAACD,EAAD,CAAb;AACA,YAAI4+B,UAAU,GAAG5kC,EAAE,GAAG,KAAK8D,SAAL,CAAe9D,EAAE,CAAC0B,IAAD,CAAjB,CAAH,GAA8B,KAAKoC,SAAL,CAAe8U,KAAK,CAAC1D,WAAN,CAAkBxT,IAAlB,CAAf,CAAjD;;AACA,YAAIkjC,UAAU,IAAI,CAAEA,UAAU,CAAC3kC,QAA3B,IAAwC2Y,KAAK,CAACyN,OAA9C,KACC,CAAEue,UAAU,CAACxW,SAAb,IAA2B,KAAK9e,UADjC,CAAJ,EACkD;AAC9C,cAAIu1B,cAAc,GAAG;AACjBhqB,YAAAA,EAAE,EAAE,KAAK9O,QAAL,CAAcC,SAAd,CAAwB6O,EADX;AAEjBC,YAAAA,EAAE,EAAE,KAAK/O,QAAL,CAAcC,SAAd,CAAwB8O,EAFX;AAGjBwB,YAAAA,KAAK,EAAE,KAAKvQ,QAAL,CAAcC,SAAd,CAAwBsQ;AAHd,WAArB;;AAKA,cAAIhhB,YAAY,CAAC,IAAD,CAAhB,EAAwB;AACpB,gBAAI,KAAKyQ,QAAL,CAAcV,WAAd,GAA4B,CAAhC,EAAmC;AAC/B,kBAAIi5B,UAAU,CAAC3pB,CAAX,GAAe,CAAf,IAAoB,KAAK5O,QAAL,CAAc2F,gBAAd,GAAiC,CAAzD,EAA4D;AACxD,oBAAIozB,aAAa,GAAG,KAAK/4B,QAAL,CAAc0F,cAAd,GAA+B,CAA/B,GAAmC,KAAK1F,QAAL,CAAc0F,cAAjD,GAAkE,CAAtF;AACA8P,gBAAAA,IAAI,GAAG,CAACijB,IAAI,GAAG,CAAP,GAAWA,IAAX,GAAkB,CAAnB,IAAwB,IAA/B;AACAE,gBAAAA,KAAK,GAAG,CAAE,KAAK97B,WAAL,GAAmBpR,UAAU,CAACutC,eAA/B,GAAkD,CAAlD,GAAsD,CAACD,aAAxD,IAAyE,IAAjF;AACH,eAJD,MAKK;AACDvjB,gBAAAA,IAAI,GAAG,IAAI,IAAX;AACAmjB,gBAAAA,KAAK,GAAG,IAAI,IAAZ;AACH;;AACD,kBAAI,KAAK97B,WAAL,GAAmBpR,UAAU,CAACwtC,eAAlC,EAAmD;AAC/C,qBAAKp8B,WAAL,GAAmB,KAAKA,WAAL,GAAmB,CAACpR,UAAU,CAACwtC,eAAlD;AACH;;AACD,kBAAI,KAAKp8B,WAAL,GAAmBpR,UAAU,CAACutC,eAAlC,EAAmD;AAC/C,qBAAKn8B,WAAL,GAAmB,KAAKA,WAAL,GAAmB,CAACpR,UAAU,CAACutC,eAAlD;AACH;AACJ,aAhBD,MAiBK;AACDxjB,cAAAA,IAAI,GAAG,CAAC+iB,UAAU,CAAC3pB,CAAX,GAAe,CAAf,GAAmB6pB,IAAnB,GAA0B,CAAC,KAAKz4B,QAAL,CAAc2F,gBAA1C,IAA8D,IAArE;AACAgzB,cAAAA,KAAK,GAAG,CAACJ,UAAU,CAACpxC,CAAX,GAAe,CAAf,GAAmBuxC,IAAnB,GAA0B,CAAC,KAAK14B,QAAL,CAAc0F,cAA1C,IAA4D,IAApE;AACH;;AACD,iBAAKojB,YAAL,CAAkB1yB,KAAlB,CAAwBof,IAAxB,GAA+BA,IAA/B;AACA,iBAAKsT,YAAL,CAAkB1yB,KAAlB,CAAwBqf,GAAxB,GAA8BkjB,KAA9B;AACAG,YAAAA,cAAc,CAAChqB,EAAf,GAAoB,KAAK9O,QAAL,CAAc2F,gBAAd,GAAiCmzB,cAAc,CAACvoB,KAApE;AACAuoB,YAAAA,cAAc,CAAC/pB,EAAf,GAAoB,KAAK/O,QAAL,CAAc0F,cAAd,GAA+BozB,cAAc,CAACvoB,KAAlE;AACH;;AACD,cAAI2oB,QAAQ,GAAG,IAAf;;AACA,cAAIb,UAAJ,EAAgB;AACZa,YAAAA,QAAQ,GAAG,KAAX;AACH;;AACD,eAAKrd,sBAAL,CAA4Bgd,UAA5B;;AACA,cAAI,KAAKt1B,UAAT,EAAqB;AACjB,gBAAIs1B,UAAU,CAACtiC,KAAX,CAAiBykB,QAAjB,IAA6B6d,UAAU,CAACtiC,KAAX,CAAiBykB,QAAjB,CAA0BC,UAAvD,IACG4d,UAAU,CAACtiC,KAAX,CAAiBykB,QAAjB,CAA0BC,UAA1B,CAAqCC,SAD5C,EACuD;AACnD,mBAAK,IAAI51B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuzC,UAAU,CAACtiC,KAAX,CAAiBykB,QAAjB,CAA0BC,UAA1B,CAAqCC,SAArC,CAA+Cj2B,MAAnE,EAA2EK,CAAC,EAA5E,EAAgF;AAC5E,oBAAIumB,OAAO,GAAGgtB,UAAU,CAACtiC,KAAX,CAAiBykB,QAAjB,CAA0BC,UAA1B,CAAqCC,SAArC,CAA+C51B,CAA/C,CAAd;AACAuzC,gBAAAA,UAAU,CAAC78B,OAAX,CAAmB7F,QAAnB,CAA4BrO,IAA5B,CAAiC,KAAKiQ,SAAL,CAAe8T,OAAf,EAAwB7P,OAAzD;AACH;;AACD68B,cAAAA,UAAU,CAAC78B,OAAX,CAAmBwf,OAAnB,CAA2B,IAAI9wB,IAAJ,CAASmuC,UAAU,CAAC78B,OAAX,CAAmB4U,MAAnB,CAA0BhX,KAAnC,EAA0Ci/B,UAAU,CAAC78B,OAAX,CAAmB4U,MAAnB,CAA0B9W,MAApE,CAA3B;AACA++B,cAAAA,UAAU,CAAC78B,OAAX,CAAmByf,OAAnB,CAA2Bod,UAAU,CAAC78B,OAAX,CAAmB0f,WAA9C;AACH;AACJ;;AACD0c,UAAAA,QAAQ,CAACvB,aAAT,CAAuBgC,UAAU,CAAC78B,OAAlC,EAA2C8pB,MAA3C,EAAmDmE,SAAnD,EAA+D,CAACmO,QAAQ,CAACe,SAAV,IAAuBl5B,SAAxB,GAAqC64B,cAArC,GAAsDzkC,SAApH,EAA+HA,SAA/H,EAA0IA,SAA1I,EAAqJ6kC,QAAQ,KAAK,CAAC,KAAKz/B,cAAN,IAAwB6+B,UAA7B,CAA7J;AACH;AACJ;AACJ;AACJ,GA7ED;AA8EA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxlC,EAAAA,OAAO,CAACtO,SAAR,CAAkBkX,cAAlB,GAAmC,UAAUmvB,MAAV,EAAkB;AACjD,QAAI,KAAKuO,cAAT,EAAyB;AACrB,WAAK,IAAI9zC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7C,YAAIyR,SAAS,GAAG,KAAKH,UAAL,CAAgBtR,CAAhB,CAAhB;AACA,aAAK8zC,cAAL,CAAoB19B,cAApB,CAAmC3E,SAAnC,EAA8C,IAA9C;AACA,YAAI+uB,MAAM,GAAG,KAAKlvB,UAAL,CAAgBtR,CAAhB,EAAmB0W,OAAhC;;AACA,YAAI8pB,MAAJ,EAAY;AACR,cAAIuT,WAAW,GAAGvT,MAAM,CAAC3vB,QAAP,CAAgB,CAAhB,CAAlB;AACA,cAAIsC,IAAI,GAAG4gC,WAAW,CAAC5gC,IAAvB;AACA1B,UAAAA,SAAS,CAACuiC,iBAAV,CAA4BviC,SAA5B,EAAuCsiC,WAAvC,EAAoD,KAAK98B,MAAL,CAAY/F,IAAZ,KAAqB,yBAArB,IAAkD,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAAvE,GAChD,KAAK+F,MAAL,CAAYmZ,WADoC,GACtBrhB,SAD9B;;AAEA,cAAIglC,WAAW,CAAC5gC,IAAZ,KAAqBA,IAAzB,EAA+B;AAC3BqtB,YAAAA,MAAM,CAACtK,OAAP,CAAe,IAAI9wB,IAAJ,EAAf;AACAo7B,YAAAA,MAAM,CAACrK,OAAP,CAAeqK,MAAM,CAACpK,WAAtB;;AACA,gBAAI,KAAK1gB,IAAL,KAAc,KAAd,IAAuB,CAAC6vB,MAA5B,EAAoC;AAChC,mBAAKlP,mBAAL,CAAyB5kB,SAAzB;AACH;AACJ;AACJ;AACJ;AACJ;AACJ,GArBD;AAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjE,EAAAA,OAAO,CAACtO,SAAR,CAAkBiwB,SAAlB,GAA8B,UAAUpC,MAAV,EAAkB;AAC5C,SAAKvS,eAAL,CAAqB2U,SAArB,CAA+B,KAAK1K,aAApC,EAAmDsI,MAAnD;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvf,EAAAA,OAAO,CAACtO,SAAR,CAAkBwyC,WAAlB,GAAgC,UAAU58B,IAAV,EAAgB;AAC5C;AACA;AACA,QAAIR,KAAK,GAAGQ,IAAI,CAACm/B,YAAL,IAAqBn/B,IAAI,CAAC0uB,YAAL,CAAkBlvB,KAAlB,GAA0B,KAAKoG,QAAL,CAAcV,WAAzE;AACA,QAAIxF,MAAM,GAAGM,IAAI,CAACo/B,aAAL,IAAsBp/B,IAAI,CAAC0uB,YAAL,CAAkBhvB,MAAlB,GAA2B,KAAKkG,QAAL,CAAcV,WAA5E;;AACA,QAAIlF,IAAI,CAACY,IAAL,KAAc,KAAlB,EAAyB;AACrB,UAAIy+B,GAAG,GAAG3wC,cAAc,CAACmuC,UAAf,CAA0B78B,IAAI,CAAC0uB,YAA/B,CAAV;AACA2Q,MAAAA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB9/B,KAApB,EAA2BE,MAA3B;AACH;AACJ,GATD;AAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIhH,EAAAA,OAAO,CAACtO,SAAR,CAAkBohB,kBAAlB,GAAuC,YAAY;AAC/C,SAAK5F,QAAL,CAAc25B,eAAd,CAA8B,KAAK5vB,aAAL,CAAmB6vB,UAAjD,EAA6D,KAAK7vB,aAAL,CAAmB8vB,SAAhF;AACAvvC,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAIiF,YAAY,CAAC,IAAD,CAAhB,EAAwB;AACpB,WAAKyQ,QAAL,CAAc63B,kBAAd;AACH;AACJ,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/kC,EAAAA,OAAO,CAACtO,SAAR,CAAkBs1C,SAAlB,GAA8B,UAAU/oB,OAAV,EAAmBC,OAAnB,EAA4B;AACtD,QAAIxN,QAAQ,GAAG,UAAf;;AACA,QAAI,CAAC1N,MAAM,CAAC0N,QAAD,CAAN,CAAiB,KAAKvQ,OAAL,CAAagB,EAAb,GAAkB,SAAnC,CAAL,EAAoD;AAChD6B,MAAAA,MAAM,CAAC0N,QAAD,CAAN,CAAiB,KAAKvQ,OAAL,CAAagB,EAAb,GAAkB,SAAnC,IAAgD0N,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,SAA1C,CAAhD;AACH;;AACD,QAAIwqB,SAAS,GAAG3oB,MAAM,CAAC0N,QAAD,CAAN,CAAiB,KAAKvQ,OAAL,CAAagB,EAAb,GAAkB,SAAnC,CAAhB;;AACA,QAAIwqB,SAAJ,EAAe;AACXA,MAAAA,SAAS,CAACmb,UAAV,GAAuB7oB,OAAvB;AACA0N,MAAAA,SAAS,CAACob,SAAV,GAAsB7oB,OAAtB;AACH;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIle,EAAAA,OAAO,CAACtO,SAAR,CAAkB+b,OAAlB,GAA4B,UAAU3G,KAAV,EAAiBE,MAAjB,EAAyB;AACjD,QAAI,KAAKgvB,YAAL,IAAqB,CAAC,KAAKlF,oBAA/B,EAAqD;AACjD,UAAIrS,QAAQ,GAAGhnB,YAAY,CAAC,IAAD,CAA3B;AACAqP,MAAAA,KAAK,IAAI2X,QAAQ,CAAC3X,KAAlB;AACAE,MAAAA,MAAM,IAAIyX,QAAQ,CAACzX,MAAnB;AACA,UAAI8W,MAAM,GAAG,KAAK1N,aAAL,CAAmBs1B,aAAnB,EAAb;AACA5nB,MAAAA,MAAM,CAAChC,CAAP,IAAY,KAAK5O,QAAL,CAAcV,WAA1B;AACAsR,MAAAA,MAAM,CAACzpB,CAAP,IAAY,KAAK6Y,QAAL,CAAcV,WAA1B;AACAsR,MAAAA,MAAM,CAAChX,KAAP,IAAgB,KAAKoG,QAAL,CAAcV,WAA9B;AACAsR,MAAAA,MAAM,CAAC9W,MAAP,IAAiB,KAAKkG,QAAL,CAAcV,WAA/B;AACA,UAAI6U,MAAM,GAAG,KAAKnZ,IAAL,KAAc,KAAd,GAAsB,CAAtB,GAA0B,GAAvC;AACA,UAAI8tB,YAAY,GAAG,KAAK9tB,IAAL,KAAc,KAAd,GACfrM,kBAAkB,CAAC,KAAKsE,OAAL,CAAagB,EAAd,CADH,GACuB,KAAK60B,YAD/C;AAEA,UAAIiR,CAAC,GAAI,KAAK/+B,IAAL,KAAc,QAAd,IACJ,KAAKkB,WAAL,GAAmB/Q,kBAAkB,CAACoiC,cADnC,GACsD,KAAKvtB,QAAL,CAAc0iB,aADpE,GACoF9oB,KAD5F;AAEA,UAAIogC,CAAC,GAAI,KAAKh/B,IAAL,KAAc,QAAd,IACJ,KAAKkB,WAAL,GAAmB/Q,kBAAkB,CAACoiC,cADnC,GACsD,KAAKvtB,QAAL,CAAc2iB,cADpE,GACqF7oB,MAD7F;AAEAgvB,MAAAA,YAAY,CAACV,YAAb,CAA0B,OAA1B,EAAmC,CAACjU,MAAM,GAAG4lB,CAAV,EAAa3Y,QAAb,EAAnC;AACA0H,MAAAA,YAAY,CAACV,YAAb,CAA0B,QAA1B,EAAoC,CAACjU,MAAM,GAAG6lB,CAAV,EAAa5Y,QAAb,EAApC;AACA,UAAIlb,wBAAwB,GAAGvE,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,yBAA1C,CAA/B;;AACA,UAAIiS,wBAAJ,EAA8B;AAC1BA,QAAAA,wBAAwB,CAAC9P,KAAzB,CAA+BwD,KAA/B,GAAuCA,KAAK,GAAG,IAA/C;AACAsM,QAAAA,wBAAwB,CAAC9P,KAAzB,CAA+B0D,MAA/B,GAAwCA,MAAM,GAAG,IAAjD;AACH;;AACD,UAAI2tB,IAAI,GAAG;AAAE,iBAAS7tB,KAAK,CAACwnB,QAAN,EAAX;AAA6B,kBAAUtnB,MAAM,CAACsnB,QAAP;AAAvC,OAAX;AACA,WAAKwH,eAAL,CAAqBxyB,KAArB,CAA2BwD,KAA3B,GAAmCA,KAAK,GAAG,IAA3C;AACA,WAAKgvB,eAAL,CAAqBxyB,KAArB,CAA2B0D,MAA3B,GAAoCA,MAAM,GAAG,IAA7C;AACAnM,MAAAA,eAAe,CAACa,iBAAiB,CAAC,KAAKyE,OAAL,CAAagB,EAAd,CAAlB,EAAqCwzB,IAArC,CAAf;AACA95B,MAAAA,eAAe,CAACe,eAAe,CAAC,KAAKuE,OAAL,CAAagB,EAAd,CAAhB,EAAmCwzB,IAAnC,CAAf;AACA,UAAIwS,UAAU,GAAGprC,kBAAkB,CAAC,KAAKoE,OAAL,CAAagB,EAAd,CAAnC;AACAtG,MAAAA,eAAe,CAACssC,UAAD,EAAaxS,IAAb,CAAf;AACAwS,MAAAA,UAAU,CAACpxB,UAAX,CAAsBzS,KAAtB,CAA4BwD,KAA5B,GAAoCA,KAAK,GAAG,IAA5C;AACAqgC,MAAAA,UAAU,CAACpxB,UAAX,CAAsBzS,KAAtB,CAA4B0D,MAA5B,GAAqCA,MAAM,GAAG,IAA9C;AACA,UAAIogC,SAAS,GAAGnrC,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAA/B;AACAtG,MAAAA,eAAe,CAACusC,SAAD,EAAYzS,IAAZ,CAAf;AACA,WAAK3nB,eAAL,CAAqBC,UAArB,CAAgC,KAAKL,YAArC,EAAmDw6B,SAAnD,EAA8D,KAAKl6B,QAAL,CAAcC,SAA5E,EAAuF,KAAKC,aAA5F,EAA2G,KAAKC,MAAhH,EAAwH,KAAKC,MAA7H;AACAzS,MAAAA,eAAe,CAACqB,qBAAqB,CAAC,KAAKiE,OAAL,CAAagB,EAAd,CAAtB,EAAyCwzB,IAAzC,CAAf;AACA,WAAKwC,SAAL,CAAe7zB,KAAf,CAAqBwD,KAArB,GAA6BA,KAAK,GAAG,IAArC;AACA,WAAKqwB,SAAL,CAAe7zB,KAAf,CAAqB0D,MAArB,GAA8BA,MAAM,GAAG,IAAvC;;AACA,UAAI,KAAKkB,IAAL,KAAc,KAAd,IAAuB,CAAEzL,YAAY,CAAC,IAAD,CAAzC,EAAkD;AAC9C,aAAK0L,mBAAL;AACH;;AACD,UAAI,KAAKD,IAAL,KAAc,KAAd,IAAuBzL,YAAY,CAAC,IAAD,CAAvC,EAA+C;AAC3C,aAAKyQ,QAAL,CAAc63B,kBAAd;AACH;AACJ;AACJ,GA9CD;AA+CA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI/kC,EAAAA,OAAO,CAACtO,SAAR,CAAkB21C,eAAlB,GAAoC,YAAY;AAC5C,QAAIvpB,MAAM,GAAG,KAAK1N,aAAL,CAAmBs1B,aAAnB,EAAb;AACA5nB,IAAAA,MAAM,CAAChC,CAAP,IAAY,KAAK5O,QAAL,CAAcV,WAA1B;AACAsR,IAAAA,MAAM,CAACzpB,CAAP,IAAY,KAAK6Y,QAAL,CAAcV,WAA1B;AACAsR,IAAAA,MAAM,CAAChX,KAAP,IAAgB,KAAKoG,QAAL,CAAcV,WAA9B;AACAsR,IAAAA,MAAM,CAAC9W,MAAP,IAAiB,KAAKkG,QAAL,CAAcV,WAA/B;AACA,SAAKQ,eAAL,CAAqBC,UAArB,CAAgC,KAAKL,YAArC,EAAmD3Q,eAAe,CAAC,KAAKkE,OAAL,CAAagB,EAAd,CAAlE,EAAqF,KAAK+L,QAAL,CAAcC,SAAnG,EAA8G,KAAKC,aAAnH,EAAkI,KAAKC,MAAvI,EAA+I,KAAKC,MAApJ;AACA,SAAKN,eAAL,CAAqBq6B,eAArB,CAAqC,KAAKn6B,QAAL,CAAcC,SAAnD,EAA8D,KAAKjF,IAAL,KAAc,KAA5E;;AACA,QAAI,EAAE,KAAKvB,cAAL,GAAsBlO,aAAa,CAACukB,cAAtC,CAAJ,EAA2D;AACvD,WAAKD,cAAL;AACH;;AACD,SAAKzK,gBAAL,CAAsBwL,MAAtB;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI9d,EAAAA,OAAO,CAACtO,SAAR,CAAkB41C,gBAAlB,GAAqC,YAAY;AAC7C,QAAI,KAAKtR,YAAT,EAAuB;AACnB,UAAIuR,IAAI,GAAGhsC,kBAAkB,CAAC,KAAK4E,OAAL,CAAagB,EAAd,CAA7B;;AACA,UAAIomC,IAAI,IAAIA,IAAI,CAACC,UAAjB,EAA6B;AACzB,YAAIC,QAAQ,GAAGF,IAAI,CAACC,UAAL,CAAgBr1C,MAA/B;;AACA,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGi1C,QAApB,EAA8Bj1C,CAAC,EAA/B,EAAmC;AAC/B+0C,UAAAA,IAAI,CAACvxB,WAAL,CAAiBuxB,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAAjB;AACH;AACJ;AACJ;AACJ,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxnC,EAAAA,OAAO,CAACtO,SAAR,CAAkB4gB,gBAAlB,GAAqC,UAAUwL,MAAV,EAAkB;AACnD,SAAKwpB,gBAAL;AACA,QAAII,eAAe,GAAGnsC,kBAAkB,CAAC,KAAK4E,OAAL,CAAagB,EAAd,CAAxC;;AACA,QAAIumC,eAAJ,EAAqB;AACjB,UAAIl1C,CAAC,GAAG,CAAR;AACAsrB,MAAAA,MAAM,GAAG,KAAK5Q,QAAL,CAAcw4B,aAAd,CAA4B,IAA5B,CAAT;AACA,UAAI5pB,CAAC,GAAG,CAAC,KAAK5O,QAAL,CAAcC,SAAd,CAAwB6O,EAAxB,GAA6B8B,MAAM,CAAChC,CAArC,IAA0C,KAAK5O,QAAL,CAAcV,WAAhE;AACA,UAAInY,CAAC,GAAG,CAAC,KAAK6Y,QAAL,CAAcC,SAAd,CAAwB8O,EAAxB,GAA6B6B,MAAM,CAACzpB,CAArC,IAA0C,KAAK6Y,QAAL,CAAcV,WAAhE;AACA,UAAIxF,MAAM,GAAG8W,MAAM,CAAC9W,MAAP,GAAgB,KAAKkG,QAAL,CAAcV,WAA3C;AACA,UAAI1F,KAAK,GAAGgX,MAAM,CAAChX,KAAP,GAAe,KAAKoG,QAAL,CAAcV,WAAzC;AACAtW,MAAAA,eAAe,CAACyxC,wBAAhB,CAAyC,KAAKl0B,YAAL,CAAkBmhB,UAA3D,EAAuE,KAAKz0B,OAA5E,EAAqF2b,CAArF,EAAwFznB,CAAxF,EAA2FyS,KAA3F,EAAkGE,MAAlG;AACA,UAAI9G,OAAO,GAAG;AACViB,QAAAA,EAAE,EAAEumC,eAAe,CAACvmC,EAAhB,GAAqB,MADf;AACuB2a,QAAAA,CAAC,EAAEA,CAD1B;AAEVznB,QAAAA,CAAC,EAAEA,CAFO;AAGV2S,QAAAA,MAAM,EAAEA,MAHE;AAIVF,QAAAA,KAAK,EAAEA,KAJG;AAIIkX,QAAAA,KAAK,EAAE,CAJX;AAIc4pB,QAAAA,MAAM,EAAE,EAJtB;AAI0BC,QAAAA,WAAW,EAAE,CAJvC;AAKVtkC,QAAAA,IAAI,EAAE,KAAKkQ,YAAL,CAAkBmhB,UAAlB,CAA6BkT,KALzB;AAKgCC,QAAAA,OAAO,EAAE,CALzC;AAMVC,QAAAA,MAAM,EAAE,CANE;AAMCC,QAAAA,MAAM,EAAE,CANT;AAMYzgB,QAAAA,OAAO,EAAE,IANrB;AAM2B0gB,QAAAA,SAAS,EAAE;AANtC,OAAd;AAQA,WAAKl7B,eAAL,CAAqBm7B,QAArB,CAA8BT,eAA9B,EAA+CxnC,OAA/C;;AACA,UAAI,KAAKuT,YAAL,CAAkB20B,cAAtB,EAAsC;AAClC,YAAIriC,UAAU,GAAG,KAAKmH,QAAL,CAAcm7B,YAAd,CAA2BvqB,MAA3B,CAAjB;;AACA,aAAKtrB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuT,UAAU,CAAC5T,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACpC,eAAKwa,eAAL,CAAqBs7B,QAArB,CAA8BZ,eAA9B,EAA+C;AAC3Ca,YAAAA,KAAK,EAAE,sBADoC;AAE3ChlC,YAAAA,IAAI,EAAE,MAFqC;AAE7BqkC,YAAAA,MAAM,EAAE,SAFqB;AAEVC,YAAAA,WAAW,EAAE,CAFH;AAEMK,YAAAA,SAAS,EAAE,OAFjB;AAG3CH,YAAAA,OAAO,EAAE,CAHkC;AAG/BjsB,YAAAA,CAAC,EAAE,CAH4B;AAGzBznB,YAAAA,CAAC,EAAE,CAHsB;AAGnByS,YAAAA,KAAK,EAAE,CAHY;AAGTE,YAAAA,MAAM,EAAE,CAHC;AAGEgX,YAAAA,KAAK,EAAE,CAHT;AAGYgqB,YAAAA,MAAM,EAAE,CAHpB;AAGuBC,YAAAA,MAAM,EAAE,CAH/B;AAGkCzgB,YAAAA,OAAO,EAAE,IAH3C;AAI3CghB,YAAAA,UAAU,EAAE;AACR1sB,cAAAA,CAAC,EAAE,CAAC/V,UAAU,CAACvT,CAAD,CAAV,CAAci2C,EAAd,GAAmB,KAAKv7B,QAAL,CAAcC,SAAd,CAAwB6O,EAA5C,IAAkD,KAAK9O,QAAL,CAAcV,WAD3D;AAERnY,cAAAA,CAAC,EAAE,CAAC0R,UAAU,CAACvT,CAAD,CAAV,CAAck2C,EAAd,GAAmB,KAAKx7B,QAAL,CAAcC,SAAd,CAAwB8O,EAA5C,IAAkD,KAAK/O,QAAL,CAAcV;AAF3D,aAJ+B;AAQ3Cm8B,YAAAA,QAAQ,EAAE;AACN7sB,cAAAA,CAAC,EAAE,CAAC/V,UAAU,CAACvT,CAAD,CAAV,CAAco2C,EAAd,GAAmB,KAAK17B,QAAL,CAAcC,SAAd,CAAwB6O,EAA5C,IAAkD,KAAK9O,QAAL,CAAcV,WAD7D;AAENnY,cAAAA,CAAC,EAAE,CAAC0R,UAAU,CAACvT,CAAD,CAAV,CAAcq2C,EAAd,GAAmB,KAAK37B,QAAL,CAAcC,SAAd,CAAwB8O,EAA5C,IAAkD,KAAK/O,QAAL,CAAcV;AAF7D,aARiC;AAWxCrL,YAAAA,EAAE,EAAE4E,UAAU,CAACvT,CAAD,CAAV,CAAck2C,EAAd,KAAqB3iC,UAAU,CAACvT,CAAD,CAAV,CAAcq2C,EAAnC,GAAwC,iBAAxC,GAA4D;AAXxB,WAA/C;AAaH;AACJ;AACJ;AACJ,GAvCD;;AAwCA7oC,EAAAA,OAAO,CAACtO,SAAR,CAAkBoX,gBAAlB,GAAqC,YAAY;AAC7C,QAAIvB,IAAI,GAAG,CAAX;;AACA,QAAI,KAAKkM,YAAL,CAAkBmP,WAAlB,KAAkC,UAAtC,EAAkD;AAC9C,UAAI,KAAKnP,YAAL,CAAkB3M,KAAlB,GAA0B,KAAK2M,YAAL,CAAkBzM,MAAhD,EAAwD;AACpDO,QAAAA,IAAI,GAAG,KAAKkM,YAAL,CAAkBzM,MAAzB;AACA,aAAKyM,YAAL,CAAkBzM,MAAlB,GAA2B,KAAKyM,YAAL,CAAkB3M,KAA7C;AACA,aAAK2M,YAAL,CAAkB3M,KAAlB,GAA0BS,IAA1B;AACH;AACJ,KAND,MAOK;AACD,UAAI,KAAKkM,YAAL,CAAkBzM,MAAlB,GAA2B,KAAKyM,YAAL,CAAkB3M,KAAjD,EAAwD;AACpDS,QAAAA,IAAI,GAAG,KAAKkM,YAAL,CAAkB3M,KAAzB;AACA,aAAK2M,YAAL,CAAkB3M,KAAlB,GAA0B,KAAK2M,YAAL,CAAkBzM,MAA5C;AACA,aAAKyM,YAAL,CAAkBzM,MAAlB,GAA2BO,IAA3B;AACH;AACJ;AACJ,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvH,EAAAA,OAAO,CAACtO,SAAR,CAAkBo3C,WAAlB,GAAgC,UAAUC,QAAV,EAAoB5nC,EAApB,EAAwB;AACpD,QAAI4nC,QAAJ,EAAc;AACV,UAAIA,QAAJ,EAAc;AACV,aAAK1hC,KAAL,CAAWrS,IAAX,CAAgB+zC,QAAQ,CAAC5nC,EAAzB;AACA,aAAKkG,KAAL,CAAW0hC,QAAQ,CAAC5nC,EAApB,IAA0B4nC,QAA1B;AACAA,QAAAA,QAAQ,CAACnG,cAAT,CAAwBmG,QAAxB;AACAA,QAAAA,QAAQ,CAAC/7B,eAAT,CAAyByE,SAAzB;AACAs3B,QAAAA,QAAQ,CAACvhC,UAAT,CAAoBuhC,QAApB;AACA,aAAKlG,WAAL,CAAiBkG,QAAjB;AACH;AACJ,KATD,MAUK;AACD,WAAK,IAAIv2C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK6U,KAAL,CAAWlV,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAI,KAAK6U,KAAL,CAAW7U,CAAX,MAAkB2O,EAAtB,EAA0B;AACtB4nC,UAAAA,QAAQ,GAAI,KAAK1hC,KAAL,CAAWlG,EAAX,CAAZ;AACH;AACJ;;AACD,WAAKkG,KAAL,CAAWlG,EAAX,IAAiBI,SAAjB;AACA,UAAIoG,KAAK,GAAG,KAAKN,KAAL,CAAWyV,OAAX,CAAmB3b,EAAnB,CAAZ;AACA,WAAKkG,KAAL,CAAWqf,MAAX,CAAkB/e,KAAlB,EAAyB,CAAzB;AACH;AACJ,GArBD;;AAsBA3H,EAAAA,OAAO,CAACtO,SAAR,CAAkBmxC,WAAlB,GAAgC,UAAUkG,QAAV,EAAoB;AAChD,QAAIA,QAAJ,EAAc;AACV,UAAIzD,QAAQ,GAAG,IAAIpvC,eAAJ,CAAoB6yC,QAAQ,CAAC5nC,EAA7B,EAAiC,IAAIlL,WAAJ,EAAjC,EAAoD,KAApD,CAAf;AACA,UAAI3B,CAAC,GAAGua,QAAQ,CAACgH,cAAT,CAAwBkzB,QAAQ,CAAC5oC,OAAT,CAAiBgB,EAAjB,GAAsB,eAA9C,CAAR;AACA,UAAIg2B,SAAS,GAAG97B,YAAY,CAAC0tC,QAAQ,CAAC5oC,OAAT,CAAiBgB,EAAlB,CAA5B;AACA,WAAKkjC,qBAAL,CAA2B/vC,CAA3B,EAA8By0C,QAAQ,CAAC/7B,eAAT,IAA4Bs4B,QAA1D,EAAoEnO,SAApE,EAA+E51B,SAA/E,EAA0FA,SAA1F,EAAqG,IAArG;AACH;AACJ,GAPD;;AAQAvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBs3C,sBAAlB,GAA2C,UAAUnmC,IAAV,EAAgBomC,aAAhB,EAA+BC,aAA/B,EAA8C;AACrF,QAAIliB,KAAK,GAAG,CAAZ;AACA,QAAI70B,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAlB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAiC;AAC7B,UAAI8S,GAAG,GAAGzC,IAAI,CAACrQ,CAAD,CAAd;AACA,UAAI22C,UAAU,GAAG,KAAjB;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,UAAIC,gBAAgB,GAAGJ,aAAa,CAACK,iBAArC;;AACA,UAAIhkC,GAAG,YAAY/O,IAAnB,EAAyB;AACrB4yC,QAAAA,UAAU,GAAI7jC,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MAAnB,IAA8B4B,GAAG,CAAC7B,KAAJ,CAAUA,KAAV,KAAoB,UAApB,IACvC6B,GAAG,CAAC7B,KAAJ,CAAUykB,QAAV,CAAmBC,UAAnB,CAA8BohB,SAA9B,KAA4C,KADnC,IAEVjkC,GAAG,CAAC7B,KAAJ,CAAUA,KAAV,KAAoB,gBAFxB;AAGA2lC,QAAAA,UAAU,GAAI9jC,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MAAnB,IAA6B4B,GAAG,CAAC7B,KAAJ,CAAUA,KAAV,KAAoB,gBAA/D;;AACA,YAAI,CAACjH,SAAS,CAAC8I,GAAD,CAAV,IAAmB,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAAC8wC,MAAvC,CAAnB,IAAqEL,UAAzE,EAAqF;AACjFE,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAAC8wC,MAAzD;AACH;;AACD,YAAI,CAAC3sC,SAAS,CAACyI,GAAD,EAAM,WAAN,CAAV,IAAgC,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAAC+wC,eAAvC,CAAhC,IAA2FL,UAA/F,EAA2G;AACvGC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAAC+wC,eAAzD;AACH;;AACD,YAAI,CAAC5sC,SAAS,CAACyI,GAAD,EAAM,WAAN,CAAV,IAAgC,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACgxC,eAAvC,CAAhC,IAA2FN,UAA/F,EAA2G;AACvGC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACgxC,eAAzD;AACH;;AACD,YAAI,CAAC7sC,SAAS,CAACyI,GAAD,EAAM,MAAN,CAAV,IAA2B,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACixC,UAAvC,CAA3B,IAAiFP,UAArF,EAAiG;AAC7FC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACixC,UAAzD;AACH;;AACD,YAAI,CAAC9sC,SAAS,CAACyI,GAAD,EAAM,MAAN,CAAV,IAA2B,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACkxC,UAAvC,CAA3B,IAAiFR,UAArF,EAAiG;AAC7FC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACkxC,UAAzD;AACH;;AACD,YAAI,CAAC/sC,SAAS,CAACyI,GAAD,EAAM,OAAN,CAAV,IAA4B,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACmxC,WAAvC,CAA5B,IAAmFT,UAAvF,EAAmG;AAC/FC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACmxC,WAAzD;AACH;;AACD,YAAI,CAAChtC,SAAS,CAACyI,GAAD,EAAM,OAAN,CAAV,IAA4B,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACoxC,WAAvC,CAA5B,IAAmFV,UAAvF,EAAmG;AAC/FC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACoxC,WAAzD;AACH;;AACD,YAAI,CAACjtC,SAAS,CAACyI,GAAD,EAAM,WAAN,CAAV,IAAgC,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACqxC,eAAvC,CAAhC,IAA2FX,UAA/F,EAA2G;AACvGC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACqxC,eAAzD;AACH;;AACD,YAAI,CAACltC,SAAS,CAACyI,GAAD,EAAM,WAAN,CAAV,IAAgC,EAAE+jC,gBAAgB,GAAG3wC,iBAAiB,CAACsxC,eAAvC,CAAhC,IAA2FZ,UAA/F,EAA2G;AACvGC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACsxC,eAAzD;AACH;AACJ,OAhCD,MAiCK,IAAI1kC,GAAG,YAAYlO,SAAnB,EAA8B;AAC/B,YAAI,CAAC8xC,aAAL,EAAoB;AAChBG,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG3wC,iBAAiB,CAACuI,OAAxD;AACH;;AACD,YAAI/D,gBAAgB,CAACoI,GAAD,CAApB,EAA2B;AACvB+jC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG3wC,iBAAiB,CAACuxC,eAAxD;AACH,SAFD,MAGK;AACDZ,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACuxC,eAAzD;AACH;;AACD,YAAI9sC,gBAAgB,CAACmI,GAAD,CAApB,EAA2B;AACvB+jC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG3wC,iBAAiB,CAACwxC,eAAxD;AACH,SAFD,MAGK;AACDb,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAACwxC,eAAzD;AACH;AACJ,OAhBI,MAiBA;AACD,YAAI,CAAChB,aAAL,EAAoB;AAChBG,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG3wC,iBAAiB,CAACuI,OAAxD;AACH;;AACD,YAAI,CAACpE,SAAS,CAACyI,GAAD,CAAd,EAAqB;AACjB+jC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,EAAE3wC,iBAAiB,CAAC+wC,eAAlB,GAAoC/wC,iBAAiB,CAACsxC,eAAtD,GACpCtxC,iBAAiB,CAACoxC,WADkB,GACJpxC,iBAAiB,CAACixC,UADd,GAC2BjxC,iBAAiB,CAACkxC,UAD7C,GAEpClxC,iBAAiB,CAACmxC,WAFkB,GAEJnxC,iBAAiB,CAACqxC,eAFd,GAEgCrxC,iBAAiB,CAACgxC,eAFpD,CAAtC;AAGH;;AACD,YAAI,CAACltC,SAAS,CAAC8I,GAAD,CAAd,EAAqB;AACjB+jC,UAAAA,gBAAgB,GAAGA,gBAAgB,GAAG,CAAC3wC,iBAAiB,CAAC8wC,MAAzD;AACH;AACJ;;AACDP,MAAAA,aAAa,CAACK,iBAAd,GAAkCD,gBAAlC;AACH;AACJ,GAzED;AA0EA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIrpC,EAAAA,OAAO,CAACtO,SAAR,CAAkByX,cAAlB,GAAmC,UAAU4O,iBAAV,EAA6BoyB,UAA7B,EAAyC;AACxE,QAAIC,wBAAwB,GAAG,KAAKj8B,mBAApC;;AACA,QAAIzY,QAAQ,EAAZ,EAAgB;AACZ,WAAKyY,mBAAL,GAA2B,IAA3B;AACH;;AACD,QAAI8uB,IAAI,GAAG,IAAIrlC,IAAJ,EAAX;AACA,QAAIqxC,aAAa,GAAG,KAAKjgC,aAAzB;AACA,QAAIqhC,mBAAmB,GAAGpB,aAAa,CAAC7/B,WAAxC;AACA,QAAIkhC,eAAe,GAAG,KAAKt9B,eAAL,CAAqBs9B,eAA3C;AACA,QAAIC,aAAa,GAAG17B,QAAQ,CAACC,sBAAT,CAAgC,uBAAhC,CAApB;AACA,QAAItc,CAAJ;AACA,QAAIg4C,GAAJ;AACA,SAAKx9B,eAAL,CAAqBs9B,eAArB,GAAuC,KAAK3qB,aAAL,GACnC,KAAKuT,cAAL,CAAoBoX,eAApB,EAAqCnyC,cAAc,CAACsyC,kBAApD,CADmC,GAEnC,KAAKpX,iBAAL,CAAuBiX,eAAvB,EAAwCnyC,cAAc,CAACsyC,kBAAvD,CAFJ;AAGA,SAAKC,kBAAL;;AACA,QAAI,KAAKv6B,cAAL,CAAoBw6B,YAApB,EAAJ,EAAwC;AACpC,UAAI1B,aAAa,CAAC7lC,KAAd,CAAoBjR,MAApB,KAA+B,CAA/B,IAAoC82C,aAAa,CAACnlC,UAAd,CAAyB3R,MAAzB,KAAoC,CAA5E,EAA+E;AAC3E82C,QAAAA,aAAa,CAAC9qB,WAAd,GAA4B8qB,aAAa,CAAC7lC,KAAd,CAAoB,CAApB,EAAuB+a,WAAnD;AACA8qB,QAAAA,aAAa,CAACrrB,KAAd,GAAsBqrB,aAAa,CAAC7lC,KAAd,CAAoB,CAApB,EAAuBwa,KAA7C;AACH;;AACDqrB,MAAAA,aAAa,CAAC//B,OAAd,CAAsBwf,OAAtB,CAA8BuU,IAA9B;AACAgM,MAAAA,aAAa,CAAC//B,OAAd,CAAsByf,OAAtB,CAA8BsgB,aAAa,CAAC//B,OAAd,CAAsB0f,WAApD;AACAqgB,MAAAA,aAAa,CAACniC,KAAd,GAAsBmiC,aAAa,CAAC//B,OAAd,CAAsB+iB,UAAtB,CAAiCnlB,KAAvD;AACAmiC,MAAAA,aAAa,CAACjiC,MAAd,GAAuBiiC,aAAa,CAAC//B,OAAd,CAAsB+iB,UAAtB,CAAiCjlB,MAAxD;AACAiiC,MAAAA,aAAa,CAAChrB,OAAd,GAAwBgrB,aAAa,CAAC//B,OAAd,CAAsB+U,OAA9C;AACAgrB,MAAAA,aAAa,CAAC/qB,OAAd,GAAwB+qB,aAAa,CAAC//B,OAAd,CAAsBgV,OAA9C;;AACA,UAAI+qB,aAAa,CAAC9qB,WAAd,KAA8B,CAAlC,EAAqC;AACjC,aAAK,IAAInY,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGgjC,aAAa,CAAC7lC,KAApC,EAA2C4C,EAAE,GAAGC,EAAE,CAAC9T,MAAnD,EAA2D6T,EAAE,EAA7D,EAAiE;AAC7D,cAAIV,GAAG,GAAGW,EAAE,CAACD,EAAD,CAAZ;AACAV,UAAAA,GAAG,CAAC2Y,OAAJ,GAAc3Y,GAAG,CAAC4D,OAAJ,CAAY+U,OAA1B;AACA3Y,UAAAA,GAAG,CAAC4Y,OAAJ,GAAc5Y,GAAG,CAAC4D,OAAJ,CAAYgV,OAA1B;AACH;;AACD,aAAK,IAAI/W,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG6hC,aAAa,CAACnlC,UAApC,EAAgDqD,EAAE,GAAGC,EAAE,CAACjV,MAAxD,EAAgEgV,EAAE,EAAlE,EAAsE;AAClE,cAAI0V,IAAI,GAAGzV,EAAE,CAACD,EAAD,CAAb,CADkE,CAElE;AACH;AACJ;;AACD,UAAI2W,MAAM,GAAG,KAAK1N,aAAL,CAAmBs1B,aAAnB,EAAb,CAtBoC,CAuBpC;;AACA,UAAIkF,eAAe,GAAG5uC,kBAAkB,CAAC,KAAKmE,OAAL,CAAagB,EAAd,CAAxC,CAxBoC,CAyBpC;;AACA,UAAI0pC,sBAAsB,GAAGlvC,kBAAkB,CAAC,KAAKwE,OAAL,CAAagB,EAAd,CAA/C;AACA8nC,MAAAA,aAAa,CAACK,iBAAd,GAAkC5wC,iBAAiB,CAACuI,OAApD;;AACA,UAAIgoC,aAAa,CAACp1B,UAAlB,EAA8B;AAC1B,aAAKm1B,sBAAL,CAA4B,CAACC,aAAa,CAACp1B,UAAf,CAA5B,EAAwDo1B,aAAxD;AACH,OAFD,MAGK;AACD,aAAKD,sBAAL,CAA4BC,aAAa,CAAC7lC,KAA1C,EAAiD6lC,aAAjD;AACA,aAAKD,sBAAL,CAA4BC,aAAa,CAACnlC,UAA1C,EAAsDmlC,aAAtD,EAAqE,IAArE;AACH;;AACD,UAAIA,aAAa,CAACp1B,UAAlB,EAA8B;AAC1B,aAAKi3B,2BAAL,CAAiC7B,aAAjC,EAAgD2B,eAAhD;AACH,OAFD,MAGK,IAAI3B,aAAa,CAAC7lC,KAAd,CAAoBjR,MAApB,GAA6B82C,aAAa,CAACnlC,UAAd,CAAyB3R,MAAtD,KAAiE,CAAjE,IAAsE,KAAK8S,SAAL,CAAe,QAAf,CAA1E,EAAoG;AACrG,YAAIgkC,aAAa,CAAC7lC,KAAd,CAAoB,CAApB,aAAkC7M,IAAtC,EAA4C;AACxC,cAAIsM,IAAI,GAAGomC,aAAa,CAAC7lC,KAAd,CAAoB,CAApB,CAAX;;AACA,cAAI3E,sBAAsB,CAAC,IAAD,EAAOoE,IAAP,CAA1B,EAAwC;AACpC,gBAAI,CAACsnC,UAAD,IAAgBtnC,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,eAApB,IAAuC,EAAEb,IAAI,CAACzB,QAAL,IACzD,KAAK6D,SAAL,CAAepC,IAAI,CAACzB,QAApB,CADyD,IAEtD,KAAK6D,SAAL,CAAepC,IAAI,CAACzB,QAApB,EAA8BqC,KAA9B,CAAoCC,IAApC,KAA6C,eAFO,CAA3D,EAEuE;AACnE,kBAAI,EAAEb,IAAI,CAAC8oB,SAAL,KAAmB9oB,IAAI,CAAC8oB,SAAL,CAAejoB,IAAf,KAAwB,QAAxB,IAAoCb,IAAI,CAAC8oB,SAAL,CAAejoB,IAAf,KAAwB,MAA/E,CAAF,CAAJ,EAA+F;AAC3FulC,gBAAAA,aAAa,CAAC7lC,KAAd,CAAoB,CAApB,EAAuBgG,WAAvB,IAAsC,EAAEnR,eAAe,CAACuxC,MAAhB,GAAyBvxC,eAAe,CAAC8yC,UAA3C,CAAtC;AACH;;AACD9B,cAAAA,aAAa,CAACK,iBAAd,IAAmC,CAAC5wC,iBAAiB,CAAC8wC,MAAtD;AACH;AACJ;;AACD,cAAIpgC,WAAW,GAAG+gC,UAAU,GAAG,IAAH,GAAYtnC,IAAI,CAACuG,WAAL,GAAmBnR,eAAe,CAAC8yC,UAApC,GAAkD,IAAlD,GAAyD,KAAhG;AACA,cAAInuB,QAAQ,GAAI/Z,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,UAApB,IAAkCb,IAAI,CAAC8Z,MAAvC,IAAiD9Z,IAAI,CAAC+nB,OAAtD,IAAiEuf,UAAlE,GAAgF,IAAhF,GAAuF,KAAtG;AACA,eAAKn9B,eAAL,CAAqBg+B,kBAArB,CAAwC/B,aAAa,CAAC//B,OAAd,CAAsB7F,QAAtB,CAA+B,CAA/B,CAAxC,EAA2EunC,eAA3E,EAA4F3B,aAAa,CAACK,iBAA1G,EAA6H,KAAKp8B,QAAL,CAAcV,WAA3I,EAAwJy8B,aAAa,CAAC7/B,WAAtK,EAAmL,KAAK8D,QAAL,CAAcC,SAAjM,EAA4M5L,SAA5M,EAAuNjE,OAAO,CAACuF,IAAD,CAA9N,EAAsOuG,WAAtO,EAAmPwT,QAAnP;AACH,SAfD,MAgBK,IAAIqsB,aAAa,CAACnlC,UAAd,CAAyB,CAAzB,aAAuC1M,SAAvC,IAAoDsF,aAAa,CAAC,KAAKsQ,eAAL,CAAqBs9B,eAAtB,CAArE,EAA6G;AAC9G,cAAIrmC,SAAS,GAAGglC,aAAa,CAACnlC,UAAd,CAAyB,CAAzB,CAAhB;AACA,eAAKkJ,eAAL,CAAqBi+B,oBAArB,CAA0ChnC,SAA1C,EAAqD2mC,eAArD,EAAsE3B,aAAa,CAACK,iBAApF,EAAuGL,aAAa,CAAC7/B,WAArH,EAAkI,KAAK8D,QAAL,CAAcC,SAAhJ,EAA2JlJ,SAAS,CAACs4B,aAAV,KAA4Bh7B,SAAvL,EAAkM0C,SAAS,CAACy4B,aAAV,KAA4Bn7B,SAA9N,EAA0O,KAAK2pC,0BAAL,IAAmC9tC,mBAAmB,CAAC6G,SAAD,CAAvD,GAAsE,IAAtE,GAA6E,KAAtT;AACH;AACJ,OArBI,MAsBA;AACD,aAAK+I,eAAL,CAAqBg+B,kBAArB,CAAwC/B,aAAa,CAAC//B,OAAtD,EAA+D0hC,eAA/D,EAAgF3B,aAAa,CAACK,iBAA9F,EAAiH,KAAKp8B,QAAL,CAAcV,WAA/H,EAA4Iy8B,aAAa,CAAC7/B,WAA1J,EAAuK,KAAK8D,QAAL,CAAcC,SAArL,EAAgM5L,SAAhM,EAA2MjE,OAAO,CAAC2rC,aAAD,CAAlN;AACH;;AACD,UAAI,CAAEA,aAAa,CAACp1B,UAAhB,IAA+B,CAAC,KAAK8L,aAAzC,EAAwD;AACpD,aAAK3S,eAAL,CAAqBm+B,iBAArB,CAAuClC,aAAvC,EAAsD2B,eAAtD,EAAuE,KAAK19B,QAAL,CAAcC,SAArF,EAAgG09B,sBAAhG;;AACA,YAAIn1C,QAAQ,MAAM60C,aAAa,CAACp4C,MAAd,GAAuB,CAAzC,EAA4C;AACxC,eAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxD,gBAAI44C,UAAU,GAAG,KAAKpiC,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,CAAjB;AACAg4C,YAAAA,GAAG,GAAG37B,QAAQ,CAACgH,cAAT,CAAwBu1B,UAAU,CAAC51B,IAAX,GAAkB,eAA1C,CAAN;AACAg1B,YAAAA,GAAG,CAAClnC,KAAJ,CAAU+nC,OAAV,GAAoB,OAApB;AACH;AACJ;AACJ;AACJ;;AACD,SAAKl9B,mBAAL,GAA2Bi8B,wBAA3B;AACH,GA3FD;AA4FA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIpqC,EAAAA,OAAO,CAACtO,SAAR,CAAkBqrB,cAAlB,GAAmC,YAAY;AAC3C,QAAI4G,aAAa,GAAG,KAAKzC,sBAAzB;AACA,SAAK9c,uBAAL,CAA6B,KAA7B;AACA,QAAI64B,IAAI,GAAG,IAAIrlC,IAAJ,EAAX;AACA,QAAI0zC,QAAQ,GAAG,KAAKtiC,aAApB;AACA,QAAIqhC,mBAAmB,GAAGiB,QAAQ,CAACliC,WAAnC;AACA,QAAImhC,aAAa,GAAG17B,QAAQ,CAACC,sBAAT,CAAgC,uBAAhC,CAApB;AACA,QAAItc,CAAJ;AACA,QAAIg4C,GAAJ;;AACA,QAAI,EAAE,KAAK7jC,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,KAAqD,KAAKpU,aAAL,CAAmB5F,KAAnB,CAAyBjR,MAAzB,KAAoC,CAA7F,EAAgG;AAC5F,WAAK6W,aAAL,CAAmBmV,WAAnB,GAAiC,KAAKnV,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,EAA4B+a,WAA7D;AACA,WAAKnV,aAAL,CAAmBE,OAAnB,CAA2BiV,WAA3B,GAAyC,KAAKnV,aAAL,CAAmB5F,KAAnB,CAAyB,CAAzB,EAA4B+a,WAArE;AACH;;AACD,QAAI,KAAKnV,aAAL,KAAuBzH,SAA3B,EAAsC;AAClC,WAAKmpC,kBAAL;;AACA,UAAIY,QAAQ,CAACpiC,OAAT,KAAqB,IAArB,IAA6BoiC,QAAQ,CAACpiC,OAAT,CAAiB7F,QAA9C,IAA0DioC,QAAQ,CAACpiC,OAAT,CAAiB7F,QAAjB,CAA0BlR,MAAxF,EAAgG;AAC5Fm5C,QAAAA,QAAQ,CAACpiC,OAAT,CAAiBwf,OAAjB,CAAyBuU,IAAzB;AACAqO,QAAAA,QAAQ,CAACpiC,OAAT,CAAiByf,OAAjB,CAAyB2iB,QAAQ,CAACpiC,OAAT,CAAiB0f,WAA1C;;AACA,YAAI0iB,QAAQ,CAACntB,WAAT,KAAyB,CAAzB,IAA8BmtB,QAAQ,CAACntB,WAAT,KAAyBmtB,QAAQ,CAACpiC,OAAT,CAAiB46B,eAA5E,EAA6F;AACzF,eAAK,IAAI99B,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGqlC,QAAQ,CAACloC,KAA/B,EAAsC4C,EAAE,GAAGC,EAAE,CAAC9T,MAA9C,EAAsD6T,EAAE,EAAxD,EAA4D;AACxD,gBAAIV,GAAG,GAAGW,EAAE,CAACD,EAAD,CAAZ;AACAV,YAAAA,GAAG,CAAC2Y,OAAJ,GAAc3Y,GAAG,CAAC4D,OAAJ,CAAY+U,OAA1B;AACA3Y,YAAAA,GAAG,CAAC4Y,OAAJ,GAAc5Y,GAAG,CAAC4D,OAAJ,CAAYgV,OAA1B;AACH;AACJ;;AACDotB,QAAAA,QAAQ,CAACxkC,KAAT,GAAiBwkC,QAAQ,CAACpiC,OAAT,CAAiB+iB,UAAjB,CAA4BnlB,KAA7C;AACAwkC,QAAAA,QAAQ,CAACtkC,MAAT,GAAkBskC,QAAQ,CAACpiC,OAAT,CAAiB+iB,UAAjB,CAA4BjlB,MAA9C;AACAskC,QAAAA,QAAQ,CAACrtB,OAAT,GAAmBqtB,QAAQ,CAACpiC,OAAT,CAAiB+U,OAApC;AACAqtB,QAAAA,QAAQ,CAACptB,OAAT,GAAmBotB,QAAQ,CAACpiC,OAAT,CAAiBgV,OAApC,CAb4F,CAc5F;;AACA,YAAIqtB,WAAW,GAAGvvC,kBAAkB,CAAC,KAAKmE,OAAL,CAAagB,EAAd,CAApC,CAf4F,CAgB5F;;AACA,YAAI0pC,sBAAsB,GAAGlvC,kBAAkB,CAAC,KAAKwE,OAAL,CAAagB,EAAd,CAA/C;AACA,YAAIqqC,eAAe,GAAG,KAAKvkC,YAAL,CAAkBukC,eAAlB,EAAtB;AACAF,QAAAA,QAAQ,CAAChC,iBAAT,GAA6B5wC,iBAAiB,CAACuI,OAA/C;;AACA,YAAIqqC,QAAQ,CAACz3B,UAAb,EAAyB;AACrB,eAAKm1B,sBAAL,CAA4B,CAACsC,QAAQ,CAACz3B,UAAV,CAA5B,EAAmDy3B,QAAnD;AACH,SAFD,MAGK;AACD,eAAKtC,sBAAL,CAA4BsC,QAAQ,CAACloC,KAArC,EAA4CkoC,QAA5C;AACA,eAAKtC,sBAAL,CAA4BsC,QAAQ,CAACxnC,UAArC,EAAiDwnC,QAAjD,EAA2D,IAA3D;AACH;;AACD,YAAK,KAAKtiC,aAAL,CAAmBI,WAAnB,GAAiC9Q,mBAAmB,CAACmzC,UAAtD,IAAsE,CAAEH,QAAQ,CAACz3B,UAAjF,IAAiG,CAAC,KAAK8L,aAA3G,EAA0H;AACtH,eAAK3S,eAAL,CAAqBm+B,iBAArB,CAAuCG,QAAvC,EAAiDC,WAAjD,EAA8D,KAAKr+B,QAAL,CAAcC,SAA5E,EAAuF09B,sBAAvF;;AACA,cAAIn1C,QAAQ,MAAM60C,aAAa,CAACp4C,MAAd,GAAuB,CAAzC,EAA4C;AACxC,iBAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxD,kBAAIk5C,kBAAkB,GAAG,KAAK1iC,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,CAAzB;AACAg4C,cAAAA,GAAG,GAAG37B,QAAQ,CAACgH,cAAT,CAAwB61B,kBAAkB,CAACl2B,IAAnB,GAA0B,eAAlD,CAAN;AACAg1B,cAAAA,GAAG,CAAClnC,KAAJ,CAAU+nC,OAAV,GAAoB,OAApB;AACH;AACJ;AACJ;;AACD,YAAIC,QAAQ,CAACz3B,UAAb,EAAyB;AACrB,eAAKi3B,2BAAL,CAAiCQ,QAAjC,EAA2CC,WAA3C;AACH,SAFD,MAGK,IAAID,QAAQ,CAACloC,KAAT,CAAejR,MAAf,GAAwBm5C,QAAQ,CAACxnC,UAAT,CAAoB3R,MAA5C,KAAuD,CAA3D,EAA8D;AAC/D,cAAIm5C,QAAQ,CAACxnC,UAAT,CAAoB,CAApB,aAAkC1M,SAAlC,IAA+CsF,aAAa,CAAC,KAAKsQ,eAAL,CAAqBs9B,eAAtB,CAAhE,EAAwG;AACpG,gBAAIrmC,SAAS,GAAGqnC,QAAQ,CAACxnC,UAAT,CAAoB,CAApB,CAAhB;AACA,iBAAKkJ,eAAL,CAAqBi+B,oBAArB,CAA0ChnC,SAA1C,EAAqDsnC,WAArD,EAAkED,QAAQ,CAAChC,iBAA3E,EAA8Fe,mBAA9F,EAAmH,KAAKn9B,QAAL,CAAcC,SAAjI,EAA4IlJ,SAAS,CAACs4B,aAAV,KAA4Bh7B,SAAxK,EAAmL0C,SAAS,CAACy4B,aAAV,KAA4Bn7B,SAA/M,EAA2N,KAAK2pC,0BAAL,IAAmC9tC,mBAAmB,CAAC6G,SAAD,CAAvD,GAAsE,IAAtE,GAA6E,KAAvS;AACH,WAHD,MAIK,IAAIqnC,QAAQ,CAACloC,KAAT,CAAe,CAAf,aAA6B7M,IAAjC,EAAuC;AACxC,gBAAIo1C,UAAU,GAAGL,QAAQ,CAACloC,KAAT,CAAe,CAAf,CAAjB;;AACA,gBAAI3E,sBAAsB,CAAC,IAAD,EAAO6sC,QAAQ,CAACloC,KAAT,CAAe,CAAf,CAAP,CAA1B,EAAqD;AACjD,kBAAIuoC,UAAU,CAACloC,KAAX,CAAiBC,IAAjB,KAA0B,eAA1B,IAA6C,EAAEioC,UAAU,CAACvqC,QAAX,IAC/C,KAAK6D,SAAL,CAAe0mC,UAAU,CAACvqC,QAA1B,CAD+C,IAE5C,KAAK6D,SAAL,CAAe0mC,UAAU,CAACvqC,QAA1B,EAAoCqC,KAApC,CAA0CC,IAA1C,KAAmD,eAFT,CAAjD,EAE4E;AACxE,oBAAI,EAAEioC,UAAU,CAAChgB,SAAX,KAAyBggB,UAAU,CAAChgB,SAAX,CAAqBjoB,IAArB,KAA8B,QAA9B,IACxBioC,UAAU,CAAChgB,SAAX,CAAqBjoB,IAArB,KAA8B,MAD/B,CAAF,CAAJ,EAC+C;AAC3C4nC,kBAAAA,QAAQ,CAACloC,KAAT,CAAe,CAAf,EAAkBgG,WAAlB,IAAiC,EAAEnR,eAAe,CAAC8yC,UAAhB,GAA6B9yC,eAAe,CAACuxC,MAA/C,CAAjC;AACH;;AACD8B,gBAAAA,QAAQ,CAAChC,iBAAT,IAA8B,CAAC5wC,iBAAiB,CAAC8wC,MAAjD;AACH;AACJ;;AACD,gBAAI5sB,QAAQ,GAAI+uB,UAAU,CAACloC,KAAX,CAAiBC,IAAjB,KAA0B,UAA1B,IAAwCioC,UAAU,CAAChvB,MAAnD,IACZgvB,UAAU,CAAC/gB,OADA,GACW,IADX,GACkB,KADjC;AAEA,iBAAK5d,eAAL,CAAqBg+B,kBAArB,CAAwCM,QAAQ,CAACpiC,OAAT,CAAiB7F,QAAjB,CAA0B,CAA1B,CAAxC,EAAsEkoC,WAAtE,EAAmFD,QAAQ,CAAChC,iBAA5F,EAA+G,KAAKp8B,QAAL,CAAcV,WAA7H,EAA0I8+B,QAAQ,CAACliC,WAAnJ,EAAgK,KAAK8D,QAAL,CAAcC,SAA9K,EAAyLq+B,eAAzL,EAA0MluC,OAAO,CAACguC,QAAQ,CAACloC,KAAT,CAAe,CAAf,CAAD,CAAjN,EAAuOkoC,QAAQ,CAACloC,KAAT,CAAe,CAAf,EAAkBgG,WAAlB,GAAgCnR,eAAe,CAAC8yC,UAAjD,GAA+D,IAA/D,GAAsE,KAA5S,EAAmTnuB,QAAnT;AACH;AACJ,SAtBI,MAuBA;AACD,cAAI,KAAKjW,cAAL,GAAsBlO,aAAa,CAAC42B,YAAxC,EAAsD;AAClD,iBAAKriB,eAAL,CAAqBs9B,eAArB,GAAuC,KAAKt9B,eAAL,CAAqBs9B,eAArB,GAAuCnyC,cAAc,CAACyzC,qBAA7F;AACH;;AACD,eAAK5+B,eAAL,CAAqBg+B,kBAArB,CAAwCM,QAAQ,CAACpiC,OAAjD,EAA0DqiC,WAA1D,EAAuED,QAAQ,CAAChC,iBAAhF,EAAmG,KAAKp8B,QAAL,CAAcV,WAAjH,EAA8H8+B,QAAQ,CAACliC,WAAvI,EAAoJ,KAAK8D,QAAL,CAAcC,SAAlK,EAA6Kq+B,eAA7K,EAA8LluC,OAAO,CAACguC,QAAD,CAArM;AACA,eAAKt+B,eAAL,CAAqBs9B,eAArB,GAAuC,KAAKt9B,eAAL,CAAqBs9B,eAArB,GAAuC,CAACnyC,cAAc,CAACyzC,qBAA9F;AACH;AACJ;AACJ;;AACD,SAAKxnC,uBAAL,CAA6Buf,aAA7B;AACH,GAxFD;AAyFA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3jB,EAAAA,OAAO,CAACtO,SAAR,CAAkBo5C,2BAAlB,GAAgD,UAAU7B,aAAV,EAAyB2B,eAAzB,EAA0C;AACtF,SAAK59B,eAAL,CAAqBg+B,kBAArB,CAAwC/B,aAAa,CAAC//B,OAAd,CAAsB7F,QAAtB,CAA+B,CAA/B,CAAxC,EAA2EunC,eAA3E,EAA4F3B,aAAa,CAACK,iBAA1G,EAA6H,KAAKp8B,QAAL,CAAcV,WAA3I,EAAwJy8B,aAAa,CAAC7/B,WAAtK,EAAmL,KAAK8D,QAAL,CAAcC,SAAjM,EAA4M5L,SAA5M,EAAuNjE,OAAO,CAAC2rC,aAAa,CAACp1B,UAAf,CAA9N;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7T,EAAAA,OAAO,CAACtO,SAAR,CAAkBm6C,sBAAlB,GAA2C,UAAU/vB,CAAV,EAAaznB,CAAb,EAAgByS,KAAhB,EAAuBE,MAAvB,EAA+B;AACtE,SAAK0jC,kBAAL;AACA,SAAK19B,eAAL,CAAqB6+B,sBAArB,CAA4C/vB,CAA5C,EAA+CznB,CAA/C,EAAkDyS,KAAlD,EAAyDE,MAAzD,EAAiE,KAAK8vB,YAAtE,EAAoF,KAAK5pB,QAAL,CAAcC,SAAlG;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInN,EAAAA,OAAO,CAACtO,SAAR,CAAkBo6C,iBAAlB,GAAsC,UAAU3rC,OAAV,EAAmB;AACrD,QAAI4rC,UAAU,GAAGhwC,kBAAkB,CAAC,KAAKoE,OAAL,CAAagB,EAAd,CAAnC;AACA,SAAK6L,eAAL,CAAqB8+B,iBAArB,CAAuC3rC,OAAvC,EAAgD4rC,UAAhD,EAA4D,KAAK7+B,QAAL,CAAcC,SAA1E;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInN,EAAAA,OAAO,CAACtO,SAAR,CAAkBs6C,gBAAlB,GAAqC,YAAY;AAC7C,QAAID,UAAU,GAAGhwC,kBAAkB,CAAC,KAAKoE,OAAL,CAAagB,EAAd,CAAnC;AACA,QAAI8qC,WAAW,GAAGF,UAAU,CAACl2B,cAAX,CAA0Bk2B,UAAU,CAAC5qC,EAAX,GAAgB,cAA1C,CAAlB;;AACA,QAAI8qC,WAAJ,EAAiB;AACbA,MAAAA,WAAW,CAACl2B,UAAZ,CAAuBC,WAAvB,CAAmCi2B,WAAnC;AACH;AACJ,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIjsC,EAAAA,OAAO,CAACtO,SAAR,CAAkBw6C,kBAAlB,GAAuC,UAAUljC,aAAV,EAAyB;AAC5D,SAAK,IAAIxW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAIqQ,IAAI,GAAG,KAAKO,KAAL,CAAW5Q,CAAX,CAAX;AACAwW,MAAAA,aAAa,CAAChU,IAAd,CAAmB6N,IAAnB;AACH;;AACD,SAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsR,UAAL,CAAgB3R,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC7C,UAAIqqB,IAAI,GAAG,KAAK/Y,UAAL,CAAgBtR,CAAhB,CAAX;AACAwW,MAAAA,aAAa,CAAChU,IAAd,CAAmB6nB,IAAnB;AACH;;AACD,WAAO7T,aAAP;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIhJ,EAAAA,OAAO,CAACtO,SAAR,CAAkBg5C,kBAAlB,GAAuC,YAAY;AAC/C,QAAIqB,UAAU,GAAGhwC,kBAAkB,CAAC,KAAKoE,OAAL,CAAagB,EAAd,CAAnC;AACA,QAAIopC,aAAa,GAAG17B,QAAQ,CAACC,sBAAT,CAAgC,uBAAhC,CAApB;AACA,QAAItc,CAAJ;AACA,QAAIg4C,GAAJ;AACA,QAAIz/B,CAAJ;;AACA,QAAI,CAAC,KAAK4U,aAAV,EAAyB;AACrB,UAAIwsB,aAAa,GAAGJ,UAAU,CAACl2B,cAAX,CAA0B,KAAKihB,YAAL,CAAkB31B,EAAlB,GAAuB,kBAAjD,CAApB;;AACA,UAAIgrC,aAAJ,EAAmB;AACfA,QAAAA,aAAa,CAACp2B,UAAd,CAAyBC,WAAzB,CAAqCm2B,aAArC;AACH;;AACD,WAAKH,gBAAL;AACA,UAAIxE,UAAU,GAAGxrC,kBAAkB,CAAC,KAAKmE,OAAL,CAAagB,EAAd,CAAlB,CAAoCqmC,UAArD;AACA,UAAI5kC,KAAK,GAAG,KAAK,CAAjB;;AACA,WAAK,IAAIwpC,GAAG,GAAG5E,UAAU,CAACr1C,MAA1B,EAAkCi6C,GAAG,GAAG,CAAxC,EAA2CA,GAAG,EAA9C,EAAkD;AAC9CxpC,QAAAA,KAAK,GAAG4kC,UAAU,CAAC4E,GAAG,GAAG,CAAP,CAAlB;AACAxpC,QAAAA,KAAK,CAACmT,UAAN,CAAiBC,WAAjB,CAA6BpT,KAA7B;AACH;;AACD,UAAIlN,QAAQ,MAAM,EAAE,KAAKiR,cAAL,GAAsBlO,aAAa,CAACukB,cAAtC,CAAd,IAAuEutB,aAAa,CAACp4C,MAAd,GAAuB,CAAlG,EAAqG;AACjG,aAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKwW,aAAL,CAAmBC,WAAnB,CAA+B9W,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxD,cAAIwhB,QAAQ,GAAG,KAAKhL,aAAL,CAAmBC,WAAnB,CAA+BzW,CAA/B,CAAf;AACAg4C,UAAAA,GAAG,GAAG37B,QAAQ,CAACgH,cAAT,CAAwB7B,QAAQ,CAACwB,IAAT,GAAgB,eAAxC,CAAN;AACAg1B,UAAAA,GAAG,CAAClnC,KAAJ,CAAU+nC,OAAV,GAAoB,MAApB;AACH;AACJ,OAND,MAOK;AACD,YAAI,CAAC31C,QAAQ,EAAb,EAAiB;AACb,cAAI22C,SAAS,GAAG1wC,kBAAkB,CAAC,KAAKwE,OAAL,CAAagB,EAAd,CAAlB,CAAoCqmC,UAApD;;AACA,eAAKh1C,CAAC,GAAG65C,SAAS,CAACl6C,MAAnB,EAA2BK,CAAC,GAAG,CAA/B,EAAkCA,CAAC,EAAnC,EAAuC;AACnC65C,YAAAA,SAAS,CAAC75C,CAAC,GAAG,CAAL,CAAT,CAAiBujB,UAAjB,CAA4BC,WAA5B,CAAwCq2B,SAAS,CAAC75C,CAAC,GAAG,CAAL,CAAjD;AACH;AACJ;AACJ;AACJ,KA3BD,MA4BK;AACD,UAAI85C,YAAY,GAAGP,UAAU,CAACl2B,cAAX,CAA0B,mBAA1B,CAAnB;;AACA,UAAIy2B,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACv2B,UAAb,CAAwBC,WAAxB,CAAoCs2B,YAApC;AACH;AACJ;AACJ,GAxCD;AAyCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItsC,EAAAA,OAAO,CAACtO,SAAR,CAAkB47B,UAAlB,GAA+B,UAAUlqB,KAAV,EAAiBjC,EAAjB,EAAqB;AAChD,QAAI+H,OAAJ;AACA/H,IAAAA,EAAE,GAAGiC,KAAK,CAACjC,EAAN,GAAW,GAAX,GAAiBA,EAAtB;AACA,QAAIwqB,SAAS,GAAGvoB,KAAK,YAAYnJ,MAAjB,GAA0BmJ,KAA1B,GAAkC,KAAKmpC,gBAAL,CAAsB,KAAKtnC,SAAL,CAAe7B,KAAK,CAACjC,EAArB,CAAtB,CAAlD;;AACA,SAAK,IAAI3O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGm5B,SAAS,CAACtoB,QAAV,CAAmBlR,MAAvC,EAA+CK,CAAC,EAAhD,EAAoD;AAChD,UAAI2O,EAAE,KAAKwqB,SAAS,CAACtoB,QAAV,CAAmB7Q,CAAnB,EAAsB2O,EAAjC,EAAqC;AACjC+H,QAAAA,OAAO,GAAGyiB,SAAS,CAACtoB,QAAV,CAAmB7Q,CAAnB,CAAV;AACH;AACJ;;AACD,WAAO0W,OAAP;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlJ,EAAAA,OAAO,CAACtO,SAAR,CAAkB8qC,iBAAlB,GAAsC,UAAU35B,IAAV,EAAgBoB,SAAhB,EAA2Bya,MAA3B,EAAmC;AACrE,QAAI7b,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAApB,IAA8Bb,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,aAAoCpJ,MAAtE,EAA8E;AAC1E,UAAK,CAACvE,QAAQ,EAAT,IAAemN,IAAI,CAACY,KAAL,CAAWA,KAAX,KAAqB,UAArC,IACC/N,QAAQ,MAAMmN,IAAI,CAAC2pC,MAAL,CAAY9U,SAAZ,KAA0B,UAD7C,EAC0D;AACtD,YAAIhZ,MAAM,IAAI7b,IAAI,CAACY,KAAL,CAAWykB,QAAX,CAAoBC,UAApB,CAA+BzkB,IAA/B,KAAwC,aAAlD,IACGO,SAAS,CAACiH,YADjB,EAC+B;AAC3B,cAAIk3B,MAAM,GAAGn+B,SAAS,CAACiH,YAAvB;AACA,cAAIuhC,QAAQ,GAAG5pC,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,EAAyBA,QAAzB,CAAkC,CAAlC,EAAqCA,QAArC,CAA8C,CAA9C,CAAf;;AACA,cAAIopC,QAAQ,CAACppC,QAAb,EAAuB;AACnB,iBAAK,IAAI2C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGwmC,QAAQ,CAACppC,QAA/B,EAAyC2C,EAAE,GAAGC,EAAE,CAAC9T,MAAjD,EAAyD6T,EAAE,EAA3D,EAA+D;AAC3D,kBAAIpD,KAAK,GAAGqD,EAAE,CAACD,EAAD,CAAd;;AACA,kBAAIpD,KAAK,CAAC4kB,OAAN,IAAiB5kB,KAAK,CAACzB,EAAN,KAAa0B,IAAI,CAAC1B,EAAL,GAAU,GAAV,GAAgBihC,MAAlD,EAA0D;AACtD,uBAAOx/B,KAAK,CAACS,QAAN,CAAe,CAAf,CAAP;AACH;AACJ;AACJ;AACJ;;AACD,eAAOR,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,EAAyBA,QAAzB,CAAkC,CAAlC,EAAqCA,QAArC,CAA8C,CAA9C,CAAP;AACH;;AACD,aAAOR,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,EAAyBA,QAAzB,CAAkC,CAAlC,CAAP;AACH;;AACD,QAAI,CAAC,KAAKqpC,cAAL,CAAoB7pC,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,CAApB,CAAL,EAAoD;AAChD,UAAI,CAACR,IAAI,CAACQ,QAAV,EAAoB;AAChB,eAAOR,IAAI,CAACqG,OAAL,CAAa7F,QAAb,CAAsB,CAAtB,CAAP;AACH;AACJ;;AACD,WAAOR,IAAI,CAACqG,OAAZ;AACH,GA3BD;;AA4BAlJ,EAAAA,OAAO,CAACtO,SAAR,CAAkBg7C,cAAlB,GAAmC,UAAU7pC,IAAV,EAAgB;AAC/C,WAAOA,IAAI,CAAC4f,MAAL,KAAgB5f,IAAI,CAAC4f,MAAL,CAAYC,IAAZ,KAAqB,CAArB,IAA0B7f,IAAI,CAAC4f,MAAL,CAAYE,GAAZ,KAAoB,CAA9C,IAAmD9f,IAAI,CAAC4f,MAAL,CAAYkqB,KAAZ,KAAsB,CAAzE,IAA8E9pC,IAAI,CAAC4f,MAAL,CAAYmqB,MAAZ,KAAuB,CAArH,CAAP;AACH,GAFD;;AAGA5sC,EAAAA,OAAO,CAACtO,SAAR,CAAkBg9B,YAAlB,GAAiC,YAAY;AACzC,SAAKme,OAAL;AACH,GAFD;;AAGA7sC,EAAAA,OAAO,CAACtO,SAAR,CAAkB8vC,cAAlB,GAAmC,YAAY;AAC3C,SAAKqL,OAAL;AACA,SAAKrrC,WAAL,GAAmB,KAAnB;AACH,GAHD;AAIA;AACJ;AACA;;AACI;;;AACAxB,EAAAA,OAAO,CAACtO,SAAR,CAAkBm7C,OAAlB,GAA4B,YAAY;AACpC,WAAOn6C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;AAC/C,UAAIoQ,MAAJ,EAAYkO,aAAZ,EAA2ByJ,SAA3B,EAAsCqyB,aAAtC,EAAqDjpC,WAArD,EAAkE2pB,QAAlE,EAA4ElsB,IAA5E,EAAkFnB,OAAlF,EAA2F0C,IAA3F,EAAiGgR,UAAjG,EAA6GrO,IAA7G,EAAmH0nB,cAAnH,EAAmIF,WAAnI,EAAgJ+f,QAAhJ,EAA0JC,YAA1J,EAAwKrlC,KAAxK,EAA+KslC,UAA/K,EAA2LF,QAA3L,EAAqMplC,KAArM,EAA4MulC,iBAA5M,EAA+NjnB,SAA/N,EAA0OknB,QAA1O,EAAoPC,QAApP,EAA8PC,YAA9P,EAA4QpgB,YAA5Q,EAA0RhC,YAA1R,EAAwSmB,UAAxS,EAAoTkhB,WAApT,EAAiUvnC,UAAjU,EAA6UgF,CAA7U;AACA,aAAOnX,WAAW,CAAC,IAAD,EAAO,UAAUqS,EAAV,EAAc;AACnC,gBAAQA,EAAE,CAAClS,KAAX;AACI,eAAK,CAAL;AACI,gBAAI,EAAE,KAAK4S,cAAL,GAAsBlO,aAAa,CAAC+1B,QAAtC,CAAJ,EAAqD,OAAO,CAAC;AAAE;AAAH,cAAc,EAAd,CAAP;AACrD1rB,YAAAA,MAAM,GAAG,QAAT;AACAkO,YAAAA,aAAa,GAAG,UAAhB;AACAyJ,YAAAA,SAAS,GAAG,KAAK,CAAjB;AACAqyB,YAAAA,aAAa,GAAG,KAAK,CAArB;AACAjpC,YAAAA,WAAW,GAAG,EAAd;AACA,iBAAKO,uBAAL,CAA6B,KAA7B;;AACA,gBAAI1O,QAAQ,EAAZ,EAAgB;AACZ,mBAAKiL,qBAAL,GAA6B,IAA7B;AACH;;AACD6sB,YAAAA,QAAQ,GAAG3e,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,UAA1C,CAAX;AACA,gBAAI,EAAGzL,QAAQ,MAAM83B,QAAf,IAA4B,CAAC93B,QAAQ,EAAvC,CAAJ,EAAgD,OAAO,CAAC;AAAE;AAAH,cAAc,EAAd,CAAP;AAChD4L,YAAAA,IAAI,GAAGksB,QAAQ,CAACr6B,KAAhB;AACAkC,YAAAA,YAAY,CAACG,MAAb,CAAoBg4B,QAApB,EAA8B,OAA9B,EAAuC,KAAKvmB,YAAL,CAAkBwnB,WAAzD;AACAp5B,YAAAA,YAAY,CAACG,MAAb,CAAoBg4B,QAApB,EAA8B,UAA9B,EAA0C,KAAKkB,YAA/C;AACAvuB,YAAAA,OAAO,GAAG0O,QAAQ,CAACgH,cAAT,CAAwB,KAAK1V,OAAL,CAAagB,EAAb,GAAkB,iBAA1C,CAAV;AACA0B,YAAAA,IAAI,GAAG,KAAK,CAAZ;AACAA,YAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAe,KAAK/D,WAAL,CAAiBE,QAAhC,CAAP;AACAyS,YAAAA,UAAU,GAAGtW,cAAc,CAACsF,IAAD,EAAO,KAAK3B,WAAL,CAAiBC,EAAxB,CAA3B;AACAqE,YAAAA,IAAI,GAAG;AAAEe,cAAAA,QAAQ,EAAE,KAAKrF,WAAL,CAAiBI,IAA7B;AAAmCgF,cAAAA,QAAQ,EAAEhF,IAA7C;AAAmD2lB,cAAAA,MAAM,EAAE,KAA3D;AAAkE9mB,cAAAA,OAAO,EAAE0C,IAA3E;AAAiFgR,cAAAA,UAAU,EAAEA;AAA7F,aAAP;;AACA,gBAAIne,QAAQ,MAAM,KAAK63C,QAAvB,EAAiC;AAC7B/nC,cAAAA,IAAI,GAAG,KAAKgoC,qBAAL,CAA2BhoC,IAA3B,CAAP;AACH;;AACD0nB,YAAAA,cAAc,GAAG,KAAjB;AACA/sB,YAAAA,OAAO,CAAC4V,UAAR,CAAmBC,WAAnB,CAA+B7V,OAA/B;AACA6sB,YAAAA,WAAW,GAAG,KAAK,CAAnB;AACA,gBAAI,CAAC,KAAKhU,UAAV,EAAsB,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACtBnW,YAAAA,IAAI,GAAG,KAAKmW,UAAL,CAAgBy0B,oBAAhB,CAAqC,KAAKvsC,WAA1C,EAAuD,IAAvD,CAAP;AACA8rB,YAAAA,WAAW,GAAG,KAAKhU,UAAL,CAAgBmU,wBAAhB,CAAyCtqB,IAAzC,EAA+C,KAAK3B,WAAL,CAAiBC,EAAhE,CAAd;AACA+rB,YAAAA,cAAc,GAAGrqB,IAAI,GAAG,IAAH,GAAU,KAA/B;AACA,gBAAI,CAACqqB,cAAL,EAAqB,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACrB,gBAAI,EAAE/sB,OAAO,CAAC23B,WAAR,KAAwBx2B,IAAxB,IAAgCA,IAAI,KAAK,KAAKJ,WAAL,CAAiBI,IAA5D,CAAJ,EAAuE,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACvE,gBAAI,CAAC5L,QAAQ,EAAb,EAAiB,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACjB,gBAAI,EAAE,KAAK63C,QAAL,IAAiBvqC,MAAjB,IAA2BA,MAAM,CAACF,MAAD,CAAnC,CAAJ,EAAkD,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AAClDiqC,YAAAA,QAAQ,GAAG;AAAE,2BAAa,UAAf;AAA2BvnC,cAAAA,IAAI,EAAEiP,IAAI,CAACkR,SAAL,CAAengB,IAAf;AAAjC,aAAX;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcxC,MAAM,CAACgO,aAAD,CAAN,CAAsB08B,yBAAtB,CAAgDX,QAAhD,EAA0D,IAA1D,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIvnC,YAAAA,IAAI,GAAIS,EAAE,CAACjS,IAAH,EAAD,IAAewR,IAAtB;AACAS,YAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACR,eAAK,CAAL;AACI,iBAAKiU,YAAL,CAAkBxP,YAAY,CAAC+0C,QAA/B,EAAyC/nC,IAAzC;AACAS,YAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI,gBAAI,CAACyR,IAAI,CAACyhB,MAAV,EAAkB;AACd,mBAAKjO,UAAL,CAAgB20B,2BAAhB,CAA4C9qC,IAA5C,EAAkD,KAAK3B,WAAvD,EAAoEI,IAApE,EAA0E,IAA1E;AACH;;AACD2E,YAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI,gBAAI,CAAC,CAACm5B,cAAN,EAAsB,OAAO,CAAC;AAAE;AAAH,cAAc,EAAd,CAAP;AACtBrqB,YAAAA,IAAI,GAAG,KAAKoC,SAAL,CAAe,KAAK/D,WAAL,CAAiBE,QAAhC,CAAP;AACA4rC,YAAAA,YAAY,GAAGzvC,cAAc,CAACsF,IAAD,EAAO,KAAK3B,WAAL,CAAiBC,EAAxB,CAA7B;;AACA,gBAAI6rC,YAAY,IAAI,EAAEA,YAAY,YAAYzyC,IAA1B,CAApB,EAAqD;AACjDoN,cAAAA,KAAK,GAAGhR,eAAe,CAACkM,IAAD,EAAOmqC,YAAY,CAAC7rC,EAApB,EAAwB,IAAxB,CAAvB;AACA0C,cAAAA,WAAW,CAAC8D,KAAD,CAAX,GAAqB;AAAEhD,gBAAAA,OAAO,EAAEqoC,YAAY,CAACroC;AAAxB,eAArB;AACA8V,cAAAA,SAAS,GAAG;AAAE5W,gBAAAA,WAAW,EAAEA;AAAf,eAAZ;AACH,aAJD,MAKK;AACD,kBAAInO,QAAQ,MAAOmN,IAAI,CAACY,KAAN,CAAaC,IAAb,KAAsB,MAAxC,EAAgD;AAC5C+W,gBAAAA,SAAS,GAAG;AAAEhX,kBAAAA,KAAK,EAAE;AAAEq0B,oBAAAA,WAAW,EAAEj1B,IAAI,CAACY,KAAL,CAAWkB;AAA1B;AAAT,iBAAZ;AACH,eAFD,MAGK;AACD8V,gBAAAA,SAAS,GAAG;AAAEhX,kBAAAA,KAAK,EAAE;AAAEkB,oBAAAA,OAAO,EAAE9B,IAAI,CAACY,KAAL,CAAWkB;AAAtB;AAAT,iBAAZ;AACH;AACJ;;AACDsoC,YAAAA,UAAU,GAAG,KAAKhmC,YAAL,CAAkB2mC,aAAlB,CAAgC/qC,IAAhC,EAAsC,IAAtC,CAAb;AACA,gBAAI,EAAE,CAACoqC,UAAD,KAAgB9sC,OAAO,CAAC23B,WAAR,KAAwBx2B,IAAxB,IAAgCA,IAAI,KAAK,KAAKJ,WAAL,CAAiBI,IAA1E,CAAF,CAAJ,EAAwF,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACxF,gBAAI,CAAC5L,QAAQ,EAAb,EAAiB,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AACjB,gBAAI,EAAEsN,MAAM,IAAIA,MAAM,CAACF,MAAD,CAAhB,IAA4B,KAAKyqC,QAAnC,CAAJ,EAAkD,OAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;AAClDR,YAAAA,QAAQ,GAAG;AAAE,2BAAa,UAAf;AAA2BvnC,cAAAA,IAAI,EAAEiP,IAAI,CAACkR,SAAL,CAAengB,IAAf;AAAjC,aAAX;AACA,mBAAO,CAAC;AAAE;AAAH,cAAcxC,MAAM,CAACgO,aAAD,CAAN,CAAsB08B,yBAAtB,CAAgDX,QAAhD,EAA0D,IAA1D,CAAd,CAAP;;AACJ,eAAK,CAAL;AACIvnC,YAAAA,IAAI,GAAIS,EAAE,CAACjS,IAAH,EAAD,IAAewR,IAAtB;AACAS,YAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AAAQ,mBAAO,CAAC;AAAE;AAAH,cAAc,CAAd,CAAP;;AACR,eAAK,CAAL;AACI,iBAAKiU,YAAL,CAAkBxP,YAAY,CAAC+0C,QAA/B,EAAyC/nC,IAAzC;AACAS,YAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,eAAK,CAAL;AACI,gBAAI,CAACi5B,WAAL,EAAkB;AACdA,cAAAA,WAAW,GAAG,KAAKM,UAAL,CAAgBzqB,IAAI,CAACqG,OAArB,EAA8B,KAAKhI,WAAL,CAAiBC,EAA/C,CAAd;AACH;;AACD,gBAAI6rC,YAAY,CAACroC,OAAb,KAAyBrD,IAAzB,IAAiC,CAACkE,IAAI,CAACyhB,MAA3C,EAAmD;AAC/C,kBAAIpkB,IAAI,CAACzB,QAAL,IAAiB,KAAK6D,SAAL,CAAepC,IAAI,CAACzB,QAApB,EAA8BqC,KAA9B,CAAoCC,IAApC,KAA6C,eAA9D,IACGpC,IAAI,CAACwb,OAAL,CAAa,GAAb,MAAsB,CAAC,CAD1B,IAC+Bxb,IAAI,CAACwb,OAAL,CAAa,GAAb,MAAsB,CAAC,CADtD,IAC2Dxb,IAAI,CAACwb,OAAL,CAAa,GAAb,MAAsB,CAAC,CADlF,IAEGxb,IAAI,CAACwb,OAAL,CAAa,GAAb,MAAsB,CAAC,CAF1B,IAE+Bja,IAAI,CAAC1B,EAAL,CAAQ2b,OAAR,CAAgB,kBAAhB,MAAwC,CAAC,CAF5E,EAE+E;AAC3Exb,gBAAAA,IAAI,GAAG,QAAQA,IAAf;AACH;;AACD,kBAAIuB,IAAI,CAAC8Z,MAAL,IAAe9Z,IAAI,CAAC+nB,OAAxB,EAAiC;AAC7B,qBAAKvmB,qBAAL,CAA2B,IAA3B;AACH;;AACD,kBAAI,EAAE2oC,YAAY,YAAYzyC,IAA1B,CAAJ,EAAqC;AACjCoN,gBAAAA,KAAK,GAAGhR,eAAe,CAACkM,IAAD,EAAOmqC,YAAY,CAAC7rC,EAApB,EAAwB,IAAxB,CAAvB;AACA+rC,gBAAAA,iBAAiB,GAAG,EAApB;AACAA,gBAAAA,iBAAiB,CAACvlC,KAAD,CAAjB,GAA2B;AAAEhD,kBAAAA,OAAO,EAAErD;AAAX,iBAA3B;AACAwrC,gBAAAA,aAAa,GAAG;AAAEjpC,kBAAAA,WAAW,EAAEqpC;AAAf,iBAAhB;AACH,eALD,MAMK;AACD,oBAAIx3C,QAAQ,MAAOmN,IAAI,CAACY,KAAN,CAAaC,IAAb,KAAsB,MAAxC,EAAgD;AAC5CopC,kBAAAA,aAAa,GAAG;AAAErpC,oBAAAA,KAAK,EAAE;AAAEq0B,sBAAAA,WAAW,EAAEx2B;AAAf;AAAT,mBAAhB;AACH,iBAFD,MAGK;AACDwrC,kBAAAA,aAAa,GAAG;AAAErpC,oBAAAA,KAAK,EAAE;AAAEkB,sBAAAA,OAAO,EAAErD;AAAX;AAAT,mBAAhB;AACH;AACJ;;AACD2kB,cAAAA,SAAS,GAAG,KAAK4nB,QAAL,CAAchrC,IAAd,EAAoBA,IAAI,CAAC1B,EAAzB,CAAZ;;AACA,kBAAI8kB,SAAJ,EAAe;AACXknB,gBAAAA,QAAQ,GAAG,EAAX;AACAA,gBAAAA,QAAQ,CAAClnB,SAAD,CAAR,GAAsBxL,SAAtB;AACA2yB,gBAAAA,QAAQ,GAAG,EAAX;AACAA,gBAAAA,QAAQ,CAACnnB,SAAD,CAAR,GAAsB6mB,aAAtB;;AACA,oBAAInzC,aAAa,CAACkJ,IAAD,CAAb,KAAwBtM,IAA5B,EAAkC;AAC9B,uBAAK4P,iBAAL,CAAuB;AAAE/C,oBAAAA,KAAK,EAAEgqC;AAAT,mBAAvB,EAA4C;AAAEhqC,oBAAAA,KAAK,EAAE+pC;AAAT,mBAA5C;AACH,iBAFD,MAGK;AACD,uBAAKhnC,iBAAL,CAAuB;AAAErC,oBAAAA,UAAU,EAAEspC;AAAd,mBAAvB,EAAiD;AAAEtpC,oBAAAA,UAAU,EAAEqpC;AAAd,mBAAjD;AACH;AACJ;;AACD,mBAAK9oC,qBAAL,CAA2B,IAA3B;;AACA,kBAAI3O,QAAQ,MAAOmN,IAAI,CAACY,KAAN,CAAaC,IAAb,KAAsB,MAAxC,EAAgD;AAC5Cb,gBAAAA,IAAI,CAACY,KAAL,CAAWq0B,WAAX,GAAyBx2B,IAAzB;AACH,eAFD,MAGK;AACD0rC,gBAAAA,YAAY,CAACroC,OAAb,GAAuBrD,IAAvB;AACH;;AACD,mBAAK+C,qBAAL,CAA2B,KAA3B;AACA,mBAAK0Y,cAAL;;AACA,kBAAIla,IAAI,CAAC8Z,MAAL,IAAe9Z,IAAI,CAAC+nB,OAAxB,EAAiC;AAC7B,qBAAKvmB,qBAAL,CAA2B,KAA3B;AACH;AACJ;;AACD,gBAAI4oC,UAAJ,EAAgB;AACZ,mBAAKhjB,sBAAL,CAA4BpnB,IAA5B;AACA,mBAAKyoB,eAAL,CAAqBzoB,IAArB;AACA,qBAAO,KAAKoC,SAAL,CAAe,KAAK/D,WAAL,CAAiBE,QAAhC,CAAP;;AACA,kBAAIE,IAAI,KAAK,EAAb,EAAiB;AACb,qBAAKiX,cAAL;AACA80B,gBAAAA,YAAY,GAAGxvC,WAAW,CAACgF,IAAD,CAA1B;AACAA,gBAAAA,IAAI,GAAG,KAAK4C,GAAL,CAAS4nC,YAAT,CAAP;AACA,qBAAKxkB,mBAAL,CAAyBhmB,IAAzB;AACA,qBAAKsN,cAAL,CAAoBkI,kBAApB,GAAyC3hB,oBAAoB,CAAC,IAAD,CAA7D;AACA,qBAAKyZ,cAAL,CAAoB0H,MAApB,CAA2B,KAAK5S,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAA3B;AACA,qBAAKgP,cAAL,CAAoBmI,oBAApB;AACH;AACJ;;AACDrS,YAAAA,EAAE,CAAClS,KAAH,GAAW,EAAX;;AACJ,eAAK,EAAL;AACI,gBAAI,KAAKiV,aAAL,CAAmB5F,KAAnB,CAAyBjR,MAA7B,EAAqC;AACjC86B,cAAAA,YAAY,GAAG,KAAKhoB,SAAL,CAAe,KAAK/D,WAAL,CAAiBE,QAAhC,CAAf;AACA6pB,cAAAA,YAAY,GAAG,KAAKhmB,SAAL,CAAegoB,YAAY,CAAC7rB,QAA5B,CAAf;;AACA,kBAAK6pB,YAAY,IAAIA,YAAY,CAACxnB,KAAb,CAAmBC,IAAnB,KAA4B,UAA7C,IAA6DupB,YAAY,CAACxpB,KAAb,CAAmBC,IAAnB,KAA4B,UAA7F,EAA0G;AACtG0oB,gBAAAA,UAAU,GAAG,kBAAb;AACAkhB,gBAAAA,WAAW,GAAG,mBAAd;;AACA,oBAAKrgB,YAAY,CAACxpB,KAAb,CAAmBC,IAAnB,KAA4B,UAAjC,EAA8C;AAC1CunB,kBAAAA,YAAY,GAAG,KAAKhmB,SAAL,CAAe,KAAK/D,WAAL,CAAiBE,QAAhC,CAAf;AACA6rB,kBAAAA,YAAY,GAAGpqB,IAAf;AACH;;AACD,oBAAKoqB,YAAY,CAACtQ,MAAb,IAAuBsQ,YAAY,CAACrC,OAAzC,EAAmD;AAC/C7kB,kBAAAA,UAAU,GAAGknB,YAAY,CAACtQ,MAAb,GACTsO,YAAY,CAACxnB,KAAb,CAAmBqf,KADV,GACkBmI,YAAY,CAACxnB,KAAb,CAAmB6e,MADlD;;AAEA,uBAAKvX,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhF,UAAU,CAAC5T,MAA3B,EAAmC4Y,CAAC,EAApC,EAAwC;AACpC,wBAAIhF,UAAU,CAACgF,CAAD,CAAV,CAAc5J,EAAd,MAAsB8rB,YAAY,CAACb,UAAD,CAAZ,IAA4Ba,YAAY,CAACqgB,WAAD,CAA9D,CAAJ,EAAkF;AAC9EvnC,sBAAAA,UAAU,CAACgF,CAAD,CAAV,CAAc0hB,MAAd,CAAqB5Y,UAArB,CAAgClP,OAAhC,GAA0CsoB,YAAY,CAACppB,WAAb,CAAyB,CAAzB,EAA4Bc,OAAtE;AACH;AACJ;AACJ,iBARD,MASK,IAAIsoB,YAAY,CAAC6gB,QAAb,IAAyB7iB,YAAY,CAACxnB,KAAb,CAAmBipB,SAAhD,EAA2D;AAC5DzB,kBAAAA,YAAY,CAACxnB,KAAb,CAAmBgpB,MAAnB,CAA0B5Y,UAA1B,CAAqClP,OAArC,GAA+CsoB,YAAY,CAACppB,WAAb,CAAyB,CAAzB,EAA4Bc,OAA3E;AACH;AACJ;;AACD,mBAAKgQ,QAAL;AACH;;AACDqY,YAAAA,WAAW,CAACxF,OAAZ,GAAsB,IAAtB;AACA,iBAAKqB,mBAAL,CAAyBhmB,IAAzB;AACA,iBAAK8D,cAAL,GAAsB,KAAKA,cAAL,GAAsB,CAAClO,aAAa,CAAC+1B,QAA3D;;AACA,gBAAI,KAAKttB,WAAL,CAAiBG,OAArB,EAA8B;AAC1B,mBAAKkf,cAAL;AACH;;AACD,iBAAKrf,WAAL,GAAmB;AAAEC,cAAAA,EAAE,EAAE,EAAN;AAAUC,cAAAA,QAAQ,EAAE,EAApB;AAAwBC,cAAAA,OAAO,EAAE,KAAjC;AAAwCC,cAAAA,IAAI,EAAEC;AAA9C,aAAnB;AACA,iBAAK4O,cAAL,CAAoB2B,kBAApB;;AACA,gBAAIpc,QAAQ,EAAZ,EAAgB;AACZ,mBAAKiL,qBAAL,GAA6B,KAA7B;AACH;;AACD,iBAAKyD,uBAAL,CAA6B,IAA7B;AACA6B,YAAAA,EAAE,CAAClS,KAAH,GAAW,EAAX;;AACJ,eAAK,EAAL;AAAS,mBAAO,CAAC;AAAE;AAAH,aAAP;AA3Lb;AA6LH,OA9LiB,CAAlB;AA+LH,KAjMe,CAAhB;AAkMH,GAnMD;AAoMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiM,EAAAA,OAAO,CAACtO,SAAR,CAAkBm8C,QAAlB,GAA6B,UAAUhrC,IAAV,EAAgB1B,EAAhB,EAAoB;AAC7C;AACA,QAAI4E,UAAU,GAAIpM,aAAa,CAACkJ,IAAD,CAAb,KAAwBtM,IAAzB,GAAiC,KAAK6M,KAAtC,GAA8C,KAAKU,UAApE;;AACA,SAAK,IAAItR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuT,UAAU,CAAC5T,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,UAAIuT,UAAU,CAACvT,CAAD,CAAV,CAAc2O,EAAd,CAAiBmtB,QAAjB,OAAgCntB,EAAE,CAACmtB,QAAH,EAApC,EAAmD;AAC/C,eAAO97B,CAAC,CAAC87B,QAAF,EAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GATD;AAUA;;;AACAtuB,EAAAA,OAAO,CAACtO,SAAR,CAAkB87C,qBAAlB,GAA0C,UAAUhoC,IAAV,EAAgB;AACtD,QAAIrF,OAAO,GAAGxG,aAAa,CAAC6L,IAAI,CAACrF,OAAN,CAAb,KAAgC/I,SAAhC,GAA4C;AAAE22C,MAAAA,WAAW,EAAEvoC,IAAI,CAACrF,OAAL,CAAagB;AAA5B,KAA5C,GACR;AAAEkoB,MAAAA,MAAM,EAAE7jB,IAAI,CAACrF,OAAL,CAAagB;AAAvB,KADN;AAEA,QAAI0S,UAAU,GAAG,EAAjB;;AACA,QAAIla,aAAa,CAAC6L,IAAI,CAACrF,OAAN,CAAb,KAAgC5J,IAApC,EAA0C;AACtC,UAAIiP,IAAI,CAACrF,OAAL,CAAasD,KAAb,CAAmBC,IAAnB,KAA4B,MAAhC,EAAwC;AACpCmQ,QAAAA,UAAU,CAACm6B,QAAX,GAAsBxoC,IAAI,CAACrF,OAAL,CAAasD,KAAnC;AACH,OAFD,MAGK;AACDoQ,QAAAA,UAAU,CAAC2W,YAAX,GAA0BhlB,IAAI,CAACrF,OAAL,CAAa0D,WAAb,CAAyB,CAAzB,EAA4B1C,EAAtD;AACH;AACJ,KAPD,MAQK;AACD0S,MAAAA,UAAU,CAAC2W,YAAX,GAA0BhlB,IAAI,CAACrF,OAAL,CAAa0D,WAAb,CAAyB,CAAzB,EAA4B1C,EAAtD;AACH;;AACDqE,IAAAA,IAAI,GAAG;AACHe,MAAAA,QAAQ,EAAEf,IAAI,CAACe,QADZ;AAEHD,MAAAA,QAAQ,EAAEd,IAAI,CAACc,QAFZ;AAGH2gB,MAAAA,MAAM,EAAEzhB,IAAI,CAACyhB,MAHV;AAIH9mB,MAAAA,OAAO,EAAEA,OAJN;AAKH0T,MAAAA,UAAU,EAAEA;AALT,KAAP;AAOA,WAAOrO,IAAP;AACH,GAvBD;AAwBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIxF,EAAAA,OAAO,CAACtO,SAAR,CAAkBia,YAAlB,GAAiC,YAAY;AACzC,QAAK,KAAKhF,cAAL,GAAsBlO,aAAa,CAACmO,MAArC,IAAiD,EAAE,KAAKD,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAAjD,IACC,EAAE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACyc,QAAtC,CADD,IACsD,EAAE,KAAKvO,cAAL,GAAsBlO,aAAa,CAACooB,YAAtC,CAD1D,EACgH;AAC5G,aAAO,IAAP;AACH,KAHD,MAIK;AACD,aAAO,KAAP;AACH;AACJ,GARD;;AASA7gB,EAAAA,OAAO,CAACtO,SAAR,CAAkBka,YAAlB,GAAiC,UAAUxF,OAAV,EAAmBC,OAAnB,EAA4B;AACzD,QAAID,OAAO,CAACtC,UAAR,IAAsBuC,OAAO,CAACvC,UAA9B,IAA4CsC,OAAO,CAAChD,KAApD,IAA6DiD,OAAO,CAACvC,UAArE,IACGsC,OAAO,CAACqN,YADX,IAC2BpN,OAAO,CAACoN,YADnC,IACmDrN,OAAO,CAAC6nC,eAD3D,IAC8E5nC,OAAO,CAAC4nC,eAD1F,EAC2G;AACvG,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAOAjuC,EAAAA,OAAO,CAACtO,SAAR,CAAkBya,mBAAlB,GAAwC,UAAUyS,MAAV,EAAkB;AACtD,QAAIsvB,QAAQ,GAAGtvB,MAAM,GAAG,IAAH,GAAU,KAA/B;;AACA,QAAI,KAAKjY,cAAL,GAAsBlO,aAAa,CAACyc,QAApC,KAAiD,CAACg5B,QAAD,IAActvB,MAAM,KAAKnmB,aAAa,CAACyc,QAAxF,CAAJ,EAAwG;AACpG,WAAKvO,cAAL,GAAsB,KAAKA,cAAL,GAAsB,CAAClO,aAAa,CAACyc,QAA3D;AACH;;AACD,QAAI,KAAKvO,cAAL,GAAsBlO,aAAa,CAACooB,YAApC,KAAqD,CAACqtB,QAAD,IAAatvB,MAAM,KAAKnmB,aAAa,CAACooB,YAA3F,CAAJ,EAA8G;AAC1G,WAAKla,cAAL,GAAsB,KAAKA,cAAL,GAAsB,CAAClO,aAAa,CAACooB,YAA3D;AACH;AACJ,GARD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7gB,EAAAA,OAAO,CAACtO,SAAR,CAAkBy8C,UAAlB,GAA+B,UAAUtrC,IAAV,EAAgBurC,kBAAhB,EAAoC;AAC/D,SAAKnkB,sBAAL,CAA4BpnB,IAA5B;AACA,SAAKyoB,eAAL,CAAqB,KAAKrmB,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAArB;AACA,QAAIktC,YAAY,GAAGx/B,QAAQ,CAACgH,cAAT,CAAwBhT,IAAI,CAAC1B,EAAL,GAAU,eAAlC,CAAnB;AACA,WAAO,KAAK8D,SAAL,CAAepC,IAAI,CAAC1B,EAApB,CAAP;;AACA,QAAI0B,IAAI,CAACQ,QAAT,EAAmB;AACf,aAAO,KAAKxC,UAAL,CAAgBgC,IAAI,CAAC1B,EAArB,CAAP;AACH;;AACD,QAAIzL,QAAQ,EAAZ,EAAgB;AACZ,WAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,KAAL,CAAWjR,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAIqQ,IAAI,CAAC1B,EAAL,KAAY,KAAKiC,KAAL,CAAW5Q,CAAX,EAAc2O,EAA9B,EAAkC;AAC9B,eAAKykB,wBAAL,CAA8B/iB,IAA9B,EAAoC,MAApC,EAA4CrQ,CAA5C;AACH;AACJ;AACJ;;AACD,SAAK4Q,KAAL,CAAWsjB,MAAX,CAAkB,KAAKtjB,KAAL,CAAW0Z,OAAX,CAAmBja,IAAnB,CAAlB,EAA4C,CAA5C;;AACA,QAAIwrC,YAAY,CAAChrC,QAAb,IAAyBgrC,YAAY,CAAChrC,QAAb,CAAsBlR,MAAtB,GAA+B,CAA5D,EAA+D;AAC3D,UAAIm8C,aAAa,GAAG/sC,SAApB;;AACA,WAAK,IAAIwJ,CAAC,GAAGsjC,YAAY,CAAChrC,QAAb,CAAsBlR,MAAtB,GAA+B,CAA5C,EAA+C4Y,CAAC,IAAI,CAApD,EAAuDA,CAAC,EAAxD,EAA4D;AACxD,YAAIwjC,YAAY,GAAGF,YAAY,CAAChrC,QAAb,CAAsB0H,CAAtB,CAAnB;;AACA,YAAIqjC,kBAAkB,CAACj8C,MAAnB,GAA4B,CAA5B,IAAiCi8C,kBAAkB,CAACtxB,OAAnB,CAA2ByxB,YAAY,CAACptC,EAAb,CAAgBqD,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAA3B,MAA8D,CAAC,CAApG,EAAuG;AACnG,cAAI,CAAC8pC,aAAL,EAAoB;AAChBD,YAAAA,YAAY,CAACt4B,UAAb,CAAwBy4B,YAAxB,CAAqCD,YAArC,EAAmDF,YAAnD;AACH,WAFD,MAGK;AACDA,YAAAA,YAAY,CAACt4B,UAAb,CAAwBy4B,YAAxB,CAAqCD,YAArC,EAAmDD,aAAnD;AACH;;AACDA,UAAAA,aAAa,GAAGC,YAAhB;AACH;AACJ;AACJ;;AACD,QAAIF,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACt4B,UAAb,CAAwBC,WAAxB,CAAoCq4B,YAApC;AACH;AACJ,GAlCD;AAmCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIruC,EAAAA,OAAO,CAACtO,SAAR,CAAkBo5B,WAAlB,GAAgC,UAAUjoB,IAAV,EAAgB;AAC5C,QAAIwiB,QAAQ,GAAG,EAAf;AACA,QAAIE,QAAQ,GAAG,EAAf;;AACA,QAAI1iB,IAAI,CAACQ,QAAT,EAAmB;AACfkiB,MAAAA,QAAQ,GAAG,KAAKpV,cAAL,CAAoBqV,WAApB,CAAgC3iB,IAAhC,EAAsCwiB,QAAtC,CAAX;AACH;;AACD,SAAKV,kCAAL,CAAwC9hB,IAAxC;;AACA,SAAK,IAAImD,EAAE,GAAG,CAAT,EAAYyoC,UAAU,GAAGlpB,QAA9B,EAAwCvf,EAAE,GAAGyoC,UAAU,CAACt8C,MAAxD,EAAgE6T,EAAE,EAAlE,EAAsE;AAClE,UAAI5C,KAAK,GAAGqrC,UAAU,CAACzoC,EAAD,CAAtB;;AACA,UAAI,KAAKf,SAAL,CAAe7B,KAAK,CAACjC,EAArB,CAAJ,EAA8B;AAC1B,aAAK3L,MAAL,CAAY4N,KAAZ;AACH;AACJ;AACJ,GAbD,CAz/N2C,CAugO3C;AACA;;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpD,EAAAA,OAAO,CAACtO,SAAR,CAAkBg9C,YAAlB,GAAiC,UAAUhsC,YAAV,EAAwB0F,SAAxB,EAAmCR,WAAnC,EAAgD;AAC7E,QAAI,EAAE,KAAKjB,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAAJ,EAAuD;AACnD,UAAI/D,KAAK,GAAG3W,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCya,MAA7C;AACA,UAAID,wBAAwB,GAAG,KAAK1N,cAAL,CAAoB0N,wBAApB,CAA6Ctc,SAA7C,EAAwDA,SAAxD,EAAmE8X,KAAnE,CAA/B;;AACA,UAAI,CAACwE,wBAAL,EAA+B;AAC3B,YAAInb,YAAY,YAAYnM,IAA5B,EAAkC;AAC9B,cAAIo4C,OAAO,GAAGvmC,SAAd;;AACA,eAAK,IAAIpC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAYsD,WAAZ,CAAtB,EAAgD5B,EAAE,GAAGC,EAAE,CAAC9T,MAAxD,EAAgE6T,EAAE,EAAlE,EAAsE;AAClE,gBAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;;AACA,oBAAQjU,GAAR;AACI,mBAAK,OAAL;AACI2Q,gBAAAA,YAAY,CAACoE,KAAb,GAAqB6nC,OAAO,CAAC7nC,KAA7B;AACA;;AACJ,mBAAK,QAAL;AACIpE,gBAAAA,YAAY,CAACsE,MAAb,GAAsB2nC,OAAO,CAAC3nC,MAA9B;AACA;;AACJ,mBAAK,SAAL;AACItE,gBAAAA,YAAY,CAACub,OAAb,GAAuB0wB,OAAO,CAAC1wB,OAA/B;AACA;;AACJ,mBAAK,SAAL;AACIvb,gBAAAA,YAAY,CAACwb,OAAb,GAAuBywB,OAAO,CAACzwB,OAA/B;AACA;;AACJ,mBAAK,aAAL;AACIxb,gBAAAA,YAAY,CAACyb,WAAb,GAA2BwwB,OAAO,CAACxwB,WAAnC;AACA;AAfR;AAiBH;;AACD,eAAKrW,kBAAL,CAAwBpF,YAAxB,EAAsCkF,WAAtC,EAAmDQ,SAAnD;AACH,SAvBD,MAwBK;AACD,eAAK,IAAIjB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGlW,MAAM,CAACoT,IAAP,CAAYsD,WAAZ,CAAtB,EAAgDT,EAAE,GAAGC,EAAE,CAACjV,MAAxD,EAAgEgV,EAAE,EAAlE,EAAsE;AAClE,gBAAIpV,GAAG,GAAGqV,EAAE,CAACD,EAAD,CAAZ;AACA,gBAAIynC,YAAY,GAAGxmC,SAAnB;AACA,gBAAIymC,iBAAiB,GAAGnsC,YAAY,CAAC8lB,WAArC;AACA,gBAAIsmB,iBAAiB,GAAGpsC,YAAY,CAAC4gB,WAArC;;AACA,oBAAQvxB,GAAR;AACI,mBAAK,aAAL;AACI88C,gBAAAA,iBAAiB,CAAC/yB,CAAlB,GAAsB8yB,YAAY,CAACpmB,WAAb,CAAyB1M,CAAzB,IAA8B+yB,iBAAiB,CAAC/yB,CAAtE;AACA+yB,gBAAAA,iBAAiB,CAACx6C,CAAlB,GAAsBu6C,YAAY,CAACpmB,WAAb,CAAyBn0B,CAAzB,IAA8Bw6C,iBAAiB,CAACx6C,CAAtE;AACA;;AACJ,mBAAK,aAAL;AACIy6C,gBAAAA,iBAAiB,CAAChzB,CAAlB,GAAsB8yB,YAAY,CAACtrB,WAAb,CAAyBxH,CAAzB,IAA8BgzB,iBAAiB,CAAChzB,CAAtE;AACAgzB,gBAAAA,iBAAiB,CAACz6C,CAAlB,GAAsBu6C,YAAY,CAACtrB,WAAb,CAAyBjvB,CAAzB,IAA8By6C,iBAAiB,CAACz6C,CAAtE;AAPR;AASH;;AACD,eAAKqU,uBAAL,CAA6BhG,YAA7B,EAA2CkF,WAA3C,EAAwDQ,SAAxD;AACH;AACJ;AACJ;AACJ,GAjDD;;AAkDApI,EAAAA,OAAO,CAACtO,SAAR,CAAkBq9C,wBAAlB,GAA6C,UAAUrsC,YAAV,EAAwB0F,SAAxB,EAAmCvF,IAAnC,EAAyC2sB,MAAzC,EAAiD;AAC1F,QAAI3sB,IAAI,CAACS,KAAL,KAAe/B,SAAf,IAA4BmB,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,MAA5D,EAAoE;AAChE1K,MAAAA,WAAW,CAAC6J,IAAI,CAACS,KAAN,EAAaZ,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAb,CAAX;AACAmsB,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,QAAI3sB,IAAI,CAAC2pC,MAAL,KAAgBjrC,SAApB,EAA+B;AAC3B,WAAKytC,YAAL,CAAkBtsC,YAAY,CAAC8pC,MAA/B,EAAuC3pC,IAAI,CAAC2pC,MAA5C;AACAhd,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,QAAI3sB,IAAI,CAACuG,WAAL,KAAqB7H,SAAzB,EAAoC;AAChC,UAAK6G,SAAS,CAACgB,WAAV,GAAwBnR,eAAe,CAACg3C,MAAzC,IACC,EAAEpsC,IAAI,CAACuG,WAAL,GAAmBnR,eAAe,CAACg3C,MAArC,CADD,IACkDt0C,UAAU,CAAC,IAAD,EAAO+H,YAAP,CADhE,EACsF;AAClF,aAAK6V,cAAL;AACH,OAHD,MAIK;AACD,aAAKywB,sBAAL,CAA4B,KAAKhgC,aAAL,CAAmB5F,KAA/C,EAAsD,KAAK4F,aAA3D;AACA,aAAK+T,cAAL;AACAyS,QAAAA,MAAM,GAAG,IAAT;AACH;AACJ;;AACD,SAAK0f,0BAAL,CAAgCxsC,YAAhC,EAA8C0F,SAA9C,EAAyDvF,IAAzD,EAA+D2sB,MAA/D;AACA,WAAOA,MAAP;AACH,GAtBD;AAuBA;;;AACAxvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBw9C,0BAAlB,GAA+C,UAAUxsC,YAAV,EAAwB0F,SAAxB,EAAmCvF,IAAnC,EAAyC2sB,MAAzC,EAAiD;AAC5F,QAAI9sB,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,UAA5B,IAA0C,CAAC,KAAKic,aAApD,EAAmE;AAC/D,UAAIvX,SAAS,CAAC3E,KAAd,EAAqB;AACjB,YAAIA,KAAK,GAAGZ,IAAI,CAACY,KAAjB;AACA,YAAI0rC,WAAW,GAAGzsC,YAAY,CAACe,KAA/B;AACA,YAAI2rC,aAAa,GAAID,WAAW,CAACvsB,WAAZ,KAA4B,YAA7B,GAA6C,IAA7C,GAAoD,KAAxE;AACA,YAAI3D,OAAO,GAAGkwB,WAAW,CAAClwB,OAA1B;AACA,YAAIowB,QAAQ,GAAGjnC,SAAS,CAAC3E,KAAzB;AACA,YAAIynB,IAAI,GAAGxoB,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAX;AACA,YAAIisC,UAAU,GAAG,KAAK,CAAtB;AACA,YAAIC,UAAU,GAAG,KAAK,CAAtB;AACA,YAAIpuC,EAAE,GAAG,KAAK,CAAd;;AACA,YAAIkuC,QAAQ,CAACvsB,KAAT,IAAkBusB,QAAQ,CAAC/sB,MAA/B,EAAuC;AACnC,cAAI+sB,QAAQ,CAACvsB,KAAb,EAAoB;AAChB,iBAAK,IAAI9c,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAYb,KAAK,CAACqf,KAAlB,CAAtB,EAAgD9c,EAAE,GAAGC,EAAE,CAAC9T,MAAxD,EAAgE6T,EAAE,EAAlE,EAAsE;AAClE,kBAAIwpC,KAAK,GAAGvpC,EAAE,CAACD,EAAD,CAAd;AACA,kBAAIypC,UAAU,GAAG/qC,MAAM,CAAC8qC,KAAD,CAAvB;AACA,kBAAIptB,IAAI,GAAGitB,QAAQ,CAACvsB,KAAT,CAAe2sB,UAAf,CAAX;AACA,kBAAIC,SAAS,GAAG,KAAK,CAArB;AACA,kBAAIC,OAAO,GAAGlsC,KAAK,CAACqf,KAAN,CAAY2sB,UAAZ,CAAd;;AACA,kBAAIE,OAAO,IAAIA,OAAO,CAACljB,MAAvB,EAA+B;AAC3BtrB,gBAAAA,EAAE,GAAGguC,WAAW,CAACrsB,KAAZ,CAAkB2sB,UAAlB,EAA8BhjB,MAA9B,CAAqCtrB,EAA1C;AACAmuC,gBAAAA,UAAU,GAAGltB,IAAI,CAACqK,MAAlB;AACA8iB,gBAAAA,UAAU,GAAGI,OAAO,CAACljB,MAArB;AACA,qBAAK3kB,kBAAL,CAAwB,KAAK7C,SAAL,CAAe9D,EAAf,CAAxB,EAA4CmuC,UAA5C,EAAwDC,UAAxD;AACH;;AACD,kBAAIntB,IAAI,CAAC/e,QAAT,EAAmB;AACf,qBAAK,IAAI8D,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGlW,MAAM,CAACoT,IAAP,CAAY8d,IAAI,CAAC/e,QAAjB,CAAtB,EAAkD8D,EAAE,GAAGC,EAAE,CAACjV,MAA1D,EAAkEgV,EAAE,EAApE,EAAwE;AACpE,sBAAIyoC,cAAc,GAAGxoC,EAAE,CAACD,EAAD,CAAvB;AACAhG,kBAAAA,EAAE,GAAGguC,WAAW,CAACrsB,KAAZ,CAAkB2sB,UAAlB,EAA8BpsC,QAA9B,CAAuCqB,MAAM,CAACkrC,cAAD,CAA7C,EAA+DzuC,EAApE;AACA,sBAAI0uC,MAAM,GAAG,KAAK5qC,SAAL,CAAe9D,EAAf,CAAb;AACAmuC,kBAAAA,UAAU,GAAGltB,IAAI,CAAC/e,QAAL,CAAcqB,MAAM,CAACkrC,cAAD,CAApB,CAAb;AACAL,kBAAAA,UAAU,GAAGI,OAAO,CAACtsC,QAAR,CAAiBqB,MAAM,CAACkrC,cAAD,CAAvB,CAAb;AACA,uBAAK9nC,kBAAL,CAAwB+nC,MAAxB,EAAgCP,UAAhC,EAA4CC,UAA5C;AACH;AACJ;;AACD,kBAAIntB,IAAI,CAACtb,KAAL,IAAc,CAACsoC,aAAnB,EAAkC;AAC9BM,gBAAAA,SAAS,GAAIP,WAAW,CAAC7sB,MAAZ,IAAsB6sB,WAAW,CAACW,SAAnC,GAAgDL,UAAU,GAAG,CAA7D,GAAiEA,UAA7E;AACAvkB,gBAAAA,IAAI,CAAC6kB,iBAAL,CAAuBL,SAAvB,EAAkCC,OAAO,CAAC7oC,KAA1C,EAAiD,IAAjD,EAAuDmY,OAAvD;AACA,qBAAK+D,wBAAL;AACH;;AACD,kBAAIZ,IAAI,CAACpb,MAAL,IAAeooC,aAAnB,EAAkC;AAC9BM,gBAAAA,SAAS,GAAIP,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD+iB,UAAU,GAAG,CAA7D,GAAiEA,UAA7E;AACAC,gBAAAA,SAAS,IAAKP,WAAW,CAAC7sB,MAAZ,IAAsB6sB,WAAW,CAACW,SAAnC,GAAgD,CAAhD,GAAoD,CAAjE;AACA5kB,gBAAAA,IAAI,CAAC8kB,eAAL,CAAqBN,SAArB,EAAgCC,OAAO,CAAC3oC,MAAxC,EAAgD,IAAhD,EAAsDiY,OAAtD;AACA,qBAAK+D,wBAAL;AACH;AACJ;AACJ;;AACD,cAAIvf,KAAK,CAAC6e,MAAV,EAAkB;AACd,iBAAK,IAAI7a,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGxW,MAAM,CAACoT,IAAP,CAAYb,KAAK,CAAC6e,MAAlB,CAAtB,EAAiD7a,EAAE,GAAGC,EAAE,CAACvV,MAAzD,EAAiEsV,EAAE,EAAnE,EAAuE;AACnE,kBAAI1V,GAAG,GAAG2V,EAAE,CAACD,EAAD,CAAZ;AACA,kBAAIgoC,UAAU,GAAG/qC,MAAM,CAAC3S,GAAD,CAAvB;AACA,kBAAIkiC,KAAK,GAAGxwB,KAAK,CAAC6e,MAAN,CAAamtB,UAAb,CAAZ;AACA,kBAAIxS,IAAI,GAAG,KAAK,CAAhB;AACA,kBAAIiC,QAAQ,GAAIiQ,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD,CAAhD,GAAoD,CAAnE;;AACA,kBAAIuH,KAAK,IAAIA,KAAK,CAACxH,MAAnB,EAA2B;AACvBtrB,gBAAAA,EAAE,GAAGguC,WAAW,CAAC7sB,MAAZ,CAAmBmtB,UAAnB,EAA+BhjB,MAA/B,CAAsCtrB,EAA3C;AACAmuC,gBAAAA,UAAU,GAAGD,QAAQ,CAAC/sB,MAAT,CAAgBmtB,UAAhB,EAA4BhjB,MAAzC;AACA8iB,gBAAAA,UAAU,GAAGtb,KAAK,CAACxH,MAAnB;AACA,qBAAK3kB,kBAAL,CAAwB,KAAK7C,SAAL,CAAe9D,EAAf,CAAxB,EAA4CmuC,UAA5C,EAAwDC,UAAxD;AACH;;AACD,kBAAItb,KAAK,CAAC2J,MAAV,EAAkB;AACd,oBAAI6R,UAAU,KAAK,CAAnB,EAAsB;AAClBxS,kBAAAA,IAAI,GAAGhJ,KAAK,CAAC2J,MAAb;AACH,iBAFD,MAGK;AACD,sBAAIqS,aAAa,GAAGd,WAAW,CAAC7sB,MAAZ,CAAmBmtB,UAAU,GAAG,CAAhC,CAApB;AACAxS,kBAAAA,IAAI,GAAGhJ,KAAK,CAAC2J,MAAN,GAAeqS,aAAa,CAACrS,MAApC;;AACA,sBAAIX,IAAI,IAAI,CAAZ,EAAe;AACXA,oBAAAA,IAAI,GAAGhJ,KAAK,CAAC2J,MAAb;AACH;AACJ;;AACD,oBAAIwR,aAAJ,EAAmB;AACflkB,kBAAAA,IAAI,CAAC6kB,iBAAL,CAAuBN,UAAvB,EAAmCxS,IAAnC,EAAyC,IAAzC,EAA+Che,OAA/C;AACA/f,kBAAAA,mBAAmB,CAACwD,YAAD,EAAe,IAAf,EAAqBwoB,IAAI,CAACyB,IAAL,CAAUuS,QAAV,EAAoBtS,KAApB,CAA0B6iB,UAA1B,CAArB,EAA4DA,UAA5D,CAAnB;AACH,iBAHD,MAIK;AACDvkB,kBAAAA,IAAI,CAAC8kB,eAAL,CAAqB9Q,QAAQ,GAAGuQ,UAAhC,EAA4CxS,IAA5C,EAAkD,IAAlD,EAAwDhe,OAAxD;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,YAAIxb,KAAK,CAACqsC,SAAN,KAAoBvuC,SAApB,IAAiC4tC,WAAW,CAAC7sB,MAAZ,CAAmBnwB,MAAxD,EAAgE;AAC5D,cAAIsR,KAAK,CAACqsC,SAAN,KAAoB,CAApB,IAAyBT,QAAQ,CAACS,SAAT,KAAuB,CAApD,EAAuD;AACnD,gBAAIT,QAAQ,CAACS,SAAb,EAAwB;AACpB,kBAAIV,aAAJ,EAAmB;AACflkB,gBAAAA,IAAI,CAACglB,SAAL,CAAgBf,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD,CAAhD,GAAoD,CAAnE;AACAhqB,gBAAAA,YAAY,CAACsE,MAAb,GAAsBtE,YAAY,CAACwG,OAAb,CAAqBlC,MAArB,GAA8BkkB,IAAI,CAAClkB,MAAzD;AACH,eAHD,MAIK;AACD,oBAAImoC,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAtC,EAAiD;AAC7CxB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAtB,GAAiC6nB,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAvD;AACA6nB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsByS,UAAtB,GAAmCnU,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsByS,UAAtB,GAAmC,CAAtE;AACAnU,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAtB,GAAiC,EAAjC;AACH;;AACD6nB,gBAAAA,IAAI,CAACilB,YAAL,CAAkB,CAAlB;AACH;AACJ,aAbD,MAcK;AACD,kBAAIf,aAAJ,EAAmB;AACf,oBAAIgB,MAAM,GAAG,IAAI1wC,aAAJ,EAAb;AACA0wC,gBAAAA,MAAM,CAACppC,MAAP,GAAgBvD,KAAK,CAACqsC,SAAtB;AACA5kB,gBAAAA,IAAI,CAACmlB,MAAL,CAAalB,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD,CAAhD,GAAoD,CAAhE,EAAmE0jB,MAAnE,EAA2E,IAA3E;AACA1tC,gBAAAA,YAAY,CAACsE,MAAb,GAAsBtE,YAAY,CAACwG,OAAb,CAAqBlC,MAArB,IAA+BvD,KAAK,CAACqsC,SAA3D;AACH,eALD,MAMK;AACD,oBAAIQ,MAAM,GAAG,IAAIn2C,gBAAJ,EAAb;AACAm2C,gBAAAA,MAAM,CAACxpC,KAAP,GAAerD,KAAK,CAACqsC,SAArB;AACA5kB,gBAAAA,IAAI,CAACqlB,SAAL,CAAe,CAAf,EAAkBD,MAAlB,EAA0B,IAA1B;;AACA,oBAAInB,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAtC,EAAiD;AAC7CxB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAtB,GAAiC6nB,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAvD;AACA6nB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAtB,GAAiC,EAAjC;AACA6nB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsByS,UAAtB,GAAmC,CAAnC;AACAnU,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBE,QAAtB,GAAiCvrB,SAAjC;AACA2pB,kBAAAA,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsByS,UAAtB,GAAmC8P,WAAW,CAACrsB,KAAZ,CAAkB3wB,MAAlB,GAA2B,CAA9D;AACH;AACJ;;AACD,mBAAK,IAAIs5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0jB,WAAW,CAAC7sB,MAAZ,CAAmBnwB,MAAvC,EAA+Cs5B,CAAC,EAAhD,EAAoD;AAChD,oBAAI0jB,WAAW,CAAC7sB,MAAZ,CAAmBmJ,CAAnB,EAAsBtqB,EAAtB,KAA6B,EAAjC,EAAqC;AACjCguC,kBAAAA,WAAW,CAAC7sB,MAAZ,CAAmBmJ,CAAnB,EAAsBtqB,EAAtB,GAA2BvD,QAAQ,EAAnC;AACH;;AACDkB,gBAAAA,WAAW,CAACosB,IAAD,EAAO,IAAP,EAAaxoB,YAAb,EAA4BysC,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD,CAAhD,GAAoD,CAA/E,EAAkF0iB,aAAlF,EAAiG3jB,CAAjG,CAAX;AACH;AACJ;AACJ,WAzCD,MA0CK;AACD,gBAAI2jB,aAAJ,EAAmB;AACflkB,cAAAA,IAAI,CAAC8kB,eAAL,CAAsBb,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAnC,GAAgD,CAAhD,GAAoD,CAAzE,EAA4EjpB,KAAK,CAACqsC,SAAlF,EAA6F,KAA7F;AACH,aAFD,MAGK;AACD5kB,cAAAA,IAAI,CAAC6kB,iBAAL,CAAuB,CAAvB,EAA0BtsC,KAAK,CAACqsC,SAAhC,EAA2C,KAA3C;AACH;AACJ;AACJ;;AACD,YAAIX,WAAW,CAAC1iB,MAAZ,IAAsB0iB,WAAW,CAACziB,SAAlC,IAA+C2iB,QAAQ,CAAC5iB,MAA5D,EAAoE;AAChE,cAAI+jB,IAAI,GAAGtlB,IAAI,CAACyB,IAAL,CAAU,CAAV,EAAaC,KAAb,CAAmB,CAAnB,EAAsBvpB,QAAtB,CAA+B,CAA/B,EAAkClC,EAA7C;AACA,cAAIsvC,UAAU,GAAG,KAAKxrC,SAAL,CAAeurC,IAAf,CAAjB;AACA,eAAK1oC,kBAAL,CAAwB2oC,UAAxB,EAAqCpB,QAAQ,CAAC5iB,MAA9C,EAAuDhpB,KAAK,CAACgpB,MAA7D;AACH;;AACD/pB,QAAAA,YAAY,CAACsE,MAAb,GAAsBtE,YAAY,CAACwG,OAAb,CAAqBlC,MAArB,GAA8BkkB,IAAI,CAAClkB,MAAzD;AACAtE,QAAAA,YAAY,CAACoE,KAAb,GAAqBpE,YAAY,CAACwG,OAAb,CAAqBpC,KAArB,GAA6BokB,IAAI,CAACpkB,KAAvD;AACH,OA7ID,MA8IK,IAAIsB,SAAS,CAACgB,WAAd,EAA2B;AAC5B,YAAIsnC,oBAAoB,GAAItoC,SAAS,CAACgB,WAAV,GAAwBnR,eAAe,CAACg3C,MAApE;AACA,YAAI0B,oBAAoB,GAAI9tC,IAAI,CAACuG,WAAL,GAAmBnR,eAAe,CAACg3C,MAA/D;;AACA,YAAIyB,oBAAoB,KAAKC,oBAA7B,EAAmD;AAC/C,cAAIltC,KAAK,GAAGf,YAAY,CAACe,KAAzB,CAD+C,CAE/C;;AACA,cAAIgtC,UAAU,GAAG,KAAKxrC,SAAL,CAAevC,YAAY,CAACvB,EAAb,GAAkBsC,KAAK,CAACgpB,MAAN,CAAatrB,EAA9C,CAAjB;AACAsvC,UAAAA,UAAU,CAACrnC,WAAX,GAA0B,CAACunC,oBAAF,GAA0BF,UAAU,CAACrnC,WAAX,GAAyB,CAACnR,eAAe,CAACg3C,MAApE,GACrBwB,UAAU,CAACrnC,WAAX,GAAyBnR,eAAe,CAACg3C,MAD7C,CAJ+C,CAM/C;;AACA,cAAI2B,SAAS,GAAG,KAAK,CAArB;;AACA,cAAIntC,KAAK,CAACqsC,SAAN,GAAkB,CAAtB,EAAyB;AACrB,iBAAK,IAAIt9C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiR,KAAK,CAAC6e,MAAN,CAAanwB,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1Co+C,cAAAA,SAAS,GAAG,KAAK3rC,SAAL,CAAevC,YAAY,CAACvB,EAAb,GAAkBsC,KAAK,CAAC6e,MAAN,CAAa9vB,CAAb,EAAgB2O,EAAlC,GAAuC,SAAtD,CAAZ;AACAyvC,cAAAA,SAAS,CAACxnC,WAAV,GAAyB,CAACunC,oBAAF,GAA0BC,SAAS,CAACxnC,WAAV,GAAwB,CAACnR,eAAe,CAACg3C,MAAnE,GACpB2B,SAAS,CAACxnC,WAAV,GAAwBnR,eAAe,CAACg3C,MAD5C;AAEH;AACJ,WAd8C,CAe/C;;;AACA,cAAIzsB,QAAQ,GAAG,KAAK,CAApB;AACA,cAAI4J,UAAU,GAAG,KAAK,CAAtB;AACA,cAAIj5B,KAAK,GAAGsQ,KAAK,CAAC6e,MAAN,CAAanwB,MAAb,IAAuB,CAAnC;;AACA,eAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiR,KAAK,CAACqf,KAAN,CAAY3wB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,iBAAK,IAAIq+C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG19C,KAApB,EAA2B09C,CAAC,EAA5B,EAAgC;AAC5BruB,cAAAA,QAAQ,GAAG,KAAKvd,SAAL,CAAevC,YAAY,CAACvB,EAAb,GAAkBsC,KAAK,CAACqf,KAAN,CAAYtwB,CAAZ,EAAe2O,EAAjC,GAAsC0vC,CAArD,CAAX;AACAruB,cAAAA,QAAQ,CAACpZ,WAAT,GAAwB,CAACunC,oBAAF,GAA0BnuB,QAAQ,CAACpZ,WAAT,GAAuB,CAACnR,eAAe,CAACg3C,MAAlE,GACnBzsB,QAAQ,CAACpZ,WAAT,GAAuBnR,eAAe,CAACg3C,MAD3C;;AAEA,kBAAI4B,CAAC,KAAK,CAAV,EAAa;AACTzkB,gBAAAA,UAAU,GAAG,KAAKnnB,SAAL,CAAevC,YAAY,CAACvB,EAAb,GAAkBsC,KAAK,CAACqf,KAAN,CAAYtwB,CAAZ,EAAe2O,EAAjC,GAAsC,GAAtC,GAA4C0vC,CAA5C,GAAgD,SAA/D,CAAb;AACAzkB,gBAAAA,UAAU,CAAChjB,WAAX,GAA0B,CAACunC,oBAAF,GAA0BvkB,UAAU,CAAChjB,WAAX,GAAyB,CAACnR,eAAe,CAACg3C,MAApE,GACrB7iB,UAAU,CAAChjB,WAAX,GAAyBnR,eAAe,CAACg3C,MAD7C;AAEH;AACJ;AACJ;AACJ;AACJ;;AACDzf,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,WAAOA,MAAP;AACH,GAvLD;AAwLA;AACA;;;AACAxvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBigB,WAAlB,GAAgC,UAAUm/B,aAAV,EAAyBrrB,MAAzB,EAAiC;AAC7D,QAAI,EAAE,KAAKzkB,aAAL,GAAqB5I,YAAY,CAACilB,uBAApC,CAAJ,EAAkE;AAC9D,UAAIlqB,KAAK,GAAG,KAAK,CAAjB;AACA,UAAIm8C,UAAU,GAAG7pB,MAAM,GAAG,KAAKjlB,cAAR,GAAyB,KAAKE,mBAArD;;AACA,WAAK,IAAIlO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG88C,UAAU,CAACn9C,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAI88C,UAAU,CAAC98C,CAAD,CAAV,CAAc2O,EAAd,KAAqB2vC,aAAa,CAAC3vC,EAAvC,EAA2C;AACvChO,UAAAA,KAAK,GAAG,IAAR;AACH;AACJ;;AACD,UAAI,CAACA,KAAL,EAAY;AACR;AACAsyB,QAAAA,MAAM,GAAI,KAAKjlB,cAAL,CAAoBxL,IAApB,CAAyB87C,aAAzB,CAAJ,GAA+C,KAAKpwC,mBAAL,CAAyB1L,IAAzB,CAA8B87C,aAA9B,CAArD;AACH;AACJ;AACJ,GAdD;AAeA;;AACA;AACA;;;AACA9wC,EAAAA,OAAO,CAACtO,SAAR,CAAkBoW,kBAAlB,GAAuC,UAAUpF,YAAV,EAAwB0F,SAAxB,EAAmCvF,IAAnC,EAAyC6O,QAAzC,EAAmDqM,MAAnD,EAA2D9V,cAA3D,EAA2E;AAC9G,QAAI,KAAKtH,qBAAL,IAA8B+B,YAAY,CAACvB,EAAb,KAAoB,QAAtD,EAAgE;AAC5D,UAAI4vC,MAAM,GAAGlzC,WAAW,CAAC6E,YAAD,CAAxB;AACA,WAAKiP,WAAL,CAAiBo/B,MAAjB,EAAyB,IAAzB;AACH;;AACD,QAAIC,cAAc,GAAGtuC,YAAY,CAACwG,OAAb,CAAqBqf,WAA1C;AACA,QAAI0oB,mBAAmB,GAAGvuC,YAAY,CAACwG,OAAb,CAAqB4U,MAA/C;AACA,QAAI5kB,eAAe,GAAG,KAAtB;AACA,QAAI1G,CAAJ;AACA,QAAIuY,CAAJ;AACA,QAAIkT,OAAJ;AACA,QAAIC,OAAJ;AACA,QAAIsR,MAAJ;AACA,QAAIxT,EAAJ;AACA,QAAIC,EAAJ;;AACA,QAAIpZ,IAAI,CAACiE,KAAL,KAAevF,SAAnB,EAA8B;AAC1B,UAAI,CAACmB,YAAY,CAACW,QAAlB,EAA4B;AACxBX,QAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCyD,KAAjC,GAAyCjE,IAAI,CAACiE,KAA9C;AACA0oB,QAAAA,MAAM,GAAG,IAAT;AACAt2B,QAAAA,eAAe,GAAG,IAAlB;AACH,OAJD,MAKK,IAAI,CAACwJ,YAAY,CAACipB,SAAlB,EAA6B;AAC9B,aAAKqR,WAAL,CAAiBt6B,YAAjB,EAA+BG,IAAI,CAACiE,KAApC,EAA2C,IAA3C;AACH,OAFI,MAGA;AACDpE,QAAAA,YAAY,CAACwG,OAAb,CAAqBpC,KAArB,GAA6BjE,IAAI,CAACiE,KAAlC;AACH;AACJ;;AACD,QAAIjE,IAAI,CAACmE,MAAL,KAAgBzF,SAApB,EAA+B;AAC3B,UAAI,CAACmB,YAAY,CAACW,QAAlB,EAA4B;AACxBX,QAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiC2D,MAAjC,GAA0CnE,IAAI,CAACmE,MAA/C;AACAwoB,QAAAA,MAAM,GAAG,IAAT;AACAt2B,QAAAA,eAAe,GAAG,IAAlB;AACH,OAJD,MAKK,IAAI,CAACwJ,YAAY,CAACipB,SAAlB,EAA6B;AAC9B,aAAKqR,WAAL,CAAiBt6B,YAAjB,EAA+BG,IAAI,CAACmE,MAApC,EAA4C,KAA5C;AACH,OAFI,MAGA;AACDtE,QAAAA,YAAY,CAACwG,OAAb,CAAqBlC,MAArB,GAA8BnE,IAAI,CAACmE,MAAnC;AACH;AACJ;;AACDwoB,IAAAA,MAAM,GAAG,KAAKuf,wBAAL,CAA8BrsC,YAA9B,EAA4C0F,SAA5C,EAAuDvF,IAAvD,EAA6D2sB,MAA7D,CAAT;;AACA,QAAI3sB,IAAI,CAACuG,WAAL,KAAqB7H,SAArB,IAAkCnD,SAAS,CAACgK,SAAD,CAAT,KAAyBhK,SAAS,CAACyE,IAAD,CAAxE,EAAgF;AAC5EH,MAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCmpC,MAAjC,GAA0CpuC,SAAS,CAACsE,YAAD,CAAT,GAA0BA,YAAY,CAAC8pC,MAAvC,GAAgD,IAA1F;AACH;;AACD,QAAI3pC,IAAI,CAACob,OAAL,KAAiB1c,SAArB,EAAgC;AAC5B,UAAImB,YAAY,CAACwG,OAAb,CAAqBo1B,IAArB,KAA8B,MAAlC,EAA0C;AACtC,YAAI57B,YAAY,CAACub,OAAb,KAAyBvb,YAAY,CAACwG,OAAb,CAAqB+U,OAA9C,IAAyD7V,SAAS,CAAC6V,OAAV,KAAsB1c,SAAnF,EAA8F;AAC1F,cAAI2vC,SAAS,GAAGruC,IAAI,CAACob,OAAL,GAAe7V,SAAS,CAAC6V,OAAzC;AACAvb,UAAAA,YAAY,CAACwG,OAAb,CAAqB+U,OAArB,GAA+Bvb,YAAY,CAACwG,OAAb,CAAqB+U,OAArB,GAA+BizB,SAA9D;AACA,eAAKC,gBAAL,CAAsBzuC,YAAY,CAACwG,OAAnC,EAA4CgoC,SAA5C,EAAuD,CAAvD,EAA0DxuC,YAAY,CAACwG,OAAb,CAAqBo1B,IAA/E;AACH;AACJ,OAND,MAOK;AACD57B,QAAAA,YAAY,CAACwG,OAAb,CAAqB+U,OAArB,GAA+Bpb,IAAI,CAACob,OAApC;AACH;;AACDuR,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACqb,OAAL,KAAiB3c,SAArB,EAAgC;AAC5B,UAAImB,YAAY,CAACwG,OAAb,CAAqBo1B,IAArB,KAA8B,MAAlC,EAA0C;AACtC,YAAI57B,YAAY,CAACwb,OAAb,KAAyBxb,YAAY,CAACwG,OAAb,CAAqBgV,OAA9C,IAAyD9V,SAAS,CAAC8V,OAAV,KAAsB3c,SAAnF,EAA8F;AAC1F,cAAI6vC,SAAS,GAAGvuC,IAAI,CAACqb,OAAL,GAAe9V,SAAS,CAAC8V,OAAzC;AACAxb,UAAAA,YAAY,CAACwG,OAAb,CAAqBgV,OAArB,GAA+Bxb,YAAY,CAACwG,OAAb,CAAqBgV,OAArB,GAA+BkzB,SAA9D;AACA,eAAKD,gBAAL,CAAsBzuC,YAAY,CAACwG,OAAnC,EAA4C,CAA5C,EAA+CkoC,SAA/C,EAA0D1uC,YAAY,CAACwG,OAAb,CAAqBo1B,IAA/E;AACH;AACJ,OAND,MAOK;AACD57B,QAAAA,YAAY,CAACwG,OAAb,CAAqBgV,OAArB,GAA+Brb,IAAI,CAACqb,OAApC;AACH;;AACDsR,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAAC+a,KAAL,KAAerc,SAAnB,EAA8B;AAC1BmB,MAAAA,YAAY,CAACwG,OAAb,CAAqB0U,KAArB,GAA6B/a,IAAI,CAAC+a,KAAlC;AACA4R,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,QAAI3sB,IAAI,CAACiqB,QAAL,KAAkBvrB,SAAtB,EAAiC;AAC7BmB,MAAAA,YAAY,CAACwG,OAAb,CAAqB4jB,QAArB,GAAgCpqB,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCypB,QAAjC,GAA4CjqB,IAAI,CAACiqB,QAAjF;AACA0C,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACwuC,SAAL,KAAmB9vC,SAAvB,EAAkC;AAC9BmB,MAAAA,YAAY,CAACwG,OAAb,CAAqBmoC,SAArB,GAAiC3uC,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCguC,SAAjC,GAA6CxuC,IAAI,CAACwuC,SAAnF;AACA7hB,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAAC0qB,QAAL,KAAkBhsB,SAAtB,EAAiC;AAC7BmB,MAAAA,YAAY,CAACwG,OAAb,CAAqBqkB,QAArB,GAAgC1qB,IAAI,CAAC0qB,QAArC;AACAiC,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACyuC,SAAL,KAAmB/vC,SAAvB,EAAkC;AAC9BmB,MAAAA,YAAY,CAACwG,OAAb,CAAqBooC,SAArB,GAAiCzuC,IAAI,CAACyuC,SAAtC;AACA9hB,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACy7B,IAAL,KAAc/8B,SAAlB,EAA6B;AACzBmB,MAAAA,YAAY,CAACwG,OAAb,CAAqBo1B,IAArB,GAA4Bz7B,IAAI,CAACy7B,IAAjC;AACA9O,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;;AACA,UAAIwJ,YAAY,CAACwG,OAAb,CAAqBo2B,cAArB,GAAsC1mC,aAAa,CAAC2mC,cAAxD,EAAwE;AACpEtoC,QAAAA,YAAY,CAACyL,YAAY,CAACwG,OAAd,EAAuBxG,YAAY,CAACub,OAApC,EAA6Cvb,YAAY,CAACwb,OAA1D,EAAmE,IAAnE,EAAyErb,IAAI,CAACy7B,IAA9E,CAAZ;;AACA,YAAI57B,YAAY,IAAIA,YAAY,CAACW,QAAjC,EAA2C;AACvC,eAAK,IAAI2C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGvD,YAAY,CAACW,QAAnC,EAA6C2C,EAAE,GAAGC,EAAE,CAAC9T,MAArD,EAA6D6T,EAAE,EAA/D,EAAmE;AAC/D,gBAAIpD,KAAK,GAAGqD,EAAE,CAACD,EAAD,CAAd;AACA,gBAAIq9B,UAAU,GAAG,KAAKp+B,SAAL,CAAerC,KAAf,CAAjB;AACAygC,YAAAA,UAAU,CAACn6B,OAAX,CAAmBo1B,IAAnB,GAA0Bz7B,IAAI,CAACy7B,IAA/B;AACA,iBAAKiT,WAAL,CAAiBlO,UAAjB,EAA6BxgC,IAAI,CAACy7B,IAAlC;AACH;AACJ;AACJ,OAVD,MAWK;AACD57B,QAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCi7B,IAAjC,GAAwCz7B,IAAI,CAACy7B,IAA7C;AACA,aAAKiT,WAAL,CAAiB7uC,YAAjB,EAA+BG,IAAI,CAACy7B,IAApC;AACH;AACJ;;AACD,QAAIz7B,IAAI,CAACsb,WAAL,KAAqB5c,SAArB,IAAmCmB,YAAY,CAAC0G,WAAb,GAA2BnR,eAAe,CAACuxC,MAAlF,EAA2F;AACvF,UAAI9mC,YAAY,CAACW,QAAb,IAAyB0a,MAA7B,EAAqC;AACjC;AACA,aAAK5N,cAAL,CAAoBkO,aAApB,CAAkC3b,YAAlC,EAAgD,CAACA,YAAD,CAAhD,EAAgEA,YAAY,CAACyb,WAAb,GAA2Bzb,YAAY,CAACwG,OAAb,CAAqBiV,WAAhH,EAA6H;AAAErC,UAAAA,CAAC,EAAEpZ,YAAY,CAACub,OAAlB;AAA2B5pB,UAAAA,CAAC,EAAEqO,YAAY,CAACwb;AAA3C,SAA7H,EAAmL,KAAnL;AACH;;AACDxb,MAAAA,YAAY,CAACwG,OAAb,CAAqBiV,WAArB,GAAmCtb,IAAI,CAACsb,WAAxC;AACAqR,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACgyB,eAAL,KAAyBtzB,SAA7B,EAAwC;AACpCmB,MAAAA,YAAY,CAACwG,OAAb,CAAqB5F,KAArB,CAA2BC,IAA3B,GAAkCV,IAAI,CAACgyB,eAAvC;AACH;;AACD,QAAIhyB,IAAI,CAAC2kB,OAAL,KAAiBjmB,SAArB,EAAgC;AAC5B,WAAKqmB,uBAAL,CAA6BllB,YAAY,CAACwG,OAA1C,EAAmDxG,YAAnD,EAAiEA,YAAY,CAAC8kB,OAA9E;AACH;;AACD,QAAI3kB,IAAI,CAACY,KAAL,KAAelC,SAAf,IAA4BmB,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,MAA5D,EAAoE;AAChE8rB,MAAAA,MAAM,GAAG,IAAT;AACAr2B,MAAAA,WAAW,CAAC0J,IAAD,EAAOH,YAAP,EAAqB0F,SAArB,EAAgC,IAAhC,CAAX;AACAlP,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAAC4f,MAAT,EAAiB;AACb+M,MAAAA,MAAM,GAAG,IAAT;AACA,WAAKgiB,YAAL,CAAkB9uC,YAAlB,EAAgCG,IAAhC;AACA3J,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAK,CAAE2J,IAAI,CAACY,KAAL,KAAelC,SAAf,IAA6BsB,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoBnC,SAAlD,IAAiEsB,IAAI,CAACiE,KAAL,KAAevF,SAAhF,IACCsB,IAAI,CAACmE,MAAL,KAAgBzF,SADjB,IAC8BsB,IAAI,CAACS,KAAL,KAAe/B,SAD9C,KAC4DmB,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,MADxF,IACkG,KAAKsV,UADxG,IAEItjB,QAAQ,MAAMmN,IAAd,IAAsBA,IAAI,CAACY,KAA3B,IAAoCZ,IAAI,CAACY,KAAL,CAAWC,IAAX,KAAoB,MAFhE,EAEyE;AACrE8rB,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACA,WAAK8f,UAAL,CAAgBy4B,UAAhB,CAA2B5uC,IAA3B,EAAiCuF,SAAjC,EAA4C1F,YAA5C,EAA0D,IAA1D;AACH;;AACD,QAAIA,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,aAA5B,KAA+C,CAAChO,QAAQ,EAAT,IAAegN,YAAY,CAACe,KAAb,CAAmBA,KAAnB,KAA6B,WAA7C,IAC7C/N,QAAQ,MAAMgN,YAAY,CAACe,KAAb,CAAmBk0B,gBAAnB,KAAwC,WADvD,CAAJ,EAC0E;AACtEnI,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACA,WAAKw4C,iBAAL,CAAuB7uC,IAAvB,EAA6BuF,SAA7B,EAAwC1F,YAAxC,EAAsD,IAAtD;AACH;;AACD,QAAKA,YAAY,CAACe,KAAb,IAAsBf,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,eAAnD,IAAwEhB,YAAY,CAACtB,QAAb,IACxE,KAAK6D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CADwE,IAC/B,KAAK6D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,EAAsCqC,KAAtC,CAA4CC,IAA5C,KAAqD,eADlG,EACoH;AAChH8rB,MAAAA,MAAM,GAAG,IAAT;AACAt2B,MAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,QAAI2J,IAAI,CAACiI,KAAL,KAAevJ,SAAnB,EAA8B;AAC1B,WAAK,IAAI4F,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGlW,MAAM,CAACoT,IAAP,CAAYzB,IAAI,CAACiI,KAAjB,CAAtB,EAA+C3D,EAAE,GAAGC,EAAE,CAACjV,MAAvD,EAA+DgV,EAAE,EAAjE,EAAqE;AACjE,YAAIpV,GAAG,GAAGqV,EAAE,CAACD,EAAD,CAAZ;AACA,YAAIQ,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACAy9B,QAAAA,MAAM,GAAG,IAAT;AACA,YAAImiB,aAAa,GAAG9uC,IAAI,CAACiI,KAAL,CAAW/Y,GAAX,CAApB;AACA,YAAI6/C,UAAU,GAAGlvC,YAAY,CAACoI,KAAb,CAAmBnD,KAAnB,CAAjB;AACA,aAAKkqC,UAAL,CAAgBF,aAAhB,EAA+BC,UAA/B,EAA2ClvC,YAAY,CAACwG,OAAxD;AACAhQ,QAAAA,eAAe,GAAG,IAAlB;AACH;AACJ;;AACD,QAAI2J,IAAI,CAACgR,UAAL,KAAoBtS,SAApB,IAAiCsB,IAAI,CAACgB,WAAL,KAAqBtC,SAAtD,IAAmEsB,IAAI,CAACiE,KAAL,KAAevF,SAAtF,EAAiG;AAC7F,WAAK,IAAIkG,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGxW,MAAM,CAACoT,IAAP,CAAYzB,IAAI,CAACgB,WAAL,IAAoBnB,YAAY,CAACmB,WAA7C,CAAtB,EAAiF4D,EAAE,GAAGC,EAAE,CAACvV,MAAzF,EAAiGsV,EAAE,EAAnG,EAAuG;AACnG,YAAI1V,GAAG,GAAG2V,EAAE,CAACD,EAAD,CAAZ;AACA,YAAIE,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACAy9B,QAAAA,MAAM,GAAG,IAAT;AACA,YAAImiB,aAAa,GAAG,KAAK,CAAzB;;AACA,YAAI9uC,IAAI,CAACgR,UAAT,EAAqB;AACjB89B,UAAAA,aAAa,GAAG9uC,IAAI,CAACgR,UAArB;AACH,SAFD,MAGK;AACD89B,UAAAA,aAAa,GAAG9uC,IAAI,CAACgB,WAAL,GAAmBhB,IAAI,CAACgB,WAAL,CAAiB9R,GAAjB,CAAnB,GAA2C2Q,YAAY,CAACmB,WAAxE;AACH;;AACD,YAAIiuC,gBAAgB,GAAGpvC,YAAY,CAACmB,WAAb,CAAyB8D,KAAzB,CAAvB;;AACA,YAAImqC,gBAAJ,EAAsB;AAClB,cAAIC,UAAU,GAAGrvC,YAAY,CAACoE,KAAb,GAAqB,IAArB,GAA4B,KAA7C;AACA,eAAKioB,gBAAL,CAAsB4iB,aAAtB,EAAqCG,gBAArC,EAAuDpvC,YAAY,CAACwG,OAApE,EAA6ExG,YAA7E,EAA2FqvC,UAA3F;AACA,cAAI9mB,YAAY,GAAG,KAAKhmB,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CAAnB;;AACA,cAAK6pB,YAAY,IAAIA,YAAY,CAACxnB,KAAb,CAAmBC,IAAnB,KAA4B,UAAjD,EAA8D;AAC1D,gBAAI0oB,UAAU,GAAG,kBAAjB;AACA,gBAAIkhB,WAAW,GAAG,mBAAlB;;AACA,gBAAK5qC,YAAY,CAACia,MAAb,IAAuBja,YAAY,CAACkoB,OAAzC,EAAmD;AAC/C,kBAAI7kB,UAAU,GAAGrD,YAAY,CAACia,MAAb,GACbsO,YAAY,CAACxnB,KAAb,CAAmBqf,KADN,GACcmI,YAAY,CAACxnB,KAAb,CAAmB6e,MADlD;;AAEA,mBAAK,IAAI0vB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGjsC,UAAU,CAAC5T,MAAnC,EAA2C6/C,GAAG,EAA9C,EAAkD;AAC9C,oBAAIjsC,UAAU,CAACisC,GAAD,CAAV,CAAgB7wC,EAAhB,MAAwBuB,YAAY,CAAC0pB,UAAD,CAAZ,IAA4B1pB,YAAY,CAAC4qC,WAAD,CAAhE,CAAJ,EAAoF;AAChFvnC,kBAAAA,UAAU,CAACisC,GAAD,CAAV,CAAgBvlB,MAAhB,CAAuB5Y,UAAvB,CAAkClP,OAAlC,GAA4CjC,YAAY,CAACmB,WAAb,CAAyB,CAAzB,EAA4Bc,OAAxE;AACAoB,kBAAAA,UAAU,CAACisC,GAAD,CAAV,CAAgBvlB,MAAhB,CAAuB5Y,UAAvB,CAAkCvQ,KAAlC,GAA0CZ,YAAY,CAACmB,WAAb,CAAyB,CAAzB,EAA4BP,KAAtE;AACA;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AACD,QAAIT,IAAI,CAAC06B,UAAL,KAAoBh8B,SAApB,IAAiCsB,IAAI,CAAC26B,YAAL,KAAsBj8B,SAAvD,IAAoEsB,IAAI,CAAC+O,UAAL,KAAoBrQ,SAA5F,EAAuG;AACnG,WAAK2vB,UAAL,CAAgBxuB,YAAhB;AACA,WAAKyuB,wBAAL,CAA8BzuB,YAA9B;;AACA,UAAIG,IAAI,CAAC+O,UAAL,KAAoBrQ,SAAxB,EAAmC;AAC/B,aAAK4O,cAAL,CAAoB0B,UAApB,CAA+BnP,YAA/B,EAA6C,IAA7C;AACH;;AACD8sB,MAAAA,MAAM,GAAG,IAAT;AACH;;AACD,QAAI3sB,IAAI,CAAC+rB,gBAAL,KAA0BrtB,SAA9B,EAAyC;AACrC,UAAIoG,KAAK,GAAG,KAAK,CAAjB;AACA,UAAIgqC,aAAa,GAAG,KAAK,CAAzB;AACA,UAAIM,qBAAqB,GAAG,KAAK,CAAjC;;AACA,WAAK,IAAI5pC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpX,MAAM,CAACoT,IAAP,CAAYzB,IAAI,CAAC+rB,gBAAjB,CAAtB,EAA0DvmB,EAAE,GAAGC,EAAE,CAACnW,MAAlE,EAA0EkW,EAAE,EAA5E,EAAgF;AAC5E,YAAItW,GAAG,GAAGuW,EAAE,CAACD,EAAD,CAAZ;AACAV,QAAAA,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAd;AACAy9B,QAAAA,MAAM,GAAG,IAAT;;AACA,YAAI3sB,IAAI,CAAC+rB,gBAAL,CAAsBjnB,KAAtB,CAAJ,EAAkC;AAC9BgqC,UAAAA,aAAa,GAAG9uC,IAAI,CAAC+rB,gBAAL,CAAsBjnB,KAAtB,CAAhB;AACH;;AACDsqC,QAAAA,qBAAqB,GAAGvvC,YAAY,CAACksB,gBAAb,CAA8BjnB,KAA9B,CAAxB;;AACA,YAAIsqC,qBAAJ,EAA2B;AACvB,eAAKC,yBAAL,CAA+BP,aAA/B,EAA8CM,qBAA9C,EAAqEvvC,YAAY,CAACwG,OAAlF,EAA2FxG,YAA3F;AACH;AACJ;AACJ;;AACD,QAAIG,IAAI,CAACqgB,OAAL,KAAiB3hB,SAArB,EAAgC;AAC5B,WAAK4wC,aAAL,CAAmBzvC,YAAnB,EAAiCG,IAAjC;AACH;;AACD,QAAI2sB,MAAJ,EAAY;AACR,UAAI,KAAKxW,UAAL,KAAoBzX,SAAxB,EAAmC;AAC/B;AACA,aAAKyX,UAAL,CAAgBo5B,wBAAhB,CAAyC1vC,YAAzC,EAAuD;AAAEub,UAAAA,OAAO,EAAG7V,SAAS,CAAC6V,OAAV,IAAqBvb,YAAY,CAACub,OAA9C;AAAwDC,UAAAA,OAAO,EAAG9V,SAAS,CAAC8V,OAAV,IAAqBxb,YAAY,CAACwb;AAApG,SAAvD,EAAuK,IAAvK;AACH;;AACD,UAAI,KAAKm0B,iBAAL,CAAuB3vC,YAAvB,KAAwCA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,aAA4CtK,WAAxF,EAAqG;AACjG2J,QAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCivC,kBAAjC;AACH;;AACD5vC,MAAAA,YAAY,CAACwG,OAAb,CAAqBwf,OAArB,CAA6B,IAAI9wB,IAAJ,CAAS8K,YAAY,CAACwG,OAAb,CAAqB4U,MAArB,CAA4BhX,KAArC,EAA4CpE,YAAY,CAACwG,OAAb,CAAqB4U,MAArB,CAA4B9W,MAAxE,CAA7B,EAA8GtE,YAAY,CAACvB,EAA3H,EAA+H,KAAK6+B,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA/H;AACAv9B,MAAAA,YAAY,CAACwG,OAAb,CAAqByf,OAArB,CAA6BjmB,YAAY,CAACwG,OAAb,CAAqB0f,WAAlD;AACA,WAAK8lB,YAAL,CAAkBhsC,YAAlB,EAAgC0F,SAAhC,EAA2CvF,IAA3C;;AACA,UAAIH,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,UAA5B,IAA0C,CAAC,KAAKic,aAAhD,IAAiE,EAAE,KAAKhZ,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAArE,EAAwH;AACpHne,QAAAA,oBAAoB,CAAC,IAAD,EAAOyD,YAAP,CAApB;AACA,YAAIwoB,IAAI,GAAGxoB,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAX;AACA,YAAII,KAAK,GAAGf,YAAY,CAACe,KAAzB;AACA,YAAI8uC,MAAM,GAAGrnB,IAAI,CAACsnB,iBAAL,GAAyBrgD,MAAtC;;AACA,YAAIsR,KAAK,CAACmf,WAAN,KAAsB,YAA1B,EAAwC;AACpC,cAAIjb,KAAK,GAAIlE,KAAK,CAACgpB,MAAN,IAAgBhpB,KAAK,CAACipB,SAAvB,GAAoC,CAApC,GAAwC,CAApD;AACAxtB,UAAAA,mBAAmB,CAACwD,YAAD,EAAe,IAAf,EAAqBwoB,IAAI,CAACyB,IAAL,CAAUhlB,KAAV,EAAiBilB,KAAjB,CAAuB2lB,MAAM,GAAG,CAAhC,CAArB,EAAyDA,MAAM,GAAG,CAAlE,CAAnB;AACH;;AACD7vC,QAAAA,YAAY,CAACwG,OAAb,CAAqBwf,OAArB,CAA6B,IAAI9wB,IAAJ,CAAS8K,YAAY,CAACwG,OAAb,CAAqB4U,MAArB,CAA4BhX,KAArC,EAA4CpE,YAAY,CAACwG,OAAb,CAAqB4U,MAArB,CAA4B9W,MAAxE,CAA7B;AACAtE,QAAAA,YAAY,CAACwG,OAAb,CAAqByf,OAArB,CAA6BjmB,YAAY,CAACwG,OAAb,CAAqB0f,WAAlD;AACH;;AACD,UAAK,EAAE,KAAKjiB,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAAD,IAAwD,KAAKzW,cAAL,GAAsBlO,aAAa,CAACyc,QAAhG,EAA2G;AACvG,YAAI,KAAKm9B,iBAAL,CAAuB3vC,YAAvB,CAAJ,EAA0C;AACtC,eAAKqa,cAAL;AACH;AACJ;;AACD,UAAIi0B,cAAc,CAACyB,MAAf,CAAsBzB,cAAtB,EAAsCtuC,YAAY,CAACwG,OAAb,CAAqBqf,WAA3D,MAA4E,KAAhF,EAAuF;AACnF,aAAKkJ,UAAL,CAAgB/uB,YAAhB;AACH;;AACD,UAAI,CAACgP,QAAL,EAAe;AACX;AACA,aAAKvB,cAAL,CAAoBuiC,sBAApB,CAA2ChwC,YAA3C,EAAyDuuC,mBAAzD,EAA+EpuC,IAAI,CAACsb,WAAL,KAAqB5c,SAAtB,GAAmC,IAAnC,GAA0C,KAAxH,EAFW,CAGX;AACA;AACA;AACH,OAND,MAOK;AACD,YAAImB,YAAY,IAAIA,YAAY,CAAC8kB,OAA7B,IAAwC9kB,YAAY,CAAC0C,QAAzD,EAAmE;AAC/D,eAAK68B,oBAAL,CAA0Bv/B,YAA1B,EAAyCA,YAAY,CAAC0C,QAAb,CAAsBjT,MAAtB,KAAiC,CAAjC,GAAqC,KAArC,GAA6C,IAAtF;AACH;AACJ;;AACD,UAAI,KAAK6mB,UAAL,KAAoBzX,SAAxB,EAAmC;AAC/B,aAAKyX,UAAL,CAAgBqP,WAAhB,CAA4B3lB,YAA5B,EAA0C,IAA1C;AACH;;AACD,UAAI,CAACG,IAAI,CAACgB,WAAN,IAAqB,CAACnB,YAAY,CAAC6sB,SAAvC,EAAkD;AAC9C,aAAKwN,iBAAL,CAAuBr6B,YAAvB;AACH,OAhDO,CAiDR;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAIA,YAAY,CAACtB,QAAb,IAAyB,KAAK6D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CAA7B,EAAoE;AAChE,YAAIuxC,QAAQ,GAAG,KAAK1tC,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CAAf;AACAuxC,QAAAA,QAAQ,CAACzpC,OAAT,CAAiBwf,OAAjB,CAAyB,IAAI9wB,IAAJ,CAAS+6C,QAAQ,CAACzpC,OAAT,CAAiBpC,KAA1B,EAAiCpE,YAAY,CAACwG,OAAb,CAAqBlC,MAAtD,CAAzB;AACA2rC,QAAAA,QAAQ,CAACzpC,OAAT,CAAiByf,OAAjB,CAAyBgqB,QAAQ,CAACzpC,OAAT,CAAiB0f,WAA1C;AACA+pB,QAAAA,QAAQ,CAAC10B,OAAT,GAAmB00B,QAAQ,CAACzpC,OAAT,CAAiB+U,OAApC;AACA00B,QAAAA,QAAQ,CAACz0B,OAAT,GAAmBy0B,QAAQ,CAACzpC,OAAT,CAAiBgV,OAApC;AACH,OA9DO,CA+DR;;;AACA,UAAI+yB,mBAAmB,CAACwB,MAApB,CAA2BxB,mBAA3B,EAAgDvuC,YAAY,CAACwG,OAAb,CAAqB4U,MAArE,MAAiF,KAArF,EAA4F;AACxF,aAAK80B,eAAL,CAAqBlwC,YAArB;;AACA,YAAIA,YAAY,CAACW,QAAjB,EAA2B;AACvB,eAAK05B,iBAAL,CAAuBr6B,YAAvB;AACH;AACJ;;AACD,UAAIA,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,UAA5B,IAA0C,CAAC,KAAKic,aAAhD,IAAkE,KAAKhZ,cAAL,GAAsBlO,aAAa,CAACmO,MAA1G,EAAmH;AAC/G,YAAI9C,UAAU,GAAGlF,aAAa,CAAC,IAAD,EAAO8D,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAP,EAAyC9B,SAAzC,EAAoD,IAApD,CAA9B;AACA1C,QAAAA,0BAA0B,CAACiF,UAAD,EAAa,IAAb,CAA1B;AACH;;AACD,UAAI,CAAC,KAAKpC,kBAAV,EAA8B;AAC1B,YAAI,CAACjF,YAAY,CAAC,IAAD,CAAb,IAAwBA,YAAY,CAAC,IAAD,CAAZ,IAAsB,KAAKyQ,QAAL,CAAc44B,oBAAd,CAAmChpB,OAAnC,CAA2Cpa,YAAY,CAACvB,EAAxD,IAA8D,CAAC,CAAjH,EAAqH;AACjH,cAAI,KAAKwF,cAAL,GAAsBlO,aAAa,CAACo6C,uBAAxC,EAAiE;AAC7D,iBAAKhqB,mBAAL,CAAyBnmB,YAAzB,EAAuC,IAAvC;AACH,WAFD,MAGK;AACD,iBAAKmmB,mBAAL,CAAyBnmB,YAAzB;AACH;AACJ;;AACD,YAAI,CAACgP,QAAD,IAAaxY,eAAjB,EAAkC;AAC9B,cAAI,KAAK6Y,iBAAL,IAA0B,KAAKpL,cAA/B,IAAkD,KAAKyC,WAAL,GAAmB/Q,kBAAkB,CAAC+c,WAAxF,IAAwG1S,YAAY,CAACvB,EAAb,KAAoB,QAAhI,EAA0I;AACtI,gBAAI,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAAJ,EAAuD;AACnD,mBAAKrL,iBAAL,CAAuB+gC,mBAAvB,CAA2C,IAA3C,EAAiD,IAAjD;AACH;AACJ;;AACD,eAAKnqC,oBAAL,CAA0BjG,YAA1B;;AACA,cAAIA,YAAY,CAACvB,EAAb,KAAoB,QAApB,IAAgC,EAAE,KAAKwF,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAApC,EAAuF;AACnF,gBAAItF,OAAO,GAAG,KAAK1H,aAAL,CAAmBkY,WAAnB,CAA+B5lB,YAAY,CAACwG,OAAb,CAAqBqf,WAApD,CAAd;;AACA,iBAAK,IAAIwqB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGj7B,OAAO,CAAC3lB,MAAhC,EAAwC4gD,GAAG,EAA3C,EAA+C;AAC3C,kBAAIx2B,MAAM,GAAGzE,OAAO,CAACi7B,GAAD,CAApB;;AACA,kBAAIx2B,MAAM,YAAYnlB,SAAtB,EAAiC;AAC7B,qBAAKsR,uBAAL,CAA6BoP,OAAO,CAACi7B,GAAD,CAApC,EAA2C,EAA3C,EAA+C;AAC3CnsB,kBAAAA,QAAQ,EAAErK,MAAM,CAACqK,QAD0B;AAE3CC,kBAAAA,QAAQ,EAAEtK,MAAM,CAACsK,QAF0B;AAG3C3b,kBAAAA,YAAY,EAAEqR,MAAM,CAACrR,YAHsB;AAI3CE,kBAAAA,YAAY,EAAEmR,MAAM,CAACnR,YAJsB;AAK3Cod,kBAAAA,WAAW,EAAEjM,MAAM,CAACiM,WALuB;AAM3ClF,kBAAAA,WAAW,EAAE/G,MAAM,CAAC+G;AANuB,iBAA/C;AAQH;AACJ;AACJ;AACJ;AACJ;;AACD,UAAI5gB,YAAY,CAAC+kB,MAAb,KAAwB,KAAxB,IAAiC,KAAK9gB,cAA1C,EAA0D;AACtDjE,QAAAA,YAAY,CAAC+kB,MAAb,GAAsB,QAAtB;AACH;AACJ;;AACD,QAAI,CAACxf,cAAL,EAAqB;AACjB,UAAI9H,OAAO,GAAGuC,YAAd;AACA,UAAI8C,IAAI,GAAG;AACPrF,QAAAA,OAAO,EAAEA,OADF;AACW4H,QAAAA,KAAK,EAAE,KAAKpB,cADvB;AAEPJ,QAAAA,QAAQ,EAAE6B,SAFH;AAEc9B,QAAAA,QAAQ,EAAEzD;AAFxB,OAAX;;AAIA,UAAInN,QAAQ,MAAM,KAAKuS,cAAvB,EAAuC;AACnCzC,QAAAA,IAAI,CAACrF,OAAL,GAAe;AAAE0C,UAAAA,IAAI,EAAEpM,iBAAiB,CAAC0J,OAAD;AAAzB,SAAf;AACAqF,QAAAA,IAAI,CAACe,QAAL,GAAgB;AAAE1D,UAAAA,IAAI,EAAEpM,iBAAiB,CAAC2R,SAAD;AAAzB,SAAhB;AACA5C,QAAAA,IAAI,CAACc,QAAL,GAAgB;AAAEzD,UAAAA,IAAI,EAAEpM,iBAAiB,CAACoM,IAAD;AAAzB,SAAhB;AACH;;AACD,WAAKmF,YAAL,CAAkBxP,YAAY,CAACyP,cAA/B,EAA+CzC,IAA/C;AACH;AACJ,GAvWD;;AAwWAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkB6/C,WAAlB,GAAgC,UAAU7uC,YAAV,EAAwB47B,IAAxB,EAA8B;AAC1D,QAAI57B,YAAY,IAAIA,YAAY,CAACoI,KAAb,CAAmB3Y,MAAnB,GAA4B,CAAhD,EAAmD;AAC/C,WAAK,IAAI6T,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY5B,YAAY,CAACoI,KAAzB,CAAtB,EAAuD9E,EAAE,GAAGC,EAAE,CAAC9T,MAA/D,EAAuE6T,EAAE,EAAzE,EAA6E;AACzE,YAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACA,YAAI2B,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACA,YAAI6/C,UAAU,GAAGlvC,YAAY,CAACoI,KAAb,CAAmBnD,KAAnB,CAAjB;AACA,YAAIqrC,WAAW,GAAG,KAAK1lB,UAAL,CAAgB5qB,YAAY,CAACwG,OAA7B,EAAsC0oC,UAAU,CAACzwC,EAAjD,CAAlB;AACA6xC,QAAAA,WAAW,GAAGh8C,eAAe,CAACg8C,WAAD,EAAc1U,IAAd,EAAoBsT,UAApB,CAA7B;AACAoB,QAAAA,WAAW,CAAClU,YAAZ,GAA2B,OAA3B;AACAkU,QAAAA,WAAW,CAACtqB,OAAZ,CAAoB,IAAI9wB,IAAJ,CAASo7C,WAAW,CAAClsC,KAArB,EAA4BksC,WAAW,CAAChsC,MAAxC,CAApB;AACAgsC,QAAAA,WAAW,CAACrqB,OAAZ,CAAoBqqB,WAAW,CAACpqB,WAAhC;AACH;AACJ;AACJ,GAbD;;AAcA5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBy/C,gBAAlB,GAAqC,UAAUhxC,OAAV,EAAmBi+B,KAAnB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AACxE,QAAIn+B,OAAO,CAAC8yC,WAAR,EAAJ,EAA2B;AACvB,WAAK,IAAIjtC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9F,OAAO,CAACkD,QAA9B,EAAwC2C,EAAE,GAAGC,EAAE,CAAC9T,MAAhD,EAAwD6T,EAAE,EAA1D,EAA8D;AAC1D,YAAIpD,KAAK,GAAGqD,EAAE,CAACD,EAAD,CAAd;;AACA,YAAIs4B,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,MAAtC,EAA8C;AAC1C17B,UAAAA,KAAK,CAACswC,UAAN,CAAiBp3B,CAAjB,GAAqBlZ,KAAK,CAACswC,UAAN,CAAiBp3B,CAAjB,GAAqBsiB,KAA1C;AACH;;AACD,YAAIE,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,MAApC,EAA4C;AACxC17B,UAAAA,KAAK,CAACswC,UAAN,CAAiB7+C,CAAjB,GAAqBuO,KAAK,CAACswC,UAAN,CAAiB7+C,CAAjB,GAAqBgqC,KAA1C;AACH;;AACD,YAAIz7B,KAAK,YAAY3I,MAAjB,IAA2B2I,KAAK,YAAYtM,SAAhD,EAA2D;AACvD,eAAK66C,gBAAL,CAAsBvuC,KAAtB,EAA6Bw7B,KAA7B,EAAoCC,KAApC,EAA2CC,IAA3C;AACH;AACJ;AACJ;AACJ,GAfD;;AAgBAt+B,EAAAA,OAAO,CAACtO,SAAR,CAAkBggD,iBAAlB,GAAsC,UAAU9pC,WAAV,EAAuBQ,SAAvB,EAAkC1F,YAAlC,EAAgDgJ,OAAhD,EAAyD;AAC3F,QAAIynC,WAAW,GAAGvrC,WAAW,CAACd,KAAZ,KAAsBvF,SAAtB,IAAmCqG,WAAW,CAACZ,MAAZ,KAAuBzF,SAA5E;;AACA,QAAI4xC,WAAJ,EAAiB;AACb,UAAIC,cAAc,GAAG1wC,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCA,QAAjC,CAA0C,CAA1C,CAArB;AACA+vC,MAAAA,cAAc,CAACtsC,KAAf,GAAuBc,WAAW,CAACd,KAAnC;AACAssC,MAAAA,cAAc,CAACpsC,MAAf,GAAwBY,WAAW,CAACZ,MAApC;AACA,UAAIqsC,cAAc,GAAG3wC,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,EAAiCA,QAAjC,CAA0C,CAA1C,CAArB;AACAgwC,MAAAA,cAAc,CAACvsC,KAAf,GAAuBc,WAAW,CAACd,KAAZ,GAAoB,GAA3C;AACAusC,MAAAA,cAAc,CAACrsC,MAAf,GAAwBY,WAAW,CAACZ,MAAZ,GAAqB,GAA7C;AACH;AACJ,GAVD;;AAWAhH,EAAAA,OAAO,CAACtO,SAAR,CAAkBurB,yBAAlB,GAA8C,UAAUhZ,SAAV,EAAqB;AAC/D,QAAI,KAAKtC,uBAAT,EAAkC;AAC9B,UAAIgG,KAAK,GAAG,KAAK9F,uBAAL,CAA6Bib,OAA7B,CAAqC7Y,SAArC,CAAZ;;AACA,UAAI0D,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,aAAK9F,uBAAL,CAA6B7M,IAA7B,CAAkCiP,SAAlC;AACH;AACJ,KALD,MAMK;AACD,UAAI4Y,IAAI,GAAG;AACP2L,QAAAA,WAAW,EAAEvkB,SAAS,CAACukB,WADhB;AAC6BlF,QAAAA,WAAW,EAAErf,SAAS,CAACqf,WADpD;AACiEsD,QAAAA,QAAQ,EAAE3iB,SAAS,CAAC2iB,QADrF;AAEPC,QAAAA,QAAQ,EAAE5iB,SAAS,CAAC4iB,QAFb;AAEuB3b,QAAAA,YAAY,EAAEjH,SAAS,CAACiH,YAF/C;AAE6DE,QAAAA,YAAY,EAAEnH,SAAS,CAACmH;AAFrF,OAAX;AAIA,WAAK1C,uBAAL,CAA6BzE,SAA7B,EAAwC,EAAxC,EAA4C4Y,IAA5C,EAAkDtb,SAAlD,EAA6D,IAA7D;AACH;AACJ,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBiX,oBAAlB,GAAyC,UAAUjG,YAAV,EAAwB;AAC7D,QAAIA,YAAY,CAAC2C,OAAb,CAAqBlT,MAArB,GAA8B,CAAlC,EAAqC;AACjC,WAAK,IAAI4Y,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrI,YAAY,CAAC2C,OAAb,CAAqBlT,MAAzC,EAAiD4Y,CAAC,EAAlD,EAAsD;AAClD,aAAKkS,yBAAL,CAA+B,KAAKhY,SAAL,CAAevC,YAAY,CAAC2C,OAAb,CAAqB0F,CAArB,CAAf,CAA/B;AACH;AACJ;;AACD,QAAIrI,YAAY,CAAC0C,QAAb,CAAsBjT,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,WAAK,IAAIs5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/oB,YAAY,CAAC0C,QAAb,CAAsBjT,MAA1C,EAAkDs5B,CAAC,EAAnD,EAAuD;AACnD,aAAKxO,yBAAL,CAA+B,KAAKhY,SAAL,CAAevC,YAAY,CAAC0C,QAAb,CAAsBqmB,CAAtB,CAAf,CAA/B;AACH;AACJ;;AACD,QAAI/oB,YAAY,CAACtB,QAAb,IAAyB,KAAK6D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CAA7B,EAAoE;AAChE,WAAKuH,oBAAL,CAA0B,KAAK1D,SAAL,CAAevC,YAAY,CAACtB,QAA5B,CAA1B;AACH;AACJ,GAdD;AAeA;;;AACApB,EAAAA,OAAO,CAACtO,SAAR,CAAkB4hD,4BAAlB,GAAiD,UAAU5wC,YAAV,EAAwB2D,OAAxB,EAAiCD,OAAjC,EAA0C2W,cAA1C,EAA0D;AACvG,QAAI3W,OAAO,CAAC1C,IAAR,KAAiBnC,SAAjB,IAA8B6E,OAAO,CAAC1C,IAAR,KAAiB2C,OAAO,CAAC3C,IAA3D,EAAiE;AAC7D,UAAIhB,YAAY,CAAC6I,QAAb,CAAsBpZ,MAAtB,GAA+B,CAA/B,IAAoCiU,OAAO,CAACmF,QAAR,KAAqBhK,SAA7D,EAAwE;AACpEmB,QAAAA,YAAY,CAAC6I,QAAb,GAAwB,EAAxB;AACH;AACJ;;AACD,QAAKnF,OAAO,CAAC3C,KAAR,KAAkBlC,SAAnB,IAAiCmB,YAAY,CAACe,KAAb,KAAuBlC,SAAxD,IACAmB,YAAY,CAACe,KADb,IACsBf,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,MADlD,IAC4D,KAAKsV,UADrE,EACiF;AAC7E,WAAKA,UAAL,CAAgBu6B,mBAAhB,CAAoC7wC,YAApC,EAAkD2D,OAAlD,EAA2DD,OAA3D,EAAoE,IAApE;AACH;;AACD,QAAI1D,YAAY,CAAC0G,WAAb,KAA6B7H,SAAjC,EAA4C;AACxC,WAAKynC,sBAAL,CAA4B,KAAKhgC,aAAL,CAAmBlF,UAA/C,EAA2D,KAAKkF,aAAhE;AACA,aAAO+T,cAAc,GAAG,IAAxB;AACH;;AACD,WAAOA,cAAP;AACH,GAfD;AAgBA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/c,EAAAA,OAAO,CAACtO,SAAR,CAAkBgX,uBAAlB,GAA4C,UAAUhG,YAAV,EAAwB2D,OAAxB,EAAiCD,OAAjC,EAA0CotC,eAA1C,EAA2DvrC,cAA3D,EAA2E;AACnH,QAAI,KAAKtH,qBAAT,EAAgC;AAC5B,UAAIkC,IAAI,GAAGhF,WAAW,CAAC6E,YAAD,CAAtB;AACA,WAAKiP,WAAL,CAAiB9O,IAAjB,EAAuB,KAAvB;AACH;;AACD,QAAImuC,cAAc,GAAGtuC,YAAY,CAACwG,OAAb,CAAqB4U,MAA1C;AACA,QAAIf,cAAc,GAAG,KAArB;AACA,QAAIuU,MAAM,GAAG,EAAb;AACAvU,IAAAA,cAAc,GAAG,KAAKu2B,4BAAL,CAAkC5wC,YAAlC,EAAgD2D,OAAhD,EAAyDD,OAAzD,EAAkE2W,cAAlE,CAAjB;AACA,QAAIuf,MAAJ;AACA,QAAIF,OAAJ;AACA,QAAI1d,MAAJ;AACA,QAAI5sB,MAAJ;;AACA,QAAIsU,OAAO,CAACohB,OAAR,KAAoBjmB,SAAxB,EAAmC;AAC/B,WAAKqmB,uBAAL,CAA6BllB,YAAY,CAACwG,OAA1C,EAAmDxG,YAAnD,EAAiEA,YAAY,CAAC8kB,OAA9E;AACH;;AACD,QAAIphB,OAAO,CAACoiB,WAAR,KAAwBjnB,SAAxB,IAAqC6E,OAAO,CAACkd,WAAR,KAAwB/hB,SAA7D,IACG6E,OAAO,CAACwgB,QAAR,KAAqBrlB,SADxB,IACqC6E,OAAO,CAACygB,QAAR,KAAqBtlB,SAD1D,IACuE6E,OAAO,CAACqtC,aAAR,KAA0BlyC,SADjG,IAEA6E,OAAO,CAAC8E,YAAR,KAAyB3J,SAFzB,IAEsC6E,OAAO,CAACgF,YAAR,KAAyB7J,SAF/D,IAE4E6E,OAAO,CAACstC,aAAR,KAA0BnyC,SAFtG,IAGA6E,OAAO,CAAC1C,IAAR,KAAiBnC,SAHjB,IAG8B6E,OAAO,CAACmF,QAAR,KAAqBhK,SAHnD,IAGgE6E,OAAO,CAACk4B,IAAR,KAAiB/8B,SAHrF,EAGgG;AAC5F,UAAK6E,OAAO,CAACwgB,QAAR,KAAqBrlB,SAArB,IAAkC6E,OAAO,CAACwgB,QAAR,KAAqBvgB,OAAO,CAACugB,QAAhE,IAA6ExgB,OAAO,CAAC8E,YAAzF,EAAuG;AACnG,YAAIytB,UAAU,GAAG,KAAK1zB,SAAL,CAAevC,YAAY,CAACkkB,QAA5B,CAAjB;AACAwV,QAAAA,OAAO,GAAG,KAAKC,qBAAL,CAA2B1D,UAA3B,EAAuC,KAAvC,CAAV;;AACA,YAAI,CAACA,UAAD,IAAgBp8B,aAAa,CAACo8B,UAAD,CAAb,IAA8Bj2B,YAAY,CAACwI,YAAb,KAA8B,EAA9B,IAAoCtO,iBAAiB,CAACw/B,OAAD,CAAvG,EAAoH;AAChH15B,UAAAA,YAAY,CAAC65B,aAAb,GAA6B5D,UAAU,GAAG,KAAK6D,iBAAL,CAAuB7D,UAAvB,EAAmCj2B,YAAnC,EAAiD,IAAjD,CAAH,GAA4DnB,SAAnG;;AACA,cAAImB,YAAY,CAACwI,YAAb,IAA6B9E,OAAO,CAAC8E,YAAR,KAAyB3J,SAA1D,EAAqE;AACjEmB,YAAAA,YAAY,CAAC2I,iBAAb,GAAiCstB,UAAU,GAAG,KAAKrL,UAAL,CAAgBqL,UAAU,CAACzvB,OAA3B,EAAoCxG,YAAY,CAACwI,YAAjD,CAAH,GAAoE3J,SAA/G;AACH;;AACD,eAAKwoB,eAAL,CAAqB,KAAK9kB,SAAL,CAAeoB,OAAO,CAACugB,QAAvB,KAAoC+R,UAAzD,EAAqEtyB,OAAO,CAAC6E,YAAR,IAAwBxI,YAAY,CAACwI,YAA1G,EAAwHxI,YAAY,CAACvB,EAArI,EAAyI,KAAzI;AACH;;AACD,YAAIiF,OAAO,CAACwgB,QAAR,KAAqBrlB,SAArB,IAAkC8E,OAAO,CAACugB,QAAR,KAAqBrlB,SAAvD,IAAoE8E,OAAO,CAACugB,QAAR,KAAqB,EAA7F,EAAiG;AAC7F,cAAI+sB,SAAS,GAAG,KAAK1uC,SAAL,CAAeoB,OAAO,CAACugB,QAAvB,CAAhB;;AACA,cAAI+sB,SAAS,KAAKpyC,SAAd,IAA2BoyC,SAAS,CAACvuC,QAArC,IAAiDuuC,SAAS,CAACvuC,QAAV,CAAmB0X,OAAnB,CAA2Bpa,YAAY,CAACvB,EAAxC,MAAgD,CAAC,CAAtG,EAAyG;AACrGlI,YAAAA,UAAU,CAAC06C,SAAS,CAACvuC,QAAX,EAAqB1C,YAAY,CAACvB,EAAlC,CAAV;AACH;AACJ;;AACD,aAAK0mB,WAAL,CAAiBnlB,YAAjB;AACH;;AACD,UAAI0D,OAAO,CAACygB,QAAR,KAAqBtlB,SAArB,IAAkC6E,OAAO,CAACygB,QAAR,KAAqBxgB,OAAO,CAACwgB,QAAnE,EAA6E;AACzE,YAAI+R,UAAU,GAAG,KAAK3zB,SAAL,CAAemB,OAAO,CAACygB,QAAvB,CAAjB;AACAyV,QAAAA,MAAM,GAAG,KAAKD,qBAAL,CAA2BzD,UAA3B,EAAuC,IAAvC,CAAT;;AACA,YAAI,CAACA,UAAD,IAAgBt8B,YAAY,CAACs8B,UAAD,CAAZ,IAA6Bl2B,YAAY,CAAC0I,YAAb,KAA8B,EAA9B,IAAoCzO,gBAAgB,CAAC2/B,MAAD,CAArG,EAAiH;AAC7G55B,UAAAA,YAAY,CAACg6B,aAAb,GAA6B9D,UAAU,GAAG,KAAK4D,iBAAL,CAAuB5D,UAAvB,EAAmCl2B,YAAnC,EAAiD,KAAjD,CAAH,GAA6DnB,SAApG;;AACA,cAAImB,YAAY,CAAC0I,YAAb,IAA6BhF,OAAO,CAACgF,YAAR,KAAyB7J,SAA1D,EAAqE;AACjEmB,YAAAA,YAAY,CAAC4I,iBAAb,GAAiCstB,UAAU,GAAG,KAAKtL,UAAL,CAAgBsL,UAAU,CAAC1vB,OAA3B,EAAoCxG,YAAY,CAAC0I,YAAjD,CAAH,GAAoE7J,SAA/G;AACH;;AACD,eAAKwoB,eAAL,CAAqB,KAAK9kB,SAAL,CAAeoB,OAAO,CAACwgB,QAAvB,KAAoC+R,UAAzD,EAAqEvyB,OAAO,CAAC+E,YAAR,IAAwB1I,YAAY,CAAC0I,YAA1G,EAAwH1I,YAAY,CAACvB,EAArI,EAAyI,IAAzI;AACH;;AACD,YAAIkF,OAAO,KAAK9E,SAAZ,IAAyB8E,OAAO,CAACwgB,QAAR,KAAqBtlB,SAA9C,IAA2D8E,OAAO,CAACwgB,QAAR,KAAqB,EAApF,EAAwF;AACpF,cAAI+sB,SAAS,GAAG,KAAK3uC,SAAL,CAAeoB,OAAO,CAACwgB,QAAvB,CAAhB;;AACA,cAAI+sB,SAAS,KAAKryC,SAAd,IAA2BqyC,SAAS,CAACvuC,OAArC,IAAgDuuC,SAAS,CAACvuC,OAAV,CAAkByX,OAAlB,CAA0Bpa,YAAY,CAACvB,EAAvC,MAA+C,CAAC,CAApG,EAAuG;AACnGlI,YAAAA,UAAU,CAAC26C,SAAS,CAACvuC,OAAX,EAAoB3C,YAAY,CAACvB,EAAjC,CAAV;AACH;AACJ;;AACD,aAAK0mB,WAAL,CAAiBnlB,YAAjB;AACH;;AACD,UAAI0D,OAAO,CAAC8E,YAAR,KAAyB3J,SAAzB,IAAsC6E,OAAO,CAAC8E,YAAR,KAAyB7E,OAAO,CAAC6E,YAA3E,EAAyF;AACrF,YAAIxI,YAAY,CAACkkB,QAAb,IAAyB,KAAK3hB,SAAL,CAAevC,YAAY,CAACkkB,QAA5B,CAA7B,EAAoE;AAChElI,UAAAA,MAAM,GAAG,KAAKzZ,SAAL,CAAevC,YAAY,CAACkkB,QAA5B,EAAsC1d,OAA/C;AACH;;AACD,YAAIyvB,UAAU,GAAG,KAAK1zB,SAAL,CAAevC,YAAY,CAACkkB,QAA5B,CAAjB;;AACA,YAAI,CAAC+R,UAAD,IAAgBp8B,aAAa,CAACo8B,UAAD,CAAb,IAA8Bj2B,YAAY,CAACwI,YAAb,KAA8B,EAA9B,IAAoCtO,iBAAiB,CAACw/B,OAAD,CAAvG,EAAoH;AAChH15B,UAAAA,YAAY,CAAC2I,iBAAb,GAAiCqT,MAAM,GAAG,KAAK4O,UAAL,CAAgB5O,MAAhB,EAAwBtY,OAAO,CAAC8E,YAAhC,CAAH,GAAmD3J,SAA1F;AACH,SAFD,MAGK,IAAImB,YAAY,CAACwI,YAAb,KAA8B,EAA9B,IAAoC,CAAC3O,aAAa,CAACo8B,UAAD,CAAtD,EAAoE;AACrEj2B,UAAAA,YAAY,CAAC2I,iBAAb,GAAiC9J,SAAjC;AACH;AACJ;;AACD,UAAI6E,OAAO,CAACgF,YAAR,KAAyB7J,SAAzB,IAAsC6E,OAAO,CAACgF,YAAR,KAAyB/E,OAAO,CAAC+E,YAA3E,EAAyF;AACrF,YAAIwtB,UAAU,GAAG,KAAK3zB,SAAL,CAAevC,YAAY,CAACmkB,QAA5B,CAAjB;;AACA,YAAInkB,YAAY,CAACmkB,QAAb,IAAyB,KAAK5hB,SAAL,CAAevC,YAAY,CAACmkB,QAA5B,CAA7B,EAAoE;AAChE/0B,UAAAA,MAAM,GAAG,KAAKmT,SAAL,CAAevC,YAAY,CAACmkB,QAA5B,EAAsC3d,OAA/C;AACH;;AACD,YAAI,CAAC0vB,UAAD,IAAgBt8B,YAAY,CAACs8B,UAAD,CAAZ,IAA6Bl2B,YAAY,CAAC0I,YAAb,KAA8B,EAA9B,IAAoCzO,gBAAgB,CAAC2/B,MAAD,CAArG,EAAiH;AAC7G55B,UAAAA,YAAY,CAAC4I,iBAAb,GAAiCxZ,MAAM,GAAG,KAAKw7B,UAAL,CAAgBx7B,MAAhB,EAAwBsU,OAAO,CAACgF,YAAhC,CAAH,GAAmD7J,SAA1F;AACH,SAFD,MAGK,IAAImB,YAAY,CAAC0I,YAAb,KAA8B,EAA9B,IAAoC,CAAC9O,YAAY,CAACs8B,UAAD,CAArD,EAAmE;AACpEl2B,UAAAA,YAAY,CAAC4I,iBAAb,GAAiC/J,SAAjC;AACH;AACJ;;AACD,UAAI6E,OAAO,CAACk4B,IAAR,KAAiB/8B,SAArB,EAAgC;AAC5BmB,QAAAA,YAAY,CAAC47B,IAAb,GAAoBl4B,OAAO,CAACk4B,IAA5B;AACAvnC,QAAAA,aAAa,CAAC2L,YAAD,CAAb;AACH;;AACD,UAAIA,YAAY,CAACgB,IAAb,KAAsB,YAAtB,IAAsC,KAAKqO,iBAA3C,IAAgE,KAAKpL,cAArE,IACC,KAAKyC,WAAL,GAAmB/Q,kBAAkB,CAAC+c,WADvC,IACuD,EAAE,KAAKzO,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,CAD3D,EAC8G;AAC1G,aAAKrL,iBAAL,CAAuB+gC,mBAAvB,CAA2C,IAA3C,EAAiD,IAAjD;AACA,aAAK/gC,iBAAL,CAAuB8hC,wBAAvB,CAAgD,IAAhD,EAAsDnxC,YAAtD,EAAoE,KAApE;AACH;;AACD4uB,MAAAA,MAAM,GAAG,KAAKC,SAAL,CAAe7uB,YAAf,CAAT;AACH,KA1FkH,CA0FjH;;;AACF,QAAI0D,OAAO,CAAC9C,KAAR,KAAkB/B,SAAtB,EAAiC;AAC7BvI,MAAAA,WAAW,CAACoN,OAAO,CAAC9C,KAAT,EAAgBZ,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B,CAA9B,CAAhB,CAAX;AACH;;AACD,QAAIiuB,MAAM,CAACn/B,MAAP,GAAgB,CAAhB,IAAqBiU,OAAO,CAACmC,eAAR,KAA4BhH,SAAjD,IAA+D6E,OAAO,CAACoC,eAAR,KAA4BjH,SAA5B,IAC3D5D,uBAAuB,CAACzM,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAACoC,eAApB,CAAD,CAD3B,IACuEpC,OAAO,CAAC0tC,YAAR,KAAyBvyC,SADpG,EAC+G;AAC3GrI,MAAAA,eAAe,CAACwJ,YAAD,EAAe4uB,MAAM,CAACn/B,MAAP,GAAgB,CAAhB,GAAoBm/B,MAApB,GAA6B5uB,YAAY,CAACssB,kBAAzD,EAA6E,KAAKroB,cAAlF,CAAf;;AACA,UAAIP,OAAO,CAAC1C,IAAR,KAAiBnC,SAArB,EAAgC;AAC5Bwb,QAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,UAAIuU,MAAM,CAACn/B,MAAP,GAAgB,CAApB,EAAuB;AACnBuQ,QAAAA,YAAY,CAACwG,OAAb,CAAqBwf,OAArB,CAA6B,IAAI9wB,IAAJ,CAAS8K,YAAY,CAACwG,OAAb,CAAqBpC,KAA9B,EAAqCpE,YAAY,CAACwG,OAAb,CAAqBlC,MAA1D,CAA7B;AACAtE,QAAAA,YAAY,CAACwG,OAAb,CAAqByf,OAArB,CAA6BjmB,YAAY,CAACwG,OAAb,CAAqB0f,WAAlD,EAFmB,CAGnB;;AACA,aAAKuG,yBAAL,CAA+BzsB,YAA/B;AACA,aAAKisB,+BAAL,CAAqCjsB,YAArC;AACA,aAAKgsC,YAAL,CAAkBhsC,YAAlB,EAAgC2D,OAAhC,EAAyCD,OAAzC;AACH,OAZ0G,CAYzG;;AACL;;AACD,QAAI,CAACA,OAAO,CAACoiB,WAAR,IAAuBpiB,OAAO,CAACkd,WAA/B,IAA8Cld,OAAO,CAACmF,QAAvD,KACG,KAAK5E,cAAL,KAAwBlO,aAAa,CAACmO,MAD7C,EACqD;AACjDmW,MAAAA,cAAc,GAAG,IAAjB;AACH;;AACD,QAAIra,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,MAA5B,IAAsChB,YAAY,CAACe,KAAb,CAAmByZ,QAAnB,KAAgC,SAA1E,EAAqF;AACjF,WAAK/M,cAAL,CAAoBgN,uBAApB,CAA4Cza,YAA5C;AACH,KAnHkH,CAoHnH;;;AACA,QAAI,CAAC8wC,eAAL,EAAsB;AAClB,WAAK5qC,cAAL;AACH;;AACD,SAAKmrC,iBAAL,CAAuB3tC,OAAvB,EAAgC1D,YAAhC;AACA,SAAKsxC,qBAAL,CAA2B5tC,OAA3B,EAAoC1D,YAApC;AACAA,IAAAA,YAAY,CAACwG,OAAb,CAAqBwf,OAArB,CAA6B,IAAI9wB,IAAJ,CAAS8K,YAAY,CAACwG,OAAb,CAAqBpC,KAA9B,EAAqCpE,YAAY,CAACwG,OAAb,CAAqBlC,MAA1D,CAA7B;AACAtE,IAAAA,YAAY,CAACwG,OAAb,CAAqByf,OAArB,CAA6BjmB,YAAY,CAACwG,OAAb,CAAqB0f,WAAlD;;AACA,QAAIooB,cAAc,CAACyB,MAAf,CAAsBzB,cAAtB,EAAsCtuC,YAAY,CAACwG,OAAb,CAAqB4U,MAA3D,MAAuE,KAA3E,EAAkF;AAC9E,WAAK2T,UAAL,CAAgB/uB,YAAhB;AACA,WAAKkwC,eAAL,CAAqBlwC,YAArB;AACH;;AACD,QAAIqa,cAAc,KAAK,IAAnB,IAA2B,KAAKs1B,iBAAL,CAAuB3vC,YAAvB,CAA3B,KAAoE,EAAE,KAAKiE,cAAL,GAAsBlO,aAAa,CAAC2kB,UAAtC,KAChE,KAAKzW,cAAL,GAAsBlO,aAAa,CAACyc,QADxC,CAAJ,EACwD;AACpD,WAAK6H,cAAL;AACH;;AACD,QAAI,CAAC,KAAKpb,uBAAV,EAAmC;AAC/B,UAAI,CAAClF,YAAY,CAAC,IAAD,CAAb,IAAwBA,YAAY,CAAC,IAAD,CAAZ,IAAsB,KAAKyQ,QAAL,CAAc44B,oBAAd,CAAmChpB,OAAnC,CAA2Cpa,YAAY,CAACvB,EAAxD,IAA8D,CAAC,CAAjH,EAAqH;AACjH,YAAI,KAAKwF,cAAL,GAAsBlO,aAAa,CAACo6C,uBAAxC,EAAiE;AAC7D,eAAKhqB,mBAAL,CAAyBnmB,YAAzB,EAAuC,IAAvC;AACH,SAFD,MAGK;AACD,eAAKmmB,mBAAL,CAAyBnmB,YAAzB;AACH;AACJ;AACJ;;AACD,QAAI,KAAKiE,cAAL,IAAuBjE,YAAY,CAAC+kB,MAAb,KAAwB,KAAnD,EAA0D;AACtD/kB,MAAAA,YAAY,CAAC+kB,MAAb,GAAsB,QAAtB;AACH;;AACD,SAAKwsB,qBAAL,CAA2BhsC,cAA3B,EAA2CvF,YAA3C,EAAyD2D,OAAzD,EAAkED,OAAlE;AACH,GAlJD;AAmJA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpG,EAAAA,OAAO,CAACtO,SAAR,CAAkBq4B,eAAlB,GAAoC,UAAUlnB,IAAV,EAAgBu/B,MAAhB,EAAwB8R,IAAxB,EAA8B/R,SAA9B,EAAyC;AACzE,QAAIt/B,IAAJ,EAAU;AACN,WAAK,IAAIrQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACiI,KAAL,CAAW3Y,MAA/B,EAAuCK,CAAC,EAAxC,EAA4C;AACxC,YAAI63B,IAAI,GAAGxnB,IAAI,CAACiI,KAAL,CAAWtY,CAAX,CAAX;;AACA,YAAI63B,IAAI,CAAClpB,EAAL,KAAYihC,MAAhB,EAAwB;AACpB,cAAI+R,QAAQ,GAAIhS,SAAD,GAAc9X,IAAI,CAAChlB,OAAnB,GAA6BglB,IAAI,CAACjlB,QAAjD;AACAnM,UAAAA,UAAU,CAACk7C,QAAD,EAAWD,IAAX,CAAV;AACH;AACJ;AACJ;AACJ,GAVD;;AAWAl0C,EAAAA,OAAO,CAACtO,SAAR,CAAkB0iD,qBAAlB,GAA0C,UAAUj0C,OAAV,EAAmBkG,OAAnB,EAA4BD,OAA5B,EAAqCZ,IAArC,EAA2C;AACjFA,IAAAA,IAAI,CAACrF,OAAL,GAAe;AAAE8D,MAAAA,SAAS,EAAExN,iBAAiB,CAAC0J,OAAD;AAA9B,KAAf;AACAqF,IAAAA,IAAI,CAACe,QAAL,GAAgB;AAAEtC,MAAAA,SAAS,EAAExN,iBAAiB,CAAC4P,OAAD;AAA9B,KAAhB;AACAb,IAAAA,IAAI,CAACc,QAAL,GAAgB;AAAErC,MAAAA,SAAS,EAAExN,iBAAiB,CAAC2P,OAAD;AAA9B,KAAhB;AACA,WAAOZ,IAAP;AACH,GALD;;AAMAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkBuiD,qBAAlB,GAA0C,UAAUhsC,cAAV,EAA0BvF,YAA1B,EAAwC2D,OAAxC,EAAiDD,OAAjD,EAA0D;AAChG,QAAI,CAAC6B,cAAL,EAAqB;AACjB,UAAI9H,OAAO,GAAGuC,YAAd;AACA,UAAI8C,IAAI,GAAG;AACPrF,QAAAA,OAAO,EAAE1J,iBAAiB,CAAC0J,OAAD,CADnB;AAC8B4H,QAAAA,KAAK,EAAE,KAAKpB,cAD1C;AAEPJ,QAAAA,QAAQ,EAAE9P,iBAAiB,CAAC4P,OAAD,CAFpB;AAE+BC,QAAAA,QAAQ,EAAE7P,iBAAiB,CAAC2P,OAAD;AAF1D,OAAX;;AAIA,UAAI1Q,QAAQ,EAAZ,EAAgB;AACZ8P,QAAAA,IAAI,GAAG,KAAK4uC,qBAAL,CAA2Bj0C,OAA3B,EAAoCkG,OAApC,EAA6CD,OAA7C,EAAsDZ,IAAtD,CAAP;AACH;;AACD,WAAKwC,YAAL,CAAkBxP,YAAY,CAACyP,cAA/B,EAA+CzC,IAA/C;AACH;AACJ,GAZD;;AAaAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkB2qC,qBAAlB,GAA0C,UAAUx5B,IAAV,EAAgBwxC,WAAhB,EAA6B;AACnE,QAAIhqB,IAAI,GAAG,EAAX;;AACA,QAAIxnB,IAAJ,EAAU;AACNwnB,MAAAA,IAAI,GAAG5sB,oBAAoB,CAACoF,IAAD,EAAOwxC,WAAP,CAA3B;AACH;;AACD,WAAOhqB,IAAP;AACH,GAND;;AAOArqB,EAAAA,OAAO,CAACtO,SAAR,CAAkB6/B,SAAlB,GAA8B,UAAU7uB,YAAV,EAAwB4uB,MAAxB,EAAgC;AAC1D;AACA,QAAIxB,sBAAsB,GAAG,KAAKA,sBAAL,GAA8B,IAA9B,GAAqC,KAAlE;AACA,QAAIwkB,GAAG,GAAG5xC,YAAY,CAACk6B,kBAAb,CAAgCl6B,YAAY,CAACgB,IAA7C,EAAmD4tB,MAAnD,EAA2D,KAAK7nB,MAAL,CAAY/F,IAAZ,KAAqB,yBAArB,IAAkD,KAAK+F,MAAL,CAAY/F,IAAZ,KAAqB,kBAAvE,GACjE,KAAK+F,MAAL,CAAYmZ,WADqD,GACvCrhB,SADpB,EAC+BuuB,sBAD/B,CAAV;AAEA,WAAOwkB,GAAP;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIt0C,EAAAA,OAAO,CAACtO,SAAR,CAAkB6iD,kBAAlB,GAAuC,UAAUp0C,OAAV,EAAmBqnB,OAAnB,EAA4BugB,OAA5B,EAAqC;AACxE,QAAIvgB,OAAO,KAAKjmB,SAAhB,EAA2B;AACvB,WAAKqmB,uBAAL,CAA6BznB,OAA7B,EAAsC,KAAK8E,SAAL,CAAe9E,OAAO,CAACgB,EAAvB,CAAtC,EAAkEqmB,OAAlE;AACH,KAFD,MAGK;AACDrnB,MAAAA,OAAO,CAACmD,KAAR,CAAcykC,OAAd,GAAwBA,OAAxB;;AACA,WAAK,IAAIv1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2N,OAAO,CAACkD,QAAR,CAAiBlR,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,YAAI2N,OAAO,CAACkD,QAAR,CAAiB7Q,CAAjB,aAA+B8D,SAAnC,EAA8C;AAC1C,eAAKi+C,kBAAL,CAAwBp0C,OAAO,CAACkD,QAAR,CAAiB7Q,CAAjB,CAAxB,EAA6C+O,SAA7C,EAAwDwmC,OAAxD;AACH;;AACD5nC,QAAAA,OAAO,CAACkD,QAAR,CAAiB7Q,CAAjB,EAAoB8Q,KAApB,CAA0BykC,OAA1B,GAAoCA,OAApC;AACH;AACJ;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/nC,EAAAA,OAAO,CAACtO,SAAR,CAAkB2gD,iBAAlB,GAAsC,UAAU3vC,YAAV,EAAwB;AAC1D,QAAIumC,aAAa,GAAG,KAAKjgC,aAAzB;AACA,QAAIrO,UAAU,GAAG,KAAjB;AACA,QAAI65C,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,GAAGA,QAAQ,CAACp2B,MAAT,CAAgB6qB,aAAa,CAAC7lC,KAA9B,EAAqC6lC,aAAa,CAACnlC,UAAnD,CAAX;;AACA,QAAI0wC,QAAQ,CAACriD,MAAT,GAAkB,CAAtB,EAAyB;AACrB,UAAIuQ,YAAY,CAACvB,EAAb,KAAoBqzC,QAAQ,CAACA,QAAQ,CAACriD,MAAT,GAAkB,CAAnB,CAAR,CAA8BgP,EAAtD,EAA0D;AACtDxG,QAAAA,UAAU,GAAG,IAAb;AACH;AACJ;;AACD,WAAOA,UAAP;AACH,GAXD;AAYA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIqF,EAAAA,OAAO,CAACtO,SAAR,CAAkBwwC,gCAAlB,GAAqD,UAAU/hC,OAAV,EAAmBqnB,OAAnB,EAA4B;AAC7E,QAAIrnB,OAAO,YAAY7J,SAAvB,EAAkC;AAC9B,WAAK,IAAI9D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2N,OAAO,CAACkD,QAAR,CAAiBlR,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,aAAK0vC,gCAAL,CAAsC/hC,OAAO,CAACkD,QAAR,CAAiB7Q,CAAjB,CAAtC,EAA2Dg1B,OAA3D;AACH;AACJ;;AACDrnB,IAAAA,OAAO,CAACqnB,OAAR,GAAkBA,OAAlB;AACH,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIxnB,EAAAA,OAAO,CAACtO,SAAR,CAAkBk2B,uBAAlB,GAA4C,UAAUznB,OAAV,EAAmBmF,GAAnB,EAAwBkiB,OAAxB,EAAiC;AACzE,QAAIA,OAAO,KAAKjmB,SAAhB,EAA2B;AACvBpB,MAAAA,OAAO,CAACqnB,OAAR,GAAkBA,OAAlB;;AACA,UAAIliB,GAAG,YAAY/O,IAAnB,EAAyB;AACrB;AACA,YAAI,CAAC+O,GAAG,CAACjC,QAAT,EAAmB;AACflD,UAAAA,OAAO,CAACkD,QAAR,CAAiB,CAAjB,EAAoBmkB,OAApB,GAA8BA,OAA9B;AACA,eAAK0a,gCAAL,CAAsC/hC,OAAO,CAACkD,QAAR,CAAiB,CAAjB,CAAtC,EAA2DmkB,OAA3D;;AACA,cAAIliB,GAAG,CAAC7B,KAAJ,CAAUC,IAAV,KAAmB,MAAnB,IAA6B,KAAKsV,UAAtC,EAAkD;AAC9C,iBAAKA,UAAL,CAAgB4O,uBAAhB,CAAwCtiB,GAAxC,EAA6CkiB,OAA7C,EAAsD,IAAtD;AACH;AACJ,SAND,MAOK;AACD,eAAK,IAAIxhB,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGX,GAAG,CAACjC,QAA1B,EAAoC2C,EAAE,GAAGC,EAAE,CAAC9T,MAA5C,EAAoD6T,EAAE,EAAtD,EAA0D;AACtD,gBAAIpD,KAAK,GAAGqD,EAAE,CAACD,EAAD,CAAd;AACA,iBAAK4hB,uBAAL,CAA6B,KAAK3iB,SAAL,CAAerC,KAAf,EAAsBsG,OAAnD,EAA4D,KAAKjE,SAAL,CAAerC,KAAf,CAA5D,EAAmF4kB,OAAnF;AACH;AACJ,SAdoB,CAerB;;;AACA,YAAIliB,GAAG,CAACwF,KAAR,EAAe;AACX,eAAK,IAAI3D,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG9B,GAAG,CAACwF,KAA1B,EAAiC3D,EAAE,GAAGC,EAAE,CAACjV,MAAzC,EAAiDgV,EAAE,EAAnD,EAAuD;AACnD,gBAAIkjB,IAAI,GAAGjjB,EAAE,CAACD,EAAD,CAAb;;AACA,gBAAIkjB,IAAI,CAAC6E,UAAL,GAAkB32B,cAAc,CAACk8C,OAArC,EAA8C;AAC1C,kBAAIvrC,OAAO,GAAG,KAAKokB,UAAL,CAAgBntB,OAAhB,EAAyBkqB,IAAI,CAAClpB,EAA9B,CAAd;AACA+H,cAAAA,OAAO,CAACse,OAAR,GAAkBA,OAAlB;AACH;AACJ;AACJ;;AACD,YAAIliB,GAAG,CAACzB,WAAR,EAAqB;AACjB,eAAK,IAAI4D,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGpC,GAAG,CAACzB,WAA1B,EAAuC4D,EAAE,GAAGC,EAAE,CAACvV,MAA/C,EAAuDsV,EAAE,EAAzD,EAA6D;AACzD,gBAAIoM,UAAU,GAAGnM,EAAE,CAACD,EAAD,CAAnB;AACA,gBAAIyB,OAAO,GAAG,KAAKokB,UAAL,CAAgBntB,OAAhB,EAAyB0T,UAAU,CAAC1S,EAApC,CAAd;AACA+H,YAAAA,OAAO,CAACse,OAAR,GAAkBA,OAAlB;AACH;AACJ;AACJ,OAhCD,MAiCK;AACD;AACA,aAAK,IAAIh1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB2N,UAAAA,OAAO,CAACkD,QAAR,CAAiB7Q,CAAjB,EAAoBg1B,OAApB,GAA8BA,OAA9B;AACH;AACJ;;AACD,UAAIliB,GAAG,CAACzB,WAAR,EAAqB;AACjB;AACA,aAAK,IAAIwE,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGhD,GAAG,CAACzB,WAA1B,EAAuCwE,EAAE,GAAGC,EAAE,CAACnW,MAA/C,EAAuDkW,EAAE,EAAzD,EAA6D;AACzD,cAAIwL,UAAU,GAAGvL,EAAE,CAACD,EAAD,CAAnB;AACA,cAAIa,OAAO,GAAG,KAAKokB,UAAL,CAAgBntB,OAAhB,EAAyB0T,UAAU,CAAC1S,EAApC,CAAd;AACA+H,UAAAA,OAAO,CAACse,OAAR,GAAkBA,OAAlB;AACH;AACJ;;AACD,UAAIliB,GAAG,CAACi4B,UAAJ,IAAkBj4B,GAAG,CAACk4B,YAA1B,EAAwC;AACpC,YAAIt0B,OAAO,GAAG,KAAKokB,UAAL,CAAgBntB,OAAhB,EAAyB,cAAzB,CAAd;;AACA,YAAI+I,OAAJ,EAAa;AACT,eAAK,IAAI1W,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0W,OAAO,CAAC7F,QAAR,CAAiBlR,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C0W,YAAAA,OAAO,CAAC7F,QAAR,CAAiB7Q,CAAjB,EAAoBg1B,OAApB,GAA8BA,OAA9B;AACH;;AACDte,UAAAA,OAAO,CAACse,OAAR,GAAkBA,OAAlB;AACH;;AACD,YAAIliB,GAAG,IAAIA,GAAG,CAACkiB,OAAX,IAAsBliB,GAAG,CAACF,QAA9B,EAAwC;AACpC,eAAK68B,oBAAL,CAA0B38B,GAA1B,EAAgCA,GAAG,CAACF,QAAJ,CAAajT,MAAb,KAAwB,CAAxB,GAA4B,KAA5B,GAAoC,IAApE;AACH;AACJ;;AACD,UAAIq1B,OAAO,KAAK,KAAhB,EAAuB;AACnB,aAAKpP,QAAL,CAAc,KAAKnT,SAAL,CAAe9E,OAAO,CAACgB,EAAvB,CAAd;AACH;;AACD,UAAKmE,GAAG,YAAY/O,IAAf,IAAuB,CAAC,KAAKmL,kBAA9B,IAAsD4D,GAAG,YAAYlO,SAAf,IAA4B,CAAC,KAAKuK,uBAA5F,EAAsH;AAClH;AACA,YAAI,KAAKgF,cAAT,EAAyB;AACrB,eAAKkiB,mBAAL,CAAyB,KAAK5jB,SAAL,CAAe9E,OAAO,CAACgB,EAAvB,CAAzB,EAAqDI,SAArD,EAAgE,IAAhE;AACH;AACJ;AACJ;AACJ,GAxED;;AAyEAvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBqiD,iBAAlB,GAAsC,UAAU3tC,OAAV,EAAmB1D,YAAnB,EAAiC;AACnE,QAAI0D,OAAO,CAACvC,WAAR,KAAwBtC,SAA5B,EAAuC;AACnC,WAAK,IAAIyE,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAACvC,WAApB,CAAtB,EAAwDmC,EAAE,GAAGC,EAAE,CAAC9T,MAAhE,EAAwE6T,EAAE,EAA1E,EAA8E;AAC1E,YAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACA,YAAI2B,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAlB;AACA,YAAI4/C,aAAa,GAAGvrC,OAAO,CAACvC,WAAR,CAAoB9R,GAApB,CAApB;AACA,YAAI+/C,gBAAgB,GAAGpvC,YAAY,CAACmB,WAAb,CAAyB8D,KAAzB,CAAvB;AACA,aAAKonB,gBAAL,CAAsB4iB,aAAtB,EAAqCG,gBAArC,EAAuDpvC,YAAY,CAACwG,OAApE,EAA6ExG,YAA7E;AACH;AACJ;AACJ,GAVD;;AAWA1C,EAAAA,OAAO,CAACtO,SAAR,CAAkBsiD,qBAAlB,GAA0C,UAAU5tC,OAAV,EAAmB1D,YAAnB,EAAiC;AACvE,QAAI0D,OAAO,CAACwoB,gBAAR,KAA6BrtB,SAAjC,EAA4C;AACxC,UAAIoG,KAAK,GAAG,KAAK,CAAjB;AACA,UAAIgqC,aAAa,GAAG,KAAK,CAAzB;AACA,UAAIG,gBAAgB,GAAG,KAAK,CAA5B;;AACA,WAAK,IAAI9rC,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG/U,MAAM,CAACoT,IAAP,CAAY8B,OAAO,CAACwoB,gBAApB,CAAtB,EAA6D5oB,EAAE,GAAGC,EAAE,CAAC9T,MAArE,EAA6E6T,EAAE,EAA/E,EAAmF;AAC/E,YAAIjU,GAAG,GAAGkU,EAAE,CAACD,EAAD,CAAZ;AACA2B,QAAAA,KAAK,GAAGjD,MAAM,CAAC3S,GAAD,CAAd;AACA4/C,QAAAA,aAAa,GAAGvrC,OAAO,CAACwoB,gBAAR,CAAyB78B,GAAzB,CAAhB;AACA+/C,QAAAA,gBAAgB,GAAGpvC,YAAY,CAACksB,gBAAb,CAA8BjnB,KAA9B,CAAnB;AACA,aAAK+sC,8BAAL,CAAoC/C,aAApC,EAAmDG,gBAAnD,EAAqEpvC,YAAY,CAACwG,OAAlF,EAA2FxG,YAA3F;AACH;AACJ;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI1C,EAAAA,OAAO,CAACtO,SAAR,CAAkBgjD,8BAAlB,GAAmD,UAAU/C,aAAV,EAAyBM,qBAAzB,EAAgD7uC,KAAhD,EAAuDV,YAAvD,EAAqEiyC,aAArE,EAAoF;AACnI,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAI/lB,sBAAsB,GAAG,KAAKvB,UAAL,CAAgBlqB,KAAhB,EAAuB6uC,qBAAqB,CAAC9wC,EAA7C,CAA7B;;AACA,QAAI0tB,sBAAsB,KAAKttB,SAA/B,EAA0C;AACtC,UAAIowC,aAAa,CAAC7qC,KAAd,KAAwBvF,SAA5B,EAAuC;AACnCstB,QAAAA,sBAAsB,CAAC/nB,KAAvB,GAA+B6qC,aAAa,CAAC7qC,KAA7C;AACA8tC,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIjD,aAAa,CAAC3qC,MAAd,KAAyBzF,SAA7B,EAAwC;AACpCstB,QAAAA,sBAAsB,CAAC7nB,MAAvB,GAAgC2qC,aAAa,CAAC3qC,MAA9C;AACA4tC,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAI3C,qBAAqB,YAAYnyC,wBAAjC,IACC6xC,aAAa,CAAC/T,MAAd,KAAyBr8B,SAD9B,EAC0C;AACtCmB,QAAAA,YAAY,CAACqsB,gBAAb,CAA8BkjB,qBAA9B,EAAqDvvC,YAAY,CAACssB,kBAAlE,EAAsFtsB,YAAY,CAACwG,OAAb,CAAqB4U,MAA3G,EAAmH+Q,sBAAnH;AACH;;AACD,UAAKojB,qBAAqB,YAAYnyC,wBAAlC,IAA+D6xC,aAAa,CAACkD,YAAjF,EAA+F;AAC3F,YAAIlD,aAAa,CAACkD,YAAd,CAA2B/4B,CAA3B,KAAiCva,SAAjC,IACAowC,aAAa,CAACkD,YAAd,CAA2BxgD,CAA3B,KAAiCkN,SADrC,EACgD;AAC5CqzC,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;;AACD,UAAIjD,aAAa,CAACpuC,IAAd,KAAuBhC,SAA3B,EAAsC;AAClCstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BC,IAA7B,GAAoCouC,aAAa,CAACpuC,IAAlD;AACH;;AACD,UAAIouC,aAAa,CAACmD,iBAAd,KAAoCvzC,SAAxC,EAAmD;AAC/CstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BE,WAA7B,GAA2CmuC,aAAa,CAACmD,iBAAzD;AACH;;AACD,UAAInD,aAAa,CAACoD,iBAAd,KAAoCxzC,SAAxC,EAAmD;AAC/CstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BukC,WAA7B,GAA2C8J,aAAa,CAACoD,iBAAzD;AACH;;AACD,UAAIpD,aAAa,CAACziB,UAAd,KAA6B3tB,SAAjC,EAA4C;AACxCstB,QAAAA,sBAAsB,CAACrH,OAAvB,GAAiCmqB,aAAa,CAACziB,UAA/C;AACH;;AACD,UAAIyiB,aAAa,CAACmC,YAAd,KAA+BvyC,SAAnC,EAA8C;AAC1CstB,QAAAA,sBAAsB,CAACilB,YAAvB,GAAsCnC,aAAa,CAACmC,YAApD;AACH;;AACD,WAAKkB,4BAAL,CAAkCrD,aAAlC,EAAiDiD,SAAjD,EAA4D/lB,sBAA5D,EAAoFnsB,YAApF,EAAkGuvC,qBAAlG,EAAyH7uC,KAAzH;;AACA,UAAIwxC,SAAS,KAAK,IAAlB,EAAwB;AACpB/lB,QAAAA,sBAAsB,CAACnG,OAAvB,CAA+B,IAAI9wB,IAAJ,CAASi3B,sBAAsB,CAAC/nB,KAAhC,EAAuC+nB,sBAAsB,CAAC7nB,MAA9D,CAA/B;AACA6nB,QAAAA,sBAAsB,CAAClG,OAAvB,CAA+BkG,sBAAsB,CAACjG,WAAtD;AACH;AACJ;AACJ,GA3CD;AA4CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBq9B,gBAAlB,GAAqC,UAAU4iB,aAAV,EAAyBG,gBAAzB,EAA2C1uC,KAA3C,EAAkDV,YAAlD,EAAgEiyC,aAAhE,EAA+E;AAChH,QAAIC,SAAS,GAAG,KAAhB,CADgH,CAEhH;;AACA,QAAIxlB,iBAAiB,GAAG,KAAK9B,UAAL,CAAgBlqB,KAAhB,EAAuB0uC,gBAAgB,CAAC3wC,EAAxC,CAAxB;;AACA,QAAIiuB,iBAAiB,KAAK7tB,SAA1B,EAAqC;AACjC,UAAIowC,aAAa,CAAC7qC,KAAd,KAAwBvF,SAAxB,IAAqCowC,aAAa,CAAC3qC,MAAd,KAAyBzF,SAAlE,EAA6E;AACzE6tB,QAAAA,iBAAiB,CAACtoB,KAAlB,GAA0B6qC,aAAa,CAAC7qC,KAAxC;AACAsoB,QAAAA,iBAAiB,CAACpoB,MAAlB,GAA2B2qC,aAAa,CAAC3qC,MAAzC;AACA4tC,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIjD,aAAa,CAACxzB,WAAd,KAA8B5c,SAAlC,EAA6C;AACzC6tB,QAAAA,iBAAiB,CAACjR,WAAlB,GAAgCwzB,aAAa,CAACxzB,WAA9C;AACH;;AACD,UAAIw2B,aAAa,IAAI,EAAEvlB,iBAAiB,YAAY7wB,kBAA/B,CAArB,EAAyE;AACrE6wB,QAAAA,iBAAiB,CAACkjB,kBAAlB;AACH;;AACD,UAAIR,gBAAgB,YAAY93C,cAA5B,IAA8C23C,aAAa,CAACsD,YAAd,KAA+B1zC,SAAjF,EAA4F;AACxF6tB,QAAAA,iBAAiB,CAACjR,WAAlB,GAAgC2zB,gBAAgB,CAAC3zB,WAAjD;AACH;;AACD,UAAI2zB,gBAAgB,YAAY/3C,eAA5B,IACA43C,aAAa,CAAC/T,MAAd,KAAyBr8B,SAD7B,EACwC;AACpC,YAAIq8B,MAAM,GAAG+T,aAAa,CAAC/T,MAA3B;AACAgX,QAAAA,SAAS,GAAG,IAAZ;AACA,YAAI32B,OAAO,GAAG2f,MAAM,CAAC9hB,CAAP,KAAava,SAAb,GAAyBq8B,MAAM,CAAC9hB,CAAhC,GACVg2B,gBAAgB,CAAClU,MAAjB,CAAwB9hB,CAD5B;AAEA,YAAIoC,OAAO,GAAG0f,MAAM,CAACvpC,CAAP,KAAakN,SAAb,GAAyBq8B,MAAM,CAACvpC,CAAhC,GACVy9C,gBAAgB,CAAClU,MAAjB,CAAwBvpC,CAD5B;AAEA+6B,QAAAA,iBAAiB,CAAC0O,4BAAlB,CAA+C7f,OAA/C,EAAwDC,OAAxD,EAAiE,UAAjE;AACAkR,QAAAA,iBAAiB,CAAC0P,YAAlB,GAAiC,OAAjC;AACH,OAVD,MAWK,IAAIgT,gBAAgB,YAAY93C,cAA5B,KACJ23C,aAAa,CAAC/T,MAAd,KAAyBr8B,SAAzB,IACGowC,aAAa,CAACsD,YAAd,KAA+B1zC,SAF9B,CAAJ,EAE8C;AAC/CmB,QAAAA,YAAY,CAACqsB,gBAAb,CAA8B+iB,gBAA9B,EAAgDpvC,YAAY,CAACssB,kBAA7D,EAAiFtsB,YAAY,CAACwG,OAAb,CAAqB4U,MAAtG,EAA8GsR,iBAA9G;AACH;;AACD,UAAK0iB,gBAAgB,YAAY93C,cAA7B,IAAgD23C,aAAa,CAACkD,YAAlE,EAAgF;AAC5E,YAAIlD,aAAa,CAACkD,YAAd,CAA2B/4B,CAA3B,KAAiCva,SAAjC,IACAowC,aAAa,CAACkD,YAAd,CAA2BxgD,CAA3B,KAAiCkN,SADrC,EACgD;AAC5CqzC,UAAAA,SAAS,GAAG,IAAZ;AACH;AACJ;;AACD,UAAIjD,aAAa,CAAClvB,MAAd,KAAyBlhB,SAA7B,EAAwC;AACpCqzC,QAAAA,SAAS,GAAG,IAAZ;;AACA,YAAIjD,aAAa,CAAClvB,MAAd,CAAqBmqB,MAArB,KAAgCrrC,SAApC,EAA+C;AAC3C6tB,UAAAA,iBAAiB,CAAC3M,MAAlB,CAAyBmqB,MAAzB,GAAkC+E,aAAa,CAAClvB,MAAd,CAAqBmqB,MAAvD;AACH;;AACD,YAAI+E,aAAa,CAAClvB,MAAd,CAAqBE,GAArB,KAA6BphB,SAAjC,EAA4C;AACxC6tB,UAAAA,iBAAiB,CAAC3M,MAAlB,CAAyBE,GAAzB,GAA+BgvB,aAAa,CAAClvB,MAAd,CAAqBE,GAApD;AACH;;AACD,YAAIgvB,aAAa,CAAClvB,MAAd,CAAqBC,IAArB,KAA8BnhB,SAAlC,EAA6C;AACzC6tB,UAAAA,iBAAiB,CAAC3M,MAAlB,CAAyBC,IAAzB,GAAgCivB,aAAa,CAAClvB,MAAd,CAAqBC,IAArD;AACH;;AACD,YAAIivB,aAAa,CAAClvB,MAAd,CAAqBkqB,KAArB,KAA+BprC,SAAnC,EAA8C;AAC1C6tB,UAAAA,iBAAiB,CAAC3M,MAAlB,CAAyBkqB,KAAzB,GAAiCgF,aAAa,CAAClvB,MAAd,CAAqBkqB,KAAtD;AACH;AACJ;;AACD,UAAIiI,SAAS,IAAID,aAAjB,EAAgC;AAC5BvlB,QAAAA,iBAAiB,CAACtoB,KAAlB,GAA2BgrC,gBAAgB,CAAChrC,KAAjB,IAA0BpE,YAAY,CAACoE,KAAlE;;AACA,YAAIgrC,gBAAgB,CAAC99B,QAArB,EAA+B;AAC3Bob,UAAAA,iBAAiB,CAACtoB,KAAlB,GAA2BsoB,iBAAiB,CAACtoB,KAAlB,IAA2BsoB,iBAAiB,CAACnD,UAAlB,CAA6BnlB,KAAnF;AACAsoB,UAAAA,iBAAiB,CAACpoB,MAAlB,GAA4B8qC,gBAAgB,CAAC9qC,MAAjB,IAA2BtE,YAAY,CAACsE,MAAxC,IACxBooB,iBAAiB,CAACnD,UAAlB,CAA6BjlB,MADjC;AAEH;AACJ;;AACD,UAAI2qC,aAAa,CAACjU,mBAAd,KAAsCn8B,SAA1C,EAAqD;AACjD6tB,QAAAA,iBAAiB,CAACsO,mBAAlB,GAAwCiU,aAAa,CAACjU,mBAAtD;AACAkX,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIjD,aAAa,CAAChU,iBAAd,KAAoCp8B,SAAxC,EAAmD;AAC/C6tB,QAAAA,iBAAiB,CAACuO,iBAAlB,GAAsCgU,aAAa,CAAChU,iBAApD;AACAiX,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIjD,aAAa,CAACziB,UAAd,KAA6B3tB,SAAjC,EAA4C;AACxC6tB,QAAAA,iBAAiB,CAAC5H,OAAlB,GAA6BpkB,KAAK,CAACokB,OAAN,IAAiBmqB,aAAa,CAACziB,UAAhC,GAA8C,IAA9C,GAAqD,KAAjF;AACH;;AACD,UAAIyiB,aAAa,CAACvoC,WAAd,KAA8B7H,SAAlC,EAA6C;AACzC,YAAIwb,cAAc,GAAG,KAArB;;AACA,YAAKqS,iBAAiB,CAAChmB,WAAlB,GAAgCpR,qBAAqB,CAACi3C,MAAvD,IACC,EAAE0C,aAAa,CAACvoC,WAAd,GAA4BpR,qBAAqB,CAACi3C,MAApD,CADD,IAEAt0C,UAAU,CAAC,IAAD,EAAO+H,YAAP,EAAqB,KAArB,EAA4B0sB,iBAA5B,CAFd,EAE8D,CAC1D;AACH;;AACDA,QAAAA,iBAAiB,CAAChmB,WAAlB,GAAgCuoC,aAAa,CAACvoC,WAA9C;;AACA,YAAI2T,cAAJ,EAAoB;AAChB,eAAKxE,cAAL;AACH;AACJ;;AACD,UAAIo5B,aAAa,CAACruC,KAAd,KAAwB/B,SAA5B,EAAuC;AACnCvI,QAAAA,WAAW,CAAC24C,aAAa,CAACruC,KAAf,EAAsB8rB,iBAAtB,CAAX;AACH;;AACD,UAAIuiB,aAAa,CAACuD,SAAd,KAA4B3zC,SAAhC,EAA2C;AACvC7H,QAAAA,eAAe,CAACi4C,aAAa,CAACuD,SAAf,EAA0B9lB,iBAA1B,EAA6C0iB,gBAA7C,CAAf;AACH;;AACD,WAAKqD,uBAAL,CAA6BxD,aAA7B,EAA4CiD,SAA5C,EAAuDxlB,iBAAvD,EAA0E1sB,YAA1E,EAAwFovC,gBAAxF,EAA0G1uC,KAA1G;;AACA,UAAIwxC,SAAS,KAAK,IAAlB,EAAwB;AACpBxlB,QAAAA,iBAAiB,CAAC1G,OAAlB,CAA0B,IAAI9wB,IAAJ,CAASw3B,iBAAiB,CAACtoB,KAA3B,EAAkCsoB,iBAAiB,CAACpoB,MAApD,CAA1B;AACAooB,QAAAA,iBAAiB,CAACzG,OAAlB,CAA0ByG,iBAAiB,CAACxG,WAA5C;AACH;;AACD,UAAI,EAAEwG,iBAAiB,YAAY7wB,kBAA/B,CAAJ,EAAwD;AACpD6wB,QAAAA,iBAAiB,CAACkjB,kBAAlB;AACH,OAhGgC,CAiGjC;;AACH;AACJ,GAvGD;;AAwGAtyC,EAAAA,OAAO,CAACtO,SAAR,CAAkBsjD,4BAAlB,GAAiD,UAAUrD,aAAV,EAAyBiD,SAAzB,EAAoC/lB,sBAApC,EAA4DnsB,YAA5D,EAA0E0yC,yBAA1E,EAAqGhyC,KAArG,EAA4G;AACzJ,QAAIuuC,aAAa,KAAKpwC,SAAtB,EAAiC;AAC7B,WAAK8zC,qCAAL,CAA2CxmB,sBAA3C,EAAmEnsB,YAAnE,EAAiF0yC,yBAAjF,EAA4GhyC,KAA5G;AACH;AACJ,GAJD;;AAKApD,EAAAA,OAAO,CAACtO,SAAR,CAAkB2jD,qCAAlB,GAA0D,UAAUxmB,sBAAV,EAAkCnsB,YAAlC,EAAgDovC,gBAAhD,EAAkE1uC,KAAlE,EAAyE;AAC/H,SAAK,IAAI4C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuP,SAAS,GAAGtP,EAAE,CAACD,EAAD,CAAlB;AACAhL,MAAAA,aAAa,CAAC6zB,sBAAsB,CAAC1tB,EAAvB,GAA4B,eAA7B,EAA8CoU,SAA9C,CAAb;AACAva,MAAAA,aAAa,CAAC6zB,sBAAsB,CAAC1tB,EAAvB,GAA4B,eAA7B,EAA8CoU,SAA9C,CAAb;AACH;;AACD,QAAI7S,YAAY,YAAYtL,SAA5B,EAAuC;AACnC,UAAI47B,MAAM,GAAGtwB,YAAY,CAACwG,OAA1B;AACA,UAAI2qB,OAAO,GAAGb,MAAM,CAAC3vB,QAAP,CAAgB,CAAhB,CAAd;AACA,UAAIya,MAAM,GAAG,IAAIjkB,IAAJ,CAASg6B,OAAO,CAAC5V,OAAR,GAAkB4V,OAAO,CAAC/sB,KAAR,GAAgB,CAA3C,EAA8C+sB,OAAO,CAAC3V,OAAR,GAAkB2V,OAAO,CAAC7sB,MAAR,GAAiB,CAAjF,EAAoF6sB,OAAO,CAAC/sB,KAA5F,EAAmG+sB,OAAO,CAAC7sB,MAA3G,CAAb;AACA6nB,MAAAA,sBAAsB,GAClBnsB,YAAY,CAAC4yC,kBAAb,CAAgC5yC,YAAY,CAACksB,gBAAb,CAA8BlsB,YAAY,CAACksB,gBAAb,CAA8Bz8B,MAA9B,GAAuC,CAArE,CAAhC,EAAyGuQ,YAAY,CAACssB,kBAAtH,EAA0IlR,MAA1I,CADJ;AAEH;;AACD,SAAK,IAAItrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4Q,KAAK,CAACC,QAAN,CAAelR,MAAnC,EAA2CK,CAAC,EAA5C,EAAgD;AAC5C,UAAIq8B,sBAAsB,CAAC1tB,EAAvB,KAA8BiC,KAAK,CAACC,QAAN,CAAe7Q,CAAf,EAAkB2O,EAApD,EAAwD;AACpDiC,QAAAA,KAAK,CAACC,QAAN,CAAeqjB,MAAf,CAAsBl0B,CAAtB,EAAyB,CAAzB,EAA4Bq8B,sBAA5B;AACH;AACJ;AACJ,GAlBD;;AAmBA7uB,EAAAA,OAAO,CAACtO,SAAR,CAAkByjD,uBAAlB,GAA4C,UAAUxD,aAAV,EAAyBiD,SAAzB,EAAoCxlB,iBAApC,EAAuD1sB,YAAvD,EAAqEovC,gBAArE,EAAuF1uC,KAAvF,EAA8F;AACtI,QAAIuuC,aAAa,CAAChtC,OAAd,KAA0BpD,SAA9B,EAAyC;AACrC,UAAI6tB,iBAAJ,EAAuB;AACnBwlB,QAAAA,SAAS,GAAG,IAAZ;;AACA,YAAIlyC,YAAY,CAACe,KAAb,CAAmBC,IAAnB,KAA4B,aAA5B,KACEhO,QAAQ,MAAMgN,YAAY,CAACe,KAAb,CAAmBk0B,gBAAnB,KAAwC,gBAAvD,IACI,CAACjiC,QAAQ,EAAT,IAAegN,YAAY,CAACe,KAAb,CAAmBA,KAAnB,KAA6B,gBAFjD,CAAJ,EAEyE;AACrE2rB,UAAAA,iBAAiB,CAACzqB,OAAlB,GAA4B,OAAOgtC,aAAa,CAAChtC,OAArB,GAA+B,IAA3D;AACH,SAJD,MAKK;AACDyqB,UAAAA,iBAAiB,CAACzqB,OAAlB,GAA4BgtC,aAAa,CAAChtC,OAA1C;AACH;AACJ;;AACD,UAAIyqB,iBAAiB,YAAY7wB,kBAAjC,EAAqD;AACjD,aAAKg3C,uBAAL,CAA6BnmB,iBAA7B,EAAgD1sB,YAAhD,EAA8DovC,gBAA9D,EAAgF1uC,KAAhF;AACH;AACJ;;AACD,QAAIuuC,aAAa,CAAC39B,QAAd,KAA2BzS,SAA/B,EAA0C;AACtC6tB,MAAAA,iBAAiB,CAACzqB,OAAlB,GAA4BgtC,aAAa,CAAC39B,QAA1C;AACA,WAAKuhC,uBAAL,CAA6BnmB,iBAA7B,EAAgD1sB,YAAhD,EAA8DovC,gBAA9D,EAAgF1uC,KAAhF;AACH;AACJ,GArBD;;AAsBApD,EAAAA,OAAO,CAACtO,SAAR,CAAkB6jD,uBAAlB,GAA4C,UAAUnmB,iBAAV,EAA6B1sB,YAA7B,EAA2CovC,gBAA3C,EAA6D1uC,KAA7D,EAAoE;AAC5G,SAAK,IAAI4C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuP,SAAS,GAAGtP,EAAE,CAACD,EAAD,CAAlB;AACAhL,MAAAA,aAAa,CAACo0B,iBAAiB,CAACjuB,EAAlB,GAAuB,eAAxB,EAAyCoU,SAAzC,CAAb;AACAva,MAAAA,aAAa,CAACo0B,iBAAiB,CAACjuB,EAAlB,GAAuB,eAAxB,EAAyCoU,SAAzC,CAAb;AACH;;AACD,QAAI7S,YAAY,YAAYnM,IAA5B,EAAkC;AAC9B64B,MAAAA,iBAAiB,GACb1sB,YAAY,CAACkxB,qBAAb,CAAmCke,gBAAnC,EAAqD,KAAK3xC,OAAL,CAAagB,EAAlE,CADJ;AAEH,KAHD,MAIK,IAAIuB,YAAY,YAAYtL,SAA5B,EAAuC;AACxC,UAAI47B,MAAM,GAAGtwB,YAAY,CAACwG,OAA1B;AACA,UAAI2qB,OAAO,GAAGb,MAAM,CAAC3vB,QAAP,CAAgB,CAAhB,CAAd;AACA,UAAIya,MAAM,GAAG,IAAIjkB,IAAJ,CAASg6B,OAAO,CAAC5V,OAAR,GAAkB4V,OAAO,CAAC/sB,KAAR,GAAgB,CAA3C,EAA8C+sB,OAAO,CAAC3V,OAAR,GAAkB2V,OAAO,CAAC7sB,MAAR,GAAiB,CAAjF,EAAoF6sB,OAAO,CAAC/sB,KAA5F,EAAmG+sB,OAAO,CAAC7sB,MAA3G,CAAb;AACAooB,MAAAA,iBAAiB,GACb1sB,YAAY,CAACoxB,oBAAb,CAAkCpxB,YAAY,CAACmB,WAAb,CAAyBnB,YAAY,CAACmB,WAAb,CAAyB1R,MAAzB,GAAkC,CAA3D,CAAlC,EAAiGuQ,YAAY,CAACssB,kBAA9G,EAAkIlR,MAAlI,EAA0I,KAAKiV,cAA/I,EAA+J,KAAK5yB,OAAL,CAAagB,EAA5K,CADJ;AAEH;;AACD,SAAK,IAAI3O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4Q,KAAK,CAACC,QAAN,CAAelR,MAAnC,EAA2CK,CAAC,EAA5C,EAAgD;AAC5C,UAAI48B,iBAAiB,CAACjuB,EAAlB,KAAyBiC,KAAK,CAACC,QAAN,CAAe7Q,CAAf,EAAkB2O,EAA/C,EAAmD;AAC/CiC,QAAAA,KAAK,CAACC,QAAN,CAAeqjB,MAAf,CAAsBl0B,CAAtB,EAAyB,CAAzB,EAA4B48B,iBAA5B;AACH;AACJ;AACJ,GAtBD;AAuBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpvB,EAAAA,OAAO,CAACtO,SAAR,CAAkBwgD,yBAAlB,GAA8C,UAAUP,aAAV,EAAyBM,qBAAzB,EAAgD7uC,KAAhD,EAAuDV,YAAvD,EAAqE;AAC/G;AACA,QAAIkyC,SAAS,GAAG,KAAhB;AACA,QAAI/lB,sBAAsB,GAAG,KAAKvB,UAAL,CAAgBlqB,KAAhB,EAAuB6uC,qBAAqB,CAAC9wC,EAA7C,CAA7B;;AACA,QAAI0tB,sBAAsB,KAAKttB,SAA/B,EAA0C;AACtC,UAAIowC,aAAa,CAAC7qC,KAAd,KAAwBvF,SAA5B,EAAuC;AACnCstB,QAAAA,sBAAsB,CAAC5C,UAAvB,CAAkCnlB,KAAlC,GAA0C6qC,aAAa,CAAC7qC,KAAxD;AACA8tC,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIjD,aAAa,CAAC3qC,MAAd,KAAyBzF,SAA7B,EAAwC;AACpCstB,QAAAA,sBAAsB,CAAC7nB,MAAvB,GAAgC2qC,aAAa,CAAC3qC,MAA9C;AACA4tC,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAI3C,qBAAqB,YAAYlyC,mBAAjC,IACA4xC,aAAa,CAAC/T,MAAd,KAAyBr8B,SAD7B,EACwC;AACpC,YAAIq8B,MAAM,GAAG+T,aAAa,CAAC/T,MAA3B;AACAgX,QAAAA,SAAS,GAAG,IAAZ;AACA,YAAI32B,OAAO,GAAG2f,MAAM,CAAC9hB,CAAP,KAAava,SAAb,GAAyBq8B,MAAM,CAAC9hB,CAAhC,GACVm2B,qBAAqB,CAACrU,MAAtB,CAA6B9hB,CADjC;AAEA,YAAIoC,OAAO,GAAG0f,MAAM,CAACvpC,CAAP,KAAakN,SAAb,GAAyBq8B,MAAM,CAACvpC,CAAhC,GACV49C,qBAAqB,CAACrU,MAAtB,CAA6BvpC,CADjC;AAEAw6B,QAAAA,sBAAsB,CAACiP,4BAAvB,CAAoD7f,OAApD,EAA6DC,OAA7D,EAAsE,UAAtE;AACA2Q,QAAAA,sBAAsB,CAACiQ,YAAvB,GAAsC,OAAtC;AACH;;AACD,UAAI6S,aAAa,CAAClvB,MAAd,KAAyBlhB,SAA7B,EAAwC;AACpCqzC,QAAAA,SAAS,GAAG,IAAZ;;AACA,YAAIjD,aAAa,CAAClvB,MAAd,CAAqBmqB,MAArB,KAAgCrrC,SAApC,EAA+C;AAC3CstB,UAAAA,sBAAsB,CAACpM,MAAvB,CAA8BmqB,MAA9B,GAAuC+E,aAAa,CAAClvB,MAAd,CAAqBmqB,MAA5D;AACH;;AACD,YAAI+E,aAAa,CAAClvB,MAAd,CAAqBE,GAArB,KAA6BphB,SAAjC,EAA4C;AACxCstB,UAAAA,sBAAsB,CAACpM,MAAvB,CAA8BE,GAA9B,GAAoCgvB,aAAa,CAAClvB,MAAd,CAAqBE,GAAzD;AACH;;AACD,YAAIgvB,aAAa,CAAClvB,MAAd,CAAqBC,IAArB,KAA8BnhB,SAAlC,EAA6C;AACzCstB,UAAAA,sBAAsB,CAACpM,MAAvB,CAA8BC,IAA9B,GAAqCivB,aAAa,CAAClvB,MAAd,CAAqBC,IAA1D;AACH;;AACD,YAAIivB,aAAa,CAAClvB,MAAd,CAAqBkqB,KAArB,KAA+BprC,SAAnC,EAA8C;AAC1CstB,UAAAA,sBAAsB,CAACpM,MAAvB,CAA8BkqB,KAA9B,GAAsCgF,aAAa,CAAClvB,MAAd,CAAqBkqB,KAA3D;AACH;AACJ;;AACD,UAAIgF,aAAa,CAACziB,UAAd,KAA6B3tB,SAAjC,EAA4C;AACxCstB,QAAAA,sBAAsB,CAACrH,OAAvB,GAAiCmqB,aAAa,CAACziB,UAA/C;AACH;;AACD,UAAIyiB,aAAa,CAACpuC,IAAd,KAAuBhC,SAA3B,EAAsC;AAClCstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BC,IAA7B,GAAoCouC,aAAa,CAACpuC,IAAlD;AACH;;AACD,UAAIouC,aAAa,CAACmD,iBAAd,KAAoCvzC,SAAxC,EAAmD;AAC/CstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BE,WAA7B,GAA2CmuC,aAAa,CAACmD,iBAAzD;AACH;;AACD,UAAInD,aAAa,CAACoD,iBAAd,KAAoCxzC,SAAxC,EAAmD;AAC/CstB,QAAAA,sBAAsB,CAACvrB,KAAvB,CAA6BukC,WAA7B,GAA2C8J,aAAa,CAACoD,iBAAzD;AACH;;AACD,UAAIpD,aAAa,CAACmC,YAAd,KAA+BvyC,SAAnC,EAA8C;AAC1CstB,QAAAA,sBAAsB,CAACilB,YAAvB,GAAsCnC,aAAa,CAACmC,YAApD;AACH;;AACD,WAAK0B,4BAAL,CAAkC3mB,sBAAlC,EAA0DnsB,YAA1D,EAAwEuvC,qBAAxE,EAA+F7uC,KAA/F;;AACA,UAAIwxC,SAAS,KAAK,IAAlB,EAAwB;AACpB/lB,QAAAA,sBAAsB,CAACnG,OAAvB,CAA+B,IAAI9wB,IAAJ,CAASi3B,sBAAsB,CAAC/nB,KAAhC,EAAuC+nB,sBAAsB,CAAC7nB,MAA9D,CAA/B;AACA6nB,QAAAA,sBAAsB,CAAClG,OAAvB,CAA+BkG,sBAAsB,CAACjG,WAAtD;AACH;AACJ;AACJ,GA5DD;;AA6DA5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8jD,4BAAlB,GAAiD,UAAU3mB,sBAAV,EAAkCnsB,YAAlC,EAAgDovC,gBAAhD,EAAkE1uC,KAAlE,EAAyE;AACtH,SAAK,IAAI4C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,UAAIuP,SAAS,GAAGtP,EAAE,CAACD,EAAD,CAAlB;AACAhL,MAAAA,aAAa,CAAC6zB,sBAAsB,CAAC1tB,EAAvB,GAA4B,eAA7B,EAA8CoU,SAA9C,CAAb;AACAva,MAAAA,aAAa,CAAC6zB,sBAAsB,CAAC1tB,EAAvB,GAA4B,eAA7B,EAA8CoU,SAA9C,CAAb;AACH;;AACD,QAAI7S,YAAY,YAAYnM,IAA5B,EAAkC;AAC9Bs4B,MAAAA,sBAAsB,GAAGnsB,YAAY,CAACq9B,oBAAb,CAAkC+R,gBAAlC,CAAzB;AACH;;AACD,SAAK,IAAIt/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4Q,KAAK,CAACC,QAAN,CAAelR,MAAnC,EAA2CK,CAAC,EAA5C,EAAgD;AAC5C,UAAIq8B,sBAAsB,CAAC1tB,EAAvB,KAA8BiC,KAAK,CAACC,QAAN,CAAe7Q,CAAf,EAAkB2O,EAApD,EAAwD;AACpDiC,QAAAA,KAAK,CAACC,QAAN,CAAeqjB,MAAf,CAAsBl0B,CAAtB,EAAyB,CAAzB,EAA4Bq8B,sBAA5B;AACH;AACJ;AACJ,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI7uB,EAAAA,OAAO,CAACtO,SAAR,CAAkBmgD,UAAlB,GAA+B,UAAUF,aAAV,EAAyBC,UAAzB,EAAqCxuC,KAArC,EAA4C;AACvE,QAAIwxC,SAAS,GAAG,KAAhB;AACA,QAAI5B,WAAW,GAAG,KAAK1lB,UAAL,CAAgBlqB,KAAhB,EAAuBwuC,UAAU,CAACzwC,EAAlC,CAAlB;;AACA,QAAI6xC,WAAW,KAAKzxC,SAApB,EAA+B;AAC3B,UAAIowC,aAAa,CAAC/T,MAAd,KAAyBr8B,SAA7B,EAAwC;AACpCqzC,QAAAA,SAAS,GAAG,IAAZ;AACA,YAAI32B,OAAO,GAAG0zB,aAAa,CAAC/T,MAAd,CAAqB9hB,CAArB,KAA2Bva,SAA3B,GAAuCowC,aAAa,CAAC/T,MAAd,CAAqB9hB,CAA5D,GACV81B,UAAU,CAAChU,MAAX,CAAkB9hB,CADtB;AAEA,YAAIoC,OAAO,GAAGyzB,aAAa,CAAC/T,MAAd,CAAqBvpC,CAArB,KAA2BkN,SAA3B,GAAuCowC,aAAa,CAAC/T,MAAd,CAAqBvpC,CAA5D,GACVu9C,UAAU,CAAChU,MAAX,CAAkBvpC,CADtB;AAEA2+C,QAAAA,WAAW,CAAClV,4BAAZ,CAAyC7f,OAAzC,EAAkDC,OAAlD,EAA2D,UAA3D;AACA80B,QAAAA,WAAW,CAAClU,YAAZ,GAA2B,OAA3B;AACH;;AACD,UAAI6S,aAAa,CAAC7qC,KAAd,KAAwBvF,SAA5B,EAAuC;AACnCqzC,QAAAA,SAAS,GAAG,IAAZ;AACA5B,QAAAA,WAAW,CAAClsC,KAAZ,GAAoB6qC,aAAa,CAAC7qC,KAAlC;AACH;;AACD,UAAI6qC,aAAa,CAAC3qC,MAAd,KAAyBzF,SAA7B,EAAwC;AACpCqzC,QAAAA,SAAS,GAAG,IAAZ;AACA5B,QAAAA,WAAW,CAAChsC,MAAZ,GAAqB2qC,aAAa,CAAC3qC,MAAnC;AACH;;AACD,UAAI2qC,aAAa,CAACziB,UAAd,KAA6B3tB,SAAjC,EAA4C;AACxCyxC,QAAAA,WAAW,CAACxrB,OAAZ,GAAuBpkB,KAAK,CAACokB,OAAN,IAAiBjuB,oBAAoB,CAACq4C,UAAD,EAAar5C,cAAc,CAACk8C,OAA5B,CAAtC,GAA8E,IAA9E,GAAqF,KAA3G;AACH;;AACD,UAAI9C,aAAa,CAAClvB,MAAd,KAAyBlhB,SAA7B,EAAwC;AACpCqzC,QAAAA,SAAS,GAAG,IAAZ;;AACA,YAAIjD,aAAa,CAAClvB,MAAd,CAAqBmqB,MAArB,KAAgCrrC,SAApC,EAA+C;AAC3CyxC,UAAAA,WAAW,CAACvwB,MAAZ,CAAmBmqB,MAAnB,GAA4B+E,aAAa,CAAClvB,MAAd,CAAqBmqB,MAAjD;AACH;;AACD,YAAI+E,aAAa,CAAClvB,MAAd,CAAqBE,GAArB,KAA6BphB,SAAjC,EAA4C;AACxCyxC,UAAAA,WAAW,CAACvwB,MAAZ,CAAmBE,GAAnB,GAAyBgvB,aAAa,CAAClvB,MAAd,CAAqBE,GAA9C;AACH;;AACD,YAAIgvB,aAAa,CAAClvB,MAAd,CAAqBkqB,KAArB,KAA+BprC,SAAnC,EAA8C;AAC1CyxC,UAAAA,WAAW,CAACvwB,MAAZ,CAAmBkqB,KAAnB,GAA2BgF,aAAa,CAAClvB,MAAd,CAAqBkqB,KAAhD;AACH;;AACD,YAAIgF,aAAa,CAAClvB,MAAd,CAAqBC,IAArB,KAA8BnhB,SAAlC,EAA6C;AACzCyxC,UAAAA,WAAW,CAACvwB,MAAZ,CAAmBC,IAAnB,GAA0BivB,aAAa,CAAClvB,MAAd,CAAqBC,IAA/C;AACH;AACJ;;AACD,UAAIivB,aAAa,CAACjU,mBAAd,KAAsCn8B,SAA1C,EAAqD;AACjDqzC,QAAAA,SAAS,GAAG,IAAZ;AACA5B,QAAAA,WAAW,CAACtV,mBAAZ,GAAkCiU,aAAa,CAACjU,mBAAhD;AACH;;AACD,UAAIiU,aAAa,CAAChU,iBAAd,KAAoCp8B,SAAxC,EAAmD;AAC/CqzC,QAAAA,SAAS,GAAG,IAAZ;AACA5B,QAAAA,WAAW,CAACrV,iBAAZ,GAAgCgU,aAAa,CAAChU,iBAA9C;AACH;;AACD,UAAIgU,aAAa,CAACruC,KAAd,KAAwB/B,SAA5B,EAAuC;AACnC,YAAIowC,aAAa,CAACruC,KAAd,CAAoBC,IAApB,KAA6BhC,SAAjC,EAA4C;AACxCyxC,UAAAA,WAAW,CAAC1vC,KAAZ,CAAkBC,IAAlB,GAAyBouC,aAAa,CAACruC,KAAd,CAAoBC,IAA7C;AACH;;AACD,YAAIouC,aAAa,CAACruC,KAAd,CAAoBykC,OAApB,KAAgCxmC,SAApC,EAA+C;AAC3CyxC,UAAAA,WAAW,CAAC1vC,KAAZ,CAAkBykC,OAAlB,GAA4B4J,aAAa,CAACruC,KAAd,CAAoBykC,OAAhD;AACH;;AACD,YAAI4J,aAAa,CAACruC,KAAd,CAAoBE,WAApB,KAAoCjC,SAAxC,EAAmD;AAC/CyxC,UAAAA,WAAW,CAAC1vC,KAAZ,CAAkBE,WAAlB,GAAgCmuC,aAAa,CAACruC,KAAd,CAAoBE,WAApD;AACH;;AACD,YAAImuC,aAAa,CAACruC,KAAd,CAAoBukC,WAApB,KAAoCtmC,SAAxC,EAAmD;AAC/CyxC,UAAAA,WAAW,CAAC1vC,KAAZ,CAAkBukC,WAAlB,GAAgC8J,aAAa,CAACruC,KAAd,CAAoBukC,WAApD;AACH;;AACD,YAAI8J,aAAa,CAACruC,KAAd,CAAoBmyC,eAApB,KAAwCl0C,SAA5C,EAAuD;AACnDyxC,UAAAA,WAAW,CAAC1vC,KAAZ,CAAkBmyC,eAAlB,GAAoC9D,aAAa,CAACruC,KAAd,CAAoBmyC,eAAxD;AACH;AACJ;;AACD,UAAI9D,aAAa,CAACluC,KAAd,KAAwBlC,SAA5B,EAAuC;AACnC,YAAIyxC,WAAJ,EAAiB;AACb,cAAI0C,QAAQ,GAAG57C,YAAY,CAAC63C,aAAa,CAACluC,KAAf,CAA3B;AACAuvC,UAAAA,WAAW,CAACrtC,IAAZ,GAAmB+vC,QAAnB;AACA1C,UAAAA,WAAW,CAAC2C,cAAZ,GAA6B,IAA7B;AACH;AACJ;;AACD,UAAIhE,aAAa,CAACiE,QAAd,KAA2Br0C,SAA/B,EAA0C;AACtCyxC,QAAAA,WAAW,CAACrtC,IAAZ,GAAmBkwC,MAAM,CAAClE,aAAa,CAACiE,QAAf,CAAzB;AACAhB,QAAAA,SAAS,GAAG,IAAZ;AACH;;AACD,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACpB5B,QAAAA,WAAW,CAACtqB,OAAZ,CAAoB,IAAI9wB,IAAJ,CAASo7C,WAAW,CAAClsC,KAArB,EAA4BksC,WAAW,CAAChsC,MAAxC,CAApB;AACAgsC,QAAAA,WAAW,CAACrqB,OAAZ,CAAoBqqB,WAAW,CAACpqB,WAAhC;AACH,OA3E0B,CA4E3B;;AACH;AACJ,GAjFD;AAkFA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5oB,EAAAA,OAAO,CAACtO,SAAR,CAAkBw/B,UAAlB,GAA+B,UAAUxuB,YAAV,EAAwB;AACnD,QAAIozC,aAAa,GAAG,KAAKxoB,UAAL,CAAgB5qB,YAAY,CAACwG,OAA7B,EAAsC,cAAtC,CAApB;AACA,QAAIq1B,SAAS,GAAI,KAAK53B,cAAL,GAAsBlO,aAAa,CAACmO,MAArC,GAA+C,KAAKzG,OAAL,CAAagB,EAA5D,GAAiEI,SAAjF;;AACA,QAAIu0C,aAAJ,EAAmB;AACf,UAAI,KAAK5tC,IAAL,KAAc,KAAlB,EAAyB;AACrB,YAAIu1B,IAAI,GAAGtiC,iBAAiB,CAACuH,YAAY,CAACwG,OAAb,CAAqB/H,EAArB,GAA0B,eAA3B,EAA4Co9B,SAA5C,CAA5B;;AACA,YAAId,IAAJ,EAAU;AACN,cAAIsY,QAAQ,GAAG56C,iBAAiB,CAACsiC,IAAI,CAACt8B,EAAL,GAAU,OAAX,EAAoBo9B,SAApB,CAAhC;AACA,cAAIyX,SAAS,GAAG76C,iBAAiB,CAACsiC,IAAI,CAACt8B,EAAL,GAAU,QAAX,EAAqBo9B,SAArB,CAAjC;AACA,cAAI0X,aAAa,GAAG96C,iBAAiB,CAAC66C,SAAS,CAAC70C,EAAV,GAAe,iBAAhB,EAAmCo9B,SAAnC,CAArC;;AACA,cAAI0X,aAAJ,EAAmB;AACfA,YAAAA,aAAa,CAAClgC,UAAd,CAAyBC,WAAzB,CAAqCigC,aAArC;AACH;;AACDD,UAAAA,SAAS,CAACjgC,UAAV,CAAqBC,WAArB,CAAiCggC,SAAjC;AACAD,UAAAA,QAAQ,CAAChgC,UAAT,CAAoBC,WAApB,CAAgC+/B,QAAhC;AACAtY,UAAAA,IAAI,CAAC1nB,UAAL,CAAgBC,WAAhB,CAA4BynB,IAA5B;AACH;AACJ;;AACD,UAAI91B,KAAK,GAAGjF,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8ByZ,OAA9B,CAAsCg5B,aAAtC,CAAZ;AACApzC,MAAAA,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8BqjB,MAA9B,CAAqC/e,KAArC,EAA4C,CAA5C;AACH;;AACD,QAAI82B,aAAa,GAAG,KAAK8N,gBAAL,CAAsB7pC,YAAtB,CAApB;AACAA,IAAAA,YAAY,CAACo9B,SAAb,CAAuB,KAAK/M,cAA5B,EAA4C,KAAKtpB,MAAjD,EAAyDg1B,aAAzD,EAAwE,KAAKt+B,OAAL,CAAagB,EAArF;AACH,GAvBD;;AAwBAnB,EAAAA,OAAO,CAACtO,SAAR,CAAkB66C,gBAAlB,GAAqC,UAAU7pC,YAAV,EAAwB;AACzD,QAAIA,YAAY,CAACW,QAAjB,EAA2B;AACvB,WAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkQ,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8BlR,MAAlD,EAA0DK,CAAC,EAA3D,EAA+D;AAC3D,YAAIkQ,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B7Q,CAA9B,EAAiC2O,EAAjC,KAAwCuB,YAAY,CAACvB,EAAb,GAAkB,iBAA9D,EAAiF;AAC7E,iBAAOuB,YAAY,CAACwG,OAAb,CAAqB7F,QAArB,CAA8B7Q,CAA9B,CAAP;AACH;AACJ;AACJ;;AACD,WAAOkQ,YAAY,CAACwG,OAApB;AACH,GATD;;AAUAlJ,EAAAA,OAAO,CAACtO,SAAR,CAAkBygD,aAAlB,GAAkC,UAAUzvC,YAAV,EAAwBG,IAAxB,EAA8B;AAC5D,QAAIA,IAAI,CAACqgB,OAAL,CAAave,OAAb,KAAyBpD,SAA7B,EAAwC;AACpCmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqBve,OAArB,GAA+B9B,IAAI,CAACqgB,OAAL,CAAave,OAA5C;AACH;;AACD,QAAI9B,IAAI,CAACqgB,OAAL,CAAazE,QAAb,KAA0Bld,SAA9B,EAAyC;AACrCmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqBzE,QAArB,GAAgC5b,IAAI,CAACqgB,OAAL,CAAazE,QAA7C;AACH;;AACD,QAAI5b,IAAI,CAACqgB,OAAL,CAAalc,MAAb,KAAwBzF,SAA5B,EAAuC;AACnCmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqBlc,MAArB,GAA8BnE,IAAI,CAACqgB,OAAL,CAAalc,MAA3C;AACH;;AACD,QAAInE,IAAI,CAACqgB,OAAL,CAAapc,KAAb,KAAuBvF,SAA3B,EAAsC;AAClCmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqBpc,KAArB,GAA6BjE,IAAI,CAACqgB,OAAL,CAAapc,KAA1C;AACH;;AACD,QAAIjE,IAAI,CAACqgB,OAAL,CAAagzB,cAAb,KAAgC30C,SAApC,EAA+C;AAC3CmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqBgzB,cAArB,GAAsCrzC,IAAI,CAACqgB,OAAL,CAAagzB,cAAnD;AACH;;AACD,QAAIrzC,IAAI,CAACqgB,OAAL,CAAa4b,YAAb,KAA8Bv9B,SAAlC,EAA6C;AACzCmB,MAAAA,YAAY,CAACwgB,OAAb,CAAqB4b,YAArB,GAAoCj8B,IAAI,CAACqgB,OAAL,CAAa4b,YAAjD;AACH;AACJ,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9+B,EAAAA,OAAO,CAACtO,SAAR,CAAkB+/B,UAAlB,GAA+B,UAAUnsB,GAAV,EAAe;AAC1C,QAAI6wC,QAAQ,GAAG,KAAK/lC,aAAL,CAAmBqhB,UAAnB,CAA8BnsB,GAAG,CAAC4D,OAAlC,CAAf;;AACA,QAAIitC,QAAQ,IAAI,CAAC,KAAKrlB,oBAAtB,EAA4C;AACxC,WAAK/nB,UAAL;AACH;AACJ,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/I,EAAAA,OAAO,CAACtO,SAAR,CAAkB45B,eAAlB,GAAoC,UAAUhmB,GAAV,EAAe;AAC/C,QAAIA,GAAG,CAACjC,QAAR,EAAkB;AACd,UAAIT,KAAK,GAAG,KAAK,CAAjB;AACA,UAAIS,QAAQ,GAAGiC,GAAG,CAACjC,QAAnB;;AACA,WAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6Q,QAAQ,CAAClR,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACtCoQ,QAAAA,KAAK,GAAG,KAAKqC,SAAL,CAAe5B,QAAQ,CAAC7Q,CAAD,CAAvB,CAAR;;AACA,YAAIoQ,KAAJ,EAAW;AACP,eAAK0oB,eAAL,CAAqB1oB,KAArB;AACH;AACJ;AACJ;;AACD,SAAKwN,aAAL,CAAmBkb,eAAnB,CAAmChmB,GAAG,CAAC4D,OAAvC;AACA,QAAIitC,QAAQ,GAAG,KAAK/lC,aAAL,CAAmBgmC,YAAnB,CAAgC9wC,GAAG,CAAC4D,OAApC,CAAf;;AACA,QAAIitC,QAAQ,IAAI,CAAC,KAAKrlB,oBAAtB,EAA4C;AACxC,WAAK/nB,UAAL;AACH;AACJ,GAhBD;AAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/I,EAAAA,OAAO,CAACtO,SAAR,CAAkBkhD,eAAlB,GAAoC,UAAU/vC,IAAV,EAAgB;AAChD,QAAI0iB,QAAJ;;AACA,QAAI1iB,IAAI,CAACzB,QAAT,EAAmB;AACfmkB,MAAAA,QAAQ,GAAG,KAAKtgB,SAAL,CAAepC,IAAI,CAACzB,QAApB,CAAX;;AACA,UAAImkB,QAAJ,EAAc;AACV,YAAIA,QAAQ,CAACnkB,QAAb,EAAuB;AACnB,eAAKwxC,eAAL,CAAqBrtB,QAArB;AACH,SAFD,MAGK;AACDA,UAAAA,QAAQ,CAACrc,OAAT,CAAiBwf,OAAjB,CAAyB,IAAI9wB,IAAJ,EAAzB;AACA2tB,UAAAA,QAAQ,CAACrc,OAAT,CAAiByf,OAAjB,CAAyBpD,QAAQ,CAACrc,OAAT,CAAiB0f,WAA1C;AACA,eAAKmU,iBAAL,CAAuBxX,QAAvB;AACA,eAAKsD,mBAAL,CAAyBtD,QAAzB;AACH;AACJ;AACJ;AACJ,GAhBD;;AAiBAvlB,EAAAA,OAAO,CAACtO,SAAR,CAAkBqX,UAAlB,GAA+B,YAAY;AACvC,QAAK,KAAKpC,cAAL,GAAsBlO,aAAa,CAACmO,MAArC,IACA,EAAE,KAAKD,cAAL,GAAsBlO,aAAa,CAACukB,cAAtC,CADJ,EAC2D;AACvD,WAAK9P,QAAL,CAAcyF,mBAAd;AACA,WAAKzF,QAAL,CAAcO,OAAd,GAFuD,CAGvD;;AACA,WAAK,IAAIzH,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG,KAAKoB,KAA3B,EAAkCrB,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIuB,IAAI,GAAGtB,EAAE,CAACD,EAAD,CAAb;AACA,YAAIsB,IAAI,GAAG,KAAKD,KAAL,CAAWE,IAAX,CAAX;;AACA,YAAI,EAAED,IAAI,YAAYtH,OAAlB,CAAJ,EAAgC;AAC5BsH,UAAAA,IAAI,CAACE,UAAL,CAAgBF,IAAhB;AACH;AACJ;AACJ;;AACD,QAAI,KAAKX,cAAL,GAAsBlO,aAAa,CAACukB,cAAxC,EAAwD;AACpD,WAAK1K,gBAAL;AACH;AACJ,GAjBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItS,EAAAA,OAAO,CAACtO,SAAR,CAAkB2S,qBAAlB,GAA0C,UAAUgyC,MAAV,EAAkB;AACxD,SAAKloC,mBAAL,GAA2BkoC,MAA3B;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIr2C,EAAAA,OAAO,CAACtO,SAAR,CAAkB4kD,6BAAlB,GAAkD,YAAY;AAC1D,WAAO,KAAKnoC,mBAAZ;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInO,EAAAA,OAAO,CAACtO,SAAR,CAAkB0S,uBAAlB,GAA4C,UAAUiyC,MAAV,EAAkB;AAC1D,QAAI3gD,QAAQ,EAAZ,EAAgB;AACZ,WAAKwrB,sBAAL,GAA8Bm1B,MAA9B;;AACA,UAAIA,MAAJ,EAAY;AACR,aAAKlyC,WAAL,GAAmB,EAAnB;AACH;AACJ;AACJ,GAPD;AAQA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInE,EAAAA,OAAO,CAACtO,SAAR,CAAkBs9C,YAAlB,GAAiC,UAAUuH,UAAV,EAAsBC,aAAtB,EAAqC;AAClE,QAAIA,aAAa,CAACx4B,KAAd,KAAwBzc,SAA5B,EAAuC;AACnCg1C,MAAAA,UAAU,CAACv4B,KAAX,GAAmBw4B,aAAa,CAACx4B,KAAjC;AACH;;AACD,QAAIw4B,aAAa,CAAC1O,KAAd,KAAwBvmC,SAA5B,EAAuC;AACnCg1C,MAAAA,UAAU,CAACzO,KAAX,GAAmB0O,aAAa,CAAC1O,KAAjC;AACH;;AACD,QAAI0O,aAAa,CAACC,QAAd,KAA2Bl1C,SAA/B,EAA0C;AACtCg1C,MAAAA,UAAU,CAACE,QAAX,GAAsBD,aAAa,CAACC,QAApC;AACH;;AACD,QAAID,aAAa,CAACzO,OAAd,KAA0BxmC,SAA9B,EAAyC;AACrCg1C,MAAAA,UAAU,CAACxO,OAAX,GAAqByO,aAAa,CAACzO,OAAnC;AACH;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/nC,EAAAA,OAAO,CAACtO,SAAR,CAAkB8/C,YAAlB,GAAiC,UAAU3uC,IAAV,EAAgB6zC,OAAhB,EAAyB;AACtD,QAAIA,OAAO,CAACj0B,MAAR,CAAeE,GAAf,KAAuBphB,SAA3B,EAAsC;AAClCsB,MAAAA,IAAI,CAAC4f,MAAL,CAAYE,GAAZ,GAAkB+zB,OAAO,CAACj0B,MAAR,CAAeE,GAAjC;AACH;;AACD,QAAI+zB,OAAO,CAACj0B,MAAR,CAAemqB,MAAf,KAA0BrrC,SAA9B,EAAyC;AACrCsB,MAAAA,IAAI,CAAC4f,MAAL,CAAYmqB,MAAZ,GAAqB8J,OAAO,CAACj0B,MAAR,CAAemqB,MAApC;AACH;;AACD,QAAI8J,OAAO,CAACj0B,MAAR,CAAeC,IAAf,KAAwBnhB,SAA5B,EAAuC;AACnCsB,MAAAA,IAAI,CAAC4f,MAAL,CAAYC,IAAZ,GAAmBg0B,OAAO,CAACj0B,MAAR,CAAeC,IAAlC;AACH;;AACD,QAAIg0B,OAAO,CAACj0B,MAAR,CAAekqB,KAAf,KAAyBprC,SAA7B,EAAwC;AACpCsB,MAAAA,IAAI,CAAC4f,MAAL,CAAYkqB,KAAZ,GAAoB+J,OAAO,CAACj0B,MAAR,CAAekqB,KAAnC;AACH;AACJ,GAbD;;AAcA3sC,EAAAA,OAAO,CAACtO,SAAR,CAAkBilD,qBAAlB,GAA0C,UAAUC,OAAV,EAAmB;AACzD,QAAIA,OAAO,CAACvzC,QAAR,IAAoBuzC,OAAO,CAACvzC,QAAR,CAAiBlR,MAArC,IACAykD,OAAO,CAACnzC,KADR,IACiBmzC,OAAO,CAACnzC,KAAR,CAAcC,IAAd,KAAuB,UAD5C,EACwD;AACpD,WAAK,IAAImzC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACvzC,QAAR,CAAiBlR,MAArC,EAA6C0kD,CAAC,EAA9C,EAAkD;AAC9C,YAAIC,cAAc,GAAGF,OAAO,CAACvzC,QAAR,CAAiBwzC,CAAjB,CAArB;AACA,YAAIE,cAAc,GAAG,KAAK3zC,KAAL,CAAW0Z,OAAX,CAAmB,KAAK7X,SAAL,CAAe6xC,cAAf,CAAnB,CAArB;;AACA,YAAIC,cAAc,IAAI,CAAtB,EAAyB;AACrB,eAAK3zC,KAAL,CAAWsjB,MAAX,CAAkBqwB,cAAlB,EAAkC,CAAlC;AACH;;AACD,eAAO,KAAK9xC,SAAL,CAAe6xC,cAAf,CAAP;AACH;;AACD,UAAIE,YAAY,GAAG,KAAK5zC,KAAL,CAAW0Z,OAAX,CAAmB,KAAK7X,SAAL,CAAe,KAAK0a,aAAL,CAAmBxe,EAAlC,CAAnB,CAAnB;;AACA,UAAI61C,YAAY,IAAI,CAApB,EAAuB;AACnB,aAAK5zC,KAAL,CAAWsjB,MAAX,CAAkBswB,YAAlB,EAAgC,CAAhC;AACH;AACJ;AACJ,GAhBD,CA1vR2C,CA2wR3C;;AACA;;;AACAh3C,EAAAA,OAAO,CAACtO,SAAR,CAAkBkmB,cAAlB,GAAmC,YAAY;AAC3C,QAAIxX,KAAK,GAAG,IAAZ,CAD2C,CAE3C;;;AACA,QAAI4jB,UAAU,GAAG,EAAjB;AACA,QAAIizB,UAAU,GAAG,EAAjB;AACA,QAAIxqB,MAAJ;AACA,QAAIrK,IAAJ;AACA,SAAKzM,SAAL,GAAiB,IAAIpgB,SAAJ,CAAc,KAAK4K,OAAnB,CAAjB,CAP2C,CAQ3C;AACA;;AACA,SAAKwV,SAAL,CAAeuhC,IAAf,GAAsB,UAAU1xC,IAAV,EAAgB;AAClC,UAAI,CAACpF,KAAK,CAACuf,aAAX,EAA0B;AACtB,YAAIw3B,cAAc,GAAG,IAArB;;AACA,YAAI,CAAC3xC,IAAI,CAAC4xC,QAAN,IAAkB5xC,IAAI,CAACgQ,IAAL,KAAc,MAApC,EAA4C;AACxC,cAAI6hC,MAAM,GAAGxoC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,EAA+C,CAA/C,CAAb;;AACA,cAAIuoC,MAAJ,EAAY;AACRF,YAAAA,cAAc,GAAGE,MAAjB;AACH;AACJ;;AACD,YAAI7xC,IAAI,CAAC4xC,QAAL,IAAiBD,cAArB,EAAqC;AACjC,cAAIrwB,MAAM,GAAG,KAAK,CAAlB;AACA,cAAIwwB,YAAY,GAAG,KAAK,CAAxB;AACAzoC,UAAAA,QAAQ,CAACgH,cAAT,CAAwBzV,KAAK,CAACD,OAAN,CAAcgB,EAAd,GAAmB,SAA3C,EAAsDo2C,KAAtD;;AACA,cAAI94B,QAAQ,GAAGre,KAAK,CAAC6G,YAAN,CAAmBuwC,gBAAnB,CAAoChyC,IAAI,CAACiyC,KAAzC,CAAf;;AACA,cAAIpK,YAAY,GAAG,KAAK,CAAxB;AACA,cAAIqK,cAAc,GAAGP,cAAc,IAAI3xC,IAAI,CAAC4xC,QAAL,CAAcC,MAArD;AACA,cAAIM,SAAS,GAAGD,cAAc,CAACE,YAAf,CAA4B,WAA5B,CAAhB;AACA,cAAIC,YAAY,GAAG,KAAK,CAAxB;AACA,cAAIC,eAAe,GAAG,KAAK,CAA3B;AACA,cAAIC,eAAe,GAAG,KAAK,CAA3B;AACA,cAAInB,OAAO,GAAG,KAAK,CAAnB;;AACA,cAAIe,SAAJ,EAAe;AACX;AACA,gBAAIK,aAAa,GAAGnpC,QAAQ,CAACgH,cAAT,CAAwB8hC,SAAxB,EAAmCM,aAAnC,CAAiD,CAAjD,CAApB;AACA,gBAAIv5B,MAAM,GAAG,eAAb;AACAte,YAAAA,KAAK,CAACuV,SAAN,CAAgB+I,MAAhB,IAA0Bs5B,aAA1B;AACA,gBAAIE,eAAe,GAAG,iBAAtB;AACA,gBAAIC,UAAU,GAAG,YAAjB;;AACA,gBAAIH,aAAJ,EAAmB;AACf,kBAAI1yC,GAAG,GAAG0yC,aAAa,CAACE,eAAD,CAAvB;AACA93C,cAAAA,KAAK,CAAC8gB,sBAAN,GAA+B,KAA/B;AACAmsB,cAAAA,YAAY,GAAGxvC,WAAW,CAACm6C,aAAa,CAACE,eAAD,CAAd,CAA1B;AACAl0B,cAAAA,UAAU,GAAGg0B,aAAa,CAACG,UAAD,CAA1B;AACA,kBAAIjvC,OAAO,GAAG5D,GAAG,CAAC4D,OAAJ,CAAY7F,QAAZ,CAAqB,CAArB,EAAwBA,QAAxB,CAAiC,CAAjC,CAAd;AACAuzC,cAAAA,OAAO,GAAGz/C,cAAc,CAAC6gD,aAAD,EAAgB3K,YAAhB,EAA8BnkC,OAA9B,CAAxB;;AACA,kBAAI8uC,aAAa,CAACE,eAAD,CAAb,YAA0C3hD,IAA9C,EAAoD;AAChD,oBAAI+O,GAAG,CAAC7B,KAAJ,CAAUA,KAAV,KAAoB,gBAAxB,EAA0C;AACtC;AACA4pC,kBAAAA,YAAY,CAACpvB,OAAb,GAAuBQ,QAAQ,CAAC3C,CAAT,GAAa,EAAb,GAAmB86B,OAAO,CAAC9vC,KAAT,GAAkBumC,YAAY,CAACzvB,KAAb,CAAmB9B,CAA9E,CAFsC,CAGtC;;AACAuxB,kBAAAA,YAAY,CAACnvB,OAAb,GAAuBO,QAAQ,CAACpqB,CAAT,GAAa,EAAb,GAAmBuiD,OAAO,CAAC5vC,MAAT,GAAmBqmC,YAAY,CAACzvB,KAAb,CAAmBvpB,CAA/E;AACH,iBALD,MAMK;AACD;AACAg5C,kBAAAA,YAAY,CAACpvB,OAAb,GAAuBQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAkB86B,OAAO,CAAC9vC,KAAT,GAAkBumC,YAAY,CAACzvB,KAAb,CAAmB9B,CAA7E,CAFC,CAGD;;AACAuxB,kBAAAA,YAAY,CAACnvB,OAAb,GAAuBO,QAAQ,CAACpqB,CAAT,GAAcuiD,OAAO,CAAC5vC,MAAT,GAAmBqmC,YAAY,CAACzvB,KAAb,CAAmBvpB,CAA1E;AACH;;AACD,oBAAI+jD,OAAO,GAAG,IAAI7hD,IAAJ,CAAS6J,KAAT,EAAgB,OAAhB,EAAyBitC,YAAzB,EAAuC,IAAvC,CAAd;;AACA,oBAAI+K,OAAO,CAAC30C,KAAR,CAAcC,IAAd,KAAuB,MAAvB,IAAiC00C,OAAO,CAAC30C,KAAR,CAAcykB,QAAd,CAAuBC,UAAvB,CAAkCC,SAAnE,IACGgwB,OAAO,CAAC30C,KAAR,CAAcykB,QAAd,CAAuBC,UAAvB,CAAkCC,SAAlC,CAA4Cj2B,MADnD,EAC2D;AACvDimD,kBAAAA,OAAO,CAAC30C,KAAR,CAAcykB,QAAd,CAAuBC,UAAvB,CAAkCC,SAAlC,GAA8C,EAA9C;AACH;;AACDyvB,gBAAAA,YAAY,GAAGO,OAAO,CAACC,QAAvB;AACAP,gBAAAA,eAAe,GAAGM,OAAO,CAACE,WAA1B;AACAP,gBAAAA,eAAe,GAAGC,aAAa,CAAC,gBAAD,CAA/B;AACA,oBAAIO,cAAc,GAAGP,aAAa,CAAC,eAAD,CAAlC,CArBgD,CAsBhD;;AACAI,gBAAAA,OAAO,CAACtxC,KAAR,GAAgB+wC,YAAY,CAAC/wC,KAAb,IAAsBixC,eAAe,CAACjxC,KAAtC,IAA+CgxC,eAAe,CAAChxC,KAA/D,IAAwEyxC,cAAc,CAACzxC,KAAvF,IAAgGsxC,OAAO,CAACtxC,KAAxH,CAvBgD,CAwBhD;;AACAsxC,gBAAAA,OAAO,CAACpxC,MAAR,GAAiB6wC,YAAY,CAAC7wC,MAAb,IAAuB+wC,eAAe,CAAC/wC,MAAvC,IAAiD8wC,eAAe,CAAC9wC,MAAjE,IAA2EuxC,cAAc,CAACvxC,MAA1F,IAAoGoxC,OAAO,CAACpxC,MAA7H;;AACA,oBAAIoxC,OAAO,CAAC30C,KAAR,CAAcC,IAAd,KAAuB,UAA3B,EAAuC;AACnCtD,kBAAAA,KAAK,CAACuG,cAAN,IAAwBlO,aAAa,CAACqrB,cAAtC;;AACA,sBAAIs0B,OAAO,CAAC30C,KAAR,CAAckZ,MAAlB,EAA0B;AACtBy7B,oBAAAA,OAAO,CAAC/0C,QAAR,GAAmB,EAAnB;AACAopB,oBAAAA,MAAM,GAAG;AACLtrB,sBAAAA,EAAE,EAAE,WAAWvD,QAAQ;AADlB,qBAAT;;AAGA,wBAAIw6C,OAAO,CAAC30C,KAAR,CAAcmf,WAAd,KAA8B,YAAlC,EAAgD;AAC5C6J,sBAAAA,MAAM,CAAC3lB,KAAP,GAAesxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB2J,MAAvB,CAA8B3lB,KAA7C;AACA2lB,sBAAAA,MAAM,CAACzlB,MAAP,GAAgBoxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB9b,MAAvC;AACH,qBAHD,MAIK;AACDylB,sBAAAA,MAAM,CAAC3lB,KAAP,GAAesxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuBhc,KAAtC;AACA2lB,sBAAAA,MAAM,CAACzlB,MAAP,GAAgBoxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB2J,MAAvB,CAA8BzlB,MAA9C;AACH;;AACDylB,oBAAAA,MAAM,CAACnpB,KAAP,GAAe80C,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB2J,MAAvB,CAA8BnpB,KAA7C;AACAmpB,oBAAAA,MAAM,CAACxO,OAAP,GAAiBQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAiB2Q,MAAM,CAAC3lB,KAAP,GAAe,CAAjD;AACA2lB,oBAAAA,MAAM,CAACvO,OAAP,GAAiBO,QAAQ,CAACpqB,CAAT,GAAao4B,MAAM,CAACzlB,MAAP,GAAgB,CAA9C;AACA5G,oBAAAA,KAAK,CAACuG,cAAN,IAAwBlO,aAAa,CAAC0uB,iCAAtC;AACAsF,oBAAAA,MAAM,GAAGrsB,KAAK,CAACqF,GAAN,CAAUgnB,MAAV,CAAT;AACArK,oBAAAA,IAAI,GAAG;AACHjhB,sBAAAA,EAAE,EAAE,SAASvD,QAAQ;AADlB,qBAAP;;AAGA,wBAAIw6C,OAAO,CAAC30C,KAAR,CAAcmf,WAAd,KAA8B,YAAlC,EAAgD;AAC5CR,sBAAAA,IAAI,CAACtb,KAAL,GAAasxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuBhc,KAAvB,GAA+B2lB,MAAM,CAAC3lB,KAAnD;AACAsb,sBAAAA,IAAI,CAACpb,MAAL,GAAcoxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB9b,MAArC,CAF4C,CAG5C;;AACAob,sBAAAA,IAAI,CAACnE,OAAL,GAAeQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,IAAkBs8B,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB2J,MAAvB,CAA8B3lB,KAA9B,GAAuCsb,IAAI,CAACtb,KAAL,GAAa,CAAtE,CAAf;AACAsb,sBAAAA,IAAI,CAAClE,OAAL,GAAeO,QAAQ,CAACpqB,CAAT,GAAa+tB,IAAI,CAACpb,MAAL,GAAc,CAA1C;AACH,qBAND,MAOK;AACDob,sBAAAA,IAAI,CAACtb,KAAL,GAAasxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuBhc,KAApC;AACAsb,sBAAAA,IAAI,CAACpb,MAAL,GAAcoxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB9b,MAAvB,GAAgCylB,MAAM,CAACzlB,MAArD;AACAob,sBAAAA,IAAI,CAACnE,OAAL,GAAeQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAiBsG,IAAI,CAACtb,KAAL,GAAa,CAA7C,CAHC,CAID;;AACAsb,sBAAAA,IAAI,CAAClE,OAAL,GAAeO,QAAQ,CAACpqB,CAAT,IAAc+jD,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB2J,MAAvB,CAA8BzlB,MAA9B,GAAwCob,IAAI,CAACpb,MAAL,GAAc,CAApE,CAAf;AACH;;AACDob,oBAAAA,IAAI,CAAC9e,KAAL,GAAa80C,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuBxf,KAApC;AACA8e,oBAAAA,IAAI,GAAGhiB,KAAK,CAACqF,GAAN,CAAU2c,IAAV,CAAP;AACA,wBAAI3I,KAAK,GAAG;AACRtY,sBAAAA,EAAE,EAAE,UAAUvD,QAAQ,EADd;AAERyF,sBAAAA,QAAQ,EAAE,CAACopB,MAAM,CAACtrB,EAAR,EAAYihB,IAAI,CAACjhB,EAAjB;AAFF,qBAAZ;AAIAsY,oBAAAA,KAAK,CAAChW,KAAN,GAAc20C,OAAO,CAAC30C,KAAtB;AACAgW,oBAAAA,KAAK,CAAC3S,KAAN,GAAcsxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuBhc,KAArC;AACA2S,oBAAAA,KAAK,CAACzS,MAAN,GAAeoxC,OAAO,CAAC30C,KAAR,CAAcqf,KAAd,CAAoB,CAApB,EAAuB9b,MAAtC;AACAyS,oBAAAA,KAAK,CAAC6+B,WAAN,GAAoBF,OAAO,CAACE,WAA5B;AACA7+B,oBAAAA,KAAK,CAAC4+B,QAAN,GAAiBD,OAAO,CAACC,QAAzB;AACA5+B,oBAAAA,KAAK,CAAC++B,OAAN,GAAgBJ,OAAO,CAACI,OAAxB;AACAJ,oBAAAA,OAAO,GAAGh4C,KAAK,CAACqF,GAAN,CAAUgU,KAAV,CAAV;AACArZ,oBAAAA,KAAK,CAACuG,cAAN,IAAwB,CAAClO,aAAa,CAAC0uB,iCAAvC;AACH;;AACD/mB,kBAAAA,KAAK,CAACuG,cAAN,IAAwB,CAAClO,aAAa,CAACqrB,cAAvC;AACH;;AACD,oBAAIs0B,OAAO,CAAC30C,KAAR,CAAcmnB,OAAlB,EAA2B;AACvB0sB,kBAAAA,YAAY,GAAIc,OAAO,CAAC30C,KAAR,CAAcmf,WAAd,KAA8B,YAA/B,GAA+C,IAA/C,GAAsD,KAArE;;AACA,sBAAI00B,YAAJ,EAAkB;AACdc,oBAAAA,OAAO,CAACn6B,OAAR,GAAkBQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAiB,CAACs8B,OAAO,CAACtxC,KAAR,IAAiBoC,OAAO,CAAC+iB,UAAR,CAAmBnlB,KAArC,IAA8C,CAAjF;AACAsxC,oBAAAA,OAAO,CAACl6B,OAAR,GAAkBO,QAAQ,CAACpqB,CAA3B;AACA+jD,oBAAAA,OAAO,CAAC30C,KAAR,CAAckC,IAAd,GACI,MAAM,EAAN,GAAW,GAAX,GAAkByyC,OAAO,CAACpxC,MAAR,GAAiB,CAAnC,GAAwC,IAAxC,IAAgDoxC,OAAO,CAACtxC,KAAR,GAAgB,EAAhE,IAAsE,GAAtE,GACKsxC,OAAO,CAACpxC,MAAR,GAAiB,CADtB,GAC2B,GAF/B;AAGAoxC,oBAAAA,OAAO,CAACpxC,MAAR,GAAiB,CAAjB;AACH,mBAPD,MAQK;AACDoxC,oBAAAA,OAAO,CAACn6B,OAAR,GAAkBQ,QAAQ,CAAC3C,CAAT,GAAa,CAA/B;AACAs8B,oBAAAA,OAAO,CAACl6B,OAAR,GAAkBO,QAAQ,CAACpqB,CAAT,GAAa,CAAC+jD,OAAO,CAACpxC,MAAR,IAAkBkC,OAAO,CAAC+iB,UAAR,CAAmBjlB,MAAtC,IAAgD,CAA/E;AACAoxC,oBAAAA,OAAO,CAAC30C,KAAR,CAAckC,IAAd,GACI,MAAOyyC,OAAO,CAACtxC,KAAR,GAAgB,CAAvB,GAA4B,GAA5B,GAAkC,EAAlC,GAAuC,IAAvC,GAA+CsxC,OAAO,CAACtxC,KAAR,GAAgB,CAA/D,GACI,GADJ,IACWsxC,OAAO,CAACpxC,MAAR,GAAiB,EAD5B,IACkC,GAFtC;AAGAoxC,oBAAAA,OAAO,CAACtxC,KAAR,GAAgB,CAAhB;AACH;AACJ;;AACDggB,gBAAAA,MAAM,GAAGsxB,OAAT;;AACA,oBAAI/K,YAAY,CAAChqC,QAAjB,EAA2B;AACvB,sBAAI0S,UAAU,GAAGs3B,YAAjB;AACA,sBAAIoL,SAAS,GAAG,EAAhB;AACAxB,kBAAAA,UAAU,GAAG72C,KAAK,CAAColB,WAAN,CAAkBzP,UAAlB,EAA8B0iC,SAA9B,EAAyCz0B,UAAzC,CAAb;AACAxmB,kBAAAA,YAAY,CAACuY,UAAD,EAAa,CAACA,UAAU,CAACkI,OAAzB,EAAkC,CAAClI,UAAU,CAACmI,OAA9C,EAAuD+4B,UAAvD,EAAmE,IAAnE,EAAyE72C,KAAzE,CAAZ;AACH;AACJ,eA1GD,MA2GK,IAAI43C,aAAa,CAACE,eAAD,CAAb,YAA0C9gD,SAA9C,EAAyD;AAC1D0vB,gBAAAA,MAAM,GAAG,IAAI1vB,SAAJ,CAAcgJ,KAAd,EAAqB,YAArB,EAAmCitC,YAAnC,EAAiD,IAAjD,CAAT;AACA,oBAAIvvB,MAAM,GAAGjkB,IAAI,CAAC6+C,QAAL,CAAc,CAAC5xB,MAAM,CAAC0B,WAAR,EAAqB1B,MAAM,CAACxD,WAA5B,CAAd,CAAb;AACA,oBAAItH,EAAE,GAAGyC,QAAQ,CAAC3C,CAAT,GAAagC,MAAM,CAAC4E,IAA7B;AACA,oBAAIzG,EAAE,GAAGwC,QAAQ,CAACpqB,CAAT,GAAaypB,MAAM,CAAC6E,GAA7B;AACAmE,gBAAAA,MAAM,CAAC0B,WAAP,CAAmB1M,CAAnB,IAAwBE,EAAxB;AACA8K,gBAAAA,MAAM,CAAC0B,WAAP,CAAmBn0B,CAAnB,IAAwB4nB,EAAxB;AACA6K,gBAAAA,MAAM,CAACxD,WAAP,CAAmBxH,CAAnB,IAAwBE,EAAxB;AACA8K,gBAAAA,MAAM,CAACxD,WAAP,CAAmBjvB,CAAnB,IAAwB4nB,EAAxB;AACH;;AACD,kBAAI,CAAC6K,MAAM,CAACrjB,KAAP,CAAakZ,MAAlB,EAA0B;AACtBmK,gBAAAA,MAAM,CAAC3lB,EAAP,IAAavD,QAAQ,EAArB;AACH;;AACD,kBAAIkH,GAAG,GAAG;AACN4Z,gBAAAA,MAAM,EAAEs5B,aADF;AACiB73C,gBAAAA,OAAO,EAAE2mB,MAD1B;AACkCG,gBAAAA,MAAM,EAAE,KAD1C;AAENvb,gBAAAA,OAAO,EAAEtL;AAFH,eAAV;;AAIA,kBAAI1K,QAAQ,EAAZ,EAAgB;AACZoP,gBAAAA,GAAG,GAAG1E,KAAK,CAACu4C,sBAAN,CAA6B7zC,GAA7B,CAAN;AACH;;AACD1E,cAAAA,KAAK,CAAC,aAAD,CAAL,GAAuB0mB,MAAvB;AACA1mB,cAAAA,KAAK,CAAC,YAAD,CAAL,GAAsB62C,UAAtB;;AACA72C,cAAAA,KAAK,CAAC4H,YAAN,CAAmBxP,YAAY,CAACogD,SAAhC,EAA2C9zC,GAA3C;;AACA,kBAAKgiB,MAAM,YAAYvwB,IAAnB,IAA4BuwB,MAAM,CAACrjB,KAAP,CAAaC,IAAb,KAAsB,UAAlD,IAAgEojB,MAAM,CAACrjB,KAAP,CAAakZ,MAAjF,EAAyF;AACrF,oBAAIk8B,WAAW,GAAG/zC,GAAG,CAAC3E,OAAtB;AACA,oBAAI24C,OAAO,GAAGD,WAAW,CAACp1C,KAAZ,CAAkBqf,KAAlB,CAAwB,CAAxB,CAAd,CAFqF,CAGrF;;AACAw0B,gBAAAA,YAAY,GAAIuB,WAAW,CAACp1C,KAAZ,CAAkBmf,WAAlB,KAAkC,YAAnC,GAAmD,IAAnD,GAA0D,KAAzE;AACA,oBAAIm2B,MAAM,GAAG34C,KAAK,CAAC6E,SAAN,CAAgB6hB,MAAM,CAACzjB,QAAP,CAAgB,CAAhB,CAAhB,CAAb;AACA,oBAAI21C,MAAM,GAAG54C,KAAK,CAAC6E,SAAN,CAAgB6hB,MAAM,CAACzjB,QAAP,CAAgB,CAAhB,CAAhB,CAAb;AACAw0C,gBAAAA,YAAY,GAAG/wB,MAAM,CAACuxB,QAAtB;AACAP,gBAAAA,eAAe,GAAGhxB,MAAM,CAACwxB,WAAzB;AACAP,gBAAAA,eAAe,GAAGC,aAAa,CAAC,gBAAD,CAA/B;AACAc,gBAAAA,OAAO,CAAChyC,KAAR,GAAgB+wC,YAAY,CAAC/wC,KAAb,IAAsBixC,eAAe,CAACjxC,KAAtC,IAA+CgxC,eAAe,CAAChxC,KAA/D,IAAwEgyC,OAAO,CAAChyC,KAAhG;AACAgyC,gBAAAA,OAAO,CAAC9xC,MAAR,GAAiB6wC,YAAY,CAAC7wC,MAAb,IAAuB+wC,eAAe,CAAC/wC,MAAvC,IAAiD8wC,eAAe,CAAC9wC,MAAjE,IAA2E8xC,OAAO,CAAC9xC,MAApG;;AACA,oBAAIswC,YAAJ,EAAkB;AACd7qB,kBAAAA,MAAM,CAAC3lB,KAAP,GAAegyC,OAAO,CAACrsB,MAAR,CAAe3lB,KAA9B;AACA2lB,kBAAAA,MAAM,CAACzlB,MAAP,GAAgB8xC,OAAO,CAAC9xC,MAAxB;AACAob,kBAAAA,IAAI,CAACtb,KAAL,GAAagyC,OAAO,CAAChyC,KAAR,GAAgB2lB,MAAM,CAAC3lB,KAApC;AACAsb,kBAAAA,IAAI,CAACpb,MAAL,GAAc8xC,OAAO,CAAC9xC,MAAtB;AACAob,kBAAAA,IAAI,CAACnE,OAAL,GAAeQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,IAAkBg9B,OAAO,CAACrsB,MAAR,CAAe3lB,KAAf,GAAwBkyC,MAAM,CAAClyC,KAAP,GAAe,CAAzD,CAAf;AACAsb,kBAAAA,IAAI,CAAClE,OAAL,GAAeO,QAAQ,CAACpqB,CAAT,GAAa2kD,MAAM,CAAChyC,MAAP,GAAgB,CAA5C;AACH,iBAPD,MAQK;AACDylB,kBAAAA,MAAM,CAAC3lB,KAAP,GAAegyC,OAAO,CAAChyC,KAAvB;AACA2lB,kBAAAA,MAAM,CAACzlB,MAAP,GAAgB8xC,OAAO,CAACrsB,MAAR,CAAezlB,MAA/B;AACAob,kBAAAA,IAAI,CAACtb,KAAL,GAAagyC,OAAO,CAAChyC,KAArB;AACAsb,kBAAAA,IAAI,CAACpb,MAAL,GAAc8xC,OAAO,CAAC9xC,MAAR,GAAiBylB,MAAM,CAACzlB,MAAtC;AACAob,kBAAAA,IAAI,CAACnE,OAAL,GAAeQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAiBk9B,MAAM,CAAClyC,KAAP,GAAe,CAA/C;AACAsb,kBAAAA,IAAI,CAAClE,OAAL,GAAeO,QAAQ,CAACpqB,CAAT,IAAcykD,OAAO,CAACrsB,MAAR,CAAezlB,MAAf,GAAyBgyC,MAAM,CAAChyC,MAAP,GAAgB,CAAvD,CAAf;AACH;;AACDylB,gBAAAA,MAAM,CAACxO,OAAP,GAAiBQ,QAAQ,CAAC3C,CAAT,GAAa,CAAb,GAAiBi9B,MAAM,CAACjyC,KAAP,GAAe,CAAjD;AACA2lB,gBAAAA,MAAM,CAACvO,OAAP,GAAiBO,QAAQ,CAACpqB,CAAT,GAAa0kD,MAAM,CAAC/xC,MAAP,GAAgB,CAA9C;AACA8f,gBAAAA,MAAM,CAAChgB,KAAP,GAAegyC,OAAO,CAAChyC,KAAvB;AACAggB,gBAAAA,MAAM,CAAC9f,MAAP,GAAgB8xC,OAAO,CAAC9xC,MAAxB;AACH;;AACD,kBAAK8f,MAAM,YAAYvwB,IAAnB,IAA4BuwB,MAAM,CAACrjB,KAAP,CAAamnB,OAA7C,EAAsD;AAClD,oBAAI0sB,YAAJ,EAAkB;AACdxwB,kBAAAA,MAAM,CAAC9f,MAAP,GAAgB,CAAhB;AACH,iBAFD,MAGK;AACD8f,kBAAAA,MAAM,CAAChgB,KAAP,GAAe,CAAf;AACH;AACJ;;AACD,kBAAI,CAAC1G,KAAK,CAAC+X,WAAN,CAAkBoP,IAAnB,IAA2B,CAACziB,GAAG,CAACmiB,MAApC,EAA4C;AACxC7mB,gBAAAA,KAAK,CAAC0wB,oBAAN,GAA6B,IAA7B;;AACA,oBAAIhK,MAAM,CAACzjB,QAAX,EAAqB;AACjBjD,kBAAAA,KAAK,CAAC64C,SAAN,CAAgBnyB,MAAhB,EAAwBmwB,UAAxB;AACH;;AACD72C,gBAAAA,KAAK,CAAC0wB,oBAAN,GAA6B,IAA7B;;AACA,oBAAIhK,MAAM,CAAC/L,MAAP,KAAkB,CAAC,CAAvB,EAA0B;AACtB+L,kBAAAA,MAAM,CAAC/L,MAAP,GAAgB,CAAC,CAAjB;AACH;;AACD3a,gBAAAA,KAAK,CAACsnB,UAAN,CAAiBZ,MAAjB,EAAyBvlB,SAAzB,EAAoCA,SAApC,EAA+C,IAA/C;;AACAnB,gBAAAA,KAAK,CAACuf,aAAN,GAAsBmH,MAAtB;;AACA,oBAAI1mB,KAAK,CAAC8H,IAAN,KAAe,KAAnB,EAA0B;AACtB9H,kBAAAA,KAAK,CAAC+H,mBAAN;AACH;;AACD/H,gBAAAA,KAAK,CAAC+P,cAAN,CAAqBkI,kBAArB,GAA0C3hB,oBAAoB,CAAC0J,KAAD,CAA9D;;AACAA,gBAAAA,KAAK,CAAC+P,cAAN,CAAqB0H,MAArB,CAA4BiP,MAA5B;;AACA1mB,gBAAAA,KAAK,CAAC+P,cAAN,CAAqBmI,oBAArB;;AACAlY,gBAAAA,KAAK,CAAC6G,YAAN,CAAmBiQ,SAAnB,CAA6B1R,IAAI,CAACiyC,KAAlC;;AACAr3C,gBAAAA,KAAK,CAAC6G,YAAN,CAAmBkQ,SAAnB,CAA6B3R,IAAI,CAACiyC,KAAlC,EAAyCjyC,IAAzC;;AACApF,gBAAAA,KAAK,CAAC0wB,oBAAN,GAA6B,KAA7B;;AACA1wB,gBAAAA,KAAK,CAAC2I,UAAN;;AACA2uC,gBAAAA,cAAc,CAACp0C,KAAf,CAAqBykC,OAArB,GAA+B,GAA/B;AACH;;AACD,qBAAO3nC,KAAK,CAAC,aAAD,CAAZ;AACA,qBAAOA,KAAK,CAAC,YAAD,CAAZ;AACH;;AACDA,YAAAA,KAAK,CAACuV,SAAN,CAAgBuiC,eAAhB,IAAmCR,cAAnC;AACAt3C,YAAAA,KAAK,CAAC8gB,sBAAN,GAA+B,IAA/B;AACH;AACJ;AACJ,OA3OD,MA4OK;AACD,YAAI1b,IAAI,CAACiyC,KAAL,CAAWyB,OAAX,IAAsB1zC,IAAI,CAACiyC,KAAL,CAAWyB,OAAX,CAAmB/mD,MAA7C,EAAqD;AACjDiO,UAAAA,KAAK,CAAC6G,YAAN,CAAmBkQ,SAAnB,CAA6B3R,IAAI,CAACiyC,KAAlC,EAAyCjyC,IAAI,CAACiyC,KAAL,CAAWyB,OAApD;AACH;AACJ;AACJ,KAlPD,CAV2C,CA6P3C;;;AACA,SAAKvjC,SAAL,CAAewjC,IAAf,GAAsB,UAAU3zC,IAAV,EAAgB;AAAE,aAAO9S,SAAS,CAAC0N,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;AACxF,YAAIse,MAAJ,EAAYvrB,KAAZ,EAAmBy3B,OAAnB,EAA4BwuB,aAA5B,EAA2CtzC,WAA3C,EAAwDhB,GAAxD,EAA6D3D,EAA7D,EAAiEksC,YAAjE,EAA+EhkB,MAA/E,EAAuFvC,MAAvF,EAA+FhiB,GAA/F,EAAoGuoC,YAApG,EAAkHlsC,EAAlH,EAAsH+2C,eAAtH,EAAuImB,gBAAvI,EAAyJ7mD,CAAzJ;AACA,eAAOoB,WAAW,CAAC,IAAD,EAAO,UAAUqS,EAAV,EAAc;AACnC,kBAAQA,EAAE,CAAClS,KAAX;AACI,iBAAK,CAAL;AACI,mBAAKmtB,sBAAL,GAA8B,KAA9B;AACAxC,cAAAA,MAAM,GAAG,eAAT;AACA,kBAAI,CAAC,KAAKiB,aAAV,EAAyB,OAAO,CAAC;AAAE;AAAH,gBAAc,CAAd,CAAP;AACzBiL,cAAAA,OAAO,GAAG,KAAV;AACA9kB,cAAAA,WAAW,GAAI,KAAK6Z,aAAL,YAA8BvoB,SAA/B,GAA4C,IAA5C,GAAmD,KAAjE;;AACA,kBAAIoO,IAAI,CAACiyC,KAAL,CAAWyB,OAAf,EAAwB;AACpB,qBAAKjyC,YAAL,CAAkBmQ,OAAlB,CAA0B5R,IAAI,CAACiyC,KAA/B;AACH;;AACD3yC,cAAAA,GAAG,GAAG,KAAK,CAAX;AACAA,cAAAA,GAAG,GAAG;AACF4Z,gBAAAA,MAAM,EAAE,KAAK/I,SAAL,CAAe+I,MAAf,CADN;AAEFve,gBAAAA,OAAO,EAAE,KAAKwf,aAFZ;AAGF7tB,gBAAAA,MAAM,EAAE,KAAKmV,YAAL,CAAkB,WAAlB,KAAkC,KAAKA,YAAL,CAAkB,sBAAlB,CAAlC,IAA+E,IAHrF;AAG2FggB,gBAAAA,MAAM,EAAE,KAHnG;AAIFxI,gBAAAA,QAAQ,EAAE;AAAE3C,kBAAAA,CAAC,EAAE,KAAK6D,aAAL,CAAmBzW,OAAnB,CAA2B+U,OAAhC;AAAyC5pB,kBAAAA,CAAC,EAAE,KAAKsrB,aAAL,CAAmBzW,OAAnB,CAA2BgV;AAAvE;AAJR,eAAN;AAMA,kBAAI,CAACxoB,QAAQ,EAAb,EAAiB,OAAO,CAAC;AAAE;AAAH,gBAAc,CAAd,CAAP;AACjBoP,cAAAA,GAAG,GAAG;AACF4Z,gBAAAA,MAAM,EAAEjoB,iBAAiB,CAAC,KAAKkf,SAAL,CAAe+I,MAAf,CAAD,CADvB;AAEF;AACAve,gBAAAA,OAAO,EAAExG,aAAa,CAAC,KAAKgmB,aAAN,CAAb,KAAsCvoB,SAAtC,GAAkD;AAAE6M,kBAAAA,SAAS,EAAExN,iBAAiB,CAAC,KAAKkpB,aAAN;AAA9B,iBAAlD,GAAyG;AAAE9c,kBAAAA,IAAI,EAAEpM,iBAAiB,CAAC,KAAKkpB,aAAN;AAAzB,iBAHhH;AAIFsH,gBAAAA,MAAM,EAAE,KAJN;AAIan1B,gBAAAA,MAAM,EAAE,EAJrB;AAKF2sB,gBAAAA,QAAQ,EAAE;AAAE3C,kBAAAA,CAAC,EAAE,KAAK6D,aAAL,CAAmBzW,OAAnB,CAA2B+U,OAAhC;AAAyC5pB,kBAAAA,CAAC,EAAE,KAAKsrB,aAAL,CAAmBzW,OAAnB,CAA2BgV;AAAvE;AALR,eAAN,CAjBJ,CAwBI;;AACA,mBAAKo7B,gBAAL,CAAsBx0C,GAAtB;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAc,KAAKkD,YAAL,CAAkBxP,YAAY,CAAC2gD,IAA/B,EAAqCr0C,GAArC,CAAd,CAAP;;AACJ,iBAAK,CAAL;AACIA,cAAAA,GAAG,GAAImB,EAAE,CAACjS,IAAH,EAAD,IAAe8Q,GAArB;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAc,CAAd,CAAP;;AACJ,iBAAK,CAAL;AACI,mBAAKkD,YAAL,CAAkBxP,YAAY,CAAC2gD,IAA/B,EAAqCr0C,GAArC;AACAmB,cAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,iBAAK,CAAL;AACIoN,cAAAA,EAAE,GAAG,IAAL;AACAksC,cAAAA,YAAY,GAAGxvC,WAAW,CAAC,KAAK8hB,aAAN,CAA1B;AACA0tB,cAAAA,YAAY,CAAC,WAAD,CAAZ,GAA4B,KAAK1tB,aAAL,CAAmB,WAAnB,CAA5B;AACA,mBAAK2L,eAAL,CAAqB,KAAK3L,aAA1B;AACA,mBAAKsK,sBAAL,CAA4B,KAAKhlB,SAAL,CAAe,KAAK0a,aAAL,CAAmBxe,EAAlC,CAA5B;AACA,mBAAKmmB,cAAL,CAAoB,KAAK3H,aAAzB;;AACA,kBAAI,KAAKA,aAAL,CAAmBlc,KAAnB,CAAyBkZ,MAAzB,IACA,KAAKgD,aAAL,CAAmBlc,KAAnB,CAAyBmnB,OAD7B,EACsC;AAClC,qBAAK2uB,kBAAL,CAAwB,KAAK55B,aAA7B;AACH;;AACD,kBAAI7a,GAAG,CAACmiB,MAAR,EAAgB;AACZvpB,gBAAAA,gBAAgB,CAAC,KAAKiiB,aAAN,EAAqB,IAArB,CAAhB;AACH;;AACD,kBAAI,KAAKA,aAAL,CAAmBlc,KAAnB,CAAyBmnB,OAA7B,EAAsC;AAClCA,gBAAAA,OAAO,GAAG,IAAV;AACAwuB,gBAAAA,aAAa,GAAG,KAAKz5B,aAAL,CAAmBlc,KAAnB,CAAyBmf,WAAzC;AACH;;AACD,mBAAK+zB,qBAAL,CAA2B,KAAKh3B,aAAhC;AACA,qBAAO,KAAK1a,SAAL,CAAe,KAAK0a,aAAL,CAAmBxe,EAAlC,CAAP;AACA,mBAAKwe,aAAL,GAAqB,IAArB;AACA,mBAAKtb,qBAAL,CAA2B,IAA3B;;AACA,kBAAI,CAACS,GAAG,CAACmiB,MAAT,EAAiB;AACb,qBAAK3G,gBAAL;;AACA,oBAAI+sB,YAAY,KAAKA,YAAY,CAAC5pC,KAAb,CAAmBkZ,MAAnB,IAA6BiO,OAAlC,CAAhB,EAA4D;AACxD,sBAAIA,OAAJ,EAAa;AACTyiB,oBAAAA,YAAY,CAAC5pC,KAAb,CAAmBmnB,OAAnB,GAA6BA,OAA7B;AACAyiB,oBAAAA,YAAY,CAAC5pC,KAAb,CAAmBmf,WAAnB,GAAiCw2B,aAAjC;AACH;;AACD,uBAAKnyC,YAAL,CAAkBuyC,iBAAlB,CAAoCnM,YAApC;AACH;;AACD,oBAAIA,YAAY,CAAC5pC,KAAb,CAAmBC,IAAnB,KAA4B,MAA5B,IAAsC2pC,YAAY,CAAC5pC,KAAb,CAAmBoQ,UAAzD,IACGw5B,YAAY,CAAC,WAAD,CADnB,EACkC;AAC9BhkB,kBAAAA,MAAM,GAAGgkB,YAAY,CAAC5pC,KAAb,CAAmBoQ,UAAnB,CAA8BwV,MAAvC;AACAgkB,kBAAAA,YAAY,CAAC5pC,KAAb,CAAmBoQ,UAAnB,CAA8B1S,EAA9B,GAAmCksC,YAAY,CAAClsC,EAAhD;AACA,uBAAKsoB,iBAAL,CAAuB4jB,YAAY,CAAC5pC,KAAb,CAAmBoQ,UAA1C,EAAsD,KAAK5O,SAAL,CAAeokB,MAAf,CAAtD;AACAgkB,kBAAAA,YAAY,CAAChkB,MAAb,GAAsB,EAAtB;AACH;;AACD,oBAAI,CAACgkB,YAAY,CAAC5pC,KAAb,CAAmBkZ,MAApB,IAA8B,CAACiO,OAAnC,EAA4C;AACxC,sBAAIyiB,YAAY,CAAChqC,QAAjB,EAA2B;AACvB,yBAAKo2C,aAAL,CAAmBpM,YAAnB;AACH;;AACD,sBAAIvoC,GAAG,CAAChT,MAAJ,IAAegT,GAAG,CAAChT,MAAJ,YAAsByE,IAArC,IAA8C,CAACuP,WAA/C,IAA8DrH,sBAAsB,CAAC,IAAD,EAAOqG,GAAG,CAAChT,MAAX,CAApF,IACG0M,YAAY,CAACsG,GAAG,CAAChT,MAAL,CADnB,EACiC;AAC7B4M,oBAAAA,mBAAmB,CAAC,IAAD,EAAOoG,GAAG,CAAChT,MAAX,EAAmBu7C,YAAnB,CAAnB;AACH,mBAHD,MAIK;AACDl6C,oBAAAA,KAAK,GAAG,KAAKsS,GAAL,CAAS4nC,YAAT,EAAuB,IAAvB,CAAR;AACH;;AACD,sBAAI,CAACA,YAAY,IAAIl6C,KAAjB,KAA2B2J,eAAe,CAAC,IAAD,CAA9C,EAAsD;AAClD,yBAAK+a,MAAL,CAAY,CAAC,KAAK5S,SAAL,CAAeooC,YAAY,CAAClsC,EAAD,CAA3B,CAAD,CAAZ;AACH;AACJ;AACJ,eA/BD,MAgCK;AACD,qBAAKupC,kBAAL;AACH;;AACD,mBAAKrmC,qBAAL,CAA2B,KAA3B;AACAyiB,cAAAA,MAAM,GAAG,KAAK7hB,SAAL,CAAeooC,YAAY,CAAClsC,EAAD,CAA3B,CAAT;;AACA,kBAAIksC,YAAY,CAAC,WAAD,CAAhB,EAA+B;AAC3BA,gBAAAA,YAAY,CAAChkB,MAAb,GAAsBgkB,YAAY,CAAC,WAAD,CAAlC;AACA,qBAAK73C,MAAL,CAAY63C,YAAZ;AACH;;AACD,kBAAI,KAAKr0B,UAAL,IAAmB8N,MAAM,YAAYvwB,IAArC,IAA6C82C,YAAY,CAAC9d,SAA9D,EAAyE;AACrEzI,gBAAAA,MAAM,CAACyI,SAAP,GAAmB8d,YAAY,CAAC9d,SAAhC;AACA,qBAAKvW,UAAL,CAAgB0gC,aAAhB,CAA8B,KAAKz0C,SAAL,CAAe6hB,MAAM,CAACyI,SAAtB,CAA9B,EAAgEzI,MAAhE,EAAwE,IAAxE;AACH;;AACD,kBAAI,CAAChiB,GAAG,CAACmiB,MAAT,EAAiB;AACb,qBAAK1G,cAAL;AACH;;AACD,kBAAI,KAAKrY,IAAL,KAAc,KAAlB,EAAyB;AACrB,qBAAKC,mBAAL;AACH;;AACD,qBAAO,KAAKwN,SAAL,CAAe+I,MAAf,CAAP;AACA,qBAAO,CAAC;AAAE;AAAH,gBAAc,CAAd,CAAP;;AACJ,iBAAK,CAAL;AACI5Z,cAAAA,GAAG,GAAG;AACF4Z,gBAAAA,MAAM,EAAEjoB,iBAAiB,CAAC+O,IAAI,CAACm0C,cAAN,CADvB;AAEFx5C,gBAAAA,OAAO,EAAEoB,SAFP;AAGFzP,gBAAAA,MAAM,EAAE2E,iBAAiB,CAAC,KAAKwQ,YAAL,CAAkB,WAAlB,KAAmC,KAAKA,YAAL,CAAkB,sBAAlB,CAAnC,IAAiF,IAAlF,CAHvB;AAGgHggB,gBAAAA,MAAM,EAAE,KAHxH;AAIFxI,gBAAAA,QAAQ,EAAEld;AAJR,eAAN;;AAMA,kBAAI7L,QAAQ,EAAZ,EAAgB;AACZoP,gBAAAA,GAAG,GAAG;AACF4Z,kBAAAA,MAAM,EAAEjoB,iBAAiB,CAAC+O,IAAI,CAACm0C,cAAN,CADvB;AAEFx5C,kBAAAA,OAAO,EAAEoB,SAFP;AAGF0lB,kBAAAA,MAAM,EAAE,KAHN;AAIFxI,kBAAAA,QAAQ,EAAEld,SAJR;AAKFzP,kBAAAA,MAAM,EAAE;AALN,iBAAN;AAOA,qBAAKwnD,gBAAL,CAAsBx0C,GAAtB;AACH;;AACD,mBAAKkD,YAAL,CAAkBxP,YAAY,CAAC2gD,IAA/B,EAAqCr0C,GAArC;AACAuoC,cAAAA,YAAY,GAAG,KAAK,CAApB;AACAlsC,cAAAA,EAAE,GAAG,IAAL;AACA8E,cAAAA,EAAE,CAAClS,KAAH,GAAW,CAAX;;AACJ,iBAAK,CAAL;AACImkD,cAAAA,eAAe,GAAG,iBAAlB,CADJ,CAEI;;AACA,kBAAI,KAAKviC,SAAL,CAAeuiC,eAAf,KAAmC,KAAKviC,SAAL,CAAeuiC,eAAf,EAAgCniC,UAAvE,EAAmF;AAC/EvgB,gBAAAA,MAAM,CAAC,KAAKmgB,SAAL,CAAeuiC,eAAf,CAAD,CAAN;AACH,eAFD,MAGK;AACDmB,gBAAAA,gBAAgB,GAAGxqC,QAAQ,CAACC,sBAAT,CAAgC,aAAhC,CAAnB;;AACA,qBAAKtc,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG6mD,gBAAgB,CAAClnD,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C6mD,kBAAAA,gBAAgB,CAAC7mD,CAAD,CAAhB,CAAoBgD,MAApB;AACH;AACJ;;AACD,mBAAK0rB,sBAAL,GAA8B,IAA9B;AACA,qBAAO,CAAC;AAAE;AAAH,eAAP;AA/IR;AAiJH,SAlJiB,CAAlB;AAmJH,OArJuD,CAAhB;AAqJnC,KArJL;;AAsJA,SAAKvL,SAAL,CAAeikC,GAAf,GAAqB,UAAUp0C,IAAV,EAAgB;AACjC,UAAIpF,KAAK,CAACuf,aAAN,IAAuB,CAACvf,KAAK,CAAC6G,YAAN,CAAmBswC,KAA/C,EAAsD;AAClDn3C,QAAAA,KAAK,CAACgY,QAAN,CAAehY,KAAK,CAACuf,aAArB;;AACAvf,QAAAA,KAAK,CAACkrB,eAAN,CAAsBlrB,KAAK,CAACuf,aAA5B;;AACA,YAAIvf,KAAK,CAAC8H,IAAN,KAAe,KAAf,IAAwB9H,KAAK,CAACuf,aAAN,CAAoBlc,KAApB,CAA0BC,IAA1B,KAAmC,QAA/D,EAAyE;AACrEtD,UAAAA,KAAK,CAACknB,cAAN,CAAqBlnB,KAAK,CAACuf,aAA3B;AACH;;AACDvf,QAAAA,KAAK,CAAC6pB,sBAAN,CAA6B7pB,KAAK,CAAC6E,SAAN,CAAgB7E,KAAK,CAACuf,aAAN,CAAoBxe,EAApC,CAA7B;;AACAf,QAAAA,KAAK,CAACu2C,qBAAN,CAA4Bv2C,KAAK,CAACuf,aAAlC;;AACA,eAAOvf,KAAK,CAAC6E,SAAN,CAAgB7E,KAAK,CAACuf,aAAN,CAAoBxe,EAApC,CAAP;AACA,YAAI04C,MAAM,GAAG;AACT15C,UAAAA,OAAO,EAAE1J,iBAAiB,CAAC2J,KAAK,CAACuf,aAAP,CADjB;AAETjU,UAAAA,OAAO,EAAEtL;AAFA,SAAb;;AAIA,YAAI1K,QAAQ,EAAZ,EAAgB;AACZmkD,UAAAA,MAAM,GAAGz5C,KAAK,CAAC05C,2BAAN,CAAkCD,MAAlC,CAAT;AACH;;AACDz5C,QAAAA,KAAK,CAAC4H,YAAN,CAAmBxP,YAAY,CAACuhD,SAAhC,EAA2CF,MAA3C;;AACA,YAAIz5C,KAAK,CAAC8H,IAAN,KAAe,KAAnB,EAA0B;AACtB9H,UAAAA,KAAK,CAAC+H,mBAAN;AACH,SAFD,MAGK;AACD/H,UAAAA,KAAK,CAACknB,cAAN,CAAqBlnB,KAAK,CAACuf,aAA3B;AACH;;AACDvf,QAAAA,KAAK,CAACuf,aAAN,GAAsB,IAAtB;AACA,YAAIu4B,eAAe,GAAG,iBAAtB;AACA93C,QAAAA,KAAK,CAACuV,SAAN,CAAgBuiC,eAAhB,EAAiC50C,KAAjC,CAAuCykC,OAAvC,GAAiD,GAAjD;AACA,YAAIrpB,MAAM,GAAG,eAAb;AACA,eAAOte,KAAK,CAACuV,SAAN,CAAgB+I,MAAhB,CAAP;AACAte,QAAAA,KAAK,CAAC4M,eAAN,CAAsBs9B,eAAtB,GACIlqC,KAAK,CAACizB,iBAAN,CAAwBjzB,KAAK,CAAC4M,eAAN,CAAsBs9B,eAA9C,EAA+DnyC,cAAc,CAACsyC,kBAA9E,CADJ;;AAEA,YAAIrqC,KAAK,CAAC45C,sBAAV,EAAkC;AAC9B55C,UAAAA,KAAK,CAACyX,MAAN,CAAazX,KAAK,CAAC45C,sBAAnB,EAA2C55C,KAAK,CAAC45C,sBAAN,CAA6B7nD,MAA7B,GAAsC,CAAtC,GAA0C,IAA1C,GAAiD,KAA5F;AACH;;AACDiO,QAAAA,KAAK,CAAC45C,sBAAN,GAA+B,IAA/B;AACH;AACJ,KApCD;AAqCH,GAzbD;;AA0bAh6C,EAAAA,OAAO,CAACtO,SAAR,CAAkBooD,2BAAlB,GAAgD,UAAUt0C,IAAV,EAAgB;AAC5DA,IAAAA,IAAI,GAAG;AACH+4B,MAAAA,SAAS,EAAE,KAAKp+B,OAAL,CAAagB,EADrB;AAEHhB,MAAAA,OAAO,EAAExG,aAAa,CAAC6L,IAAI,CAACrF,OAAN,CAAb,KAAgC/I,SAAhC,GAA4C;AAAE6M,QAAAA,SAAS,EAAExN,iBAAiB,CAAC+O,IAAI,CAACrF,OAAN;AAA9B,OAA5C,GACH;AAAE0C,QAAAA,IAAI,EAAEpM,iBAAiB,CAAC+O,IAAI,CAACrF,OAAN;AAAzB;AAHH,KAAP;AAKA,WAAOqF,IAAP;AACH,GAPD;;AAQAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkB4nD,gBAAlB,GAAqC,UAAUx0C,GAAV,EAAe;AAChD,QAAK,KAAKmC,YAAL,CAAkB,sBAAlB,KAA6C,KAAKA,YAAL,CAAkB,WAAlB,CAAlD,EAAmF;AAC/E,UAAIsV,MAAM,GAAG,KAAKtV,YAAL,CAAkB,sBAAlB,KAA6C,KAAKA,YAAL,CAAkB,WAAlB,CAA1D,CAD+E,CAE/E;;AACAnC,MAAAA,GAAG,CAAChT,MAAJ,GAAa6H,aAAa,CAAC4iB,MAAD,CAAb,KAA0BnlB,SAA1B,GAAsC;AAAE6M,QAAAA,SAAS,EAAExN,iBAAiB,CAAC8lB,MAAD;AAA9B,OAAtC,GAAiF;AAAE1Z,QAAAA,IAAI,EAAEpM,iBAAiB,CAAC8lB,MAAD;AAAzB,OAA9F;AACH,KAJD,MAKK;AACDzX,MAAAA,GAAG,CAAChT,MAAJ,CAAWysC,SAAX,GAAuB,KAAKp+B,OAAL,CAAagB,EAApC;AACH;AACJ,GATD;;AAUAnB,EAAAA,OAAO,CAACtO,SAAR,CAAkB6nD,kBAAlB,GAAuC,UAAU12C,IAAV,EAAgB;AACnD,QAAIA,IAAJ,EAAU;AACN,UAAIA,IAAI,CAACQ,QAAT,EAAmB;AACf,aAAK,IAAI7Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACQ,QAAL,CAAclR,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C,eAAK+mD,kBAAL,CAAwB,KAAKt0C,SAAL,CAAepC,IAAI,CAACQ,QAAL,CAAc7Q,CAAd,CAAf,CAAxB;AACH;AACJ;;AACD,UAAImV,KAAK,GAAG,KAAKvE,KAAL,CAAW0Z,OAAX,CAAmBja,IAAnB,CAAZ;;AACA,UAAI8E,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,aAAKvE,KAAL,CAAWsjB,MAAX,CAAkB/e,KAAlB,EAAyB,CAAzB;AACH;AACJ;AACJ,GAZD;;AAaA3H,EAAAA,OAAO,CAACtO,SAAR,CAAkBinD,sBAAlB,GAA2C,UAAUnzC,IAAV,EAAgB;AACvDA,IAAAA,IAAI,GAAG;AACH;AACAkZ,MAAAA,MAAM,EAAEjoB,iBAAiB,CAAC+O,IAAI,CAACkZ,MAAN,CAFtB;AAEqCve,MAAAA,OAAO,EAAExG,aAAa,CAAC6L,IAAI,CAACrF,OAAN,CAAb,KAAgC/I,SAAhC,GAA4C;AAAE6M,QAAAA,SAAS,EAAExN,iBAAiB,CAAC+O,IAAI,CAACrF,OAAN;AAA9B,OAA5C,GAC3C;AAAE0C,QAAAA,IAAI,EAAEpM,iBAAiB,CAAC+O,IAAI,CAACrF,OAAN;AAAzB,OAHH;AAIH8mB,MAAAA,MAAM,EAAEzhB,IAAI,CAACyhB,MAJV;AAIkBsX,MAAAA,SAAS,EAAE,KAAKp+B,OAAL,CAAagB;AAJ1C,KAAP;AAMA,WAAOqE,IAAP;AACH,GARD;;AASAxF,EAAAA,OAAO,CAACtO,SAAR,CAAkBunD,SAAlB,GAA8B,UAAUp2C,IAAV,EAAgBmhB,UAAhB,EAA4B;AACtD,QAAIvK,KAAJ;AACA,QAAI2+B,OAAJ;;AACA,SAAK,IAAI5lD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACQ,QAAL,CAAclR,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3CinB,MAAAA,KAAK,GAAGuK,UAAU,CAACnhB,IAAI,CAACQ,QAAL,CAAc7Q,CAAd,CAAD,CAAlB;;AACA,UAAIinB,KAAJ,EAAW;AACP,YAAIA,KAAK,CAACpW,QAAV,EAAoB;AAChB,eAAK41C,SAAL,CAAex/B,KAAf,EAAsBuK,UAAtB;AACH;;AACDvK,QAAAA,KAAK,CAACtY,EAAN,GAAWsY,KAAK,CAACtY,EAAN,GAAWvD,QAAQ,EAA9B;AACAomB,QAAAA,UAAU,CAACvK,KAAK,CAACtY,EAAP,CAAV,GAAuBsY,KAAvB;AACA5W,QAAAA,IAAI,CAACQ,QAAL,CAAc7Q,CAAd,IAAmBinB,KAAK,CAACtY,EAAzB;AACAi3C,QAAAA,OAAO,GAAG,IAAI7hD,IAAJ,CAAS,IAAT,EAAe,OAAf,EAAwBkjB,KAAxB,EAA+B,IAA/B,CAAV;AACA,aAAKiO,UAAL,CAAgB0wB,OAAhB,EAAyB72C,SAAzB,EAAoCA,SAApC,EAA+C,IAA/C,EARO,CASP;AACH;AACJ;AACJ,GAjBD;;AAkBAvB,EAAAA,OAAO,CAACtO,SAAR,CAAkB8zB,WAAlB,GAAgC,UAAU3iB,IAAV,EAAgBo0C,UAAhB,EAA4BjzB,UAA5B,EAAwC;AACpE,QAAIzc,IAAJ;;AACA,SAAK,IAAI/U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACQ,QAAL,CAAclR,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C+U,MAAAA,IAAI,GAAIyc,UAAU,CAACnhB,IAAI,CAACQ,QAAL,CAAc7Q,CAAd,CAAD,CAAlB;;AACA,UAAI+U,IAAJ,EAAU;AACN,YAAIA,IAAI,CAAClE,QAAT,EAAmB;AACf4zC,UAAAA,UAAU,GAAG,KAAKzxB,WAAL,CAAiBje,IAAjB,EAAuB0vC,UAAvB,EAAmCjzB,UAAnC,CAAb;AACH;;AACDizB,QAAAA,UAAU,CAAC1vC,IAAI,CAACpG,EAAN,CAAV,GAAsBtD,WAAW,CAAC0J,IAAD,CAAjC;AACH;AACJ;;AACD,WAAO0vC,UAAP;AACH,GAZD;;AAaAj3C,EAAAA,OAAO,CAACtO,SAAR,CAAkB+nD,aAAlB,GAAkC,UAAU52C,IAAV,EAAgB;AAC9C,QAAI0E,IAAJ;;AACA,SAAK,IAAI/U,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqQ,IAAI,CAACQ,QAAL,CAAclR,MAAlC,EAA0CK,CAAC,EAA3C,EAA+C;AAC3C+U,MAAAA,IAAI,GAAI,KAAKtC,SAAL,CAAepC,IAAI,CAACQ,QAAL,CAAc7Q,CAAd,CAAf,CAAR;;AACA,UAAI+U,IAAJ,EAAU;AACN,YAAIA,IAAI,CAAClE,QAAT,EAAmB;AACf,eAAKo2C,aAAL,CAAmBlyC,IAAnB;AACH;;AACD,aAAK9B,GAAL,CAAS8B,IAAT,EAAe,IAAf;AACH;AACJ;AACJ,GAXD;;AAYAvH,EAAAA,OAAO,CAACtO,SAAR,CAAkBu3B,QAAlB,GAA6B,UAAUpmB,IAAV,EAAgB;AACzC,QAAIuT,YAAY,GAAG,KAAKjG,cAAL,CAAoBwZ,cAApB,CAAmC9mB,IAAI,CAAC1B,EAAxC,CAAnB;AACA,QAAIwG,KAAK,GAAGyO,YAAY,CAAC2E,MAAzB;AACA,QAAI5oB,MAAM,GAAGikB,YAAY,CAAC0B,OAAb,CAAqB3lB,MAAlC;AACA,QAAIqoB,WAAJ;;AACA,SAAK,IAAIhoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;AACzC,UAAImV,KAAK,KAAK,KAAKwO,MAAL,CAAY3jB,CAAZ,EAAeuoB,MAA7B,EAAqC;AACjCP,QAAAA,WAAW,GAAG,KAAKrE,MAAL,CAAY3jB,CAAC,GAAG,CAAhB,CAAd;AACH;AACJ;;AACD,QAAIL,MAAM,GAAG,CAAb,EAAgB;AACZ,WAAKge,cAAL,CAAoB+Y,WAApB,CAAgCrmB,IAAI,CAAC1B,EAArC,EAAyCiV,YAAY,CAAC0B,OAAb,CAAqB3lB,MAAM,GAAG,CAA9B,CAAzC;AACA,WAAKge,cAAL,CAAoB+Y,WAApB,CAAgC9S,YAAY,CAAC0B,OAAb,CAAqB3lB,MAAM,GAAG,CAA9B,CAAhC,EAAkE0Q,IAAI,CAAC1B,EAAvE;AACH,KAHD,MAIK;AACD,UAAIqZ,WAAJ,EAAiB;AACb,YAAIy/B,YAAY,GAAG,KAAK9pC,cAAL,CAAoB6J,QAApB,CAA6B,KAAKjK,gBAAL,CAAsByK,WAAW,CAACO,MAAlC,CAA7B,EAAwEjD,OAAxE,CAAgF,CAAhF,CAAnB;;AACA,YAAImiC,YAAJ,EAAkB;AACd,eAAK9pC,cAAL,CAAoB+Y,WAApB,CAAgCrmB,IAAI,CAAC1B,EAArC,EAAyC84C,YAAzC;AACA,eAAK9pC,cAAL,CAAoB+pC,qBAApB,CAA0Cr3C,IAAI,CAAC1B,EAA/C,EAAmD84C,YAAnD;AACH,SAHD,MAIK;AACD,eAAKE,aAAL,CAAmBt3C,IAAnB,EAAyBuT,YAAzB;AACH;AACJ,OATD,MAUK;AACD,aAAK+jC,aAAL,CAAmBt3C,IAAnB,EAAyBuT,YAAzB;AACH;AACJ;AACJ,GA7BD;AA8BA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpW,EAAAA,OAAO,CAACtO,SAAR,CAAkByoD,aAAlB,GAAkC,UAAUt3C,IAAV,EAAgBuT,YAAhB,EAA8B;AAC5D,QAAIoE,WAAJ;;AACA,SAAK,IAAIhoB,CAAC,GAAG,KAAK2jB,MAAL,CAAYhkB,MAAZ,GAAqB,CAAlC,EAAqCK,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAC9CgoB,MAAAA,WAAW,GAAG,KAAKrE,MAAL,CAAY3jB,CAAZ,CAAd;;AACA,UAAI4jB,YAAY,CAACjV,EAAb,KAAoBqZ,WAAW,CAACrZ,EAApC,EAAwC;AACpC;AACA,YAAI84C,YAAY,GAAG,KAAK9pC,cAAL,CAAoB6J,QAApB,CAA6B,KAAKjK,gBAAL,CAAsByK,WAAW,CAACO,MAAlC,CAA7B,EAAwEjD,OAAxE,CAAgF0C,WAAW,CAAC1C,OAAZ,CAAoB3lB,MAApB,GAA6B,CAA7G,CAAnB;;AACA,YAAI8nD,YAAJ,EAAkB;AACd,eAAK9pC,cAAL,CAAoB+Y,WAApB,CAAgCrmB,IAAI,CAAC1B,EAArC,EAAyC84C,YAAzC;AACA,eAAK9pC,cAAL,CAAoB+Y,WAApB,CAAgC+wB,YAAhC,EAA8Cp3C,IAAI,CAAC1B,EAAnD;AACA;AACH;AACJ;AACJ;AACJ,GAdD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,OAAO,CAACtO,SAAR,CAAkB0oD,UAAlB,GAA+B,UAAUv3C,IAAV,EAAgB;AAC3C,WAAO,KAAKw3C,aAAL,CAAmBx3C,IAAnB,EAAyB,QAAzB,EAAmC,KAAKy3C,iBAAL,CAAuB,KAAvB,CAAnC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIt6C,EAAAA,OAAO,CAACtO,SAAR,CAAkB6oD,UAAlB,GAA+B,UAAU13C,IAAV,EAAgB;AAC3C,WAAO,KAAKw3C,aAAL,CAAmBx3C,IAAnB,EAAyB,QAAzB,EAAmC,KAAKy3C,iBAAL,CAAuB,QAAvB,CAAnC,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIt6C,EAAAA,OAAO,CAACtO,SAAR,CAAkB8oD,UAAlB,GAA+B,UAAU33C,IAAV,EAAgB;AAC3C,WAAO,KAAKw3C,aAAL,CAAmBx3C,IAAnB,EAAyB,SAAzB,EAAoC,KAAK43C,eAAL,EAApC,CAAP;AACH,GAFD;;AAGAz6C,EAAAA,OAAO,CAACtO,SAAR,CAAkB2oD,aAAlB,GAAkC,UAAUx3C,IAAV,EAAgB63C,IAAhB,EAAsBC,kBAAtB,EAA0C;AACxE,QAAI93C,IAAJ,EAAU;AACN,UAAI8C,IAAI,GAAG,KAAKi1C,YAAL,CAAkB/3C,IAAlB,EAAwBA,IAAI,YAAYzL,SAAhB,GAA4B,KAA5B,GAAoC,IAA5D,CAAX;;AACA,UAAIuO,IAAJ,EAAU;AACN;AACA,YAAIi1B,GAAG,GAAG/3B,IAAI,YAAYzL,SAAhB,GAA4B,KAAK6L,kBAAL,CAAwB4R,oBAAxB,CAA6C1D,UAA7C,CAAwDupC,IAAxD,CAA5B,GAA4F,KAAKz3C,kBAAL,CAAwBkO,UAAxB,CAAmCupC,IAAnC,CAAtG;AACA,aAAKG,aAAL,CAAmBpmC,IAAI,CAACkR,SAAL,CAAehgB,IAAf,CAAnB,EAAyCi1B,GAAzC;AACH;;AACD,aAAOj1B,IAAP;AACH,KARD,MASK;AACD,UAAI4pC,UAAU,GAAGoL,kBAAjB,CADC,CAED;;AACA,WAAKG,qBAAL,CAA2BvL,UAA3B,EAAuC,KAAKtsC,kBAAL,CAAwBkO,UAAxB,CAAmCupC,IAAnC,CAAvC,EAAiF,KAAKz3C,kBAAL,CAAwB4R,oBAAxB,CAA6C1D,UAA7C,CAAwDupC,IAAxD,CAAjF;AACA,aAAOnL,UAAP;AACH;AACJ,GAhBD;;AAiBAvvC,EAAAA,OAAO,CAACtO,SAAR,CAAkBopD,qBAAlB,GAA0C,UAAUvL,UAAV,EAAsBwL,cAAtB,EAAsCC,mBAAtC,EAA2D;AACjG,QAAIzL,UAAU,CAACnsC,KAAf,EAAsB;AAClB,UAAIuC,IAAI,GAAG,EAAX;AACA,UAAInT,CAAC,GAAG,KAAK,CAAb;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG+8C,UAAU,CAACnsC,KAAX,CAAiBjR,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1CmT,QAAAA,IAAI,CAAC3Q,IAAL,CAAU,KAAK4lD,YAAL,CAAkBrL,UAAU,CAACnsC,KAAX,CAAiB5Q,CAAjB,CAAlB,EAAuC,IAAvC,CAAV;AACH;;AACD,UAAImT,IAAI,IAAIA,IAAI,CAACxT,MAAL,GAAc,CAA1B,EAA6B;AACzB,aAAK0oD,aAAL,CAAmBpmC,IAAI,CAACkR,SAAL,CAAehgB,IAAf,CAAnB,EAAyCo1C,cAAzC;AACH;AACJ;;AACD,QAAIxL,UAAU,CAACzrC,UAAf,EAA2B;AACvB,UAAI6B,IAAI,GAAG,EAAX;AACA,UAAInT,CAAC,GAAG,KAAK,CAAb;;AACA,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG+8C,UAAU,CAACzrC,UAAX,CAAsB3R,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/CmT,QAAAA,IAAI,CAAC3Q,IAAL,CAAU,KAAK4lD,YAAL,CAAkBrL,UAAU,CAACzrC,UAAX,CAAsBtR,CAAtB,CAAlB,EAA4C,KAA5C,CAAV;AACH;;AACD,UAAImT,IAAI,IAAIA,IAAI,CAACxT,MAAL,GAAc,CAA1B,EAA6B;AACzB,aAAK0oD,aAAL,CAAmBpmC,IAAI,CAACkR,SAAL,CAAehgB,IAAf,CAAnB,EAAyCq1C,mBAAzC;AACH;AACJ;AACJ,GArBD;;AAsBAh7C,EAAAA,OAAO,CAACtO,SAAR,CAAkBkpD,YAAlB,GAAiC,UAAUr+B,MAAV,EAAkBkJ,MAAlB,EAA0B;AACvD,QAAIw1B,UAAU,GAAG,EAAjB;AACA,QAAIzoD,CAAJ;AACA,QAAIwoC,MAAM,GAAGvV,MAAM,GAAG,KAAKxiB,kBAAR,GAA6B,KAAKA,kBAAL,CAAwB4R,oBAAxE;;AACA,QAAImmB,MAAM,CAAC75B,EAAX,EAAe;AACX85C,MAAAA,UAAU,CAACjgB,MAAM,CAAC75B,EAAR,CAAV,GAAwBob,MAAM,CAACpb,EAA/B;AACH;;AACD,QAAI65B,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,YAAlC,EAAgD;AAC5C+f,MAAAA,UAAU,CAACjgB,MAAM,CAACC,YAAR,CAAV,GAAkC1e,MAAM,CAACiM,WAAP,CAAmB1M,CAArD;AACAm/B,MAAAA,UAAU,CAACjgB,MAAM,CAACE,YAAR,CAAV,GAAkC3e,MAAM,CAACiM,WAAP,CAAmBn0B,CAArD;AACH;;AACD,QAAI2mC,MAAM,CAACG,YAAP,IAAuBH,MAAM,CAACI,YAAlC,EAAgD;AAC5C6f,MAAAA,UAAU,CAACjgB,MAAM,CAACG,YAAR,CAAV,GAAkC5e,MAAM,CAAC+G,WAAP,CAAmBxH,CAArD;AACAm/B,MAAAA,UAAU,CAACjgB,MAAM,CAACI,YAAR,CAAV,GAAkC7e,MAAM,CAAC+G,WAAP,CAAmBjvB,CAArD;AACH;;AACD,QAAI2mC,MAAM,CAACpU,QAAX,EAAqB;AACjBq0B,MAAAA,UAAU,CAACjgB,MAAM,CAACpU,QAAR,CAAV,GAA8BrK,MAAM,CAACqK,QAArC;AACH;;AACD,QAAIoU,MAAM,CAACnU,QAAX,EAAqB;AACjBo0B,MAAAA,UAAU,CAACjgB,MAAM,CAACnU,QAAR,CAAV,GAA8BtK,MAAM,CAACsK,QAArC;AACH;;AACD,QAAImU,MAAM,CAAC7pB,UAAP,IAAqB6pB,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAvC,IAAuDL,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+BlpC,MAA/B,GAAwC,CAAnG,EAAsG;AAClG,WAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwoC,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+BlpC,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AACxDyoD,QAAAA,UAAU,CAACjgB,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+B7oC,CAA/B,CAAD,CAAV,GAAgD+pB,MAAM,CAACye,MAAM,CAAC7pB,UAAP,CAAkBkqB,YAAlB,CAA+B7oC,CAA/B,CAAD,CAAtD;AACH;AACJ;;AACD,WAAOyoD,UAAP;AACH,GA3BD;;AA4BAj7C,EAAAA,OAAO,CAACtO,SAAR,CAAkB4oD,iBAAlB,GAAsC,UAAU7yB,MAAV,EAAkB;AACpD,QAAIrkB,KAAK,GAAG,EAAZ;AACA,QAAIU,UAAU,GAAG,EAAjB,CAFoD,CAGpD;;AACA,SAAK,IAAIo3C,MAAT,IAAmB,KAAKj2C,SAAxB,EAAmC;AAC/B,UAAIpC,IAAI,GAAG,KAAKoC,SAAL,CAAei2C,MAAf,CAAX;;AACA,UAAIr4C,IAAI,CAAC4kB,MAAL,KAAgBA,MAApB,EAA4B;AACxB,YAAI5kB,IAAI,IAAIA,IAAI,YAAYzL,SAA5B,EAAuC;AACnCyL,UAAAA,IAAI,CAAC4kB,MAAL,GAAc,MAAd;AACA3jB,UAAAA,UAAU,CAAC9O,IAAX,CAAgB6N,IAAhB;AACH,SAHD,MAIK;AACDA,UAAAA,IAAI,CAAC4kB,MAAL,GAAc,MAAd;AACArkB,UAAAA,KAAK,CAACpO,IAAN,CAAW6N,IAAX;AACH;AACJ;AACJ;;AACD,WAAO;AAAEO,MAAAA,KAAK,EAAEA,KAAT;AAAgBU,MAAAA,UAAU,EAAEA;AAA5B,KAAP;AACH,GAlBD;;AAmBA9D,EAAAA,OAAO,CAACtO,SAAR,CAAkB+oD,eAAlB,GAAoC,YAAY;AAC5C,QAAIr3C,KAAK,GAAG,EAAZ;AACA,QAAIU,UAAU,GAAG,EAAjB;AACA,QAAItR,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAK4P,eAAL,CAAqBjQ,MAArC,EAA6CK,CAAC,EAA9C,EAAkD;AAC9C,UAAIqQ,IAAI,GAAG,KAAKT,eAAL,CAAqB5P,CAArB,CAAX;;AACA,UAAIqQ,IAAI,IAAIA,IAAI,CAAC0I,QAAjB,EAA2B;AACvBzH,QAAAA,UAAU,CAAC9O,IAAX,CAAgB6N,IAAhB;AACH,OAFD,MAGK,IAAIA,IAAJ,EAAU;AACXO,QAAAA,KAAK,CAACpO,IAAN,CAAW6N,IAAX;AACH;AACJ;;AACD,SAAKT,eAAL,GAAuB,EAAvB;AACA,WAAO;AAAEgB,MAAAA,KAAK,EAAEA,KAAT;AAAgBU,MAAAA,UAAU,EAAEA;AAA5B,KAAP;AACH,GAfD;;AAgBA9D,EAAAA,OAAO,CAACtO,SAAR,CAAkBmpD,aAAlB,GAAkC,UAAU1nD,KAAV,EAAiBynC,GAAjB,EAAsB;AACpD,QAAItmB,QAAQ,GAAG,IAAI7e,IAAJ,CAASmlC,GAAT,EAAc,MAAd,EAAsB,IAAtB,EAA4B,kBAA5B,CAAf;AACA,QAAIj1B,IAAI,GAAG8O,IAAI,CAACkR,SAAL,CAAelR,IAAI,CAACC,KAAL,CAAWvhB,KAAX,CAAf,CAAX;AACAmhB,IAAAA,QAAQ,CAACM,IAAT,CAAcjP,IAAd,EAAoBjS,IAApB;AACA;;AACA4gB,IAAAA,QAAQ,CAACC,SAAT,GAAqB,UAAU5O,IAAV,EAAgB,CACpC,CADD;AAEA;;AACH,GARD;;AASA3F,EAAAA,OAAO,CAACtO,SAAR,CAAkBypD,cAAlB,GAAmC,UAAU31C,IAAV,EAAgB;AAC/C,QAAI41C,WAAW,GAAG,EAAlB;;AACA,QAAI,KAAK5wC,iBAAT,EAA4B;AACxB,WAAKA,iBAAL,CAAuB4wC,WAAvB,GAAqC,EAArC;;AACA,WAAK,IAAIp1C,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAGT,IAAI,CAAC6E,KAA3B,EAAkCrE,EAAE,GAAGC,EAAE,CAAC9T,MAA1C,EAAkD6T,EAAE,EAApD,EAAwD;AACpD,YAAIkuC,IAAI,GAAGjuC,EAAE,CAACD,EAAD,CAAb;AACA,aAAKwE,iBAAL,CAAuB6wC,WAAvB,CAAmCnH,IAAnC,EAAyC1uC,IAAI,CAACiyC,KAA9C;;AACA,YAAIvD,IAAI,CAAC7pC,KAAL,IAAc6pC,IAAI,CAAC7pC,KAAL,CAAWlY,MAA7B,EAAqC;AACjC,eAAK,IAAIgV,EAAE,GAAG,CAAT,EAAYC,EAAE,GAAG8sC,IAAI,CAAC7pC,KAA3B,EAAkClD,EAAE,GAAGC,EAAE,CAACjV,MAA1C,EAAkDgV,EAAE,EAApD,EAAwD;AACpD,gBAAIm0C,OAAO,GAAGl0C,EAAE,CAACD,EAAD,CAAhB;AACA,iBAAKqD,iBAAL,CAAuB6wC,WAAvB,CAAmCC,OAAnC,EAA4C91C,IAAI,CAACiyC,KAAjD;AACH;AACJ;AACJ;;AACD,aAAO,KAAKjtC,iBAAL,CAAuB4wC,WAA9B;AACH;;AACD,WAAOA,WAAP;AACH,GAjBD;;AAkBAxpD,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,MAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,OAFZ,EAEqB,KAAK,CAF1B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,KAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,MAFZ,EAEoB,KAAK,CAFzB,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,MAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,QAFZ,EAEsB,KAAK,CAF3B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKiH,mBAAL,CADA,CAAD,EAEP4D,OAAO,CAACtO,SAFD,EAEY,qBAFZ,EAEmC,KAAK,CAFxC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAACmD,kBAAkB,CAAC4I,OAApB,CADD,CAAD,EAEPjB,OAAO,CAACtO,SAFD,EAEY,aAFZ,EAE2B,KAAK,CAFhC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC6C,YAAY,CAACkJ,OAAd,CADD,CAAD,EAEPjB,OAAO,CAACtO,SAFD,EAEY,MAFZ,EAEoB,KAAK,CAFzB,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,KAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,aAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKkC,YAAL,CADA,CAAD,EAEP2I,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKmC,aAAL,CADA,CAAD,EAEP0I,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKgB,YAAL,CADA,CAAD,EAEP6J,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKkK,qBAAL,CADA,CAAD,EAEPW,OAAO,CAACtO,SAFD,EAEY,uBAFZ,EAEqC,KAAK,CAF1C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPwD,UAAU,CAAC,EAAD,EAAKmB,IAAL,CADH,CAAD,EAEPyJ,OAAO,CAACtO,SAFD,EAEY,OAFZ,EAEqB,KAAK,CAF1B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPwD,UAAU,CAAC,EAAD,EAAKgC,SAAL,CADH,CAAD,EAEP4I,OAAO,CAACtO,SAFD,EAEY,YAFZ,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,CAAC,EAAD,CADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAK8I,cAAL,CADA,CAAD,EAEP+B,OAAO,CAACtO,SAFD,EAEY,SAFZ,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKiF,UAAL,CADA,CAAD,EAEP4F,OAAO,CAACtO,SAFD,EAEY,oBAFZ,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,SAFZ,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,oBAFZ,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,oBAFZ,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,sBAFZ,EAEoC,KAAK,CAFzC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPwD,UAAU,CAAC,EAAD,EAAKuK,kBAAL,CADH,CAAD,EAEPK,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPsD,QAAQ,EADD,CAAD,EAEP8K,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKyK,eAAL,CADA,CAAD,EAEPI,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKmF,QAAL,CADA,CAAD,EAEP0F,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKiB,cAAL,CADA,CAAD,EAEP4J,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKkF,MAAL,CADA,CAAD,EAEP2F,OAAO,CAACtO,SAFD,EAEY,QAFZ,EAEsB,KAAK,CAF3B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPuD,OAAO,CAAC,EAAD,EAAKgH,cAAL,CADA,CAAD,EAEP6D,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,YAFZ,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,WAFZ,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,WAFZ,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,UAFZ,EAEwB,KAAK,CAF7B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,OAFZ,EAEqB,KAAK,CAF1B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,eAFZ,EAE6B,KAAK,CAFlC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,oBAFZ,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,aAFZ,EAE2B,KAAK,CAFhC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,UAFZ,EAEwB,KAAK,CAF7B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,YAFZ,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,kBAFZ,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,OAFZ,EAEqB,KAAK,CAF1B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,SAFZ,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,cAFZ,EAE4B,KAAK,CAFjC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,kBAFZ,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,sBAFZ,EAEoC,KAAK,CAFzC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,uBAFZ,EAEqC,KAAK,CAF1C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,qBAFZ,EAEmC,KAAK,CAFxC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,wBAFZ,EAEsC,KAAK,CAF3C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,wBAFZ,EAEsC,KAAK,CAF3C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,yBAFZ,EAEuC,KAAK,CAF5C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,aAFZ,EAE2B,KAAK,CAFhC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,mBAFZ,EAEiC,KAAK,CAFtC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,SAFZ,EAEuB,KAAK,CAF5B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,YAFZ,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,YAFZ,EAE0B,KAAK,CAF/B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,WAFZ,EAEyB,KAAK,CAF9B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,iBAFZ,EAE+B,KAAK,CAFpC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,6BAFZ,EAE2C,KAAK,CAFhD,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,kBAFZ,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,gBAFZ,EAE8B,KAAK,CAFnC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPwD,UAAU,CAAC,EAAD,EAAKiJ,KAAL,CADH,CAAD,EAEP2B,OAAO,CAACtO,SAFD,EAEY,QAFZ,EAEsB,KAAK,CAF3B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPiE,KAAK,EADE,CAAD,EAEPmK,OAAO,CAACtO,SAFD,EAEY,MAFZ,EAEoB,KAAK,CAFzB,CAAV;;AAGA,SAAOsO,OAAP;AACH,CA5tT4B,CA4tT3B/K,SA5tT2B,CAA7B;;AA6tTA,SAAS+K,OAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable prefer-spread */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-returns */\nimport { Component, Property, Complex, Collection, EventHandler, L10n, Droppable, remove, Ajax, isBlazor } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Browser, Event } from '@syncfusion/ej2-base';\nimport { updateBlazorTemplate, resetBlazorTemplate } from '@syncfusion/ej2-base';\nimport { CanvasRenderer } from './rendering/canvas-renderer';\nimport { SvgRenderer } from './rendering/svg-renderer';\nimport { DiagramRenderer } from './rendering/renderer';\nimport { PageSettings, ScrollSettings } from './diagram/page-settings';\nimport { ServiceLocator } from './objects/service';\nimport { Container } from './core/containers/container';\nimport { Node, BpmnShape } from './objects/node';\nimport { cloneBlazorObject, cloneSelectedObjects, findObjectIndex } from './utility/diagram-util';\nimport { checkBrowserInfo } from './utility/diagram-util';\nimport { updateDefaultValues, getCollectionChangeEventArguements } from './utility/diagram-util';\nimport { flipConnector, updatePortEdges, alignElement, setConnectorDefaults, getPreviewSize } from './utility/diagram-util';\nimport { Connector } from './objects/connector';\nimport { SnapSettings } from './diagram/grid-lines';\nimport { RulerSettings } from './diagram/ruler-settings';\nimport { removeRulerElements, updateRuler, getRulerSize } from './ruler/ruler';\nimport { renderRuler, renderOverlapElement } from './ruler/ruler';\nimport { Size } from './primitives/size';\nimport { Keys, KeyModifiers, DiagramTools, AnnotationConstraints, NodeConstraints, ScrollActions } from './enum/enum';\nimport { RendererAction } from './enum/enum';\nimport { BlazorAction } from './enum/enum';\nimport { DiagramConstraints, SelectorConstraints, PortVisibility, DiagramEvent } from './enum/enum';\nimport { DiagramAction, ThumbsConstraints } from './enum/enum';\nimport { RealAction, ElementAction, PortConstraints } from './enum/enum';\nimport { PathElement } from './core/elements/path-element';\nimport { TextElement } from './core/elements/text-element';\nimport { updateStyle, removeItem, updateConnector, updateShape, setUMLActivityDefaults, findNodeByName } from './utility/diagram-util';\nimport { setSwimLaneDefaults } from './utility/diagram-util';\nimport { checkPortRestriction, serialize, deserialize, updateHyperlink, getObjectType, removeGradient } from './utility/diagram-util';\nimport { Rect } from './primitives/rect';\nimport { getPortShape } from './objects/dictionary/common';\nimport { ShapeAnnotation, PathAnnotation } from './objects/annotation';\nimport { Canvas } from './core/containers/canvas';\nimport { GridPanel, ColumnDefinition } from './core/containers/grid';\nimport { DataSource } from './diagram/data-source';\nimport { Layout } from './layout/layout-base';\nimport { Selector, Text } from './objects/node';\nimport { DiagramEventHandler } from './interaction/event-handlers';\nimport { CommandHandler } from './interaction/command-manager';\nimport { DiagramScroller } from './interaction/scroller';\nimport { isSelected } from './interaction/actions';\nimport { SpatialSearch } from './interaction/spatial-search/spatial-search';\nimport { setAttributeSvg, setAttributeHtml, measureHtmlText, removeElement, createMeasureElements, getDomIndex } from './utility/dom-util';\nimport { getDiagramElement, getScrollerWidth, getHTMLLayer, createUserHandleTemplates } from './utility/dom-util';\nimport { getBackgroundLayer, createHtmlElement, createSvgElement, getNativeLayerSvg, getUserHandleLayer } from './utility/dom-util';\nimport { getPortLayerSvg, getDiagramLayerSvg, applyStyleAgainstCsp } from './utility/dom-util';\nimport { getAdornerLayerSvg, getSelectorElement, getGridLayerSvg, getBackgroundLayerSvg } from './utility/dom-util';\nimport { CommandManager, ContextMenuSettings } from './diagram/keyboard-commands';\nimport { canDelete, canInConnect, canOutConnect, canRotate, canVitualize, canDrawThumbs } from './utility/constraints-util';\nimport { canPortInConnect, canPortOutConnect } from './utility/constraints-util';\nimport { canResize, canSingleSelect, canZoomPan, canZoomTextEdit, canMultiSelect } from './utility/constraints-util';\nimport { canDragSourceEnd, canDragTargetEnd, canDragSegmentThumb, enableReadOnly, canMove } from './utility/constraints-util';\nimport { findAnnotation, arrangeChild, getInOutConnectPorts, removeChildNodes, canMeasureDecoratorPath } from './utility/diagram-util';\nimport { randomId, cloneObject, extendObject, getFunction, getBounds } from './utility/base-util';\nimport { DiagramTooltip, initTooltip } from './objects/tooltip';\nimport { PointPort } from './objects/port';\nimport { canShadow } from './utility/constraints-util';\nimport { Layer } from './diagram/layer';\nimport { DiagramNativeElement } from './core/elements/native-element';\nimport { DiagramHtmlElement } from './core/elements/html-element';\nimport { canAllowDrop } from './utility/constraints-util';\nimport { checkParentAsContainer, addChildToContainer, updateLaneBoundsAfterAddChild } from './interaction/container-interaction';\nimport { getConnectors, updateConnectorsProperties, phaseDefine } from './utility/swim-lane-util';\nimport { swimLaneMeasureAndArrange } from './utility/swim-lane-util';\nimport { arrangeChildNodesInSwimLane, updateHeaderMaxWidth, updatePhaseMaxWidth } from './utility/swim-lane-util';\nimport { addLane, addPhase } from './utility/swim-lane-util';\nimport { SerializationSettings } from './diagram/serialization-settings';\nimport { removeSwimLane, removeLane, removePhase, removeLaneChildNode } from './utility/swim-lane-util';\nimport { RowDefinition } from './core/containers/grid';\nimport { CustomCursorAction } from './diagram/custom-cursor';\nimport { DiagramSettings } from '../diagram/diagram-settings';\nimport { StackPanel } from './core/containers/stack-panel';\nimport { ConnectorFixedUserHandle, NodeFixedUserHandle } from './objects/fixed-user-handle';\n/**\n * Represents the Diagram control\n * ```html\n * <div id='diagram'/>\n * ```\n * ```typescript\n * let diagram: Diagram = new Diagram({\n * width:'1000px', height:'500px' });\n * diagram.appendTo('#diagram');\n * ```\n */\nvar Diagram = /** @class */ (function (_super) {\n    __extends(Diagram, _super);\n    /**\n     * Constructor for creating the widget\n     */\n    function Diagram(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        /** @private */\n        _this.version = 17.1;\n        /** @private */\n        _this.checkMenu = false;\n        /** @private */\n        _this.isServerUpdate = false;\n        /** @private */\n        _this.oldNodeObjects = [];\n        /** @private */\n        _this.oldDiagramObject = {};\n        /** @private */\n        _this.oldConnectorObjects = [];\n        /** @private */\n        _this.canEnableBlazorObject = false;\n        /** @private */\n        _this.connectorTable = {};\n        /** @private */\n        _this.groupTable = {};\n        /** @private */\n        _this.scrollActions = ScrollActions.None;\n        /** @private */\n        _this.blazorActions = BlazorAction.Default;\n        /** @private */\n        _this.activeLabel = { id: '', parentId: '', isGroup: false, text: undefined };\n        /** @private */\n        _this.textEditing = false;\n        /** @private */\n        _this.isTriggerEvent = false;\n        /** @private */\n        _this.preventNodesUpdate = false;\n        /** @private */\n        _this.preventConnectorsUpdate = false;\n        /** @private */\n        _this.callBlazorModel = true;\n        /** @private */\n        _this.selectionConnectorsList = [];\n        /** @private */\n        _this.deleteVirtualObject = false;\n        _this.canLayout = true;\n        _this.changedConnectorCollection = [];\n        _this.changedNodesCollection = [];\n        _this.previousNodeCollection = [];\n        _this.previousConnectorCollection = [];\n        _this.crudDeleteNodes = [];\n        // Group update to server when BlazorAction is isGroupAction;\n        _this.blazorAddorRemoveCollection = [];\n        _this.blazorRemoveIndexCollection = [];\n        _this.diagramid = 88123;\n        /** @private */\n        _this.selectedObject = { helperObject: undefined, actualObject: undefined };\n        _this.renderTimer = null;\n        var child;\n        var node;\n        var blazor = 'Blazor';\n        var canCloneObject = isBlazor() && window && window[blazor] && !_this.dataSourceSettings.dataSource;\n        _this.ignoreCollectionWatch = true;\n        for (var i = 0; options && options.nodes && i < options.nodes.length; i++) {\n            child = options.nodes[i];\n            node = _this.nodes[i];\n            if (child.children && child.children.length > 0) {\n                if (!child.style || !child.style.fill) {\n                    node.style.fill = 'transparent';\n                }\n                if (!child.style || !child.style.strokeColor) {\n                    node.style.strokeColor = 'transparent';\n                }\n            }\n            if (child.shape && child.shape.type === 'UmlActivity') {\n                setUMLActivityDefaults(child, node);\n            }\n            if (child.shape && child.shape.type === 'SwimLane') {\n                setSwimLaneDefaults(child, node);\n            }\n            if (canCloneObject) {\n                _this.previousNodeCollection.push(cloneObject(node, undefined, undefined, true));\n            }\n            if (_this.nodeDefaults) {\n                updateDefaultValues(node, child, _this.nodeDefaults);\n            }\n            _this.updateAnnotationText(node.annotations);\n        }\n        if (options && options.connectors) {\n            for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n                child = options.connectors[i];\n                node = _this.connectors[i];\n                if (canCloneObject) {\n                    _this.previousConnectorCollection.push(cloneObject(node, undefined, undefined, true));\n                }\n                if (_this.connectorDefaults) {\n                    updateDefaultValues(node, child, _this.connectorDefaults);\n                }\n                _this.updateAnnotationText(node.annotations);\n            }\n        }\n        for (var i = 0; options && options.connectors && i < options.connectors.length; i++) {\n            var defaultConnector = options.connectors[i];\n            var connector = _this.connectors[i];\n            if (defaultConnector.shape && defaultConnector.shape.type !== 'None') {\n                setConnectorDefaults(defaultConnector, connector);\n            }\n            if (isBlazor()) {\n                var defaultPropChanges = cloneObject(_this.bulkChanges);\n                _this.enableServerDataBinding(true);\n                _this.protectPropertyChange(true);\n                var keys = Object.keys(defaultPropChanges);\n                for (var i_1 = 0; i_1 < keys.length; i_1++) {\n                    var key = keys[i_1];\n                    var split = key.split('-');\n                    if (split && split[0]) {\n                        if (split[0] === 'nodes') {\n                            defaultPropChanges[key].sfIndex = Number(split[1]);\n                            _this.changedNodesCollection.push(defaultPropChanges[key]);\n                        }\n                        if (split[0] === 'connectors') {\n                            defaultPropChanges[key].sfIndex = Number(split[1]);\n                            _this.changedConnectorCollection.push(defaultPropChanges[key]);\n                        }\n                    }\n                }\n            }\n        }\n        return _this;\n    }\n    Diagram.prototype.updateAnnotationText = function (annotations) {\n        if (isBlazor() && annotations.length > 0) {\n            for (var i = 0; annotations && i < annotations.length; i++) {\n                var label = annotations[i];\n                label.content = label.content.split('\\\\n').join('\\n');\n            }\n        }\n    };\n    Diagram.prototype.callFromServer = function (arg) {\n        var methodName = 'methodName';\n        var mId = 'id';\n        if (arg[methodName] === 'getParentID') {\n            var id = arg[mId];\n            return this.nameTable[id].parentId;\n        }\n        else if (arg[methodName] === 'getEdges') {\n            var outEdge = 'outEdge';\n            var isOutEdge = arg[outEdge];\n            var id = arg[mId];\n            if (isOutEdge) {\n                return this.nameTable[id].outEdges;\n            }\n            else {\n                return this.nameTable[id].inEdges;\n            }\n        }\n        else if (arg[methodName] === 'updateDiagramObjects') {\n            var obj = 'obj';\n            var isAdding = 'IsAdding';\n            var args = arg[obj];\n            this.isServerUpdate = true;\n            if (arg[isAdding]) {\n                var add = 'add';\n                this[add].apply(this, args);\n            }\n            else {\n                var remove_1 = 'remove';\n                this[remove_1].apply(this, args);\n            }\n            this.isServerUpdate = false;\n        }\n        else if (arg[methodName] === 'invokeLoadDiagramMethod') {\n            var data = 'data';\n            this.loadDiagram(arg[data]);\n        }\n    };\n    Diagram.prototype.clearCollection = function (isConnector) {\n        var collection = [];\n        var obj;\n        for (var _i = 0, _a = Object.keys(this.nameTable); _i < _a.length; _i++) {\n            var key = _a[_i];\n            obj = this.nameTable[key];\n            if (obj && ((isConnector && obj instanceof Connector) || (!isConnector && obj instanceof Node))) {\n                collection.push(obj);\n            }\n        }\n        this.clearObjects(collection);\n    };\n    /**\n     * Updates the diagram control when the objects are changed\n     *\n     * @param {DiagramModel} newProp - Lists the new values of the changed properties\n     * @param {DiagramModel} oldProp - Lists the old values of the changed properties\n     */\n    /* tslint:disable */\n    Diagram.prototype.onPropertyChanged = function (newProp, oldProp) {\n        // Model Changed\n        var newValue;\n        var oldValue;\n        var isPropertyChanged = true;\n        var refreshLayout = false;\n        var refereshColelction = false;\n        if (this.diagramActions & DiagramAction.Render) {\n            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n                var prop = _a[_i];\n                switch (prop) {\n                    case 'width':\n                    case 'height':\n                        this.element.style.width = this.getSizeValue(this.width);\n                        this.element.style.height = this.getSizeValue(this.height);\n                        this.eventHandler.updateViewPortSize(this.element);\n                        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n                            var view = _c[_b];\n                            var temp = this.views[view];\n                            if (!(temp instanceof Diagram)) {\n                                temp.updateView(temp);\n                            }\n                        }\n                        break;\n                    case 'nodes':\n                        if (newProp.nodes.length > 0 && oldProp.nodes.length === 0) {\n                            this.clearCollection();\n                            refereshColelction = true;\n                        }\n                        else {\n                            for (var _d = 0, _e = Object.keys(newProp.nodes); _d < _e.length; _d++) {\n                                var key = _e[_d];\n                                var index = Number(key);\n                                var actualObject = this.nodes[index];\n                                var changedProp = newProp.nodes[index];\n                                refreshLayout = refreshLayout || changedProp.excludeFromLayout !== undefined;\n                                this.nodePropertyChange(actualObject, oldProp.nodes[index], changedProp, undefined, true, true);\n                                var args = {\n                                    element: cloneBlazorObject(actualObject), cause: this.diagramActions,\n                                    oldValue: cloneBlazorObject(oldProp.nodes[index]),\n                                    newValue: cloneBlazorObject(newProp.nodes[index])\n                                };\n                                if (isBlazor()) {\n                                    args.element = { node: cloneBlazorObject(actualObject) };\n                                    args.oldValue = { node: cloneBlazorObject(oldValue) };\n                                    args.newValue = { node: cloneBlazorObject(newValue) };\n                                }\n                                this.triggerEvent(DiagramEvent.propertyChange, args);\n                                if (isPropertyChanged) {\n                                    isPropertyChanged = false;\n                                }\n                            }\n                            if (this.mode === 'Canvas') {\n                                this.refreshDiagramLayer();\n                            }\n                        }\n                        break;\n                    case 'connectors':\n                        // eslint-disable-next-line no-case-declarations\n                        var oldObject = void 0;\n                        if (newProp.connectors.length > 0 && oldProp.connectors.length === 0) {\n                            this.clearCollection(true);\n                            refereshColelction = true;\n                        }\n                        else {\n                            for (var _f = 0, _g = Object.keys(newProp.connectors); _f < _g.length; _f++) {\n                                var key = _g[_f];\n                                var index = Number(key);\n                                var actualObject = this.connectors[index];\n                                var changedProp = newProp.connectors[index];\n                                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                                    this.diagramActions |= DiagramAction.DecoratorPropertyChange;\n                                }\n                                this.connectorPropertyChange(actualObject, oldProp.connectors[index], changedProp, true, true);\n                                if (changedProp && (changedProp.sourceDecorator || changedProp.targetDecorator)) {\n                                    this.diagramActions = this.diagramActions & ~DiagramAction.DecoratorPropertyChange;\n                                }\n                                var args = {\n                                    element: cloneBlazorObject(actualObject), cause: this.diagramActions,\n                                    oldValue: cloneBlazorObject(oldProp.connectors[index]),\n                                    newValue: cloneBlazorObject(newProp.connectors[index])\n                                };\n                                if (isBlazor()) {\n                                    args.element = { connector: cloneBlazorObject(actualObject) };\n                                    args.oldValue = { connector: cloneBlazorObject(oldValue) };\n                                    args.newValue = { connector: cloneBlazorObject(newValue) };\n                                }\n                                this.triggerEvent(DiagramEvent.propertyChange, args);\n                                if (actualObject && actualObject.parentId && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier') {\n                                    this.updateConnectorEdges(this.nameTable[actualObject.parentId] || actualObject);\n                                }\n                                if (isPropertyChanged) {\n                                    isPropertyChanged = false;\n                                }\n                            }\n                            this.updateBridging();\n                            if (this.mode === 'Canvas') {\n                                this.refreshDiagramLayer();\n                            }\n                        }\n                        break;\n                    case 'bridgeDirection':\n                        this.updateBridging();\n                        if (this.mode === 'Canvas') {\n                            this.refreshDiagramLayer();\n                        }\n                        break;\n                    case 'backgroundColor':\n                        this.intOffPageBackground();\n                        break;\n                    case 'pageSettings':\n                        this.validatePageSize();\n                        this.updatePage();\n                        break;\n                    case 'selectedItems':\n                        if (newProp.selectedItems.userHandles && this.selectedItems.wrapper && this.selectedItems.userHandles) {\n                            if (this.selectedItems.userHandles.length > 0) {\n                                this.renderSelector(true);\n                                break;\n                            }\n                        }\n                        if (newProp.selectedItems.constraints) {\n                            this.renderSelector(true);\n                            break;\n                        }\n                        break;\n                    case 'snapSettings':\n                        this.updateSnapSettings(newProp);\n                        break;\n                    case 'commandManager':\n                        this.initCommands();\n                        break;\n                    case 'layout':\n                        refreshLayout = true;\n                        break;\n                    case 'dataSourceSettings':\n                        this.clear();\n                        this.initObjects();\n                        if (this.layout.type === 'None') {\n                            refereshColelction = true;\n                        }\n                        else {\n                            refreshLayout = true;\n                        }\n                        break;\n                    case 'tooltip':\n                        initTooltip(this);\n                        break;\n                    case 'rulerSettings':\n                        this.updateRulerSettings(newProp);\n                        break;\n                    case 'layers':\n                        this.updateLayer(newProp);\n                        break;\n                    case 'scrollSettings':\n                        this.scrollActions |= ScrollActions.PropertyChange;\n                        this.updateScrollSettings(newProp);\n                        this.scrollActions &= ~ScrollActions.PropertyChange;\n                        break;\n                    case 'locale':\n                        if (newProp.locale !== oldProp.locale) {\n                            this.realActions |= RealAction.PreventDataInit;\n                            _super.prototype.refresh.call(this);\n                            this.realActions &= ~RealAction.PreventDataInit;\n                        }\n                        break;\n                    case 'contextMenuSettings':\n                        if (newProp.contextMenuSettings.showCustomMenuOnly !== undefined) {\n                            this.contextMenuSettings.showCustomMenuOnly = newProp.contextMenuSettings.showCustomMenuOnly;\n                        }\n                        if (newProp.contextMenuSettings.show !== undefined) {\n                            this.contextMenuSettings.show = newProp.contextMenuSettings.show;\n                        }\n                        if (newProp.contextMenuSettings.items) {\n                            var items = newProp.contextMenuSettings.items;\n                            for (var _h = 0, _j = Object.keys(items); _h < _j.length; _h++) {\n                                var key = _j[_h];\n                                var index = Number(key);\n                                this.contextMenuSettings.items[index] = items[index];\n                            }\n                            if (this.contextMenuModule) {\n                                this.contextMenuModule.refreshItems();\n                            }\n                        }\n                        break;\n                    case 'serializationSettings':\n                        if (newProp.serializationSettings.preventDefaults !== undefined) {\n                            this.serializationSettings.preventDefaults = newProp.serializationSettings.preventDefaults;\n                        }\n                        break;\n                }\n            }\n            if (refreshLayout && !refereshColelction) {\n                if (oldProp.layout && oldProp.layout.connectionPointOrigin === 'DifferentPoint' && newProp.layout.connectionPointOrigin === 'SamePoint'\n                    || (oldProp.layout && newProp.layout && !newProp.layout.enableRouting && oldProp.layout.enableRouting)) {\n                    for (var i = 0; i < this.nodes.length; i++) {\n                        var node = this.nodes[i];\n                        if ((node.ports && node.ports.length > 0)) {\n                            var ports = [];\n                            for (var j = node.ports.length - 1; j >= 0; j--) {\n                                if (node.ports[j].id.split('_')[1] === 'LineDistribution') {\n                                    ports.push(node.ports[j]);\n                                }\n                            }\n                            this.removePorts(node, ports);\n                        }\n                    }\n                    for (var j = 0; j < this.connectors.length; j++) {\n                        var connector = this.connectors[j];\n                        var sourcePortid = connector.sourcePortID;\n                        var targetPortId = connector.targetPortID;\n                        //const oldSegment: OrthogonalSegmentModel = (connector.segments as OrthogonalSegmentModel);\n                        connector.sourcePortID = '';\n                        connector.targetPortID = '';\n                        connector.sourcePortWrapper = undefined;\n                        connector.targetPortWrapper = undefined;\n                        connector.segments = [];\n                        this.connectorPropertyChange(connector, {\n                            sourcePortID: sourcePortid, targetPortID: targetPortId\n                        }, { sourcePortID: '', targetPortID: '' });\n                    }\n                }\n                this.doLayout();\n                this.renderReactTemplates();\n            }\n            if (isPropertyChanged && this.propertyChange) {\n                var args = {\n                    element: cloneBlazorObject(this), cause: this.diagramActions,\n                    oldValue: cloneBlazorObject(oldProp), newValue: cloneBlazorObject(newProp)\n                };\n                if (isBlazor()) {\n                    args.element = { diagram: cloneBlazorObject(this) };\n                    args.oldValue = { diagram: cloneBlazorObject(oldValue) };\n                    args.newValue = { diagram: cloneBlazorObject(newValue) };\n                }\n                this.triggerEvent(DiagramEvent.propertyChange, args);\n            }\n            if (!refereshColelction && (this.canLogChange()) && (this.modelChanged(newProp, oldProp))) {\n                var entry = { type: 'PropertyChanged', undoObject: oldProp, redoObject: newProp, category: 'Internal' };\n                if (this.historyManager) {\n                    this.addHistoryEntry(entry);\n                }\n            }\n            this.resetDiagramActions();\n            if (refereshColelction) {\n                this.initObjects(true);\n                this.refreshDiagramLayer();\n                if (refreshLayout) {\n                    this.doLayout();\n                }\n            }\n            var scrollAlone = ((Object.keys(newProp).length === 1) && newProp.scrollSettings !== undefined);\n            if (!refereshColelction) {\n                for (var _k = 0, _l = this.views; _k < _l.length; _k++) {\n                    var temp = _l[_k];\n                    var view = this.views[temp];\n                    if (!(view instanceof Diagram)) {\n                        if (newProp.scrollSettings && newProp.scrollSettings.currentZoom !== oldProp.scrollSettings.currentZoom) {\n                            view.updateHtmlLayer(view);\n                        }\n                        if (!scrollAlone) {\n                            this.refreshCanvasDiagramLayer(view);\n                        }\n                    }\n                }\n            }\n            this.resetTemplate();\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateSnapSettings = function (newProp) {\n        if (newProp.snapSettings.constraints !== undefined || newProp.snapSettings.horizontalGridlines ||\n            newProp.snapSettings.verticalGridlines || newProp.snapSettings.gridType) {\n            this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        }\n    };\n    Diagram.prototype.updateRulerSettings = function (newProp) {\n        if (newProp.rulerSettings.dynamicGrid !== undefined) {\n            this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        }\n        if (newProp.rulerSettings.showRulers !== undefined) {\n            this.intOffPageBackground();\n            this.scroller.setSize();\n            this.renderRulers();\n        }\n        else if (newProp.rulerSettings.horizontalRuler !== undefined ||\n            newProp.rulerSettings.verticalRuler !== undefined) {\n            if (newProp.rulerSettings.horizontalRuler.thickness !== undefined ||\n                newProp.rulerSettings.verticalRuler.thickness !== undefined) {\n                removeRulerElements(this);\n                this.intOffPageBackground();\n                this.scroller.setSize();\n                this.renderRulers();\n            }\n            else {\n                updateRuler(this);\n            }\n        }\n        this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string}\n     */\n    Diagram.prototype.getPersistData = function () {\n        var keyEntity = ['loaded'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * Initialize nodes, connectors and renderer\n     */\n    Diagram.prototype.preRender = function () {\n        this.initializePrivateVariables();\n        this.isProtectedOnChange = true;\n        this.serviceLocator = new ServiceLocator;\n        this.initializeServices();\n        this.setCulture();\n        var measureWindowElement = 'measureElement';\n        if (window[measureWindowElement]) {\n            window[measureWindowElement] = null;\n        }\n        this.initDiagram();\n        this.initViews();\n        this.unWireEvents();\n        this.wireEvents();\n        this.element.classList.add('e-diagram');\n    };\n    Diagram.prototype.initializePrivateVariables = function () {\n        if (this.element.id === '') {\n            var collection = document.getElementsByClassName('e-diagram').length;\n            this.element.id = 'diagram_' + this.diagramid + '_' + collection;\n        }\n        this.defaultLocale = {\n            Copy: 'Copy',\n            Cut: 'Cut',\n            Paste: 'Paste',\n            Undo: 'Undo',\n            Redo: 'Redo',\n            SelectAll: 'Select All',\n            Grouping: 'Grouping',\n            Group: 'Group',\n            UnGroup: 'Un Group',\n            Order: 'Order',\n            BringToFront: 'Bring To Front',\n            MoveForward: 'Move Forward',\n            SendToBack: 'Send To Back',\n            SendBackward: 'Send Backward'\n        };\n        this.layerZIndex = -1;\n        this.layerZIndexTable = {};\n        this.nameTable = {};\n        this.pathTable = {};\n        this.groupTable = {};\n        this.commands = {};\n        if (!this.isLoading) {\n            this.views = [];\n        }\n        this.commandHandler = new CommandHandler(this);\n        this.eventHandler = new DiagramEventHandler(this, this.commandHandler);\n        this.spatialSearch = new SpatialSearch(this.nameTable);\n        this.scroller = new DiagramScroller(this);\n    };\n    Diagram.prototype.initializeServices = function () {\n        this.serviceLocator.register('localization', this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));\n    };\n    /**\n     * Method to set culture for chart\n     */\n    Diagram.prototype.setCulture = function () {\n        this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    };\n    /* tslint:disable */\n    /**\n     * Renders the diagram control with nodes and connectors\n     */\n    Diagram.prototype.render = function () {\n        if (this.refreshing && this.dataSourceSettings.dataSource && !this.isLoading) {\n            this.nodes = [];\n            this.connectors = [];\n        }\n        this.ignoreCollectionWatch = true;\n        var domTable = 'domTable';\n        window[domTable] = {};\n        var collapsedNode = [];\n        if (isBlazor()) {\n            var changedNodes = [];\n            var changedConnectors = [];\n            for (var i = 0; i < this.changedNodesCollection.length; i++) {\n                changedNodes.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedNodesCollection[i]));\n            }\n            for (var i = 0; i < this.changedConnectorCollection.length; i++) {\n                changedConnectors.push(this.commandHandler.deepDiffer.removeEmptyValues(this.changedConnectorCollection[i]));\n            }\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            var diagramObject = { nodes: changedNodes, connectors: changedConnectors };\n            if (window && window[blazor] && !this.dataSourceSettings.dataSource\n                && (changedNodes.length > 0 || changedConnectors.length > 0)) {\n                var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n        if (this.dataSourceSettings.crudAction.read) {\n            this.renderInitialCrud();\n        }\n        this.initHistory();\n        this.diagramRenderer = new DiagramRenderer(this.element.id, new SvgRenderer(), this.mode === 'SVG');\n        this.initLayers();\n        this.initializeDiagramLayers();\n        this.diagramRenderer.setLayers();\n        this.initObjects(true);\n        var isLayout = false;\n        if (isBlazor() && !this.dataSourceSettings.dataSource && this.layout.type !== 'None') {\n            for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                var obj = _a[_i];\n                this.insertValue(cloneObject(obj), true);\n            }\n            for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n                var obj = _c[_b];\n                this.insertValue(cloneObject(obj), false);\n            }\n            isLayout = true;\n        }\n        var nodes = this.nodes;\n        for (var i = 0; i < nodes.length; i++) {\n            if (!nodes[i].isExpanded) {\n                collapsedNode.push(nodes[i]);\n            }\n        }\n        if (collapsedNode.length) {\n            for (var i = collapsedNode.length - 1; i >= 0; i--) {\n                this.commandHandler.expandNode(collapsedNode[i], this);\n            }\n        }\n        if (this.canLayout) {\n            this.doLayout();\n        }\n        if (isLayout) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        if (this.lineRoutingModule) {\n            var previousConnectorObject = [];\n            var updateConnectorObject = [];\n            var changeConnectors = [];\n            if (isBlazor()) {\n                for (var _d = 0, _e = this.connectors; _d < _e.length; _d++) {\n                    var obj = _e[_d];\n                    previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n                }\n            }\n            this.lineRoutingModule.lineRouting(this);\n            if (isBlazor()) {\n                for (var _f = 0, _g = this.connectors; _f < _g.length; _f++) {\n                    var obj = _g[_f];\n                    updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n                }\n                this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n                if (!(this.blazorActions & BlazorAction.ClearObject)) {\n                    var blazorInterop = 'sfBlazor';\n                    var blazor = 'Blazor';\n                    var diagramObject = { nodes: [], connectors: changeConnectors };\n                    if (window && window[blazor]) {\n                        var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                        window[blazorInterop].updateBlazorProperties(obj, this);\n                    }\n                }\n            }\n        }\n        this.validatePageSize();\n        this.renderPageBreaks();\n        this.diagramRenderer.renderSvgGridlines(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        this.commandHandler.initSelectorWrapper();\n        /**\n         * Used to render context menu\n         */\n        this.notify('initial-load', {});\n        /**\n         * Used to load context menu\n         */\n        this.trigger('load');\n        this.scroller.setSize();\n        this.scroller.updateScrollOffsets();\n        this.refreshDiagramLayer();\n        if (this.scrollSettings.verticalOffset > 0 || this.scrollSettings.horizontalOffset > 0) {\n            this.updateScrollOffset();\n        }\n        /**\n         * Used to end the context menu rendering\n         */\n        if (Browser.isDevice) {\n            this.tool = DiagramTools.ZoomPan | DiagramTools.SingleSelect;\n        }\n        this.notify('initial-end', {});\n        this.isProtectedOnChange = false;\n        this.tooltipObject = initTooltip(this);\n        this.diagramActions = DiagramAction.Render;\n        this.initCommands();\n        var hiddenUserHandleTemplate = document.getElementsByClassName(this.element.id + '_hiddenUserHandleTemplate');\n        createUserHandleTemplates(this.userHandleTemplate, hiddenUserHandleTemplate, this.selectedItems, this.element.id);\n        this.updateTemplate();\n        this.isLoading = false;\n        this.renderComplete();\n        this.updateFitToPage();\n        if (this.refreshing) {\n            this.renderReactTemplates();\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateFitToPage = function () {\n        if (this.pageSettings && this.pageSettings.fitOptions && this.pageSettings.fitOptions.canFit) {\n            this.fitToPage(this.pageSettings.fitOptions);\n        }\n    };\n    Diagram.prototype.updateTemplate = function () {\n        var node;\n        var annotation;\n        var pathAnnotation;\n        for (var i = 0; i < this.nodes.length; i++) {\n            node = this.nodes[i];\n            if (node.shape.type === 'HTML' || node.shape.type === 'Native') {\n                updateBlazorTemplate('diagramsf_node_template', 'NodeTemplate', this, false);\n                break;\n            }\n        }\n        for (var i = 0; i < this.nodes.length; i++) {\n            node = this.nodes[i];\n            annotation = node.annotations[0];\n            if (annotation && annotation.annotationType === 'Template') {\n                updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n                break;\n            }\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            pathAnnotation = this.connectors[i].annotations[0];\n            if (pathAnnotation && pathAnnotation.annotationType === 'Template') {\n                updateBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate', this, false);\n                break;\n            }\n        }\n        for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n            if (this.selectedItems.userHandles[i].template) {\n                updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n                break;\n            }\n        }\n    };\n    Diagram.prototype.resetTemplate = function () {\n        var htmlNode;\n        var templateAnnotation;\n        var path;\n        for (var i = 0; i < this.nodes.length; i++) {\n            htmlNode = this.nodes[i];\n            if (htmlNode.shape.type === 'HTML' && htmlNode.shape.content instanceof HTMLElement) {\n                resetBlazorTemplate('diagramsf_node_template', 'NodeTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.nodes.length; i++) {\n            htmlNode = this.nodes[i];\n            templateAnnotation = htmlNode.annotations[0];\n            if (templateAnnotation && templateAnnotation.annotationType === 'Template'\n                && templateAnnotation.content instanceof HTMLElement) {\n                resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            path = this.connectors[i].annotations[0];\n            if (path && path.annotationType === 'Template' && path.content instanceof HTMLElement) {\n                resetBlazorTemplate('diagramsf_annotation_template', 'AnnotationTemplate');\n                break;\n            }\n        }\n        for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n            if (this.selectedItems.userHandles[i].template) {\n                updateBlazorTemplate('diagramsf_userHandle_template', 'UserHandleTemplate', this, false);\n                break;\n            }\n        }\n    };\n    //Call back function to the node template\n    // private measureNode(node: NodeModel): void {\n    //     if (node.shape.type === 'Native' && isBlazor()) {\n    //         node.wrapper.measure(new Size(node.width, node.height));\n    //         node.wrapper.arrange(node.wrapper.desiredSize);\n    //     }\n    // }\n    Diagram.prototype.renderInitialCrud = function () {\n        /* eslint-disable */\n        var tempObj = this;\n        /* eslint-enable */\n        if (tempObj.dataSourceSettings.crudAction.read) {\n            var callback = new Ajax(tempObj.dataSourceSettings.crudAction.read, 'GET', false);\n            callback.onSuccess = function (data) {\n                if (tempObj.dataSourceSettings.dataManager) {\n                    tempObj.dataSourceSettings.dataManager = JSON.parse(data);\n                }\n                else {\n                    tempObj.dataSourceSettings.dataSource = JSON.parse(data);\n                }\n                tempObj.dataBind();\n            };\n            callback.send().then();\n        }\n        if (tempObj.dataSourceSettings.connectionDataSource.crudAction.read) {\n            var callback = new Ajax(tempObj.dataSourceSettings.connectionDataSource.crudAction.read, 'GET', false);\n            callback.onSuccess = function (data) {\n                tempObj.dataSourceSettings.connectionDataSource.dataManager = JSON.parse(data);\n                tempObj.dataBind();\n            };\n            callback.send().then();\n        }\n    };\n    /**\n     * Returns the module name of the diagram\n     *\n     * @returns {string}  Returns the module name of the diagram\n     */\n    Diagram.prototype.getModuleName = function () {\n        return 'diagram';\n    };\n    /**\n     *\n     * Returns the name of class Diagram\n     * @returns {string}  Returns the module name of the diagram\n     * @private\n     */\n    Diagram.prototype.getClassName = function () {\n        return 'Diagram';\n    };\n    /* tslint:disable */\n    /**\n     * To provide the array of modules needed for control rendering\n     *\n     * @returns {ModuleDeclaration[]} To provide the array of modules needed for control rendering .\\\n     * @private\n     */\n    Diagram.prototype.requiredModules = function () {\n        var modules = [];\n        modules.push({\n            member: 'Bpmn',\n            args: []\n        });\n        modules.push({\n            member: 'Bridging',\n            args: []\n        });\n        modules.push({\n            member: 'ConnectorEditingTool',\n            args: []\n        });\n        if (isBlazor()) {\n            modules.push({\n                member: 'BlazorTooltip',\n                args: []\n            });\n        }\n        if (this.constraints & DiagramConstraints.UndoRedo) {\n            modules.push({\n                member: 'UndoRedo',\n                args: []\n            });\n        }\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' ||\n            this.layout.enableAnimation) {\n            modules.push({\n                member: 'LayoutAnimate',\n                args: []\n            });\n        }\n        if (this.snapSettings.constraints) {\n            modules.push({\n                member: 'Snapping',\n                args: [this]\n            });\n        }\n        modules.push({\n            member: 'PrintandExport',\n            args: [this]\n        });\n        if (this.contextMenuSettings.show) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this, this.serviceLocator]\n            });\n        }\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree') {\n            modules.push({\n                member: 'OrganizationalChart',\n                args: [this]\n            });\n        }\n        if (this.layout.type === 'ComplexHierarchicalTree') {\n            modules.push({\n                member: 'ComplexHierarchicalTree',\n                args: []\n            });\n        }\n        if (this.layout.type === 'MindMap') {\n            modules.push({\n                member: 'MindMapChart',\n                args: []\n            });\n        }\n        if (this.layout.type === 'RadialTree') {\n            modules.push({\n                member: 'RadialTree',\n                args: []\n            });\n        }\n        if (this.layout.type === 'SymmetricalLayout') {\n            modules.push({\n                member: 'SymmetricalLayout',\n                args: []\n            });\n        }\n        if (this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource ||\n            this.dataSourceSettings.crudAction.read || this.dataSourceSettings.connectionDataSource.crudAction.read) {\n            modules.push({\n                member: 'DataBinding',\n                args: []\n            });\n        }\n        if (this.constraints & DiagramConstraints.LineRouting) {\n            modules.push({\n                member: 'LineRouting',\n                args: []\n            });\n        }\n        if ((this.layout && this.layout.connectionPointOrigin === 'DifferentPoint') || (this.layout.arrangement === 'Linear' || (this.layout.enableRouting))) {\n            modules.push({\n                member: 'LineDistribution',\n                args: []\n            });\n        }\n        return modules;\n    };\n    /* tslint:enable */\n    Diagram.prototype.removeUserHandlesTemplate = function () {\n        if (this.selectedItems.userHandles.length) {\n            for (var i = 0; i < this.selectedItems.userHandles.length; i++) {\n                for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                    var elementId = _a[_i];\n                    removeElement(this.selectedItems.userHandles[i].name + '_template_hiddenUserHandle', elementId);\n                }\n            }\n        }\n    };\n    /**\n     *To destroy the diagram\n     *\n     * @returns {void} To destroy the diagram\n     */\n    Diagram.prototype.destroy = function () {\n        clearInterval(this.renderTimer);\n        this.renderTimer = null;\n        if (this.hRuler && this.vRuler) {\n            this.hRuler.destroy();\n            this.vRuler.destroy();\n        }\n        this.tooltipObject.destroy();\n        this.droppable.destroy();\n        this.unWireEvents();\n        this.notify('destroy', {});\n        _super.prototype.destroy.call(this);\n        this.removeUserHandlesTemplate();\n        this.clearTemplate();\n        if (document.getElementById(this.element.id)) {\n            this.element.classList.remove('e-diagram');\n            var tooltipelement = document.getElementsByClassName('e-diagram-tooltip');\n            while (tooltipelement.length > 0) {\n                tooltipelement[0].parentNode.removeChild(tooltipelement[0]);\n            }\n            var content = document.getElementById(this.element.id + 'content');\n            if (content) {\n                this.element.removeChild(content);\n            }\n            var measureWindowElement = 'measureElement';\n            if (window[measureWindowElement]) {\n                window[measureWindowElement].usageCount -= 1;\n                var measureElementCount = 'measureElementCount';\n                window[measureElementCount]--;\n                if (window[measureElementCount] === 0) {\n                    window[measureWindowElement].parentNode.removeChild(window[measureWindowElement]);\n                    window[measureWindowElement] = null;\n                }\n            }\n        }\n        var domTable = 'domTable';\n        window[domTable] = {};\n        for (var i = 0; i < this.layers.length; i++) {\n            var currentLayer = this.layers[i];\n            currentLayer.zIndexTable = {};\n        }\n        this.diagramActions = undefined;\n    };\n    //Wires the mouse events with diagram control\n    Diagram.prototype.wireEvents = function () {\n        var startEvent = Browser.touchStartEvent;\n        var stopEvent = Browser.touchEndEvent;\n        var moveEvent = Browser.touchMoveEvent;\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        var isIE11Pointer = Browser.isPointer;\n        var wheelEvent = Browser.info.name === 'mozilla' ?\n            (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';\n        EventHandler.add(this.diagramCanvas, startEvent, this.eventHandler.mouseDown, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'keydown', this.eventHandler.keyDown, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'keyup', this.eventHandler.keyUp, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, 'scroll', this.eventHandler.scrolled, this.eventHandler);\n        EventHandler.add(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel, this.eventHandler);\n        EventHandler.add(window, 'resize', this.eventHandler.windowResize, this.eventHandler);\n        this.initDroppables();\n    };\n    //Unwires the mouse events from diagram control\n    Diagram.prototype.unWireEvents = function () {\n        var startEvent = Browser.touchStartEvent;\n        var moveEvent = Browser.touchMoveEvent;\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        var isIE11Pointer = Browser.isPointer;\n        var wheelEvent = Browser.info.name === 'mozilla' ?\n            (isIE11Pointer ? 'mousewheel' : 'DOMMouseScroll') : 'mousewheel';\n        var stopEvent = Browser.touchEndEvent;\n        EventHandler.remove(this.diagramCanvas, startEvent, this.eventHandler.mouseDown);\n        EventHandler.remove(this.diagramCanvas, moveEvent, this.eventHandler.mouseMove);\n        EventHandler.remove(this.diagramCanvas, stopEvent, this.eventHandler.mouseUp);\n        EventHandler.remove(this.diagramCanvas, cancelEvent, this.eventHandler.mouseLeave);\n        EventHandler.remove(this.diagramCanvas, 'keydown', this.eventHandler.keyDown);\n        EventHandler.remove(this.diagramCanvas, 'keyup', this.eventHandler.keyUp);\n        EventHandler.remove(this.diagramCanvas, 'dblclick', this.eventHandler.doubleClick);\n        EventHandler.remove(this.diagramCanvas, 'scroll', this.eventHandler.scrolled);\n        EventHandler.remove(this.diagramCanvas, wheelEvent, this.eventHandler.mouseWheel);\n        EventHandler.remove(window, 'resize', this.eventHandler.windowResize);\n    };\n    //public methods - start region\n    /**\n     * Selects the given collection of objects \\\n     *\n     * @returns { void } Selects the given collection of objects .\\\n     * @param {NodeModel | ConnectorModel} objects - Defines the collection of nodes and connectors to be selected\n     * @param {boolean} multipleSelection -Defines whether the existing selection has to be cleared or not\n     *\n     */\n    Diagram.prototype.select = function (objects, multipleSelection) {\n        if (isBlazor()) {\n            for (var i = 0; i < objects.length; i++) {\n                objects[i] = this.nameTable[objects[i].id];\n            }\n            objects = this.nameTable[objects.id] || objects;\n        }\n        if (objects != null) {\n            this.commandHandler.selectObjects(objects, multipleSelection);\n        }\n    };\n    /**\n     *  Selects the all the objects. \\\n     *\n     * @returns { void }  Selects the all the objects. .\\\n     *\n     */\n    Diagram.prototype.selectAll = function () {\n        var selectedItems = [];\n        selectedItems = this.getObjectsOfLayer(this.activeLayer.objects);\n        this.select(selectedItems);\n    };\n    /**\n     * Removes the given object from selection list \\\n     *\n     * @returns { void } Selects the given collection of objects .\\\n     * @param {NodeModel | ConnectorModel} obj -  Removes the given object from selection list\n     *\n     */\n    Diagram.prototype.unSelect = function (obj) {\n        if (isBlazor()) {\n            this.commandHandler.oldSelectedObjects = cloneObject(this.selectedItems);\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj && isSelected(this, obj)) {\n            this.commandHandler.unSelect(obj);\n            this.commandHandler.updateBlazorSelector();\n        }\n    };\n    /**\n     * Removes all elements from the selection list\\\n     *\n     * @returns { void } Removes all elements from the selection list .\\\n     *\n     */\n    Diagram.prototype.clearSelection = function () {\n        this.commandHandler.clearSelection(true);\n    };\n    /**\n     *  Update the diagram clipboard dimension \\\n     *\n     * @returns { void }  Update the diagram clipboard dimension .\\\n     *\n     */\n    Diagram.prototype.updateViewPort = function () {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.eventHandler.updateViewPortSize(this.element);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    Diagram.prototype.cutCommand = function () {\n        this.cut();\n    };\n    /**\n     *  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard \\\n     *\n     * @returns { void }  Removes the selected nodes and connectors from diagram and moves them to diagram clipboard .\\\n     *\n     */\n    Diagram.prototype.cut = function () {\n        this.commandHandler.cut();\n    };\n    /**\n     *   Add a process into the sub-process \\\n     *\n     * @returns { void }  Add a process into the sub-process.\\\n     * @param {NodeModel | ConnectorModel} process - provide the process value.\n     * @param {boolean} parentId - provide the parentId value.\n     * @blazorArgsType process|DiagramNode\n     *\n     */\n    Diagram.prototype.addProcess = function (process, parentId) {\n        if (this.bpmnModule) {\n            this.bpmnModule.addProcess(process, parentId, this);\n        }\n    };\n    /**\n     *  Remove a process from the sub-processs \\\n     *\n     * @returns { void }  Remove a process from the sub-process.\\\n     * @param {string} id - provide the id value.\n     *\n     */\n    Diagram.prototype.removeProcess = function (id) {\n        if (this.bpmnModule) {\n            this.bpmnModule.removeProcess(id, this);\n        }\n    };\n    Diagram.prototype.pasteCommand = function () {\n        this.paste();\n    };\n    /**\n     *  Adds the given objects/ the objects in the diagram clipboard to diagram control \\\n     *\n     * @returns { void }  Remove a process from the sub-process.\\\n     * @param {NodeModel[] | ConnectorModel[]} obj - Defines the objects to be added to diagram\n\n     *\n     */\n    Diagram.prototype.paste = function (obj) {\n        this.commandHandler.paste(obj);\n    };\n    /**\n     *  fit the diagram to the page with respect to mode and region \\\n     *\n     * @returns { void }  fit the diagram to the page with respect to mode and region.\\\n     * @param {IFitOptions} options - provide the options value.\n     *\n     */\n    Diagram.prototype.fitToPage = function (options) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.fitToPage(options);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * bring the specified bounds into the viewport \\\n     *\n     * @returns { void }  bring the specified bounds into the viewport.\\\n     * @param {Rect} bound - provide the bound value.\n     *\n     */\n    Diagram.prototype.bringIntoView = function (bound) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.bringIntoView(bound);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * bring the specified bounds to the center of the viewport \\\n     *\n     * @returns { void }  bring the specified bounds to the center of the viewport.\\\n     * @param {Rect} bound - provide the bound value.\n     *\n     */\n    Diagram.prototype.bringToCenter = function (bound) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.bringToCenter(bound);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    Diagram.prototype.copyCommand = function () {\n        this.copy();\n    };\n    /**\n     * Copies the selected nodes and connectors to diagram clipboard \\\n     *\n     * @returns { Object } Copies the selected nodes and connectors to diagram clipboard.\\\n     *\n     */\n    Diagram.prototype.copy = function () {\n        var obj = this.commandHandler.copy();\n        return obj;\n    };\n    /**\n     *  Group the selected nodes and connectors in diagram \\\n     *\n     * @returns { void }   Group the selected nodes and connectors in diagram.\\\n     *\n     */\n    Diagram.prototype.group = function () {\n        if (this.selectedItems.nodes.length > 1) {\n            this.callBlazorModel = false;\n            this.insertBlazorDiagramObjects(this.selectedItems);\n            this.commandHandler.group();\n            this.callBlazorModel = true;\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     *  UnGroup the selected nodes and connectors in diagram \\\n     *\n     * @returns { void }   UnGroup the selected nodes and connectors in diagram.\\\n     *\n     */\n    Diagram.prototype.unGroup = function () {\n        this.callBlazorModel = false;\n        this.insertBlazorDiagramObjects(this.selectedItems);\n        this.commandHandler.unGroup();\n        this.callBlazorModel = true;\n        this.commandHandler.getBlazorOldValues();\n    };\n    /**\n     *  send the selected nodes or connectors back \\\n     *\n     * @returns { void }   send the selected nodes or connectors back.\\\n     *\n     */\n    Diagram.prototype.sendToBack = function () {\n        this.commandHandler.sendToBack();\n    };\n    /**\n     * set the active layer\\\n     *\n     * @returns { void } set the active layer.\\\n     * @param {string} layerName - defines the name of the layer which is to be active layer.\n     *\n     */\n    Diagram.prototype.setActiveLayer = function (layerName) {\n        var layer = this.commandHandler.getLayer(layerName);\n        this.activeLayer = layer;\n    };\n    /**\n     * add the layer into diagram\\\n     *\n     * @returns { void } add the layer into diagram.\\\n     * @param {LayerModel} layer - defines the layer model which is to be added\n     * @param {Object[]} layerObject - defines the object of the layer\n     * @blazorArgsType layer|DiagramLayer\n\n     *\n     */\n    Diagram.prototype.addLayer = function (layer, layerObject) {\n        this.commandHandler.addLayer(layer, layerObject);\n    };\n    /* eslint-disable */\n    /**\n     *  @private\n     */\n    Diagram.prototype.addDiagramLayer = function (layer, layerObject) {\n        this.commandHandler.addLayer(layer, layerObject, false);\n    };\n    /**\n     * remove the layer from diagram \\\n     *\n     * @returns { void } remove the layer from diagram.\\\n     * @param {string} layerId - provide the bound value.\n\n     *\n     */\n    Diagram.prototype.removeLayer = function (layerId) {\n        this.commandHandler.removeLayer(layerId, isBlazor());\n    };\n    /**\n     *  @private\n     */\n    Diagram.prototype.removeDiagramLayer = function (layerId) {\n        this.commandHandler.removeLayer(layerId, false);\n    };\n    /* eslint-enable */\n    /**\n     * move objects from the layer to another layer from diagram\\\n     *\n     * @returns { void } move objects from the layer to another layer from diagram.\\\n     * @param {string[]} objects - define the objects id of string array\n     * @param {string} targetLayer - define the objects id of string array\n     *\n     */\n    Diagram.prototype.moveObjects = function (objects, targetLayer) {\n        var oldValues = cloneObject(this.layers);\n        this.enableServerDataBinding(false);\n        this.commandHandler.moveObjects(objects, targetLayer);\n        var result = this.commandHandler.deepDiffer.map(oldValues, cloneObject(this.layers));\n        var diffValue = this.commandHandler.deepDiffer.frameObject({}, result);\n        this.oldDiagramObject = { layers: diffValue };\n        this.commandHandler.updateBlazorProperties();\n    };\n    /* tslint:disable */\n    Diagram.prototype.layerObjectUpdate = function () {\n        if (isBlazor()) {\n            this.enableServerDataBinding(false);\n            this.oldDiagramObject['layers'] = [];\n            for (var i = 0; i < this.layers.length; i++) {\n                // tslint:disable-next-line:no-any\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                var leyerObject = cloneObject(this.layers[i]);\n                leyerObject.sfIndex = this.layers[i].zIndex;\n                this.oldDiagramObject['layers'].push(leyerObject);\n            }\n        }\n    };\n    /* tslint:enable */\n    /**\n     * move the layer backward \\\n     *\n     * @returns { void } move the layer backward .\\\n     * @param {string} layerName - define the name of the layer\n     * @param {string} targetLayer - define the objects id of string array\n     *\n     */\n    Diagram.prototype.sendLayerBackward = function (layerName) {\n        this.layerObjectUpdate();\n        this.commandHandler.sendLayerBackward(layerName);\n        this.commandHandler.updateLayerObject(this.oldDiagramObject, true);\n    };\n    /**\n     * move the layer forward \\\n     *\n     * @returns { void } move the layer forward.\\\n     * @param {string} layerName - define the name of the layer\n     *\n     */\n    Diagram.prototype.bringLayerForward = function (layerName) {\n        this.layerObjectUpdate();\n        this.commandHandler.bringLayerForward(layerName);\n        this.commandHandler.updateLayerObject(this.oldDiagramObject);\n    };\n    /**\n     *clone a layer with its object \\\n     *\n     * @returns { void } move the layer forward.\\\n     * @param {string} layerName - define the name of the layer\n     *\n     */\n    Diagram.prototype.cloneLayer = function (layerName) {\n        this.commandHandler.cloneLayer(layerName);\n    };\n    /**\n     *bring the selected nodes or connectors to front \\\n     *\n     * @returns { void } move the layer forward.\\\n     *\n     */\n    Diagram.prototype.bringToFront = function () {\n        this.commandHandler.bringToFront();\n    };\n    /**\n     *send the selected nodes or connectors forward \\\n     *\n     * @returns { void } send the selected nodes or connectors forward.\\\n     *\n     */\n    Diagram.prototype.moveForward = function () {\n        this.commandHandler.sendForward();\n    };\n    /**\n     *send the selected nodes or connectors back\\\n     *\n     * @returns { void } send the selected nodes or connectors back.\\\n     *\n     */\n    Diagram.prototype.sendBackward = function () {\n        this.commandHandler.sendBackward();\n    };\n    /**\n     *gets the node or connector having the given name \\\n     *\n     * @returns { void } gets the node or connector having the given name.\\\n     * @param {string} name - define the name of the layer\n     *\n     */\n    Diagram.prototype.getObject = function (name) {\n        return this.nameTable[name];\n    };\n    /**\n     * gets the node object for the given node ID \\\n     *\n     * @returns { void } gets the node object for the given node ID.\\\n     * @param {string} id - define the name of the layer\n     *\n     */\n    Diagram.prototype.getNodeObject = function (id) {\n        return cloneObject(this.nameTable[id]);\n    };\n    /**\n     *gets the connector object for the given node ID \\\n     *\n     * @returns { void } gets the connector object for the given node ID.\\\n     * @param {string} id - define the name of the layer\n     *\n     */\n    Diagram.prototype.getConnectorObject = function (id) {\n        return cloneObject(this.nameTable[id]);\n    };\n    /**\n     * gets the active layer back \\\n     *\n     * @returns { void } gets the active layer back.\\\n     *\n     */\n    Diagram.prototype.getActiveLayer = function () {\n        return this.activeLayer;\n    };\n    Diagram.prototype.nudgeCommand = function (direction, x, y) {\n        if (typeof direction !== 'object' && (this.selectedItems.nodes.length || this.selectedItems.connectors.length) > 0) {\n            this.nudge(direction);\n        }\n    };\n    /**\n     * Moves the selected objects towards the given direction\n     *\n     * @returns { void }  Moves the selected objects towards the given direction .\\\n     * @param {NudgeDirection} direction -  Defines the direction by which the objects have to be moved\n     * @param {number} x - Defines the distance by which the selected objects have to be horizontally moved\n     * @param {number} y -  Defines the distance by which the selected objects have to be vertically moved\n     */\n    Diagram.prototype.nudge = function (direction, x, y) {\n        var tx = 0;\n        var ty = 0;\n        var negativeDirection;\n        if (direction === 'Left' || direction === 'Right') {\n            negativeDirection = (direction === 'Left');\n            tx = (negativeDirection ? -1 : 1) * (x ? x : 1);\n        }\n        else {\n            negativeDirection = (direction === 'Up');\n            ty = (negativeDirection ? -1 : 1) * (y ? y : 1);\n        }\n        var obj = this.selectedItems;\n        var annotation = this.selectedItems.wrapper.children[0];\n        if (annotation instanceof TextElement) {\n            this.commandHandler.labelDrag(obj.nodes[0], annotation, tx, ty);\n        }\n        else {\n            var undoObject = cloneObject(this.selectedItems);\n            this.protectPropertyChange(true);\n            this.drag(obj, tx, ty);\n            this.protectPropertyChange(false);\n            var entry = {\n                type: 'PositionChanged',\n                redoObject: cloneObject(this.selectedItems), undoObject: undoObject, category: 'Internal'\n            };\n            this.addHistoryEntry(entry);\n        }\n        this.refreshCanvasLayers();\n    };\n    Diagram.prototype.insertBlazorDiagramObjects = function (actualObject) {\n        if (isBlazor() && !(this.blazorActions & BlazorAction.interaction)) {\n            this.enableServerDataBinding(false);\n            if (actualObject instanceof Selector) {\n                for (var i = 0; i < actualObject.nodes.length; i++) {\n                    this.insertBlazorDiagramObjects(actualObject.nodes[i]);\n                }\n                for (var i = 0; i < actualObject.connectors.length; i++) {\n                    this.insertBlazorDiagramObjects(actualObject.connectors[i]);\n                }\n            }\n            if (!(actualObject instanceof Selector)) {\n                //let object: object;\n                if (actualObject && actualObject.children && actualObject.children.length > 0) {\n                    for (var i = 0; i < actualObject.children.length; i++) {\n                        this.insertBlazorDiagramObjects(this.nameTable[actualObject.children[i]]);\n                    }\n                }\n                var object = cloneObject(this.nameTable[actualObject.id]);\n                this.insertValue(object, !(getObjectType(actualObject) === Connector));\n            }\n        }\n    };\n    /**\n     * Drags the given object by the specified pixels\n     *\n     * @returns { void }  Drags the given object by the specified pixels .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the nodes/connectors to be dragged\n     * @param {number} tx - Defines the distance by which the given objects have to be horizontally moved\n     * @param {number} ty - Defines the distance by which the given objects have to be vertically moved\n     */\n    Diagram.prototype.drag = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        if (isBlazor() && obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (this.bpmnModule && (obj instanceof Node)) {\n            var updated = this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n            if (updated) {\n                return;\n            }\n        }\n        if (obj instanceof Selector) {\n            this.preventConnectorsUpdate = true;\n            if (obj.nodes && obj.nodes.length) {\n                for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    this.callBlazorModel = false;\n                    this.drag(node, tx, ty);\n                    if (node.parentId) {\n                        var parent_1 = this.nameTable[node.parentId];\n                        if (parent_1.isLane) {\n                            var swimlane = this.nameTable[parent_1.parentId];\n                            updateLaneBoundsAfterAddChild(parent_1, swimlane, node, this);\n                        }\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            if (obj.connectors && obj.connectors.length) {\n                this.callBlazorModel = false;\n                for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    this.drag(conn, tx, ty);\n                    if (this.selectionConnectorsList.indexOf(conn) === -1) {\n                        this.selectionConnectorsList.push(conn);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            this.updateSelector();\n            if ((this.diagramActions & DiagramAction.DragUsingMouse)) {\n                this.updatePage();\n            }\n        }\n        else {\n            if (obj instanceof Node) {\n                if (this.bpmnModule) {\n                    this.bpmnModule.updateAnnotationDrag(obj, this, tx, ty);\n                }\n            }\n            this.commandHandler.drag(obj, tx, ty);\n        }\n        if (obj instanceof Selector) {\n            this.preventConnectorsUpdate = false;\n            for (var _d = 0, _e = this.selectionConnectorsList; _d < _e.length; _d++) {\n                var connectors = _e[_d];\n                this.updateConnectorProperties(this.nameTable[connectors.id]);\n                if (connectors.shape.type === 'Bpmn' && connectors.shape.sequence === 'Default') {\n                    this.commandHandler.updatePathElementOffset(connectors);\n                }\n            }\n            this.selectionConnectorsList = [];\n        }\n        if (!(this.diagramActions & DiagramAction.ToolAction) && !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.updateSelector();\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction)) &&\n            (!(this.blazorActions & BlazorAction.GroupClipboardInProcess))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    Diagram.prototype.disableStackContainerPadding = function (wrapper, disable) {\n        if (wrapper instanceof StackPanel) {\n            wrapper.considerPadding = disable;\n        }\n        if (wrapper.children) {\n            for (var _i = 0, _a = wrapper.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                this.disableStackContainerPadding(child, false);\n            }\n        }\n    };\n    /**\n     * Scales the given objects by the given ratio\n     *\n     * @returns { void } Scales the given objects by the given ratio .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be resized\n     * @param {number} sx - Defines the ratio by which the objects have to be horizontally scaled\n     * @param {number} sy - Defines the ratio by which the objects have to be vertically scaled\n     * @param {PointModel} pivot - Defines the reference point with respect to which the objects will be resized\n     */\n    Diagram.prototype.scale = function (obj, sx, sy, pivot) {\n        this.disableStackContainerPadding(obj.wrapper, false);\n        this.insertBlazorDiagramObjects(obj);\n        var checkBoundaryConstraints = true;\n        if (obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj instanceof Selector) {\n            if (obj.nodes && obj.nodes.length) {\n                this.callBlazorModel = false;\n                for (var _i = 0, _a = obj.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    checkBoundaryConstraints = this.commandHandler.scale(node, sx, sy, pivot, obj);\n                    if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n                        this.commandHandler.scale(node, 1 / sx, 1 / sy, pivot, obj);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            if (obj.connectors && obj.connectors.length) {\n                this.callBlazorModel = false;\n                for (var _b = 0, _c = obj.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    this.commandHandler.scale(conn, sx, sy, pivot, obj);\n                    if (!this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds)) {\n                        this.commandHandler.scale(conn, 1 / sx, 1 / sy, pivot, obj);\n                    }\n                }\n                this.callBlazorModel = true;\n            }\n            this.updateSelector();\n            this.refreshCanvasLayers();\n        }\n        else {\n            this.commandHandler.scale(obj, sx, sy, pivot, (obj.children ? obj : undefined));\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction)) &&\n            (!(this.blazorActions & BlazorAction.GroupClipboardInProcess))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        this.disableStackContainerPadding(obj.wrapper, true);\n        return checkBoundaryConstraints;\n    };\n    /**\n     * Rotates the given nodes/connectors by the given angle\n     *\n     * @returns { void } Rotates the given nodes/connectors by the given angle .\\\n     * @param {NodeModel | ConnectorModel | SelectorModel} obj - Defines the objects to be rotated\n     * @param {number} angle - Defines the angle by which the objects have to be rotated\n     * @param {PointModel} pivot - Defines the reference point with reference to which the objects have to be rotated\n     */\n    Diagram.prototype.rotate = function (obj, angle, pivot) {\n        this.insertBlazorDiagramObjects(obj);\n        var checkBoundaryConstraints;\n        if (obj.id) {\n            obj = this.nameTable[obj.id] || obj;\n        }\n        if (obj) {\n            pivot = pivot || { x: obj.wrapper.offsetX, y: obj.wrapper.offsetY };\n            if (obj instanceof Selector) {\n                this.callBlazorModel = false;\n                obj.rotateAngle += angle;\n                obj.wrapper.rotateAngle += angle;\n                var bounds = getBounds(obj.wrapper);\n                checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bounds);\n                if (!checkBoundaryConstraints) {\n                    obj.rotateAngle -= angle;\n                    obj.wrapper.rotateAngle -= angle;\n                    return checkBoundaryConstraints;\n                }\n                var objects = [];\n                objects = objects.concat(obj.nodes);\n                objects = objects.concat(obj.connectors);\n                this.commandHandler.rotateObjects(obj, objects, angle, pivot);\n                this.callBlazorModel = true;\n            }\n            else {\n                this.commandHandler.rotateObjects(obj, [obj], angle, pivot);\n            }\n        }\n        if (this.callBlazorModel && (!(this.blazorActions & BlazorAction.interaction))) {\n            this.commandHandler.getBlazorOldValues();\n        }\n        return checkBoundaryConstraints;\n    };\n    /**\n     * Moves the source point of the given connector\n     *\n     * @returns { void }  Moves the source point of the given connector .\\\n     * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n     * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n     * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n     */\n    Diagram.prototype.dragSourceEnd = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        this.commandHandler.dragSourceEnd(obj, tx, ty);\n        if (this.callBlazorModel) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Moves the target point of the given connector\n     *\n     * @returns { void }   Moves the target point of the given connector.\\\n     * @param {ConnectorModel} obj - Defines the connector, the end points of which has to be moved\n     * @param {number} tx - Defines the distance by which the end point has to be horizontally moved\n     * @param {number} ty - Defines the distance by which the end point has to be vertically moved\n     */\n    Diagram.prototype.dragTargetEnd = function (obj, tx, ty) {\n        this.insertBlazorDiagramObjects(obj);\n        this.commandHandler.dragTargetEnd(obj, tx, ty);\n        if (this.callBlazorModel) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Finds all the objects that is under the given mouse position\n     *\n     * @returns { void }   Finds all the objects that is under the given mouse position.\\\n     * @param {PointModel} position - Defines the position, the objects under which has to be found\n     * @param {IElement} source - Defines the object, the objects under which has to be found\n     */\n    Diagram.prototype.findObjectsUnderMouse = function (position, source) {\n        return this.eventHandler.findObjectsUnderMouse(position, source);\n    };\n    /**\n     * Finds the object that is under the given mouse position\n     *\n     * @returns { void }   Finds the object that is under the given mouse position.\\\n     * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects, from which the object has to be found.\n     * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n     * @param {boolean} inAction - Defines the active state of the action.\n     */\n    Diagram.prototype.findObjectUnderMouse = function (objects, action, inAction) {\n        return this.eventHandler.findObjectUnderMouse(objects, action, inAction);\n    };\n    /**\n     * Finds the object that is under the given active object (Source)\n     *\n     * @returns { void } Finds the object that is under the given active object (Source) .\\\n     * @param {NodeModel[] | ConnectorModel[]} objects - Defines the collection of objects, from which the object has to be found.\n     * @param {Actions} action - Defines the action, using which the relevant object has to be found.\n     * @param {boolean} inAction - Defines the active state of the action.\n     * @param {PointModel} position - Defines the position.\n     * @param {IElement} source - Defines the source.\n     */\n    Diagram.prototype.findTargetObjectUnderMouse = function (objects, action, inAction, position, source) {\n        return this.eventHandler.findTargetUnderMouse(objects, action, inAction, position, source);\n    };\n    /**\n     * Finds the child element of the given object at the given position\n     *\n     * @returns { void } Finds the child element of the given object at the given position .\\\n     * @param {IElement} obj - Defines the object, the child element of which has to be found\n     * @param {PointModel} position - Defines the position, the child element under which has to be found\n     * @param {number} padding - Defines the padding, the child element under which has to be found\n     */\n    Diagram.prototype.findElementUnderMouse = function (obj, position, padding) {\n        return this.eventHandler.findElementUnderMouse(obj, position, padding);\n    };\n    /**\n     * Defines the action to be done, when the mouse hovers the given element of the given object\n     *\n     * @returns { void } Defines the action to be done, when the mouse hovers the given element of the given object .\\\n     * @param {NodeModel | ConnectorModel} obj - Defines the object under mouse\n     * @param {DiagramElement} wrapper - Defines the target element of the object under mouse\n     * @param {PointModel} position - Defines the current mouse position\n     * @param { NodeModel | PointPortModel | ShapeAnnotationModel | PathAnnotationModel} target - Defines the target\n     * @private\n     */\n    Diagram.prototype.findActionToBeDone = function (obj, wrapper, position, target) {\n        return this.eventHandler.findActionToBeDone(obj, wrapper, position, target);\n    };\n    /**\n     * Returns the tool that handles the given action\n     *\n     * @returns { ToolBase } Returns the tool that handles the given action \\\n     * @param {string} action - Defines the action that is going to be performed\n     */\n    Diagram.prototype.getTool = function (action) {\n        var tool;\n        var getCustomTool = getFunction(this.getCustomTool);\n        if (getCustomTool) {\n            tool = getCustomTool(action);\n            if (tool) {\n                return tool;\n            }\n        }\n        return this.eventHandler.getTool(action);\n    };\n    /**\n     * Defines the cursor that corresponds to the given action\n     *\n     * @returns { string } Defines the cursor that corresponds to the given action \\\n     * @param {string} action - Defines the action that is going to be performed\n     * @param {boolean} active - Defines the active\n     */\n    Diagram.prototype.getCursor = function (action, active) {\n        var cursor;\n        var getCustomCursor = getFunction(this.getCustomCursor);\n        if (getCustomCursor) {\n            cursor = getCustomCursor(action, active);\n            if (cursor) {\n                return cursor;\n            }\n        }\n        if (this.customCursor.length) {\n            for (var i = 0; i < this.customCursor.length; i++) {\n                if (this.customCursor[i].action === action) {\n                    return this.customCursor[i].cursor;\n                }\n            }\n        }\n        return this.eventHandler.getCursor(action);\n    };\n    /**\n     * Initializes the undo redo actions\n     *\n     * @returns { void } Initializes the undo redo actions \\\n     * @private\n     */\n    Diagram.prototype.initHistory = function () {\n        if (this.undoRedoModule) {\n            this.undoRedoModule.initHistory(this);\n        }\n    };\n    /**\n     * Adds the given change in the diagram control to the track\n     *\n     * @returns { void } Adds the given change in the diagram control to the track \\\n     * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n     */\n    Diagram.prototype.addHistoryEntry = function (entry) {\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)\n            && (!this.currentSymbol || this.checkCurrentSymbol(this.currentSymbol, entry))) {\n            if (entry.undoObject && entry.undoObject.id === 'helper') {\n                return;\n            }\n            this.undoRedoModule.addHistoryEntry(entry, this);\n            if (entry.type !== 'StartGroup' && entry.type !== 'EndGroup') {\n                this.historyChangeTrigger(entry, 'CustomAction');\n            }\n        }\n    };\n    Diagram.prototype.checkCurrentSymbol = function (currentSymbol, entry) {\n        var check = false;\n        if (entry.undoObject && entry.redoObject) {\n            var undoObjects = entry.undoObject;\n            var redoObject = entry.undoObject;\n            if (redoObject.id && undoObjects.id && redoObject.id !== currentSymbol.id && undoObjects.id !== currentSymbol.id) {\n                return check = true;\n            }\n            else {\n                return check;\n            }\n        }\n        return check;\n    };\n    /**\n     * Adds the given custom change in the diagram control to the track\n     *\n     * @returns { void } Adds the given custom change in the diagram control to the track \\\n     * @param {HistoryEntry} entry - Defines the entry/information about a change in diagram\n     */\n    Diagram.prototype.addCustomHistoryEntry = function (entry) {\n        if (isBlazor() && this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            entry.type = undefined;\n            entry.category = 'External';\n            this.undoRedoModule.addHistoryEntry(entry, this);\n        }\n    };\n    /* eslint-disable */\n    /** @private */\n    Diagram.prototype.historyChangeTrigger = function (entry, action) {\n        var change = {};\n        /* eslint-enable */\n        var oldValue = 'oldValue';\n        var newValue = 'newValue';\n        var type = 'type';\n        var entryType = 'entryType';\n        var source = [];\n        if (entry.category === 'Internal') {\n            if (entry && entry.redoObject && ((entry.redoObject.nodes) instanceof Array) &&\n                ((entry.redoObject.connectors) instanceof Array)) {\n                source = entry.redoObject.nodes.concat(entry.redoObject.connectors);\n            }\n            else {\n                if (entry.redoObject) {\n                    source.push(entry.redoObject);\n                }\n            }\n            change[type] = entry.type;\n            if (isBlazor()) {\n                change[entryType] = entry.type;\n            }\n            switch (entry.type) {\n                case 'PositionChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX,\n                        offsetY: entry.undoObject.offsetY\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX,\n                        offsetY: entry.redoObject.offsetY\n                    };\n                    break;\n                case 'RotationChanged':\n                    change[oldValue] = { rotateAngle: entry.undoObject.rotateAngle };\n                    change[newValue] = { rotateAngle: entry.redoObject.rotateAngle };\n                    break;\n                case 'SizeChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX, offsetY: entry.undoObject.offsetY,\n                        width: entry.undoObject.width, height: entry.undoObject.height\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX, offsetY: entry.redoObject.offsetY,\n                        width: entry.redoObject.width, height: entry.redoObject.height\n                    };\n                    break;\n                case 'CollectionChanged':\n                    change[entry.changeType] = source;\n                    break;\n                case 'ConnectionChanged':\n                    change[oldValue] = {\n                        offsetX: entry.undoObject.offsetX,\n                        offsetY: entry.undoObject.offsetY\n                    };\n                    change[newValue] = {\n                        offsetX: entry.redoObject.offsetX,\n                        offsetY: entry.redoObject.offsetY\n                    };\n                    break;\n            }\n            var arg = void 0;\n            arg = {\n                cause: entry.category, source: cloneBlazorObject(source), change: cloneBlazorObject(change),\n                action: action\n            };\n            if (isBlazor()) {\n                arg = {\n                    cause: entry.category, change: cloneBlazorObject(change),\n                    source: { connectors: undefined, nodes: undefined }, action: action\n                };\n                var sourceValue = arg.source;\n                sourceValue.connectors = [];\n                sourceValue.nodes = [];\n                var object = void 0;\n                for (var i = 0; i < source.length; i++) {\n                    object = cloneBlazorObject(source[i]);\n                    // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                    (getObjectType(source[i]) === Connector) ?\n                        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                        (sourceValue.connectors.push(object)) : (sourceValue.nodes.push(object));\n                }\n                arg.source = sourceValue;\n            }\n            if (source.length) {\n                this.triggerEvent(DiagramEvent.historyChange, arg);\n            }\n        }\n    };\n    /**\n     * Starts grouping the actions that will be undone/restored as a whole\n     *\n     * @returns { void } Starts grouping the actions that will be undone/restored as a whole\\\n     */\n    Diagram.prototype.startGroupAction = function () {\n        var entry = { type: 'StartGroup', category: 'Internal' };\n        if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n            this.addHistoryEntry(entry);\n        }\n    };\n    /**\n     * Closes grouping the actions that will be undone/restored as a whole\n     *\n     * @returns { void } Closes grouping the actions that will be undone/restored as a whole .\\\n     */\n    Diagram.prototype.endGroupAction = function () {\n        var entry = { type: 'EndGroup', category: 'Internal' };\n        if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n            this.addHistoryEntry(entry);\n        }\n    };\n    /**\n     * Restores the last action that is performed\n     *\n     * @returns { void } Restores the last action that is performed .\\\n     */\n    Diagram.prototype.undo = function () {\n        this.canEnableBlazorObject = true;\n        this.callBlazorModel = false;\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            this.undoRedoModule.undo(this);\n        }\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    /**\n     * Restores the last undone action\n     *\n     * @returns { void } Restores the last undone action .\\\n     */\n    Diagram.prototype.redo = function () {\n        this.canEnableBlazorObject = true;\n        this.callBlazorModel = false;\n        if (this.undoRedoModule && (this.constraints & DiagramConstraints.UndoRedo)) {\n            this.undoRedoModule.redo(this);\n        }\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    Diagram.prototype.getBlazorDiagramObjects = function (objects) {\n        if (objects) {\n            for (var j = 0; j < objects.length; j++) {\n                this.insertBlazorDiagramObjects(objects[j]);\n            }\n        }\n        else {\n            this.insertBlazorDiagramObjects(this.selectedItems);\n        }\n        this.callBlazorModel = false;\n        this.canEnableBlazorObject = true;\n    };\n    /**\n     * Aligns the group of objects to with reference to the first object in the group\n     *\n     * @returns { void } Aligns the group of objects to with reference to the first object in the group .\\\n     * @param {AlignmentOptions}option - Defines the factor, by which the objects have to be aligned\n     * @param {NodeModel[] | ConnectorModel[]} objects - Defines the objects that have to be aligned\n     * @param {AlignmentMode} type - Defines the type to be aligned\n     */\n    Diagram.prototype.align = function (option, objects, type) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.align(objects, option, (type ? type : 'Object'));\n        this.commandHandler.getBlazorOldValues();\n        this.callBlazorModel = true;\n        this.canEnableBlazorObject = false;\n    };\n    /**\n     * Arranges the group of objects with equal intervals, but within the group of objects\n     *\n     * @returns { void } Arranges the group of objects with equal intervals, but within the group of objects .\\\n     * @param {NodeModel[] | ConnectorModel[]} option - Defines the factor to distribute the shapes\n     * @param {DistributeOptions} objects - Defines the objects that have to be equally spaced\n     */\n    Diagram.prototype.distribute = function (option, objects) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.distribute(objects, option);\n        this.commandHandler.getBlazorOldValues();\n        this.canEnableBlazorObject = false;\n        this.callBlazorModel = true;\n    };\n    /**\n     * Scales the given objects to the size of the first object in the group\n     *\n     * @returns { void } Scales the given objects to the size of the first object in the group .\\\n     * @param {SizingOptions} option - Defines whether the node has to be horizontally scaled, vertically scaled or both\n     * @param {NodeModel[] | ConnectorModel[]}objects - Defines the collection of objects that have to be scaled\n     */\n    Diagram.prototype.sameSize = function (option, objects) {\n        this.getBlazorDiagramObjects(objects);\n        if (!objects) {\n            objects = [];\n            objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n        this.commandHandler.sameSize(objects, option);\n        this.commandHandler.getBlazorOldValues();\n        this.canEnableBlazorObject = false;\n        this.callBlazorModel = true;\n    };\n    Diagram.prototype.updateBlazorDiagramProperties = function (attribute, canCall) {\n        if (isBlazor() && !canCall) {\n            //Need to send the client changes into server side for public APIs changes.\n            var isServerDataBindEnabled = this.allowServerDataBinding;\n            this.enableServerDataBinding(true);\n            for (var i = 0; i < attribute.length; i++) {\n                this.oldDiagramObject[attribute[i]] = cloneObject(this[attribute[i]]);\n            }\n            this.enableServerDataBinding(isServerDataBindEnabled);\n        }\n        if (canCall) {\n            this.commandHandler.getDiagramOldValues(this.oldDiagramObject, attribute);\n        }\n    };\n    Diagram.prototype.getZoomingAttribute = function () {\n        var attribute = [];\n        attribute.push('scrollSettings');\n        attribute.push('snapSettings');\n        return attribute;\n    };\n    /**\n     * Scales the diagram control by the given factor\n     *\n     * @returns { void } Scales the diagram control by the given factor .\\\n     * @param {number} factor - Defines the factor by which the diagram is zoomed\n     * @param {PointModel} focusedPoint - Defines the point with respect to which the diagram has to be zoomed\n     */\n    Diagram.prototype.zoom = function (factor, focusedPoint) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.zoom(factor, 0, 0, focusedPoint);\n        if (!(this.blazorActions & BlazorAction.interaction)) {\n            this.updateBlazorDiagramProperties(attribute, true);\n        }\n    };\n    /**\n     * Scales the diagram control by the given factor\n     *\n     * @returns { void }  Scales the diagram control by the given factor .\\\n     * @param {ZoomOptions} options - used to define the zoom factor, focus point and zoom type.\n     *\n     */\n    Diagram.prototype.zoomTo = function (options) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        var factor = options.zoomFactor ? options.zoomFactor : 0.2;\n        factor = options.type === 'ZoomOut' ? 1 / (1 + factor) : (1 + factor);\n        this.scroller.zoom(factor, 0, 0, options.focusPoint);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Pans the diagram control to the given horizontal and vertical offsets\n     *\n     * @returns { void } Pans the diagram control to the given horizontal and vertical offsets .\\\n     * @param {number} horizontalOffset - Defines the horizontal distance to which the diagram has to be scrolled\n     * @param {number} verticalOffset - Defines the vertical distance to which the diagram has to be scrolled\n     * @param {PointModel} focusedPoint - Provide the focusedPoint value\n     */\n    Diagram.prototype.pan = function (horizontalOffset, verticalOffset, focusedPoint) {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.setCursor('grabbing');\n        this.scroller.zoom(1, horizontalOffset, verticalOffset, focusedPoint);\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Resets the zoom and scroller offsets to default values\n     *\n     * @returns { void } Resets the zoom and scroller offsets to default values .\\\n     */\n    Diagram.prototype.reset = function () {\n        var attribute = this.getZoomingAttribute();\n        this.updateBlazorDiagramProperties(attribute);\n        this.scroller.zoom(1 / this.scroller.currentZoom, -this.scroller.horizontalOffset, -this.scroller.verticalOffset, { x: 0, y: 0 });\n        this.updateBlazorDiagramProperties(attribute, true);\n    };\n    /**\n     * Resets the segments of the connectors\n     *\n     * @returns { void } Resets the segments of the connectors .\\\n     */\n    Diagram.prototype.resetSegments = function () {\n        var previousConnectorObject = [];\n        var updateConnectorObject = [];\n        var changeConnectors = [];\n        if (isBlazor()) {\n            for (var _i = 0, _a = this.connectors; _i < _a.length; _i++) {\n                var obj = _a[_i];\n                previousConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n        }\n        if (this.constraints & DiagramConstraints.LineRouting && this.lineRoutingModule) {\n            this.lineRoutingModule.lineRouting(this);\n        }\n        else {\n            this.protectPropertyChange(true);\n            var connector = void 0;\n            for (var i = 0; i < this.connectors.length; i++) {\n                connector = this.connectors[i];\n                connector.segments = [];\n                this.connectorPropertyChange(connector, {}, { segments: connector.segments });\n            }\n            this.protectPropertyChange(false);\n        }\n        if (isBlazor()) {\n            for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n                var obj = _c[_b];\n                updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            var diagramObject = { nodes: [], connectors: changeConnectors };\n            if (window && window[blazor]) {\n                var obj = { 'methodName': 'UpdateBlazorProperties', 'diagramobj': diagramObject };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n    };\n    /**\n     * setBlazorDiagramProps method\n     *\n     * @returns {void} setBlazorDiagramProps method .\\\n     * @param {boolean} arg - provide the eventName value.\n     * @private\n     */\n    Diagram.prototype.setBlazorDiagramProps = function (arg) {\n        var attribute = this.getZoomingAttribute();\n        if (arg) {\n            this.updateBlazorDiagramProperties(attribute);\n        }\n        else {\n            this.updateBlazorDiagramProperties(attribute, true);\n        }\n    };\n    /**\n     * getDirection method\n     *\n     * @returns { Promise<void | object> } getDirection method .\\\n     * @param {DiagramEvent} eventName - provide the eventName value.\n     * @param {Object} args - provide the args value.\n     * @private\n     */\n    Diagram.prototype.triggerEvent = function (eventName, args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventArgs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (args) {\n                            this.updateEventValue(args);\n                        }\n                        return [4 /*yield*/, this.trigger(DiagramEvent[eventName], args)];\n                    case 1:\n                        eventArgs = _a.sent();\n                        if (isBlazor() && typeof eventArgs === 'string') {\n                            eventArgs = JSON.parse(eventArgs);\n                        }\n                        return [2 /*return*/, eventArgs];\n                }\n            });\n        });\n    };\n    Diagram.prototype.updateEventValue = function (args) {\n        var element = args.element;\n        if (args.element && element instanceof Selector && (element.nodes.length + element.connectors.length === 1)) {\n            args.element = (element.nodes.length === 1) ? element.nodes[0] : element.connectors[0];\n        }\n    };\n    /**\n     * Adds the given node to the lane\n     *\n     * @returns { void }     Adds the given node to the lane .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string} swimLane - provide the swimLane value.\n     * @param {string} lane - provide the lane value.\n\n     */\n    Diagram.prototype.addNodeToLane = function (node, swimLane, lane) {\n        if (this.nameTable[swimLane]) {\n            var swimlaneNode = this.nameTable[swimLane];\n            this.protectPropertyChange(true);\n            if (this.undoRedoModule) {\n                this.historyManager.startGroupAction();\n            }\n            if (!this.nameTable[node.id]) {\n                node.offsetX = swimlaneNode.wrapper.bounds.width + swimlaneNode.wrapper.bounds.x;\n                node.offsetY = swimlaneNode.wrapper.bounds.height + swimlaneNode.wrapper.bounds.y;\n                node = this.add(node);\n            }\n            node.parentId = '';\n            if (!swimlaneNode.shape.phases.length) {\n                var laneId = swimLane + lane + '0';\n                if (this.nameTable[laneId]) {\n                    addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n                    updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n                }\n            }\n            else {\n                for (var i = 0; i < swimlaneNode.shape.phases.length; i++) {\n                    var laneId = swimLane + lane + i;\n                    if (this.nameTable[laneId] && this.nameTable[laneId].isLane) {\n                        var laneNode = this.nameTable[laneId].wrapper.bounds;\n                        var focusPoint = {\n                            x: laneNode.x +\n                                (laneNode.x - swimlaneNode.wrapper.bounds.x + node.margin.left + (node.wrapper.bounds.width / 2)),\n                            y: laneNode.y + swimlaneNode.wrapper.bounds.y - node.margin.top\n                        };\n                        if (swimlaneNode.shape.orientation === 'Horizontal') {\n                            focusPoint.y = laneNode.y;\n                        }\n                        else {\n                            focusPoint.x = laneNode.x;\n                            var laneHeaderId = this.nameTable[laneId].parentId +\n                                swimlaneNode.shape.lanes[0].id + '_0_header';\n                            focusPoint.y = laneNode.y +\n                                (swimlaneNode.wrapper.bounds.y - this.nameTable[laneHeaderId].wrapper.bounds.height +\n                                    node.margin.top + (node.wrapper.bounds.height / 2));\n                        }\n                        if (laneNode.containsPoint(focusPoint) ||\n                            (laneId === swimLane + lane + (swimlaneNode.shape.phases.length - 1))) {\n                            addChildToContainer(this, this.nameTable[laneId], node, undefined, true);\n                            updateLaneBoundsAfterAddChild(this.nameTable[laneId], swimlaneNode, node, this);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (this.undoRedoModule) {\n                this.historyManager.endGroupAction();\n            }\n            this.protectPropertyChange(false);\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     * Shows tooltip for corresponding diagram object\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be shown\n     */\n    Diagram.prototype.showTooltip = function (obj) {\n        if (obj && obj.id && !obj.wrapper) {\n            obj = this.nameTable[obj.id];\n        }\n        var bounds = getBounds(obj.wrapper);\n        var position = { x: 0, y: 0 };\n        var content = obj.tooltip.content ?\n            obj.tooltip.content : 'X:' + Math.round(bounds.x) + ' ' + 'Y:' + Math.round(bounds.y);\n        if (obj && obj.tooltip.openOn === 'Custom') {\n            if (obj instanceof Node) {\n                position = { x: obj.offsetX + (obj.width / 2), y: obj.offsetY + (obj.height / 2) };\n            }\n            else {\n                position = { x: obj.targetPoint.x, y: obj.targetPoint.x };\n            }\n            this.commandHandler.showTooltip(obj, position, content, 'SelectTool', true);\n        }\n    };\n    /**\n     * hides tooltip for corresponding diagram object\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object for that tooltip has to be hide\n     */\n    Diagram.prototype.hideTooltip = function (obj) {\n        if (obj && obj.tooltip.openOn === 'Custom') {\n            this.tooltipObject.close();\n        }\n    };\n    /**\n     * Adds the given node to diagram control\n     *\n     * @returns { Node }     getDirection method .\\\n     * @param {NodeModel} obj - Defines the node that has to be added to diagram\n     * @param {boolean} group - Defines the node that has to be added to diagram\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addNode = function (obj, group) {\n        return this.add(obj, group);\n    };\n    /**\n     * Adds the given diagram object to the group.\n     *\n     * @returns { void }     Adds the given diagram object to the group.\\\n     * @param {NodeModel} group - defines where the diagram object to be added.\n     * @param {string | NodeModel | ConnectorModel} child - defines the diagram object to be added to the group\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addChildToGroup = function (group, child) {\n        var severDataBind = this.allowServerDataBinding;\n        this.enableServerDataBinding(false);\n        var propChange = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        group = this.getObject(group.id);\n        if (isBlazor()) {\n            this.insertValue(group, true);\n        }\n        var isHistoryAdded = (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) &&\n            !(this.diagramActions & DiagramAction.PreventHistory));\n        if (isHistoryAdded) {\n            this.startGroupAction();\n        }\n        var id = this.addChild(group, child);\n        if (isHistoryAdded) {\n            var childTable = {};\n            childTable[id] = cloneObject(this.getObject(id));\n            var entry = {\n                type: 'AddChildToGroupNode', changeType: 'Insert', undoObject: cloneObject(group),\n                redoObject: cloneObject(group), category: 'Internal', objectId: id, childTable: childTable\n            };\n            this.addHistoryEntry(entry);\n            this.endGroupAction();\n        }\n        this.protectPropertyChange(propChange);\n        this.enableServerDataBinding(severDataBind);\n        this.updateSelector();\n        if (isBlazor() && isHistoryAdded) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /**\n     * Will return the history stack values\n     *\n     * @returns { void } Will return the history stack values .\\\n     * @param {boolean} isUndoStack - returns the history stack values\n     */\n    Diagram.prototype.getHistoryStack = function (isUndoStack) {\n        //let temp: HistoryEntry[];\n        var historyEntry = [];\n        var temp = isUndoStack ? this.historyManager.undoStack : this.historyManager.redoStack;\n        if (this.historyManager.stackLimit !== undefined) {\n            for (var i = temp.length - 1; i >= 0; i--) {\n                historyEntry.push(temp[i]);\n                if (historyEntry.length > this.historyManager.stackLimit) {\n                    return historyEntry;\n                }\n            }\n        }\n        else {\n            historyEntry = temp;\n        }\n        return historyEntry;\n    };\n    /* tslint:disable */\n    /**\n     * Return the edges for the given node\n     *\n     * @returns { string[] } Return the edges for the given node .\\\n\n     * @param {Object} args - return the edge of the given node\n     */\n    Diagram.prototype.getEdges = function (args) {\n        return args['outEdge'] ? this.nameTable[args['id']].outEdges : this.nameTable[args['id']].inEdges;\n    };\n    /* tslint:enable */\n    /**\n     * Returns the parent id for the node\n     *\n     * @returns { string }Returns the parent id for the node .\\\n\n     * @param {string} id - returns the parent id\n     */\n    Diagram.prototype.getParentId = function (id) {\n        return this.nameTable[id].parentId;\n    };\n    /**\n     * Adds the given connector to diagram control\n     * @returns { Connector } Adds the given connector to diagram control .\\\n     *\n     * @param {ConnectorModel} obj - Defines the connector that has to be added to diagram\n     * @blazorArgsType obj|DiagramConnector\n     */\n    Diagram.prototype.addConnector = function (obj) {\n        return this.add(obj);\n    };\n    /* eslint-disable */\n    /** @private */\n    Diagram.prototype.UpdateBlazorDiagramModelCollection = function (obj, copiedObject, multiSelectDelete, isBlazorGroupUpdate) {\n        /* eslint-enable */\n        if (!(this.blazorActions & BlazorAction.ClearObject)) {\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            if (window && window[blazor]) {\n                var updatedModel = void 0;\n                var connectorModelCollection = [];\n                var updatedModelCollection = [];\n                var objectTypeCollection = [];\n                var removalIndexCollection = [];\n                if (isBlazorGroupUpdate && !copiedObject) {\n                    for (var i = 0; i < this.blazorAddorRemoveCollection.length; i++) {\n                        objectTypeCollection.push(getObjectType(this.blazorAddorRemoveCollection[i]) === Connector ? 'Connector' : 'Node');\n                        updatedModel = cloneBlazorObject(this.blazorAddorRemoveCollection[i]);\n                        updatedModelCollection.push(updatedModel);\n                        removalIndexCollection = this.blazorRemoveIndexCollection;\n                    }\n                }\n                else if ((!this.isServerUpdate || multiSelectDelete)) {\n                    this.isServerUpdate = true;\n                    var updatedModel_1 = cloneBlazorObject(obj);\n                    var elements = [];\n                    var removalIndex = void 0;\n                    var tempNode = [];\n                    if (!copiedObject) {\n                        if (!multiSelectDelete) {\n                            tempNode = this.commandHandler.getChildren(obj, elements);\n                        }\n                        else {\n                            tempNode = multiSelectDelete;\n                        }\n                        for (var i = 0; i < tempNode.length; i++) {\n                            updatedModel_1 = cloneBlazorObject(tempNode[i]);\n                            updatedModelCollection.push(updatedModel_1);\n                            if (getObjectType(tempNode[i]) === Connector) {\n                                removalIndex = this.connectors.indexOf(tempNode[i]);\n                            }\n                            else {\n                                removalIndex = this.nodes.indexOf(tempNode[i]);\n                            }\n                            removalIndexCollection.push(removalIndex);\n                            objectTypeCollection.push(getObjectType(tempNode[i]) === Connector ? 'Connector' : 'Node');\n                        }\n                        if (!multiSelectDelete) {\n                            updatedModelCollection.push(cloneBlazorObject(obj));\n                            removalIndexCollection.push(this.nodes.indexOf(obj));\n                            objectTypeCollection.push(getObjectType(obj) === Connector ? 'Connector' : 'Node');\n                        }\n                    }\n                    if (copiedObject && copiedObject.length > 0) {\n                        for (var i = 0; i < copiedObject.length; i++) {\n                            updatedModel_1 = cloneBlazorObject(copiedObject[i]);\n                            var isNode = (copiedObject[i] instanceof Node) ? true : false;\n                            /* eslint-disable */\n                            isNode ? updatedModelCollection.push(updatedModel_1) : connectorModelCollection.push(updatedModel_1);\n                            /* eslint-enable */\n                            objectTypeCollection.push(getObjectType(copiedObject[i]) === Connector ? 'Connector' : 'Node');\n                        }\n                    }\n                    this.isServerUpdate = false;\n                }\n                var dgmObj = {\n                    'methodName': 'UpdateBlazorDiagramObjects',\n                    'diagramobj': {\n                        'nodeObj': JSON.stringify(updatedModelCollection),\n                        'ObjectType': objectTypeCollection,\n                        'removalIndex': copiedObject ? undefined : removalIndexCollection,\n                        'isMultipleObjects': true, 'annotationIndex': undefined,\n                        'connectorObj': JSON.stringify(connectorModelCollection)\n                    }\n                };\n                window[blazorInterop].updateBlazorProperties(dgmObj, this);\n                if (isBlazorGroupUpdate && !copiedObject) {\n                    this.blazorAddorRemoveCollection = [];\n                    this.blazorRemoveIndexCollection = [];\n                }\n            }\n        }\n    };\n    /**\n     *  UpdateBlazorDiagramModel method\n     *\n     * @returns { void }  UpdateBlazorDiagramModel method .\\\n     * @param {Node | Connector | ShapeAnnotation | PathAnnotation} obj - provide the obj value.\n     * @param {string} objectType - provide the objectType value.\n     * @param {number} removalIndex - provide the removalIndex value.\n     * @param {number} annotationNodeIndex - provide the annotationNodeIndex value.\n     *\n     * @private\n     */\n    Diagram.prototype.UpdateBlazorDiagramModel = function (obj, objectType, removalIndex, annotationNodeIndex) {\n        if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            var blazorInterop = 'sfBlazor';\n            var blazor = 'Blazor';\n            if (window && window[blazor] && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n                var updatedModel = cloneBlazorObject(obj);\n                var dgmObj = {\n                    'methodName': 'UpdateBlazorDiagramObjects',\n                    'diagramobj': {\n                        'nodeObj': JSON.stringify(updatedModel),\n                        'ObjectType': objectType, 'removalIndex': removalIndex,\n                        'isMultipleObjects': false,\n                        'annotationIndex': annotationNodeIndex, 'connectorObj': undefined\n                    }\n                };\n                window[blazorInterop].updateBlazorProperties(dgmObj, this);\n            }\n        }\n    };\n    // eslint-disable-next-line max-len\n    Diagram.prototype.UpdateBlazorLabelOrPortObjects = function (obj, objectType, removalIndex, nodeIndex) {\n        var blazorInterop = 'sfBlazor';\n        var blazor = 'Blazor';\n        if (window && window[blazor] && obj.length > 0 && !this.isServerUpdate && !(this.diagramActions & DiagramAction.Clear)) {\n            // eslint-disable-next-line max-len\n            var updatedModelCollection = [];\n            var objectTypeCollection = [];\n            var nodeIndexCollection = [];\n            for (var i = 0; i < obj.length; i++) {\n                updatedModelCollection.push(cloneBlazorObject(obj[i]));\n                objectTypeCollection.push(objectType);\n                nodeIndexCollection.push(nodeIndex);\n            }\n            var dgmObj = {\n                'methodName': 'UpdateBlazorDiagramObjects',\n                'diagramobj': {\n                    'nodeObj': JSON.stringify(updatedModelCollection),\n                    'ObjectType': objectTypeCollection, 'removalIndex': removalIndex,\n                    'isMultipleObjects': true,\n                    'annotationIndex': nodeIndexCollection,\n                    'connectorObj': null,\n                    'portIndex': (objectType === 'Port') ? nodeIndexCollection : []\n                }\n            };\n            window[blazorInterop].updateBlazorProperties(dgmObj, this);\n        }\n    };\n    /**\n     *  addBlazorDiagramObjects method\n     *\n     * @returns { void }  addBlazorDiagramObjects method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.addBlazorDiagramObjects = function () {\n        var nodesCollection = [];\n        var connectorCollection = [];\n        if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n            for (var i = 0; i < this.nodes.length; i++) {\n                nodesCollection.push(cloneObject(this.nodes[i], undefined, undefined, true));\n            }\n            for (var i = 0; i < this.connectors.length; i++) {\n                connectorCollection.push(cloneObject(this.connectors[i], undefined, undefined, true));\n            }\n        }\n        var blazorInterop = 'sfBlazor';\n        var blazor = 'Blazor';\n        if (window && window[blazor]) {\n            var obj = {\n                'methodName': 'AddBlazorObjects',\n                'diagramobj': { 'nodeObj': JSON.stringify(nodesCollection), 'isConnector': false }\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n            obj = {\n                'methodName': 'AddBlazorObjects',\n                'diagramobj': { 'nodeObj': JSON.stringify(connectorCollection), 'isConnector': true }\n            };\n            window[blazorInterop].updateBlazorProperties(obj, this);\n        }\n    };\n    Diagram.prototype.removeNodeEdges = function (elementId, id, isOutEdges) {\n        var node = this.nameTable[elementId];\n        var edges = isOutEdges ? node.outEdges : node.inEdges;\n        if (edges.length > 0) {\n            for (var i = 0; i < edges.length; i++) {\n                if (edges[i] === id) {\n                    edges.splice(i, 1);\n                }\n            }\n        }\n    };\n    /**\n     *  insertBlazorConnector method\n     *\n     * @returns { void }  insertBlazorConnector method .\\\n     * @param {Connector} obj - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.insertBlazorConnector = function (obj) {\n        if (isBlazor() && (obj instanceof Connector)) {\n            if (obj.sourceID && this.nameTable[obj.sourceID]) {\n                this.insertValue(cloneObject(this.nameTable[obj.sourceID]), true);\n            }\n            if (obj.targetID && this.nameTable[obj.targetID]) {\n                this.insertValue(cloneObject(this.nameTable[obj.targetID]), true);\n            }\n        }\n    };\n    /* tslint:disable */\n    /**\n     * Adds the given object to diagram control\n     *\n     * @returns { Node | Connector }     getDirection method .\\\n     * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be added to diagram\n     * @param {boolean} group - provide the group value.\n     */\n    Diagram.prototype.add = function (obj, group) {\n        var newObj;\n        var propertyChangeValue = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        if (obj) {\n            obj = cloneObject(obj);\n            var args = void 0;\n            args = {\n                element: obj, cause: this.diagramActions, state: 'Changing', type: 'Addition', cancel: false\n            };\n            if (this.parentObject) {\n                args.parentId = this.parentObject.id;\n            }\n            if (isBlazor()) {\n                args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Addition');\n            }\n            if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n                this.triggerEvent(DiagramEvent.collectionChange, args);\n            }\n            if (args.cancel && this.drawingObject) {\n                this.removeElements(args.element);\n                this.tooltipObject.close();\n                if (getObjectType(args.element) === Connector) {\n                    if (args.element.sourceID) {\n                        this.removeNodeEdges(args.element.sourceID, args.element.id, true);\n                    }\n                    if (args.element.targetID) {\n                        this.removeNodeEdges(args.element.targetID, args.element.id, false);\n                    }\n                }\n            }\n            this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n            obj.id = obj.id || randomId();\n            var layers = this.activeLayer;\n            if (!args.cancel && !layers.lock) {\n                if (layers.objects.indexOf(obj.id) < 0 && !layers.lock) {\n                    if (!layers.visible) {\n                        layers.visible = true;\n                        this.dataBind();\n                    }\n                    layers.objects.push(obj.id);\n                }\n                if (getObjectType(obj) === Connector) {\n                    newObj = new Connector(this, 'connectors', obj, true);\n                    newObj.status = 'New';\n                    updateDefaultValues(newObj, obj, this.connectorDefaults);\n                    this.connectors.push(newObj);\n                    this.initObject(newObj);\n                    if (isBlazor()) {\n                        if ((this.blazorActions & BlazorAction.GroupingInProgress)) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                        }\n                        else if (this.blazorAddorRemoveCollection.length > 0) {\n                            this.isServerUpdate = false;\n                            this.blazorAddorRemoveCollection.push(newObj);\n                            this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n                            this.blazorAddorRemoveCollection = [];\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                        else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                            this.UpdateBlazorDiagramModel(newObj, 'Connector');\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                    }\n                    if (obj.visible === false) {\n                        this.updateElementVisibility(newObj.wrapper, newObj, obj.visible);\n                    }\n                    this.updateEdges(newObj);\n                    this.insertBlazorConnector(newObj);\n                }\n                else {\n                    newObj = new Node(this, 'nodes', obj, true);\n                    updateDefaultValues(newObj, obj, this.nodeDefaults);\n                    newObj.parentId = (obj.parentId) ? obj.parentId : newObj.parentId;\n                    newObj.umlIndex = obj.umlIndex;\n                    newObj.status = 'New';\n                    this.nodes.push(newObj);\n                    this.initObject(newObj, layers, undefined, group);\n                    if (isBlazor()) {\n                        if ((this.blazorActions & BlazorAction.GroupingInProgress)) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                        }\n                        else if (this.blazorAddorRemoveCollection.length > 0) {\n                            this.blazorAddorRemoveCollection.push(newObj);\n                            this.isServerUpdate = false;\n                            this.UpdateBlazorDiagramModelCollection(undefined, this.blazorAddorRemoveCollection, undefined, true);\n                            this.commandHandler.getBlazorOldValues();\n                            this.blazorAddorRemoveCollection = [];\n                        }\n                        else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                            this.UpdateBlazorDiagramModel(newObj, 'Node');\n                            this.commandHandler.getBlazorOldValues();\n                        }\n                    }\n                    this.updateTemplate();\n                    if (this.bpmnModule) {\n                        if (newObj.shape.annotations && newObj.shape.annotations.length !== 0) {\n                            for (var _i = 0, _a = this.bpmnModule.getTextAnnotationConn(newObj); _i < _a.length; _i++) {\n                                var obj_1 = _a[_i];\n                                this.initConnectors(obj_1, layers, false);\n                            }\n                        }\n                        if (newObj.shape.activity && newObj.shape.activity.subProcess.processes &&\n                            newObj.shape.activity.subProcess.processes.length) {\n                            this.bpmnModule.updateDocks(newObj, this);\n                        }\n                    }\n                    if (this.lineRoutingModule && (this.constraints & DiagramConstraints.LineRouting)) {\n                        var objects = this.spatialSearch.findObjects(newObj.wrapper.outerBounds);\n                        for (var i = 0; i < objects.length; i++) {\n                            var object = objects[i];\n                            if (object instanceof Connector) {\n                                this.connectorPropertyChange(object, {}, {\n                                    sourceID: object.sourceID, targetID: object.targetID, sourcePortID: object.sourcePortID,\n                                    targetPortID: object.targetPortID, sourcePoint: object.sourcePoint, targetPoint: object.targetPoint\n                                });\n                            }\n                        }\n                    }\n                    if (newObj.umlIndex > -1 && obj.parentId && this.nameTable[obj.parentId] &&\n                        this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n                        var parent_2 = this.nameTable[obj.parentId];\n                        parent_2.children.splice(newObj.umlIndex, 0, newObj.id);\n                        parent_2.wrapper.children.splice(newObj.umlIndex, 0, newObj.wrapper);\n                        parent_2.wrapper.measure(new Size());\n                        parent_2.wrapper.arrange(parent_2.wrapper.desiredSize);\n                        this.updateDiagramObject(parent_2);\n                    }\n                }\n                args = {\n                    element: newObj, cause: this.diagramActions, state: 'Changed', type: 'Addition', cancel: false\n                };\n                if (this.parentObject) {\n                    args.parentId = this.parentObject.id;\n                }\n                if (isBlazor()) {\n                    args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Addition');\n                }\n                if (obj.id !== 'helper' && !(this.diagramActions & DiagramAction.PreventCollectionChangeOnDragOver)) {\n                    this.triggerEvent(DiagramEvent.collectionChange, args);\n                }\n                if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group) &&\n                    !(this.diagramActions & DiagramAction.PreventHistory)) {\n                    var entry = {\n                        type: 'CollectionChanged', changeType: 'Insert', undoObject: cloneObject(obj),\n                        redoObject: cloneObject(obj), category: 'Internal'\n                    };\n                    this.addHistoryEntry(entry);\n                }\n                this.parentObject = undefined;\n                if (this.mode === 'SVG') {\n                    this.updateSvgNodes(newObj);\n                    this.updateTextElementValue(newObj);\n                    this.updateDiagramObject(newObj);\n                    if (newObj.shape.activity && newObj.shape.activity.subProcess.processes &&\n                        newObj.shape.activity.subProcess.processes.length) {\n                        this.updateProcesses(newObj);\n                    }\n                    this.updateBridging();\n                }\n            }\n        }\n        this.protectPropertyChange(propertyChangeValue);\n        this.resetDiagramActions(DiagramAction.PublicMethod);\n        if (newObj && this.layers.length > 1) {\n            this.moveNode(newObj);\n        }\n        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n            var temp = _c[_b];\n            var view = this.views[temp];\n            if (!(view instanceof Diagram)) {\n                this.refreshCanvasDiagramLayer(view);\n            }\n        }\n        this.renderReactTemplates();\n        return newObj;\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateSvgNodes = function (node) {\n        if (node.children) {\n            for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                var j = _a[_i];\n                if (this.nameTable[j] && this.nameTable[j].parentId) {\n                    var child = getDiagramElement(j + '_groupElement', this.element.id);\n                    if (child) {\n                        child.parentNode.removeChild(child);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  updateProcesses method\n     *\n     * @returns { void }  updateProcesses method .\\\n     * @param {(Node | Connector)} node - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateProcesses = function (node) {\n        if (this.bpmnModule && node && node.shape && node.shape.activity &&\n            node.shape.activity.subProcess.processes &&\n            node.shape.activity.subProcess.processes.length) {\n            var processes = node.shape.activity.subProcess.processes;\n            this.moveSvgNode(node.id);\n            for (var _i = 0, processes_1 = processes; _i < processes_1.length; _i++) {\n                var j = processes_1[_i];\n                this.moveSvgNode(j);\n                var edges = [];\n                edges = edges.concat(this.nameTable[j].outEdges, this.nameTable[j].inEdges);\n                for (var i = edges.length - 1; i >= 0; i--) {\n                    this.moveSvgNode(edges[i]);\n                }\n            }\n            for (var _a = 0, processes_2 = processes; _a < processes_2.length; _a++) {\n                var j = processes_2[_a];\n                if (this.nameTable[j].shape.activity.subProcess.processes &&\n                    this.nameTable[j].shape.activity.subProcess.processes.length) {\n                    this.updateProcesses(this.nameTable[j]);\n                }\n            }\n        }\n        else {\n            this.moveSvgNode(node.id);\n        }\n    };\n    /**\n     *  moveSvgNode method\n     *\n     * @returns { void }  moveSvgNode method .\\\n     * @param {string} nodeId - provide the nodeId value.\n     *\n     * @private\n     */\n    Diagram.prototype.moveSvgNode = function (nodeId) {\n        var child = getDiagramElement(nodeId + '_groupElement', this.element.id);\n        var parent = child.parentElement;\n        child.parentNode.removeChild(child);\n        parent.appendChild(child);\n    };\n    /**\n     * Adds the given annotation to the given node\n     *\n     * @returns { void } Adds the given annotation to the given node .\\\n     * @param {BpmnAnnotationModel} annotation - Defines the annotation to be added\n     * @param {NodeModel} node - Defines the node to which the annotation has to be added\n     */\n    Diagram.prototype.addTextAnnotation = function (annotation, node) {\n        if (this.bpmnModule) {\n            var connector = this.bpmnModule.addAnnotation(node, annotation, this);\n            this.initConnectors(connector, this.commandHandler.getObjectLayer(node.id), false);\n            this.updateDiagramObject(node);\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'CollectionChanged', changeType: 'Insert', undoObject: cloneObject(annotation),\n                    redoObject: cloneObject(annotation), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n    };\n    //Splice the InEdge and OutEdge of the for the node with respect to corresponding connectors that is deleting\n    Diagram.prototype.spliceConnectorEdges = function (connector, isSource) {\n        //let node: Node;\n        var edges = [];\n        //let isInEdge: boolean;\n        var node = isSource ? this.nameTable[connector.sourceID] : this.nameTable[connector.targetID];\n        if (node) {\n            edges = isSource ? node.outEdges : node.inEdges;\n            for (var i = edges.length - 1; i >= 0; i--) {\n                if (edges[i] === connector.id) {\n                    edges.splice(i, 1);\n                }\n            }\n            for (var j = 0; node.ports && j < node.ports.length; j++) {\n                var isInEdge = isSource ? false : true;\n                this.removePortEdges(node, node.ports[j].id, connector.id, isInEdge);\n            }\n        }\n    };\n    /**\n     * Remove the dependent connectors if the node is deleted\n     * @returns { void } Remove the dependent connectors if the node is deleted .\\\n     * @param {Node} node - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeDependentConnector = function (node) {\n        var connector;\n        var edges = [];\n        edges = edges.concat(node.outEdges, node.inEdges);\n        for (var i = edges.length - 1; i >= 0; i--) {\n            connector = this.nameTable[edges[i]];\n            if (connector) {\n                this.connectorTable[connector.id] = cloneObject(connector);\n                this.remove(connector);\n            }\n        }\n    };\n    /**\n     * Remove the dependent connectors if the node is deleted\n     * @returns { void } Remove the dependent connectors if the node is deleted .\\\n     * @param {(NodeModel | ConnectorModel)} obj - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeObjectsFromLayer = function (obj) {\n        if (obj.children) {\n            for (var i = 0; i < obj.children.length; i++) {\n                var object = this.nameTable[obj.children[i]];\n                if (object) {\n                    this.removeObjectsFromLayer(object);\n                }\n            }\n        }\n        var layer = this.layers.indexOf(this.commandHandler.getObjectLayer(obj.id));\n        var objects = this.layers[layer].objects;\n        var objIndex = objects.indexOf(obj.id);\n        if (objIndex > -1) {\n            if (isSelected(this, obj)) {\n                this.unSelect(obj);\n            }\n            this.layers[layer].objects.splice(objIndex, 1);\n            delete this.layers[layer].zIndexTable[this.nameTable[obj.id].zIndex];\n        }\n    };\n    /**\n     * removeElements method \\\n     *\n     * @returns { string }     removeElements method .\\\n     * @param {NodeModel | ConnectorModel} currentObj - provide the currentObj value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeElements = function (currentObj) {\n        if (this.mode === 'SVG' || (this.mode === 'Canvas' && currentObj.shape.type === 'Native')) {\n            var removeElement_1 = getDiagramElement(currentObj.id + '_groupElement', this.element.id);\n            var object = currentObj;\n            if ((object).ports && (object).ports.length > 0) {\n                for (var i = 0; i < (object).ports.length; i++) {\n                    var port = (object).ports[i];\n                    var removePort = getDiagramElement(object.id + '_' + port.id + '_groupElement', this.element.id);\n                    if (removePort) {\n                        removePort.parentNode.removeChild(removePort);\n                    }\n                }\n            }\n            if (removeElement_1) {\n                removeElement_1.parentNode.removeChild(removeElement_1);\n            }\n        }\n        this.refreshCanvasLayers();\n        if (currentObj.wrapper) {\n            var children = currentObj.wrapper.children;\n            var element = void 0;\n            var view = void 0;\n            if (children) {\n                for (var i = 0; i < children.length; i++) {\n                    if (children[i] instanceof DiagramNativeElement || ((children[i].id) && (children[i].id).indexOf('icon_content') > 0)) {\n                        if ((children[i].id).indexOf('icon_content') > 0 && this.mode === 'SVG') {\n                            element = getDiagramElement(children[i].id + '_shape_groupElement', this.element.id);\n                            if (element) {\n                                element.parentNode.removeChild(element);\n                            }\n                            element = getDiagramElement(children[i].id + '_rect_groupElement', this.element.id);\n                            if (element) {\n                                element.parentNode.removeChild(element);\n                            }\n                        }\n                        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                            var elementId = _a[_i];\n                            removeElement(children[i].id + '_groupElement', elementId);\n                            var nodeIndex = this.scroller.removeCollection.indexOf(currentObj.id);\n                            this.scroller.removeCollection.splice(nodeIndex, 1);\n                        }\n                    }\n                    else if (children[i] instanceof DiagramHtmlElement) {\n                        for (var _b = 0, _c = this.views; _b < _c.length; _b++) {\n                            var elementId = _c[_b];\n                            removeElement(currentObj.id + '_html_element', elementId);\n                            removeElement(children[i].id + '_html_element', elementId);\n                            this.clearTemplate(['nodeTemplate' + '_' + currentObj.id]);\n                            if (children[i].annotationId) {\n                                this.clearTemplate(['annotationTemplate' + '_' + currentObj.id + (children[i].annotationId)]);\n                            }\n                        }\n                    }\n                    removeGradient(children[i].id);\n                }\n            }\n        }\n    };\n    Diagram.prototype.removeCommand = function () {\n        this.remove();\n    };\n    /**\n     * Removes the given object from diagram\n     *\n     * @param {NodeModel | ConnectorModel} obj - Defines the object that has to be removed from diagram\n     */\n    /* tslint:disable */\n    Diagram.prototype.remove = function (obj) {\n        var selectedItems = [];\n        selectedItems = selectedItems.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n        var args;\n        var groupAction = false;\n        if (obj) {\n            obj = this.nameTable[obj.id];\n            this.insertBlazorConnector(obj);\n            if (obj && (canDelete(obj) || (this.diagramActions & DiagramAction.Clear))) {\n                args = {\n                    element: obj, cause: this.diagramActions,\n                    state: 'Changing', type: 'Removal', cancel: false\n                };\n                if (isBlazor()) {\n                    args = getCollectionChangeEventArguements(args, obj, 'Changing', 'Removal');\n                }\n                if (!(this.diagramActions & DiagramAction.Clear) && (obj.id !== 'helper')) {\n                    this.triggerEvent(DiagramEvent.collectionChange, args);\n                }\n                if (!args.cancel) {\n                    if (canDelete(obj)) {\n                        if (obj && obj.shape && obj.shape.type === 'SwimLane') {\n                            removeSwimLane(this, obj);\n                        }\n                    }\n                    if (this.bpmnModule) {\n                        if (this.bpmnModule.checkAndRemoveAnnotations(obj, this)) {\n                            this.refreshCanvasLayers();\n                            return;\n                        }\n                    }\n                    if ((!(this.diagramActions & DiagramAction.UndoRedo)) && !(this.diagramActions & DiagramAction.PreventHistory) &&\n                        (obj instanceof Node || obj instanceof Connector)) {\n                        var entry = {\n                            type: 'CollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj),\n                            redoObject: cloneObject(obj), category: 'Internal'\n                        };\n                        if (!(this.diagramActions & DiagramAction.Clear)) {\n                            if (obj.children && !obj.isLane && !obj.isPhase && obj.children.length > 0 && this.undoRedoModule && this.layout.type === 'None') {\n                                this.historyManager.startGroupAction();\n                                groupAction = true;\n                            }\n                        }\n                        if (obj instanceof Node) {\n                            this.removeDependentConnector(obj);\n                        }\n                        if (!obj.isLane && !obj.isPhase) {\n                            if (!(this.diagramActions & DiagramAction.Clear) && !this.isStackChild(obj)) {\n                                this.addHistoryEntry(entry);\n                            }\n                        }\n                    }\n                    if (obj.children && !obj.isLane && !obj.isPhase &&\n                        (!isBlazor() || !(this.diagramActions & DiagramAction.UndoRedo))) {\n                        this.deleteGroup(obj);\n                    }\n                    if (obj.parentId) {\n                        this.deleteChild(obj);\n                        if (this.nameTable[obj.parentId] && this.nameTable[obj.parentId].shape.type === 'UmlClassifier') {\n                            this.updateDiagramObject(this.nameTable[obj.parentId]);\n                            this.updateConnectorEdges(this.nameTable[obj.parentId]);\n                        }\n                    }\n                    var index = void 0;\n                    this.diagramActions = this.diagramActions | DiagramAction.PublicMethod;\n                    var currentObj = this.nameTable[obj.id];\n                    if (currentObj instanceof Node) {\n                        if (currentObj.shape.type === 'Bpmn' && this.bpmnModule) {\n                            this.bpmnModule.removeBpmnProcesses(currentObj, this);\n                        }\n                        if (currentObj.isLane || currentObj.isPhase || currentObj.shape.type === 'SwimLane') {\n                            var swimLaneNode = (currentObj.isLane || currentObj.isPhase) ?\n                                this.nameTable[currentObj.parentId] : this.nameTable[currentObj.id];\n                            var grid = swimLaneNode.wrapper.children[0];\n                            if (currentObj.isLane) {\n                                removeLane(this, currentObj, swimLaneNode);\n                            }\n                            else if (currentObj.isPhase) {\n                                removePhase(this, currentObj, swimLaneNode);\n                            }\n                        }\n                        index = this.nodes.indexOf(currentObj);\n                        if (isBlazor() && (obj.id !== 'helper')) {\n                            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                            }\n                            else if (this.blazorAddorRemoveCollection.length > 0) {\n                                this.commandHandler.getBlazorOldValues();\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                            }\n                            else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                                this.UpdateBlazorDiagramModel(obj, 'Node', index);\n                            }\n                        }\n                        if (index !== -1) {\n                            this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n                            this.nodes.splice(index, 1);\n                            this.updateNodeEdges(currentObj);\n                        }\n                    }\n                    else {\n                        index = this.connectors.indexOf(currentObj);\n                        if (isBlazor()) {\n                            if (this.blazorActions & BlazorAction.GroupingInProgress) {\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                            }\n                            else if (this.blazorAddorRemoveCollection.length > 0) {\n                                this.commandHandler.getBlazorOldValues();\n                                this.blazorAddorRemoveCollection.splice(0, 0, obj);\n                                this.blazorRemoveIndexCollection.splice(0, 0, index);\n                                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                            }\n                            else if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                                this.UpdateBlazorDiagramModel(obj, 'Connector', index);\n                            }\n                        }\n                        if (index !== -1) {\n                            this.crudDeleteNodes.push(this.nameTable[currentObj.id]);\n                            this.connectors.splice(index, 1);\n                        }\n                        this.updateEdges(currentObj);\n                        this.spliceConnectorEdges(obj, true);\n                        this.spliceConnectorEdges(obj, false);\n                    }\n                    if ((!this.isServerUpdate) && !(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n                        this.commandHandler.getBlazorOldValues();\n                    }\n                    if (groupAction) {\n                        this.historyManager.endGroupAction();\n                    }\n                    if (isSelected(this, currentObj)) {\n                        this.unSelect(currentObj);\n                    }\n                    if (!currentObj.isPhase) {\n                        this.removeObjectsFromLayer(obj);\n                        if (this.currentDrawingObject) {\n                            this.currentDrawingObject.wrapper = undefined;\n                        }\n                        delete this.nameTable[obj.id];\n                        if (selectedItems.length > 0 && selectedItems[0].id === currentObj.id && currentObj.parentId) {\n                            var parentnode = this.nameTable[currentObj.parentId];\n                            if (parentnode && parentnode.isLane && this.nameTable[parentnode.parentId].shape.type === 'SwimLane') {\n                                var swimLaneNode = this.nameTable[parentnode.parentId];\n                                removeLaneChildNode(this, swimLaneNode, parentnode, currentObj);\n                            }\n                        }\n                        this.removeElements(currentObj);\n                        this.updateBridging();\n                        if (this.mode !== 'SVG') {\n                            this.refreshDiagramLayer();\n                        }\n                        if (!(this.diagramActions & DiagramAction.Clear)) {\n                            this.removeFromAQuad(currentObj);\n                            args = {\n                                element: obj, cause: this.diagramActions,\n                                state: 'Changed', type: 'Removal', cancel: false\n                            };\n                            if (isBlazor()) {\n                                args = getCollectionChangeEventArguements(args, obj, 'Changed', 'Removal');\n                            }\n                            if (obj.id !== 'helper') {\n                                this.triggerEvent(DiagramEvent.collectionChange, args);\n                            }\n                            this.resetTool();\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectedItems.length > 0) {\n            if (this.undoRedoModule) {\n                this.historyManager.startGroupAction();\n                this.blazorActions |= BlazorAction.GroupingInProgress;\n                groupAction = true;\n            }\n            if (isBlazor() && selectedItems.length > 1) {\n                this.clearSelection();\n            }\n            for (var i = 0; i < selectedItems.length; i++) {\n                var node = selectedItems[i];\n                if (this.nameTable[selectedItems[i].id]) {\n                    if ((selectedItems[i] instanceof Connector) && this.bpmnModule &&\n                        this.bpmnModule.textAnnotationConnectors.indexOf(selectedItems[i]) > -1) {\n                        this.remove(this.nameTable[selectedItems[i].targetID]);\n                        return;\n                    }\n                    if (isBlazor()) {\n                        if (!this.isServerUpdate && selectedItems && selectedItems.length > 1) {\n                            this.isServerUpdate = true;\n                        }\n                        if (selectedItems[i].parentId) {\n                            this.insertBlazorDiagramObjects(this.nameTable[selectedItems[i].parentId]);\n                        }\n                    }\n                    this.remove(selectedItems[i]);\n                    if (isBlazor() && selectedItems[i].parentId) {\n                        this.commandHandler.getBlazorOldValues();\n                        this.isServerUpdate = false;\n                    }\n                }\n            }\n            if (groupAction) {\n                this.blazorActions &= ~BlazorAction.GroupingInProgress;\n                this.isServerUpdate = true;\n                this.commandHandler.getBlazorOldValues();\n                this.UpdateBlazorDiagramModelCollection(undefined, undefined, undefined, true);\n                this.historyManager.endGroupAction();\n                this.isServerUpdate = false;\n            }\n            this.clearSelection();\n        }\n        this.tooltipObject.close();\n        if (isBlazor() && selectedItems && selectedItems.length > 0) {\n            var check = true;\n            for (var k = 0; k < selectedItems.length; k++) {\n                if (this.nameTable[selectedItems[k].id]) {\n                    check = false;\n                }\n            }\n            if (check) {\n                this.isServerUpdate = false;\n            }\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.isStackChild = function (obj) {\n        var isstack;\n        var parent = this.nameTable[obj.parentId];\n        if (obj && obj.parentId && parent.container &&\n            (parent.container.type === 'Stack' &&\n                this.nameTable[obj.parentId].shape.type !== 'UmlClassifier')) {\n            isstack = true;\n            var redoElement = {\n                sourceIndex: parent.wrapper.children.indexOf(obj.wrapper), source: obj,\n                target: undefined, targetIndex: undefined\n            };\n            var entry = {\n                type: 'StackChildPositionChanged', redoObject: {\n                    sourceIndex: undefined, source: obj,\n                    target: undefined, targetIndex: undefined\n                },\n                undoObject: redoElement,\n                category: 'Internal'\n            };\n            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                this.addHistoryEntry(entry);\n            }\n        }\n        return isstack;\n    };\n    /** @private */\n    Diagram.prototype.deleteChild = function (node, parentNode) {\n        var id;\n        parentNode = parentNode ? this.nameTable[parentNode.id] : this.nameTable[node.parentId];\n        if (typeof node === 'string') {\n            id = node;\n        }\n        else {\n            id = node.id;\n        }\n        if (parentNode && parentNode.children) {\n            for (var i = 0; i < parentNode.children.length; i++) {\n                if (parentNode.children[i] === id) {\n                    parentNode.children.splice(i, 1);\n                    for (var j = 0; j < parentNode.wrapper.children.length; j++) {\n                        if (parentNode.wrapper.children[j].id === id) {\n                            parentNode.wrapper.children.splice(j, 1);\n                        }\n                    }\n                }\n            }\n            parentNode.wrapper.measure(new Size());\n            parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n        }\n    };\n    /**\n     * addChild method \\\n     *\n     * @returns { string }     addChild method .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string | NodeModel | ConnectorModel} child - provide the child value.\n     * @param {number} index - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.addChild = function (node, child, index) {\n        var id;\n        var parentNode = this.nameTable[node.id];\n        if (!parentNode.children) {\n            parentNode.children = [];\n        }\n        if (parentNode.children) {\n            if (typeof child === 'string') {\n                if (this.nameTable[child]) {\n                    id = child;\n                }\n            }\n            else {\n                id = child.id = child.id || randomId();\n                this.add(child);\n            }\n            if (id && (!child.umlIndex || child.umlIndex === -1)) {\n                var childNode = this.nameTable[id];\n                childNode.parentId = parentNode.id;\n                if (parentNode.container && parentNode.container.type === 'Stack') {\n                    this.updateStackProperty(parentNode, childNode);\n                }\n                if (index) {\n                    parentNode.children.splice(index, 0, id);\n                    parentNode.wrapper.children.splice(index, 0, childNode.wrapper);\n                }\n                else {\n                    parentNode.children.push(id);\n                    parentNode.wrapper.children.push(childNode.wrapper);\n                }\n                parentNode.wrapper.measure(new Size());\n                parentNode.wrapper.arrange(parentNode.wrapper.desiredSize);\n                if (!parentNode.isLane) {\n                    this.nameTable[node.id].width = parentNode.wrapper.actualSize.width;\n                    this.nameTable[node.id].height = parentNode.wrapper.actualSize.height;\n                    this.nameTable[node.id].offsetX = parentNode.wrapper.offsetX;\n                    this.nameTable[node.id].offsetY = parentNode.wrapper.offsetY;\n                }\n                if (parentNode.container !== undefined) {\n                    childNode.offsetX = childNode.wrapper.offsetX;\n                    childNode.offsetY = childNode.wrapper.offsetY;\n                }\n                if (!parentNode.parentId ||\n                    (this.nameTable[parentNode.parentId] &&\n                        this.nameTable[parentNode.parentId].shape.type !== 'SwimLane')) {\n                    this.updateDiagramObject(parentNode);\n                }\n            }\n        }\n        return id;\n    };\n    /**\n     * Clears all nodes and objects in the diagram\n     *\n     * @returns { void }     getDirection method .\\\n\n     */\n    Diagram.prototype.clear = function () {\n        this.clearObjects();\n    };\n    Diagram.prototype.clearObjects = function (collection) {\n        var objects = [];\n        if (!collection) {\n            objects = objects.concat(this.nodes);\n            objects = objects.concat(this.connectors);\n        }\n        else {\n            objects = collection;\n        }\n        this.diagramActions = this.diagramActions | DiagramAction.Clear;\n        for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {\n            var obj = objects_1[_i];\n            if (this.nameTable[obj.id]) {\n                this.remove(obj);\n            }\n        }\n        this.diagramActions = this.diagramActions & ~DiagramAction.Clear;\n        this.spatialSearch = new SpatialSearch(this.nameTable);\n        this.initHistory();\n    };\n    Diagram.prototype.startEditCommad = function () {\n        var laneHeader;\n        var node = (this.selectedItems.nodes[0]) ? this.selectedItems.nodes[0] : undefined;\n        if (node && node instanceof Node) {\n            if (node.isLane && node.parentId) {\n                var swimlane = this.nameTable[node.parentId];\n                var lanes = swimlane.shape.lanes;\n                var canvasId = (node.id.slice(swimlane.id.length));\n                var currentParentId = canvasId.substring(0, canvasId.length - 1);\n                for (var i = 0; i < lanes.length; i++) {\n                    if (node.isLane && currentParentId === lanes[i].id) {\n                        laneHeader = this.nameTable[lanes[i].header.id];\n                    }\n                }\n            }\n            else if (node.shape.type === 'SwimLane' && node.shape.header && node.shape.hasHeader) {\n                var id = node.wrapper.children[0].rows[0].cells[0].children[0].id;\n                laneHeader = this.nameTable[id];\n            }\n        }\n        this.startTextEdit(laneHeader);\n    };\n    /* tslint:disable */\n    /**\n     * Specified annotation to edit mode\n     *\n     * @returns { void }  Specified annotation to edit mode .\\\n     * @param {NodeModel | ConnectorModel} node - Defines node/connector that contains the annotation to be edited\n     * @param {string} id - Defines annotation id to be edited in the node\n     */\n    Diagram.prototype.startTextEdit = function (node, id) {\n        if ((!canZoomPan(this) && !canMultiSelect(this)) || canSingleSelect(this)) {\n            this.textEditing = true;\n            var transform = this.scroller.transform;\n            var scale = canZoomTextEdit(this) ? transform.scale : 1;\n            var minWidth = 90;\n            var text = void 0;\n            var bounds = void 0;\n            var attributes = void 0;\n            var x = void 0;\n            var y = void 0;\n            var textWrapper = void 0;\n            if (!node) {\n                node = (this.selectedItems.nodes[0]) ? this.selectedItems.nodes[0] : this.selectedItems.connectors[0];\n            }\n            if (node) {\n                if (isBlazor()) {\n                    var selectedNode = cloneObject(node);\n                    if (selectedNode.annotations.length > 0) {\n                        this.insertValue(selectedNode, (node instanceof Node) ? true : false);\n                    }\n                    node = this.nameTable[node.id] || node;\n                }\n                if (node.shape && node.shape.type === 'UmlClassifier') {\n                    node = this.nameTable[node.children[0]];\n                }\n                var bpmnAnnotation = false;\n                if (this.bpmnModule) {\n                    textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, id);\n                    if (textWrapper) {\n                        node = this.nameTable[node.id.split('_textannotation_')[0]];\n                    }\n                }\n                if (!textWrapper) {\n                    if (node.shape.type !== 'Text' && node.annotations.length === 0) {\n                        if (!(node.constraints & NodeConstraints.ReadOnly)) {\n                            this.activeLabel.isGroup = true;\n                            this.startGroupAction();\n                            this.addLabels(node, [{ id: randomId(), content: '' }]);\n                        }\n                    }\n                    if (!id && ((node.shape.type !== 'Text' && node.annotations.length > 0) || (node.shape.type === 'Text'))) {\n                        id = (node.shape.type === 'Text') ? (node.wrapper.children[0].id).split('_')[1] : node.annotations[0].id;\n                    }\n                    if (id) {\n                        textWrapper = this.getWrapper(node.wrapper, id);\n                    }\n                }\n                else {\n                    bpmnAnnotation = true;\n                }\n                if (node && textWrapper && !(textWrapper instanceof DiagramHtmlElement) &&\n                    (!enableReadOnly(textWrapper, node) || bpmnAnnotation)) {\n                    var style = (textWrapper.style);\n                    var maxWidth = void 0;\n                    maxWidth = textWrapper.bounds.width < node.wrapper.bounds.width ? textWrapper.bounds.width : node.wrapper.bounds.width;\n                    maxWidth = minWidth > maxWidth ? minWidth : maxWidth;\n                    var textEditing = document.getElementById(this.element.id + '_editTextBoxDiv');\n                    var textArea = document.getElementById(this.element.id + '_editBox');\n                    text = textArea ? textArea.value : textWrapper.content;\n                    this.activeLabel.text = text;\n                    if (!textEditing && !textArea) {\n                        textEditing = createHtmlElement('div', {});\n                        textArea = createHtmlElement('textarea', {});\n                        this.diagramCanvas.appendChild(textEditing);\n                        textEditing.appendChild(textArea);\n                        textArea.appendChild(document.createTextNode(text));\n                    }\n                    bounds = measureHtmlText(textWrapper.style, text, undefined, undefined, maxWidth);\n                    if (bounds.isEmpty()) {\n                        if (node.shape.type !== 'Text') {\n                            bounds = new Size(findAnnotation(node, (textWrapper.id).split(node.id + '_')[1]).width || 50, textWrapper.style.fontSize);\n                        }\n                        else {\n                            bounds = new Size((node.width > 50) ? 50 : node.width, textWrapper.style.fontSize);\n                        }\n                    }\n                    if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier') {\n                        bounds.width = node.wrapper.bounds.width - 20;\n                        x = ((((node.wrapper.bounds.center.x + transform.tx) * transform.scale) - (bounds.width / 2) * scale) - 2.5);\n                        y = ((((node.wrapper.bounds.center.y + transform.ty) * transform.scale) - (bounds.height / 2) * scale) - 3);\n                        textWrapper.style.textAlign = 'Left';\n                    }\n                    else {\n                        bounds.width = Math.max(bounds.width, 50);\n                        x = ((((textWrapper.bounds.center.x + transform.tx) * transform.scale) - (bounds.width / 2) * scale) - 2.5);\n                        y = ((((textWrapper.bounds.center.y + transform.ty) * transform.scale) - (bounds.height / 2) * scale) - 3);\n                    }\n                    attributes = {\n                        'id': this.element.id + '_editTextBoxDiv', 'style': 'position: absolute' + ';left:' + x + 'px;top:' +\n                            y + 'px;width:' + ((bounds.width + 1) * scale) + 'px;height:' + (bounds.height * scale) +\n                            'px; containerName:' + node.id + ';'\n                    };\n                    setAttributeHtml(textEditing, attributes);\n                    attributes = {\n                        'id': this.element.id + '_editBox', 'style': 'width:' + ((bounds.width + 1) * scale) +\n                            'px;height:' + (bounds.height * scale) + 'px;resize: none;outline: none;overflow: hidden;' +\n                            ';font-family:' + style.fontFamily +\n                            ';font-size:' + (style.fontSize * scale) + 'px;text-align:' +\n                            (textWrapper.style.textAlign.toLocaleLowerCase()) + ';', 'class': 'e-diagram-text-edit'\n                    };\n                    setAttributeHtml(textArea, attributes);\n                    textArea.style.fontWeight = (style.bold) ? 'bold' : '';\n                    textArea.style.fontStyle = (style.italic) ? 'italic' : '';\n                    textArea.style.lineHeight = (style.fontSize * 1.2 + 'px;').toString();\n                    textArea.style.textDecoration = (style.textDecoration) ? style.textDecoration : '';\n                    this.activeLabel.parentId = node.id;\n                    this.activeLabel.id = id;\n                    textWrapper.visible = false;\n                    this.updateDiagramObject(node);\n                    this.diagramActions = this.diagramActions | DiagramAction.TextEdit;\n                    if (!this.isTriggerEvent) {\n                        EventHandler.add(textArea, 'input', this.eventHandler.inputChange, this.eventHandler);\n                        EventHandler.add(textArea, 'focusout', this.focusOutEdit, this);\n                        textArea.select();\n                    }\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateConnectorfixedUserHandles = function (connector) {\n        if (connector.fixedUserHandles.length) {\n            var fixedUserHandleWrapper = void 0;\n            for (var _i = 0, _a = connector.fixedUserHandles; _i < _a.length; _i++) {\n                var fixedUserHandle = _a[_i];\n                fixedUserHandleWrapper = this.getWrapper(connector.wrapper, fixedUserHandle.id);\n                connector.updateAnnotation(fixedUserHandle, connector.intermediatePoints, connector.wrapper.bounds, fixedUserHandleWrapper);\n            }\n        }\n        connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n        connector.wrapper.arrange(connector.wrapper.desiredSize);\n    };\n    /* tslint:enable */\n    Diagram.prototype.updateNodeExpand = function (node, visibility) {\n        for (var i = 0; i < node.outEdges.length; i++) {\n            var connector = this.nameTable[node.outEdges[i]];\n            var target = this.nameTable[connector.targetID];\n            connector.visible = visibility;\n            if (!visibility) {\n                this.updateElementVisibility(connector.wrapper, connector, false);\n                target.isExpanded = visibility;\n            }\n            this.updateNodeExpand(target, target.isExpanded);\n            target.visible = visibility;\n            if (!visibility) {\n                this.updateElementVisibility(target.wrapper, target, false);\n            }\n        }\n    };\n    Diagram.prototype.updateConnectorAnnotation = function (connector) {\n        if (connector.annotations.length) {\n            var annotationWrapper = void 0;\n            for (var _i = 0, _a = connector.annotations; _i < _a.length; _i++) {\n                var annotation = _a[_i];\n                annotationWrapper = this.getWrapper(connector.wrapper, annotation.id);\n                connector.updateAnnotation(annotation, connector.intermediatePoints, connector.wrapper.bounds, annotationWrapper, (this.diagramActions & DiagramAction.Interactions));\n            }\n        }\n        connector.wrapper.measure(new Size(connector.wrapper.width, connector.wrapper.height));\n        connector.wrapper.arrange(connector.wrapper.desiredSize);\n    };\n    Diagram.prototype.removeChildrenFromLayout = function (nodes) {\n        var nodesCollection = [];\n        var node;\n        var parentId = 'parentId';\n        var processId = 'processId';\n        for (var i = 0; i < nodes.length; i++) {\n            node = nodes[i];\n            if (!node[parentId] && !node[processId]) {\n                nodesCollection.push(node);\n            }\n        }\n        return nodesCollection;\n    };\n    /* tslint:disable */\n    /**\n     * Automatically updates the diagram objects based on the type of the layout\n     * @returns { ILayout | boolean }  Automatically updates the diagram objects based on the type of the layout .\\\n     */\n    Diagram.prototype.doLayout = function () {\n        var update = false;\n        var layout;\n        var canDoOverlap = (this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree');\n        var propChange = this.isProtectedOnChange;\n        this.protectPropertyChange(true);\n        var nodes = this.removeChildrenFromLayout(this.nodes);\n        var canEnableRouting = this.layout.enableRouting && this.layout.type === 'ComplexHierarchicalTree';\n        var viewPort = { x: this.scroller.viewPortWidth, y: this.scroller.viewPortHeight };\n        if (this.layout.type !== 'None') {\n            if (canEnableRouting || (this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) || this.layout.arrangement === 'Linear') {\n                this.lineDistributionModule.initLineDistribution(this.layout, this);\n            }\n            if (this.organizationalChartModule) {\n                layout = this.organizationalChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.diagramActions);\n                update = true;\n                if (this.layoutAnimateModule && layout.rootNode && !this.diagramActions) {\n                    this.updateNodeExpand(layout.rootNode, layout.rootNode.isExpanded);\n                }\n            }\n            else if (this.mindMapChartModule) {\n                if (nodes && nodes.length > 0) {\n                    this.mindMapChartModule.updateLayout(nodes, this.nameTable, this.layout, viewPort, this.dataSourceSettings.id, this.dataSourceSettings.root);\n                }\n                update = true;\n            }\n            else if (this.radialTreeModule) {\n                this.radialTreeModule.updateLayout(nodes, this.nameTable, this.layout, viewPort);\n                update = true;\n            }\n            else if (this.symmetricalLayoutModule) {\n                this.symmetricalLayoutModule.maxIteration = this.layout.maxIteration;\n                this.symmetricalLayoutModule.springLength = this.layout.springLength;\n                this.symmetricalLayoutModule.springFactor = this.layout.springFactor;\n                this.symmetricalLayoutModule.updateLayout(nodes, this.connectors, this.symmetricalLayoutModule, this.nameTable, this.layout, viewPort);\n                update = true;\n            }\n            else if (this.complexHierarchicalTreeModule) {\n                var nodes_1 = this.complexHierarchicalTreeModule.getLayoutNodesCollection(this.nodes);\n                if (nodes_1.length > 0) {\n                    // eslint-disable-next-line max-len\n                    this.complexHierarchicalTreeModule.doLayout(nodes_1, this.nameTable, this.layout, viewPort, this.lineDistributionModule);\n                }\n                update = true;\n            }\n            if (update) {\n                this.preventDiagramUpdate = true;\n                var connectors = {};\n                var updatedNodes = nodes;\n                if (isBlazor()) {\n                    this.updateTemplate();\n                }\n                for (var _i = 0, updatedNodes_1 = updatedNodes; _i < updatedNodes_1.length; _i++) {\n                    var obj = updatedNodes_1[_i];\n                    var node = obj;\n                    if (!this.preventNodesUpdate && (!this.diagramActions || !(this.diagramActions & DiagramAction.PreventIconsUpdate))) {\n                        this.updateIcon(node);\n                        this.updateDefaultLayoutIcons(node);\n                    }\n                    this.preventNodesUpdate = true;\n                    this.nodePropertyChange(node, {}, { offsetX: node.offsetX, offsetY: node.offsetY }, true);\n                    this.preventNodesUpdate = false;\n                    node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n                    node.wrapper.arrange(node.wrapper.desiredSize);\n                    this.updateDiagramObject(node, true);\n                    if (node.inEdges.length > 0) {\n                        for (var j = 0; j < node.inEdges.length; j++) {\n                            var connector = this.nameTable[node.inEdges[j]];\n                            connectors[connector.id] = connector;\n                        }\n                    }\n                    if (node.outEdges.length > 0) {\n                        for (var k = 0; k < node.outEdges.length; k++) {\n                            var connection = this.nameTable[node.outEdges[k]];\n                            connectors[connection.id] = connection;\n                        }\n                    }\n                }\n                for (var _a = 0, _b = Object.keys(connectors); _a < _b.length; _a++) {\n                    var conn = _b[_a];\n                    if (canEnableRouting) {\n                        this.lineDistributionModule.resetConnectorSegments(this.nameTable[conn]);\n                    }\n                    var connector = connectors[conn];\n                    var points = this.getPoints(connector);\n                    if (canEnableRouting) {\n                        this.lineDistributionModule.resetRoutingSegments(connector, this, points);\n                    }\n                    updateConnector(connector, points);\n                    if (connector.shape.type === 'Bpmn' && connector.shape.sequence === 'Default') {\n                        this.commandHandler.updatePathElementOffset(connector);\n                    }\n                    connector.wrapper.measure(new Size(undefined, undefined));\n                    connector.wrapper.arrange(connector.wrapper.desiredSize);\n                    this.updateConnectorAnnotation(connector);\n                    this.updateConnectorfixedUserHandles(connector);\n                    this.updateQuad(connector);\n                    this.updateDiagramObject(connector, true);\n                }\n                if (canEnableRouting || this.layout.connectionPointOrigin === 'DifferentPoint' && this.lineDistributionModule && canDoOverlap) {\n                    this.lineDistributionModule.distributeLines(this.layout, this);\n                }\n                this.preventDiagramUpdate = false;\n                this.updatePage();\n                if ((!(this.diagramActions & DiagramAction.Render)) || this.mode === 'Canvas') {\n                    this.refreshDiagramLayer();\n                }\n            }\n            if (!propChange) {\n                this.protectPropertyChange(propChange);\n            }\n        }\n        if (update) {\n            this.updateDiagramElementQuad();\n        }\n        return ((this.blazorActions & BlazorAction.expandNode) ? layout : isBlazor() ? null : true);\n    };\n    /* tslint:enable */\n    /**\n     * Serializes the diagram control as a string\n     * @returns { string }     Serializes the diagram control as a string .\\\n     */\n    Diagram.prototype.saveDiagram = function () {\n        return serialize(this);\n    };\n    /**\n     * Converts the given string as a Diagram Control\n     *\n     * @returns { Object }      Converts the given string as a Diagram Control .\\\n     * @param {string} data - Defines the behavior of the diagram to be loaded\n\n     */\n    Diagram.prototype.loadDiagram = function (data) {\n        return deserialize(data, this);\n    };\n    /**\n     * To  get the html diagram content\n     *\n     * @returns { string }     getDirection method .\\\n     * @param {StyleSheetList} styleSheets - defines the collection of style files to be considered while exporting.\n     */\n    Diagram.prototype.getDiagramContent = function (styleSheets) {\n        if (this.printandExportModule) {\n            var data = this.printandExportModule.getDiagramContent(styleSheets);\n            return data;\n        }\n        return '';\n    };\n    /**\n     * To export diagram native/html image\n     *\n     * @returns { void } To export diagram native/html image .\\\n     * @param {string} image - defines image content to be exported.\n     * @param {IExportOptions} options - defines the image properties.\n     */\n    Diagram.prototype.exportImage = function (image, options) {\n        if (this.printandExportModule) {\n            this.printandExportModule.exportImages(image, options);\n        }\n    };\n    /**\n     * To print native/html nodes of diagram\n     *\n     * @returns { void } To print native/html nodes of diagram .\\\n     * @param {string} image - defines image content.\n     * @param {IExportOptions} options - defines the properties of the image\n     */\n    Diagram.prototype.printImage = function (image, options) {\n        if (this.printandExportModule) {\n            options.printOptions = true;\n            this.printandExportModule.exportImages(image, options);\n        }\n    };\n    /**\n     * To limit the history entry of the diagram\n     *\n     * @returns { void }  To limit the history entry of the diagram.\\\n     * @param {number} stackLimit - defines stackLimit of the history manager.\n     */\n    Diagram.prototype.setStackLimit = function (stackLimit) {\n        if (this.undoRedoModule && stackLimit) {\n            this.historyManager.stackLimit = stackLimit;\n            this.undoRedoModule.applyLimit(this.historyManager.currentEntry, stackLimit, this, true);\n        }\n    };\n    /**\n     * To clear history of the diagram\n     * @returns { void } To clear history of the diagram .\\\n     */\n    Diagram.prototype.clearHistory = function () {\n        if (this.undoRedoModule) {\n            this.undoRedoModule.clearHistory(this);\n        }\n    };\n    /**\n     * To get the bound of the diagram\n     * @returns { void } To get the bound of the diagram .\\\n     */\n    Diagram.prototype.getDiagramBounds = function () {\n        if (this.printandExportModule) {\n            var bounds = this.printandExportModule.getDiagramBounds('', {});\n            bounds.width = bounds.width > this.scrollSettings.viewPortWidth ?\n                bounds.width + (bounds.x > 0 ? bounds.x : 0) : this.scrollSettings.viewPortWidth;\n            bounds.height = bounds.height > this.scrollSettings.viewPortHeight ?\n                bounds.height + (bounds.y > 0 ? bounds.y : 0) : this.scrollSettings.viewPortHeight;\n            bounds.x = bounds.x > 0 ? 0 : bounds.x;\n            bounds.y = bounds.y > 0 ? 0 : bounds.y;\n            return bounds;\n        }\n        return new Rect();\n    };\n    /**\n     * To export Diagram\n     *\n     * @returns { void } To export Diagram .\\\n     * @param {IExportOptions} options - defines the how the image to be exported.\n     */\n    Diagram.prototype.exportDiagram = function (options) {\n        if (this.printandExportModule) {\n            var data = this.printandExportModule.exportDiagram(options);\n            return data;\n        }\n        return '';\n    };\n    /**\n     * To print Diagram\n     *\n     * @returns { void }     To print Diagram .\\\n     * @param {IPrintOptions} optons - defines how the image to be printed.\n     */\n    Diagram.prototype.print = function (options) {\n        if (this.printandExportModule) {\n            this.printandExportModule.print(options);\n        }\n    };\n    /**\n     * Add ports at the run time \\\n     *\n     * @returns { void }    Remove Labels at the run time .\\\n     * @param { Node | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} ports - provide the ports value.\n     * @blazorArgsType obj|DiagramNode\n     */\n    Diagram.prototype.addPorts = function (obj, ports) {\n        this.protectPropertyChange(true);\n        var portCollection = [];\n        var isAddPortInServer = true;\n        if (isBlazor() && obj !== null && (obj.ports.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo))) {\n            var index = Number(findObjectIndex(obj, ports[0].id, false));\n            if (index !== -1) {\n                isAddPortInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        var newObj;\n        if (ports.length > 1) {\n            this.startGroupAction();\n        }\n        for (var i = 0; i < ports.length; i++) {\n            newObj = new PointPort(obj, 'ports', ports[i], true);\n            obj.ports.push(newObj);\n            if (isBlazor() && isAddPortInServer) {\n                portCollection.push(newObj);\n            }\n            if (obj.children) {\n                var container = obj.wrapper;\n                obj.initPort(this.getDescription, obj.wrapper.children[container.children.length - 1], newObj);\n            }\n            else {\n                var canvas = obj.wrapper;\n                canvas.children.push(obj.initPortWrapper(obj.ports[obj.ports.length - 1]));\n            }\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'PortCollectionChanged', changeType: 'Insert', undoObject: cloneObject(newObj),\n                    redoObject: cloneObject(obj), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n        if (ports.length > 1) {\n            this.endGroupAction();\n        }\n        if (isBlazor() && isAddPortInServer) {\n            this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', undefined, this.nodes.indexOf(obj));\n        }\n        obj.wrapper.measure(new Size(obj.width, obj.height));\n        obj.wrapper.arrange(obj.wrapper.desiredSize);\n        this.updateDiagramObject(obj);\n        this.protectPropertyChange(false);\n    };\n    /**\n     * Add constraints at run time \\\n     *\n     * @returns { void }Add constraints at run time .\\\n     * @param {number} constraintsType - provide the source value.\n     * @param {number} constraintsValue - provide the target value.\n     *\n     */\n    Diagram.prototype.addConstraints = function (constraintsType, constraintsValue) {\n        return constraintsType | constraintsValue;\n    };\n    /**\n     * Remove constraints at run time \\\n     *\n     * @returns { void }Remove constraints at run time .\\\n     * @param {number} constraintsType - provide the source value.\n     * @param {number} constraintsValue - provide the target value.\n     *\n     */\n    Diagram.prototype.removeConstraints = function (constraintsType, constraintsValue) {\n        return constraintsType & ~constraintsValue;\n    };\n    /**\n     * Add labels in node at the run time in the blazor platform \\\n     *\n     * @returns { void } Add labels in node at the run time in the blazor platform .\\\n     * @param {NodeModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addNodeLabels = function (obj, labels) {\n        this.addLabels(obj, labels);\n    };\n    /**\n     * Add labels in connector at the run time in the blazor platform\\\n     *\n     * @returns { void } Add labels in connector at the run time in the blazor platform .\\\n     * @param {ConnectorModel} obj - provide the obj value.\n     * @param {PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addConnectorLabels = function (obj, labels) {\n        this.addLabels(obj, labels);\n    };\n    /**\n     * Add Labels at the run time \\\n     *\n     * @returns { void } Add Labels at the run time .\\\n     * @param {NodeModel | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotation[] | PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.addLabels = function (obj, labels) {\n        this.protectPropertyChange(true);\n        var isAddLabelInServer = true;\n        var annotationCollection = [];\n        if (isBlazor() && obj != null && obj.annotations.length > 0 && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = Number(findObjectIndex(obj, labels[0].id, true));\n            if (index !== -1) {\n                isAddLabelInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        var canvas = obj.wrapper;\n        var newObj;\n        if (labels.length > 1) {\n            this.startGroupAction();\n        }\n        for (var i = 0; i < labels.length; i++) {\n            if (obj instanceof Node) {\n                newObj = new ShapeAnnotation(obj, 'annotations', labels[i], true);\n                obj.annotations.push(newObj);\n                if (isBlazor() && isAddLabelInServer) {\n                    annotationCollection.push(newObj);\n                }\n                if (obj.children) {\n                    var node = obj;\n                    for (var i_2 = 0; i_2 < node.wrapper.children.length; i_2++) {\n                        if (node.wrapper.children[i_2].id === node.id + 'group_container') {\n                            var container = node.wrapper.children[i_2];\n                            container.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n                        }\n                    }\n                }\n                else {\n                    canvas.children.push(obj.initAnnotationWrapper(obj.annotations[obj.annotations.length - 1], this.element.id));\n                }\n            }\n            else if (obj instanceof Connector) {\n                newObj = new PathAnnotation(obj, 'annotations', labels[i], true);\n                obj.annotations.push(newObj);\n                if (isBlazor() && isAddLabelInServer) {\n                    annotationCollection.push(newObj);\n                }\n                var segment = canvas.children[0];\n                var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n                canvas.children.push(obj.getAnnotationElement(obj.annotations[obj.annotations.length - 1], obj.intermediatePoints, bounds, this.getDescription, this.element.id));\n            }\n            if (!(this.diagramActions & DiagramAction.UndoRedo) && !(this.diagramActions & DiagramAction.Group)) {\n                var entry = {\n                    type: 'LabelCollectionChanged', changeType: 'Insert', undoObject: cloneObject(newObj),\n                    redoObject: cloneObject(obj), category: 'Internal'\n                };\n                this.addHistoryEntry(entry);\n            }\n        }\n        if (labels.length > 1) {\n            this.endGroupAction();\n        }\n        if (isBlazor() && isAddLabelInServer) {\n            this.UpdateBlazorLabelOrPortObjects(annotationCollection, (obj instanceof Node) ? 'NodeAnnotation' : 'ConnectorAnnotation', undefined, (obj instanceof Node) ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n        }\n        obj.wrapper.measure(new Size(canvas.width, canvas.height));\n        obj.wrapper.arrange(canvas.desiredSize);\n        this.updateDiagramObject(obj);\n        this.protectPropertyChange(false);\n    };\n    /**\n     * Add dynamic Lanes to swimLane at runtime \\\n     *\n     * @returns { void } Add dynamic Lanes to swimLane at runtime .\\\n     * @param {NodeModel} node - provide the obj value.\n     * @param {LaneModel[]} lane - provide the labels value.\n     * @param {number} index - provide the labels value.\n     *\n     */\n    Diagram.prototype.addLanes = function (node, lane, index) {\n        node = this.nameTable[node.id] || node;\n        for (var i = 0; i < lane.length; i++) {\n            addLane(this, node, lane[i], index);\n            if (index !== undefined) {\n                index += 1;\n            }\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     * Add a phase to a swimLane at runtime \\\n     *\n     * @returns { void } Add a phase to a swimLane at runtime .\\\n     * @param {NodeModel} node - provide the obj value.\n     * @param {PhaseModel[]} phases - provide the labels value.\n     *\n     */\n    Diagram.prototype.addPhases = function (node, phases) {\n        node = this.nameTable[node.id] || node;\n        for (var i = 0; i < phases.length; i++) {\n            addPhase(this, node, phases[i]);\n        }\n        this.updateDiagramElementQuad();\n    };\n    /**\n     *Remove dynamic Lanes to swimLane at runtime \\\n     *\n     * @returns { void } Remove dynamic Lanes to swimLane at runtime .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {LaneModel} lane - provide the lane value.\n     *\n     */\n    Diagram.prototype.removeLane = function (node, lane) {\n        removeLane(this, undefined, node, lane);\n        this.updateDiagramElementQuad();\n    };\n    /**\n     *Remove a phase to a swimLane at runtime \\\n     *\n     * @returns { void } Remove a phase to a swimLane at runtime .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {PhaseModel} phase - provide the phase value.\n     *\n     */\n    Diagram.prototype.removePhase = function (node, phase) {\n        removePhase(this, undefined, node, phase);\n        this.updateDiagramElementQuad();\n    };\n    Diagram.prototype.removelabelExtension = function (obj, labels, j, wrapper) {\n        for (var i = 0; i < wrapper.children.length; i++) {\n            var canvas = wrapper.children[i];\n            if ((canvas instanceof TextElement) || (canvas instanceof DiagramHtmlElement)) {\n                if (canvas.id.match('_' + labels[j].id + '$')) {\n                    for (var k = 0; k < obj.annotations.length; k++) {\n                        if (canvas.id.match('_' + obj.annotations[k].id + '$')) {\n                            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                                var entry = {\n                                    type: 'LabelCollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj.annotations[k]),\n                                    redoObject: cloneObject(obj), category: 'Internal'\n                                };\n                                this.addHistoryEntry(entry);\n                            }\n                            obj.annotations.splice(k, 1);\n                        }\n                    }\n                    wrapper.children.splice(i, 1);\n                    if (this.mode === 'SVG') {\n                        var element = getDiagramElement(canvas.id, this.element.id);\n                        if (element) {\n                            var element_1 = getDiagramElement(canvas.id, this.element.id);\n                            element_1.parentNode.removeChild(element_1);\n                        }\n                        var textElement = getDiagramElement(canvas.id + '_text', this.element.id);\n                        if (textElement) {\n                            element = getDiagramElement(canvas.id + '_text', this.element.id);\n                            element.parentNode.removeChild(element);\n                        }\n                        var htmlElement = getDiagramElement(canvas.id + '_html_element', this.element.id);\n                        if (htmlElement) {\n                            htmlElement.parentNode.removeChild(htmlElement);\n                        }\n                    }\n                    else {\n                        this.refreshCanvasLayers();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Remove Labels at the run time \\\n     *\n     * @returns { string }    Remove Labels at the run time .\\\n     * @param { Node | ConnectorModel} obj - provide the obj value.\n     * @param {ShapeAnnotationModel[] | PathAnnotationModel[]} labels - provide the labels value.\n     *\n     */\n    Diagram.prototype.removeLabels = function (obj, labels) {\n        var isAddLabelInServer = true;\n        if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = (obj.annotations.length > 0) ? Number(findObjectIndex(obj, (labels[0]).id, true)) : -1;\n            if (index === -1) {\n                isAddLabelInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        if (isBlazor() && isAddLabelInServer) {\n            var annotationCollection = [];\n            var removalIndexCollection = [];\n            for (var j = 0; j < labels.length; j++) {\n                var index = Number(findObjectIndex(obj, labels[j].id, true));\n                removalIndexCollection.push(index);\n                annotationCollection.push(labels[j]);\n            }\n            this.UpdateBlazorLabelOrPortObjects(annotationCollection, (obj instanceof Node) ? 'NodeAnnotation' : 'ConnectorAnnotation', removalIndexCollection, (obj instanceof Node) ? this.nodes.indexOf(obj) : this.connectors.indexOf(obj));\n        }\n        if (labels.length > 1) {\n            this.startGroupAction();\n        }\n        for (var j = labels.length - 1; j >= 0; j--) {\n            if (obj.children && obj.children.length > 0) {\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    this.removelabelExtension(obj, labels, j, obj.wrapper.children[k]);\n                }\n            }\n            else {\n                this.removelabelExtension(obj, labels, j, obj.wrapper);\n            }\n        }\n        if (labels.length > 1) {\n            this.endGroupAction();\n        }\n    };\n    Diagram.prototype.removePortsExtenion = function (obj, ports, j, wrapper) {\n        for (var i = 0; i < wrapper.children.length; i++) {\n            var canvas = wrapper.children[i];\n            if (canvas instanceof PathElement) {\n                if (canvas.id.match('_' + ports[j].id + '$')) {\n                    for (var k = 0; k < obj.ports.length; k++) {\n                        if (canvas.id.match('_' + obj.ports[k].id + '$')) {\n                            if (!(this.diagramActions & DiagramAction.UndoRedo)) {\n                                var entry = {\n                                    type: 'PortCollectionChanged', changeType: 'Remove', undoObject: cloneObject(obj.ports[k]),\n                                    redoObject: cloneObject(obj), category: 'Internal'\n                                };\n                                this.addHistoryEntry(entry);\n                            }\n                            obj.ports.splice(k, 1);\n                        }\n                    }\n                    wrapper.children.splice(i, 1);\n                    if (this.mode === 'SVG') {\n                        var element = getDiagramElement(canvas.id, this.element.id);\n                        element.parentNode.removeChild(element);\n                    }\n                    else {\n                        this.refreshCanvasLayers();\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Remove Ports at the run time \\\n     *\n     * @returns { void } checkSourcePointInTarget method .\\\n     * @param {Node} obj - provide the Connector value.\n     * @param {PointPortModel[]} ports - provide the Connector value.\n     *\n     */\n    Diagram.prototype.removePorts = function (obj, ports) {\n        var isAddPortInServer = true;\n        if (isBlazor() && obj !== null && !(this.diagramActions & DiagramAction.UndoRedo)) {\n            var index = (obj.ports.length > 0) ? Number(findObjectIndex(obj, ports[0].id, false)) : -1;\n            if (index === -1) {\n                isAddPortInServer = false;\n            }\n        }\n        obj = this.nameTable[obj.id] || obj;\n        if (isBlazor() && isAddPortInServer) {\n            var removalIndexCollection = [];\n            var portCollection = [];\n            for (var j = ports.length - 1; j >= 0; j--) {\n                var index = Number(findObjectIndex(obj, ports[j].id, false));\n                removalIndexCollection.push(index);\n                portCollection.push(ports[j]);\n            }\n            this.UpdateBlazorLabelOrPortObjects(portCollection, 'Port', removalIndexCollection, this.nodes.indexOf(obj));\n        }\n        if (ports.length > 1) {\n            this.startGroupAction();\n        }\n        for (var j = ports.length - 1; j >= 0; j--) {\n            if (obj.children && obj.children.length > 0) {\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    this.removePortsExtenion(obj, ports, j, obj.wrapper.children[k]);\n                }\n            }\n            else {\n                this.removePortsExtenion(obj, ports, j, obj.wrapper);\n            }\n        }\n        if (ports.length > 1) {\n            this.endGroupAction();\n        }\n    };\n    //public methods - end region\n    /**\n     * getSizeValue method \\\n     *\n     * @returns { string }     getSizeValue method .\\\n     * @param {string | Number} real - provide the real value.\n     * @param {string | Number} rulerSize - provide the rulerSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.getSizeValue = function (real, rulerSize) {\n        var value;\n        if (real.toString().indexOf('px') > 0) {\n            value = real.toString();\n        }\n        else if (real.toString().indexOf('%') > 0) {\n            value = rulerSize !== undefined ? '100%' : real.toString();\n        }\n        else {\n            value = real.toString() + 'px';\n        }\n        if (rulerSize) {\n            var position = getRulerSize(this);\n            value = 'calc(' + value + ' - ' + rulerSize + 'px)';\n        }\n        return value;\n    };\n    Diagram.prototype.renderRulers = function () {\n        if (this.rulerSettings.showRulers) {\n            renderOverlapElement(this);\n            renderRuler(this, true);\n            renderRuler(this, false);\n        }\n        else {\n            removeRulerElements(this);\n        }\n    };\n    Diagram.prototype.intOffPageBackground = function () {\n        var position = new Size();\n        position = getRulerSize(this);\n        var element = document.getElementById(this.element.id + 'content');\n        var width = this.getSizeValue(this.width, position.width);\n        var height = this.getSizeValue(this.height, position.height);\n        var style = this.rulerSettings.showRulers ?\n            'width:' + width + '; height:' + height + ';' +\n                'top:' + position.height + 'px;left:' + position.width + 'px;' +\n                'overflow: scroll;position:absolute;overflow:auto;' :\n            'width:' + width + '; height:' + height + ';position:absolute;' +\n                ' left:0px;  top:0px;overflow: auto;';\n        var attr = {\n            'id': this.element.id + 'content',\n            'tabindex': '0',\n            'style': style\n        };\n        if (!element) {\n            this.diagramCanvas = createHtmlElement('div', attr);\n            this.element.appendChild(this.diagramCanvas);\n        }\n        else {\n            this.diagramCanvas = element;\n            applyStyleAgainstCsp(this.diagramCanvas, style);\n        }\n        this.diagramCanvas.style.background = this.backgroundColor;\n    };\n    Diagram.prototype.initDiagram = function () {\n        this.intOffPageBackground();\n        setAttributeHtml(this.element, {\n            style: 'width:' + this.getSizeValue(this.width) + '; height:'\n                + this.getSizeValue(this.height) + ';position:relative;overflow:hidden;'\n        });\n    };\n    Diagram.prototype.renderHiddenUserHandleTemplateLayer = function (bounds) {\n        //let element: HTMLElement;\n        var attributes = {\n            'class': this.element.id + '_hiddenUserHandleTemplate',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + 'visibility:hidden ;  overflow: hidden;'\n        };\n        var element = createHtmlElement('div', attributes);\n        this.element.appendChild(element);\n    };\n    Diagram.prototype.renderBackgroundLayer = function (bounds, commonStyle) {\n        var bgLayer = this.createSvg(this.element.id + '_backgroundLayer_svg', bounds.width, bounds.height);\n        applyStyleAgainstCsp(bgLayer, commonStyle);\n        var backgroundImage = createSvgElement('g', {\n            'id': this.element.id + '_backgroundImageLayer',\n            'class': 'e-background-image-layer'\n        });\n        bgLayer.appendChild(backgroundImage);\n        var attr = { 'id': this.element.id + '_backgroundLayer', 'class': 'e-background-layer' };\n        var background = createSvgElement('g', attr);\n        bgLayer.appendChild(background);\n        this.diagramCanvas.appendChild(bgLayer);\n    };\n    Diagram.prototype.renderGridLayer = function (bounds, commonStyle) {\n        var svgGridSvg = this.createSvg(this.element.id + '_gridline_svg', bounds.width, bounds.height);\n        svgGridSvg.setAttribute('class', 'e-grid-layer');\n        var svgGrid = createSvgElement('g', { 'id': this.element.id + '_gridline', 'width': '100%', 'height': '100%' });\n        var rect = createSvgElement('rect', {\n            'id': this.element.id + '_grid_rect', 'x': '0', 'y': '0', 'width': '100%', 'height': '100%'\n        });\n        if (checkBrowserInfo()) {\n            rect.setAttribute('fill', 'url(' + location.protocol + '//' + location.host + location.pathname +\n                '#' + this.element.id + '_pattern)');\n        }\n        else {\n            rect.setAttribute('fill', 'url(#' + this.element.id + '_pattern)');\n        }\n        svgGrid.appendChild(rect);\n        svgGridSvg.appendChild(svgGrid);\n        this.diagramCanvas.appendChild(svgGridSvg);\n        setAttributeSvg(svgGridSvg, { 'style': commonStyle });\n    };\n    Diagram.prototype.renderDiagramLayer = function (bounds, commonStyle) {\n        var attributes = {\n            'id': this.element.id + '_diagramLayer_div',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;' + commonStyle\n        };\n        this.diagramLayerDiv = createHtmlElement('div', attributes);\n        if (this.mode === 'SVG') {\n            var diagramSvg = this.createSvg(this.element.id + '_diagramLayer_svg', bounds.width, bounds.height);\n            diagramSvg.style['pointer-events'] = 'none';\n            diagramSvg.setAttribute('class', 'e-diagram-layer');\n            var diagramLayer = createSvgElement('g', { 'id': this.element.id + '_diagramLayer' });\n            var transformationLayer = createSvgElement('g', {});\n            this.diagramLayer = diagramLayer;\n            diagramSvg.style['pointer-events'] = 'all';\n            transformationLayer.appendChild(diagramLayer);\n            diagramSvg.appendChild(transformationLayer);\n            this.diagramLayerDiv.appendChild(diagramSvg);\n        }\n        else {\n            this.diagramLayer = CanvasRenderer.createCanvas(this.element.id + '_diagram', bounds.width, bounds.height);\n            applyStyleAgainstCsp(this.diagramLayer, 'position:absolute;left:0px;top:0px;');\n            this.diagramLayerDiv.appendChild(this.diagramLayer);\n        }\n        this.diagramCanvas.appendChild(this.diagramLayerDiv);\n    };\n    Diagram.prototype.initLayers = function () {\n        var commonStyle = 'position:absolute;top:0px;left:0px;overflow:hidden;pointer-events:none;';\n        var container = document.getElementById(this.element.id);\n        var bounds = container.getBoundingClientRect();\n        var scrollerSize = getScrollerWidth();\n        this.scroller.scrollerWidth = scrollerSize;\n        this.scroller.setViewPortSize(bounds.width, bounds.height);\n        this.renderRulers();\n        var measureWindowElement = 'measureElement';\n        if (window[measureWindowElement]) {\n            window[measureWindowElement] = null;\n            var measureElements = document.getElementById('measureElement');\n            measureElements.remove();\n        }\n        createMeasureElements();\n        // this.renderBackgroundImageLayer(bounds, commonStyle);\n        this.renderBackgroundLayer(bounds, commonStyle);\n        this.renderGridLayer(bounds, commonStyle);\n        this.renderDiagramLayer(bounds, commonStyle);\n        this.renderHTMLLayer(bounds, commonStyle);\n        this.renderPortsExpandLayer(bounds, commonStyle);\n        this.renderNativeLayer(bounds, commonStyle);\n        this.renderAdornerLayer(bounds, commonStyle);\n        this.renderHiddenUserHandleTemplateLayer(bounds);\n    };\n    Diagram.prototype.renderAdornerLayer = function (bounds, commonStyle) {\n        var divElement = createHtmlElement('div', {\n            'id': this.element.id + '_diagramAdornerLayer',\n            'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n        });\n        var element = createHtmlElement('div', {\n            'id': this.element.id + '_diagramUserHandleLayer',\n            'style': 'width:' + bounds.width + 'px;height:' + bounds.height + 'px;' + commonStyle\n        });\n        element.setAttribute('class', 'e-userHandle-layer');\n        divElement.appendChild(element);\n        var svgAdornerSvg = this.createSvg(this.element.id + '_diagramAdorner_svg', bounds.width, bounds.height);\n        svgAdornerSvg.setAttribute('class', 'e-adorner-layer');\n        svgAdornerSvg.style['pointer-events'] = 'none';\n        this.adornerLayer = createSvgElement('g', { 'id': this.element.id + '_diagramAdorner' });\n        this.adornerLayer.style[' pointer-events'] = 'all';\n        svgAdornerSvg.appendChild(this.adornerLayer);\n        divElement.appendChild(svgAdornerSvg);\n        this.diagramCanvas.appendChild(divElement);\n        var svgSelector = createSvgElement('g', { 'id': this.element.id + '_SelectorElement' });\n        this.adornerLayer.appendChild(svgSelector);\n        setAttributeSvg(svgAdornerSvg, { style: 'pointer-events:none;' });\n    };\n    Diagram.prototype.renderPortsExpandLayer = function (bounds, commonStyle) {\n        var svgPortsSvg = this.createSvg(this.element.id + '_diagramPorts_svg', bounds.width, bounds.height);\n        svgPortsSvg.setAttribute('class', 'e-ports-expand-layer');\n        var svgPortsLayer = createSvgElement('g', {\n            'id': this.element.id + '_diagramPorts',\n            'class': 'e-ports-layer',\n            'style': 'pointer-events: all;'\n        });\n        svgPortsSvg.appendChild(svgPortsLayer);\n        var svgExpandLayer = createSvgElement('g', {\n            'id': this.element.id + '_diagramExpander',\n            'class': 'e-expand-layer',\n            'style': 'pointer-events: all;'\n        });\n        svgPortsSvg.appendChild(svgExpandLayer);\n        this.diagramCanvas.appendChild(svgPortsSvg);\n        setAttributeSvg(svgPortsSvg, { 'style': commonStyle });\n    };\n    Diagram.prototype.renderHTMLLayer = function (bounds, commonStyle) {\n        this.htmlLayer = createHtmlElement('div', {\n            'id': this.element.id + '_htmlLayer',\n            'style': 'width:' + bounds.width + 'px; height:' + bounds.height + 'px;position:absolute;top:0px;' +\n                'left:0px;overflow:hidden;pointer-events:none;',\n            'class': 'e-html-layer'\n        });\n        var htmlLayerDiv = createHtmlElement('div', {\n            'id': this.element.id + '_htmlLayer_div',\n            'style': 'position:absolute;top:0px;left:0px;pointer-events:all;'\n        });\n        this.htmlLayer.appendChild(htmlLayerDiv);\n        this.diagramCanvas.appendChild(this.htmlLayer);\n    };\n    Diagram.prototype.renderNativeLayer = function (bounds, commonStyle) {\n        var nativeLayerSvg = this.createSvg(this.element.id + '_nativeLayer_svg', bounds.width, bounds.height);\n        var nativeLayer = createSvgElement('g', { 'id': this.element.id + '_nativeLayer', 'style': 'pointer-events:all;' });\n        nativeLayerSvg.appendChild(nativeLayer);\n        this.diagramLayerDiv.appendChild(nativeLayerSvg);\n        setAttributeSvg(nativeLayerSvg, { 'class': 'e-native-layer', 'style': commonStyle });\n    };\n    /**\n     * createSvg method \\\n     *\n     * @returns { void }     createSvg method .\\\n     * @param {string} id - provide the source value.\n     * @param {string | Number} width - provide the source value.\n     * @param {string | Number} height - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.createSvg = function (id, width, height) {\n        var svgObj = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        setAttributeSvg(svgObj, { 'id': id, 'width': width, 'height': height });\n        return svgObj;\n    };\n    Diagram.prototype.updateBazorShape = function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n            switch (node.shape.type) {\n                case 'Bpmn':\n                    node.shape.bpmnShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.bpmnShape;\n                    break;\n                case 'UmlActivity':\n                    node.shape.umlActivityShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.umlActivityShape;\n                    break;\n                case 'Flow':\n                    node.shape.flowShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.flowShape;\n                    break;\n                case 'Basic':\n                    node.shape.basicShape =\n                        node.shape.shape ? node.shape.shape\n                            : node.shape.basicShape;\n                    break;\n                case 'Text':\n                    node.shape.textContent =\n                        node.shape.content ? node.shape.content\n                            : node.shape.textContent;\n                    break;\n            }\n        }\n    };\n    Diagram.prototype.initObjects = function (isLoad) {\n        this.updateBazorShape();\n        if (!this.isLoading) {\n            this.initData();\n        }\n        this.initLayerObjects();\n        this.updateBridging(isLoad);\n    };\n    /**\n     * initLayerObjects method \\\n     *\n     * @returns { void }     initLayerObjects method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.initLayerObjects = function () {\n        var hasLayers = this.layers.length > 1; //const set: boolean = false;\n        var connectors = [];\n        var blazor = 'Blazor';\n        var canCloneObject = window && window[blazor] && !this.dataSourceSettings.dataSource;\n        var tempTabel = {};\n        var bpmnTable = {};\n        var tempNode = [];\n        var groups = [];\n        var i = 0;\n        var previousNodeObject = [];\n        var previousConnectorObject = [];\n        var updateNodeObject = [];\n        var updateConnectorObject = [];\n        var changeNodes = [];\n        var changeConnectors = [];\n        if (isBlazor() && canCloneObject) {\n            previousNodeObject = this.previousNodeCollection;\n            previousConnectorObject = this.previousConnectorCollection;\n        }\n        for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n            var obj = _a[_i];\n            obj.id = obj.id || randomId();\n            this.addToLayer(obj, hasLayers);\n            tempTabel[obj.id] = obj;\n        }\n        for (var _b = 0, _c = this.connectors; _b < _c.length; _b++) {\n            var obj = _c[_b];\n            obj.id = obj.id || randomId();\n            this.addToLayer(obj, hasLayers);\n            tempTabel[obj.id] = obj;\n        }\n        for (var _d = 0, _e = this.layers; _d < _e.length; _d++) {\n            var layer = _e[_d];\n            for (var _f = 0, _g = layer.objects; _f < _g.length; _f++) {\n                var obj = _g[_f];\n                if (tempTabel[obj]) {\n                    if (!(tempTabel[obj] instanceof Connector)) {\n                        if (tempTabel[obj].children) {\n                            groups.push(obj);\n                        }\n                        else if ((tempTabel[obj].shape instanceof BpmnShape) &&\n                            tempTabel[obj].shape.activity.subProcess.processes &&\n                            tempTabel[obj].shape.activity.subProcess.processes.length > 0) {\n                            bpmnTable[tempTabel[obj].id] = obj;\n                        }\n                        else {\n                            this.initNodes(tempTabel[obj], layer);\n                        }\n                    }\n                    else {\n                        var connector = tempTabel[obj];\n                        if (connector.sourceID && connector.targetID) {\n                            var sourceNode = tempTabel[connector.sourceID];\n                            var targetNode = tempTabel[connector.targetID];\n                            if (sourceNode && sourceNode.wrapper && targetNode && targetNode.wrapper) {\n                                this.initConnectors(tempTabel[obj], layer);\n                            }\n                            else {\n                                connectors.push(tempTabel[obj]);\n                            }\n                        }\n                        else {\n                            this.initConnectors(tempTabel[obj], layer);\n                        }\n                    }\n                }\n            }\n            if (this.bpmnModule) {\n                for (var _h = 0, _j = this.bpmnModule.textAnnotationConnectors; _h < _j.length; _h++) {\n                    var obj = _j[_h];\n                    this.initConnectors(obj, layer, false);\n                }\n            }\n        }\n        for (var _k = 0, _l = Object.keys(bpmnTable); _k < _l.length; _k++) {\n            var obj = _l[_k];\n            this.initObject(tempTabel[obj]);\n            this.bpmnModule.updateDocks(tempTabel[obj], this);\n        }\n        var alignedGroups = this.alignGroup(groups, tempTabel);\n        for (var _m = 0, alignedGroups_1 = alignedGroups; _m < alignedGroups_1.length; _m++) {\n            var obj = alignedGroups_1[_m];\n            var layer = this.commandHandler.getObjectLayer(obj);\n            this.initNodes(tempTabel[obj], layer);\n        }\n        for (var _o = 0, connectors_1 = connectors; _o < connectors_1.length; _o++) {\n            var connector = connectors_1[_o];\n            var layer = this.commandHandler.getObjectLayer(connector.id);\n            this.initConnectors(connector, layer);\n        }\n        if (isBlazor() && canCloneObject) {\n            for (var _p = 0, _q = this.nodes; _p < _q.length; _p++) {\n                var obj = _q[_p];\n                updateNodeObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            for (var _r = 0, _s = this.connectors; _r < _s.length; _r++) {\n                var obj = _s[_r];\n                updateConnectorObject.push(cloneObject(obj, undefined, undefined, true));\n            }\n            this.commandHandler.getObjectChanges(previousNodeObject, updateNodeObject, changeNodes);\n            this.commandHandler.getObjectChanges(previousConnectorObject, updateConnectorObject, changeConnectors);\n            if (!(this.blazorActions & BlazorAction.ClearObject)) {\n                var blazorInterop = 'sfBlazor';\n                var diagramObject = { nodes: changeNodes, connectors: changeConnectors };\n                var obj = {\n                    'methodName': 'UpdateBlazorProperties',\n                    'diagramobj': diagramObject\n                };\n                window[blazorInterop].updateBlazorProperties(obj, this);\n            }\n        }\n    };\n    Diagram.prototype.alignGroup = function (parents, tempTabel) {\n        var newList = [];\n        var parentist = [];\n        var child;\n        var childNode;\n        var i;\n        var j;\n        for (i = 0; i < parents.length; i++) {\n            child = parents[i];\n            childNode = tempTabel[child];\n            var node = void 0;\n            if (childNode && childNode.children.length) {\n                for (j = 0; j < childNode.children.length; j++) {\n                    node = childNode.children[j];\n                    if (parents.indexOf(node) > -1 && (newList.indexOf(node) === -1) &&\n                        (parentist.indexOf(node) === -1)) {\n                        newList.splice(0, 0, node);\n                    }\n                }\n            }\n            if (newList.indexOf(child) === -1) {\n                parentist.push(child);\n            }\n        }\n        newList = newList.concat(parentist);\n        return newList;\n    };\n    Diagram.prototype.addToLayer = function (obj, hasLayers) {\n        var layer;\n        if (hasLayers) {\n            layer = this.commandHandler.getObjectLayer(obj.id);\n        }\n        if (!hasLayers || !layer) {\n            if (this.activeLayer.objects.indexOf(obj.id) === -1) {\n                this.activeLayer.objects.push(obj.id);\n            }\n        }\n        this.setZIndex(layer || this.activeLayer, obj);\n    };\n    Diagram.prototype.updateLayer = function (newProp) {\n        for (var _i = 0, _a = Object.keys(newProp.layers); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var layerObject = this.layers[key].objects;\n            for (var _b = 0, layerObject_1 = layerObject; _b < layerObject_1.length; _b++) {\n                var obj = layerObject_1[_b];\n                var node = this.nameTable[obj];\n                if (newProp.layers[key].visible !== undefined) {\n                    this.updateElementVisibility(node.wrapper, node, newProp.layers[key].visible);\n                }\n                else if (newProp.layers[key].lock === true) {\n                    this.unSelect(node);\n                }\n            }\n            if (newProp.layers[key].lock !== undefined) {\n                this.layers[key].lock = newProp.layers[key].lock;\n            }\n        }\n        if (this.mode !== 'SVG') {\n            this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.updateScrollSettings = function (newProp) {\n        var hPan = (-this.scroller.horizontalOffset + newProp.scrollSettings.horizontalOffset || 0);\n        var vPan = (this.scroller.verticalOffset - newProp.scrollSettings.verticalOffset || 0);\n        var oldValue = {\n            VerticalOffset: this.scrollSettings.verticalOffset, HorizontalOffset: this.scrollSettings.horizontalOffset,\n            ViewportHeight: this.scrollSettings.viewPortHeight, ViewportWidth: this.scrollSettings.viewPortWidth,\n            CurrentZoom: this.scroller.currentZoom\n        };\n        if (hPan !== 0 || vPan !== 0) {\n            this.pan(hPan, vPan);\n        }\n        var newValue = {\n            VerticalOffset: this.scrollSettings.verticalOffset, HorizontalOffset: this.scrollSettings.horizontalOffset,\n            ViewportHeight: this.scrollSettings.viewPortHeight, ViewportWidth: this.scrollSettings.viewPortWidth,\n            CurrentZoom: this.scroller.currentZoom\n        };\n        var panStatus = 'Start';\n        if (this.realActions & RealAction.PanInProgress) {\n            panStatus = 'Progress';\n        }\n        var arg = {\n            oldValue: oldValue,\n            newValue: newValue, source: this,\n            panState: panStatus\n        };\n        if (isBlazor() && this.scrollChange) {\n            arg = {\n                oldValue: oldValue,\n                newValue: newValue,\n                sourceId: this.element.id,\n                panState: panStatus\n            };\n        }\n        this.triggerEvent(DiagramEvent.scrollChange, arg);\n        this.commandHandler.updatePanState(true);\n        if (this.mode === 'Canvas' && (this.constraints & DiagramConstraints.Virtualization)) {\n            this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.initData = function () {\n        var dataSourceSettings = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n        var adapter = 'adaptorName';\n        if (this.dataBindingModule && !(this.realActions & RealAction.PreventDataInit)) {\n            if (dataSourceSettings && this.dataSourceSettings.connectionDataSource.dataManager) {\n                var dataManager = this.dataSourceSettings.dataManager || this.dataSourceSettings.dataSource;\n                this.nodes = this.generateData(dataManager, true);\n                this.connectors = this.generateData(this.dataSourceSettings.connectionDataSource.dataManager, false);\n            }\n            else if (dataSourceSettings && dataSourceSettings.dataSource &&\n                (dataSourceSettings.dataSource.url || (dataSourceSettings[adapter] === 'BlazorAdaptor' &&\n                    !dataSourceSettings.dataSource.url))) {\n                this.dataBindingModule.initSource(this.dataSourceSettings, this);\n            }\n            else {\n                this.dataBindingModule.initData(this.dataSourceSettings, this);\n            }\n        }\n    };\n    Diagram.prototype.generateData = function (dataSource, isNode) {\n        var nodes = [];\n        var i;\n        for (i = 0; i < dataSource.length; i++) {\n            var row = dataSource[i];\n            var node = isNode ? this.makeData(row, true) : this.makeData(row, false);\n            if (node && node.id && (!findNodeByName(nodes, node.id) || !findNodeByName(nodes, node.id))) {\n                nodes.push(node);\n            }\n        }\n        return (nodes);\n    };\n    Diagram.prototype.makeData = function (row, isNode) {\n        var i;\n        var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n        var data = {};\n        data.id = row[fields.id] ? row[fields.id] : randomId();\n        if (fields.sourceID) {\n            data.sourceID = row[fields.sourceID];\n        }\n        if (fields.targetID) {\n            data.targetID = row[fields.targetID];\n        }\n        if (row[fields.sourcePointX] && row[fields.sourcePointY]) {\n            data.sourcePoint = { 'x': Number(row[fields.sourcePointX]), 'y': Number(row[fields.sourcePointY]) };\n        }\n        if (row[fields.targetPointX] && row[fields.targetPointY]) {\n            data.targetPoint = { 'x': Number(row[fields.targetPointX]), 'y': Number(row[fields.targetPointY]) };\n        }\n        if (fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n            for (i = 0; i < fields.crudAction.customFields.length; i++) {\n                data[fields.crudAction.customFields[i]] = row[fields.crudAction.customFields[i]];\n            }\n        }\n        return data;\n    };\n    Diagram.prototype.initNodes = function (obj, layer) {\n        this.preventDiagramUpdate = true;\n        this.initObject(obj, layer);\n        this.preventDiagramUpdate = false;\n    };\n    Diagram.prototype.initConnectors = function (obj, layer, independentObj) {\n        this.preventDiagramUpdate = true;\n        this.initObject(obj, layer, independentObj);\n        this.updateEdges(obj);\n        this.preventDiagramUpdate = false;\n    };\n    Diagram.prototype.setZIndex = function (layer, obj) {\n        //should be changed\n        var currentLayer = layer;\n        if ((obj).zIndex === -1) {\n            while (currentLayer.zIndexTable[currentLayer.objectZIndex + 1]) {\n                layer.objectZIndex++;\n            }\n            obj.zIndex = ++currentLayer.objectZIndex;\n        }\n        else {\n            var index = obj.zIndex;\n            if (currentLayer.zIndexTable[index]) {\n                var tabelLength = Object.keys(currentLayer.zIndexTable).length;\n                var j = 0;\n                for (var i = 0; i < tabelLength; i++) {\n                    if (i === index) {\n                        for (var j_1 = tabelLength; j_1 > index; j_1--) {\n                            currentLayer.zIndexTable[j_1] = currentLayer.zIndexTable[j_1 - 1];\n                            if (this.nameTable[currentLayer.zIndexTable[j_1]]) {\n                                this.nameTable[currentLayer.zIndexTable[j_1]].zIndex = j_1;\n                            }\n                        }\n                        currentLayer.zIndexTable[i] = obj.id;\n                    }\n                    j++;\n                }\n            }\n        }\n    };\n    Diagram.prototype.initializeDiagramLayers = function () {\n        //const tempLayers: LayerModel[] = this.layers;\n        for (var i = 0; i < this.layers.length; i++) {\n            if (this.layers[i].zIndex !== -1) {\n                var temp = this.layers[i];\n                this.layers[i] = this.layers[this.layers[i].zIndex];\n                this.layers[temp.zIndex] = temp;\n            }\n        }\n        for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n            var layer = _a[_i];\n            layer.zIndex = layer.zIndex !== -1 ? layer.zIndex : this.layers.indexOf(layer);\n            this.layerZIndexTable[layer.zIndex] = layer.id;\n        }\n        for (var i = 0; i < this.layers.length; i++) {\n            for (var j = i + 1; j < this.layers.length; j++) {\n                if (this.layers[i].zIndex > this.layers[j].zIndex) {\n                    var temp = this.layers[i];\n                    this.layers[i] = this.layers[j];\n                    this.layers[j] = temp;\n                }\n            }\n        }\n        if (this.layers.length === 0) {\n            var defaultLayer = {\n                id: 'default_layer', visible: true, lock: false, objects: [], zIndex: 0,\n                objectZIndex: -1, zIndexTable: {}\n            };\n            this.commandHandler.addLayer(defaultLayer, null, true);\n        }\n        this.setActiveLayer(this.layers[this.layers.length - 1].id);\n    };\n    /**\n     * resetTool method \\\n     *\n     * @returns { void }     resetTool method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.resetTool = function () {\n        this.eventHandler.resetTool();\n    };\n    Diagram.prototype.initObjectExtend = function (obj, layer, independentObj) {\n        if (independentObj) {\n            var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, obj.wrapper.bounds);\n            for (var i = 0, a = Object.keys(layer.zIndexTable); i < a.length; i++) {\n                if (layer.zIndexTable[a[i]] && layer.zIndexTable[a[i]] === obj.id) {\n                    delete layer.zIndexTable[a[i]];\n                }\n            }\n            layer.zIndexTable[obj.zIndex] = obj.id;\n            if (!checkBoundaryConstraints) {\n                var node = obj instanceof Node ? this.nodes : this.connectors;\n                for (var i = 0; i <= node.length; i++) {\n                    if (node[i] && obj.id === node[i].id) {\n                        node.splice(i, 1);\n                    }\n                }\n                delete layer.zIndexTable[obj.zIndex];\n            }\n        }\n    };\n    /* tslint:disable */\n    /**\n     * initObject method \\\n     *\n     * @returns { void }     initObject method .\\\n     * @param {End} obj - provide the obj value.\n     * @param {End} layer - provide the layer value.\n     * @param {LayoutOrientation} independentObj - provide the independentObj value.\n     * @param {boolean} group - provide the independentObj value.\n     *\n     * @private\n     */\n    Diagram.prototype.initObject = function (obj, layer, independentObj, group) {\n        if (independentObj === void 0) { independentObj = true; }\n        if (obj !== undefined) {\n            if (independentObj) {\n                if (!layer) {\n                    this.addToLayer(obj, false);\n                    layer = this.activeLayer;\n                }\n                //Move the common properties like zindex and id to an abstract class\n                if (obj instanceof Node || obj instanceof Connector) {\n                    this.setZIndex(layer, obj);\n                }\n            }\n            if (obj instanceof Node) {\n                if (independentObj) {\n                    if (obj.id !== 'helper') {\n                        var getDefaults = getFunction(this.getNodeDefaults);\n                        if (getDefaults) {\n                            var defaults = getDefaults(obj, this);\n                            if (defaults && defaults.ports) {\n                                for (var i = 0; i < defaults.ports.length; i++) {\n                                    defaults.ports[i].inEdges = [];\n                                    defaults.ports[i].outEdges = [];\n                                }\n                            }\n                            if (defaults && defaults !== obj) {\n                                extendObject(defaults, obj);\n                            }\n                        }\n                    }\n                    this.initNode(obj, this.element.id);\n                }\n            }\n            else if (obj instanceof Connector) {\n                var getDefaults = getFunction(this.getConnectorDefaults);\n                if (getDefaults) {\n                    var defaults = getDefaults(obj, this);\n                    if (defaults && defaults !== obj) {\n                        extendObject(defaults, obj);\n                    }\n                    if (obj.segments.length) {\n                        if (obj.type !== obj.segments[0].type) {\n                            obj.segments = [];\n                        }\n                    }\n                }\n                var sourceNode = this.nameTable[obj.sourceID];\n                var targetNode = this.nameTable[obj.targetID];\n                var port = this.getConnectedPort(sourceNode, obj, true);\n                var targetPort = this.getConnectedPort(targetNode, obj);\n                var outPort = this.findInOutConnectPorts(sourceNode, false);\n                var inPort = this.findInOutConnectPorts(targetNode, true);\n                if ((sourceNode !== undefined && canOutConnect(sourceNode)) || (obj.sourcePortID !== ''\n                    && canPortOutConnect(outPort))) {\n                    obj.sourceWrapper = this.getEndNodeWrapper(sourceNode, obj, true);\n                    if (obj.sourcePortID) {\n                        // eslint-disable-next-line max-len\n                        if (port && port.constraints && !(port.constraints & PortConstraints.None) && (port.constraints & PortConstraints.OutConnect)) {\n                            obj.sourcePortWrapper = this.getWrapper(sourceNode.wrapper, obj.sourcePortID);\n                        }\n                    }\n                }\n                if ((targetNode !== undefined && canInConnect(targetNode)) || (obj.targetPortID !== ''\n                    && canPortInConnect(inPort))) {\n                    obj.targetWrapper = this.getEndNodeWrapper(targetNode, obj, false);\n                    if (obj.targetPortID) {\n                        // eslint-disable-next-line max-len\n                        if (targetPort && targetPort.constraints && !(targetPort.constraints & PortConstraints.None) && (targetPort.constraints & PortConstraints.InConnect)) {\n                            obj.targetPortWrapper = this.getWrapper(targetNode.wrapper, obj.targetPortID);\n                        }\n                    }\n                }\n                if (!independentObj) {\n                    var points = obj.getConnectorPoints(obj.type);\n                    updateConnector(obj, points);\n                }\n                if (independentObj) {\n                    obj.init(this);\n                }\n                for (var k = 0; k < obj.wrapper.children.length; k++) {\n                    if (this.pathTable[obj.wrapper.children[k].data]) {\n                        obj.wrapper.children[k].absoluteBounds =\n                            this.pathTable[obj.wrapper.children[k].data].absoluteBounds;\n                    }\n                }\n                obj.wrapper.measure(new Size(undefined, undefined));\n                obj.wrapper.arrange(obj.wrapper.desiredSize);\n                if (obj instanceof Connector && obj.type === 'Bezier') {\n                    this.updateConnectorAnnotation(obj);\n                    this.updateConnectorfixedUserHandles(obj);\n                }\n                for (var j = 0; j < obj.wrapper.children.length; j++) {\n                    this.pathTable[obj.wrapper.children[j].data] = {};\n                    this.pathTable[obj.wrapper.children[j].data].absoluteBounds =\n                        obj.wrapper.children[j].absoluteBounds;\n                }\n            }\n            if (obj instanceof Node && obj.children && obj.container) {\n                for (var i = 0; i < obj.children.length; i++) {\n                    this.nameTable[obj.children[i]].offsetX = this.nameTable[obj.children[i]].wrapper.offsetX;\n                    this.nameTable[obj.children[i]].offsetY = this.nameTable[obj.children[i]].wrapper.offsetY;\n                }\n            }\n            if (this.bpmnModule && obj instanceof Node\n                && obj.shape.type === 'Bpmn' && obj.shape.annotations.length > 0) {\n                this.bpmnModule.updateQuad(obj, this);\n            }\n            this.initObjectExtend(obj, layer, independentObj);\n            this.nameTable[obj.id] = obj;\n            if (obj instanceof Node && obj.children) {\n                this.preventNodesUpdate = true;\n                this.preventConnectorsUpdate = true;\n                if (!group && !obj.container) {\n                    this.updateGroupOffset(obj, true);\n                }\n                this.groupTable[obj.id] = obj.children;\n                for (var i = 0; i < obj.children.length; i++) {\n                    var node = (this.nameTable[obj.children[i]]);\n                    if (node) {\n                        node.parentId = obj.id;\n                    }\n                }\n                if (!this.isLoading && obj.rotateAngle && !obj.container) {\n                    this.commandHandler.rotateObjects(obj, [obj], obj.rotateAngle, { x: obj.offsetX, y: obj.offsetY }, false);\n                }\n                this.preventNodesUpdate = false;\n                this.preventConnectorsUpdate = false;\n            }\n            if (this['enterObject'] === undefined) {\n                this.updateQuad(obj);\n            }\n        }\n        if (obj.visible === false) {\n            this.updateElementVisibility(obj.wrapper, obj, false);\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.getConnectedPort = function (node, connector, isSource) {\n        if (node && node.ports) {\n            for (var _i = 0, _a = node.ports; _i < _a.length; _i++) {\n                var port = _a[_i];\n                if (port.id === connector.sourcePortID && isSource) {\n                    return port;\n                }\n                else if (port.id === connector.targetPortID && !isSource) {\n                    return port;\n                }\n            }\n        }\n        return null;\n    };\n    Diagram.prototype.scaleObject = function (obj, size, isWidth) {\n        var actualSize = isWidth ? obj.wrapper.actualSize.width : obj.wrapper.actualSize.height;\n        var sw = (isWidth) ? 1 + ((size - actualSize) / actualSize) : 1;\n        var sh = (isWidth) ? 1 : 1 + ((size - actualSize) / actualSize);\n        //const groupOffsetX: number = obj.offsetX; const groupOffsetY: number = obj.offsetY;\n        this.realActions |= RealAction.PreventDrag;\n        this.scale(obj, sw, sh, { x: 0.5, y: 0.5 });\n        this.realActions &= ~RealAction.PreventDrag;\n    };\n    Diagram.prototype.updateDefaultLayoutIcons = function (node) {\n        if (this.layout.type === 'OrganizationalChart' || this.layout.type === 'HierarchicalTree' ||\n            this.layout.type === 'ComplexHierarchicalTree') {\n            {\n                this.updateDefaultLayoutIcon(node, node.expandIcon);\n                this.updateDefaultLayoutIcon(node, node.collapseIcon);\n            }\n        }\n    };\n    Diagram.prototype.updateDefaultLayoutIcon = function (node, icon) {\n        if (icon.shape !== 'None') {\n            if (icon.horizontalAlignment === 'Auto' && icon.verticalAlignment === 'Auto' &&\n                icon.offset.x === .5 && icon.offset.y === 1) {\n                var iconWrapper = this.getWrapper(node.wrapper, 'icon_content');\n                var offsetX = void 0;\n                var offsetY = void 0;\n                if (this.layout.orientation === 'TopToBottom' || this.layout.orientation === 'BottomToTop') {\n                    offsetX = .5;\n                    offsetY = this.layout.orientation === 'TopToBottom' ? 1 : 0;\n                }\n                else if (this.layout.orientation === 'RightToLeft' || this.layout.orientation === 'LeftToRight') {\n                    offsetX = this.layout.orientation === 'LeftToRight' ? 1 : 0;\n                    offsetY = .5;\n                }\n                iconWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                iconWrapper.horizontalAlignment = 'Center';\n                iconWrapper.verticalAlignment = 'Center';\n                node.wrapper.measure(new Size(node.wrapper.width, node.wrapper.height));\n                node.wrapper.arrange(node.wrapper.desiredSize);\n            }\n        }\n    };\n    /**\n     * updateGroupOffset method \\\n     *\n     * @returns { void }     updateGroupOffset method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the source value.\n     * @param {boolean} isUpdateSize - provide the target value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGroupOffset = function (node, isUpdateSize) {\n        var isUpdateGroupToBlazor = false;\n        if ((node.children && node.children.length > 0 && (!node.container)) || (node.processId)) {\n            var node1 = this.nameTable[node.id];\n            if (!(this.realActions & RealAction.PreventScale) && !(this.realActions & RealAction.PreventDrag)) {\n                if (node1.offsetX && ((this.realActions & RealAction.EnableGroupAction) ||\n                    ((!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.ToolAction)\n                        && !(this.diagramActions & DiagramAction.PublicMethod))))) {\n                    this.realActions |= RealAction.PreventScale;\n                    var diffX = (node1.offsetX - node.wrapper.offsetX);\n                    node1.offsetX = node.wrapper.offsetX;\n                    var diffY = (node1.offsetY - node.wrapper.offsetY);\n                    node1.offsetY = node.wrapper.offsetY;\n                    if (node.flip === 'None') {\n                        this.drag(node1, diffX, diffY);\n                    }\n                    this.realActions &= ~RealAction.PreventScale;\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.offsetX = node.wrapper.offsetX;\n                }\n                if (node1.offsetY && ((this.realActions & RealAction.EnableGroupAction) ||\n                    ((!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.ToolAction)\n                        && !(this.diagramActions & DiagramAction.PublicMethod))))) {\n                    this.realActions |= RealAction.PreventScale;\n                    var diffY = (node1.offsetY - node.wrapper.offsetY);\n                    node1.offsetY = node.wrapper.offsetY;\n                    if (node.flip === 'None') {\n                        this.drag(node1, 0, diffY);\n                    }\n                    this.realActions &= ~RealAction.PreventScale;\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.offsetY = node.wrapper.offsetY;\n                }\n                if (this.diagramActions) {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(node1), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    node1.width = node.wrapper.actualSize.width;\n                    node1.height = node.wrapper.actualSize.height;\n                }\n            }\n        }\n        if (isUpdateSize) {\n            if ((node.children && node.children.length > 0)) {\n                if (this.nameTable[node.id].width !== undefined) {\n                    this.scaleObject(node, this.nameTable[node.id].width, true);\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(this.nameTable[node.id]), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    this.nameTable[node.id].width = node.wrapper.actualSize.width;\n                }\n                if (this.nameTable[node.id].height !== undefined) {\n                    this.scaleObject(node, this.nameTable[node.id].height, false);\n                }\n                else {\n                    if (isBlazor()) {\n                        this.insertValue(cloneObject(this.nameTable[node.id]), true);\n                        isUpdateGroupToBlazor = true;\n                    }\n                    this.nameTable[node.id].height = node.wrapper.actualSize.height;\n                }\n            }\n        }\n        if (isUpdateGroupToBlazor && !(this.diagramActions & DiagramAction.UndoRedo) &&\n            !(this.diagramActions & DiagramAction.ToolAction) &&\n            !(this.diagramActions & DiagramAction.PublicMethod)) {\n            this.commandHandler.getBlazorOldValues();\n        }\n    };\n    /* eslint-disable */\n    Diagram.prototype.initNode = function (obj, diagramId, group) {\n        var canvas = obj.initContainer();\n        var portContainer = new Canvas();\n        var content;\n        if (!this.diagramSettings.inversedAlignment) {\n            canvas.inversedAlignment = false;\n        }\n        if (!canvas.children) {\n            canvas.children = [];\n        }\n        if (obj.children) {\n            canvas.measureChildren = false;\n            portContainer.id = obj.id + 'group_container';\n            portContainer.style.fill = 'none';\n            portContainer.style.strokeColor = 'none';\n            portContainer.horizontalAlignment = 'Stretch';\n            portContainer.verticalAlignment = 'Stretch';\n            canvas.style = obj.style;\n            portContainer.children = [];\n            portContainer.preventContainer = true;\n            if (obj.container) {\n                portContainer.relativeMode = 'Object';\n            }\n            var checkPorts = (obj.ports && obj.ports.length > 0) ? true : false;\n            if (isNullOrUndefined(obj.container) && !checkPorts) {\n                canvas.children.push(portContainer);\n            }\n            if (obj.container && (obj.container.type === 'Grid')) {\n                for (var i = 0; i < obj.children.length; i++) {\n                    var childCollection = new Canvas();\n                    var child = this.nameTable[obj.children[i]];\n                    childCollection.children = [];\n                    childCollection.children.push(child.wrapper);\n                    if (child) {\n                        canvas.addObject(child.wrapper, child.rowIndex, child.columnIndex, child.rowSpan, child.columnSpan);\n                    }\n                }\n            }\n            else {\n                for (var i = 0; i < obj.children.length; i++) {\n                    if (this.nameTable[obj.children[i]]) {\n                        var child = this.nameTable[obj.children[i]];\n                        this.updateStackProperty(obj, child, i);\n                        canvas.children.push(child.wrapper);\n                        canvas.elementActions = canvas.elementActions | ElementAction.ElementIsGroup;\n                        child.wrapper.flip = child.wrapper.flip === 'None' ?\n                            obj.wrapper.flip : child.wrapper.flip;\n                    }\n                }\n            }\n            if (checkPorts || (obj.container && (obj.container.type !== 'Grid'))) {\n                canvas.children.push(portContainer);\n            }\n        }\n        else {\n            var setNodeTemplate = getFunction(this.setNodeTemplate);\n            if (setNodeTemplate && obj.id !== 'helper') {\n                content = setNodeTemplate(obj, this);\n            }\n            if (!content) {\n                content = obj.init(this);\n            }\n            canvas.children.push(content);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var wrapperContent;\n        wrapperContent = getFunction(this.getDescription);\n        if (wrapperContent) {\n            (obj.children ? canvas : content).description = wrapperContent;\n        }\n        else {\n            (obj.children ? canvas : content).description = obj.annotations.length ? obj.annotations[0].content : obj.id;\n        }\n        var container = obj.children ? portContainer : canvas;\n        obj.initAnnotations(this.getDescription, container, this.element.id, canVitualize(this) ? true : false, this.annotationTemplate);\n        obj.initPorts(this.getDescription, container);\n        obj.initIcons(this.getDescription, this.layout, container, diagramId);\n        for (var i = 0; obj.fixedUserHandles !== undefined, i < obj.fixedUserHandles.length; i++) {\n            var fixedUserHandles = obj.initfixedUserHandles(obj.fixedUserHandles[i]);\n            container.children.push(fixedUserHandles);\n        }\n        if (obj.shape.type === 'SwimLane' && obj.wrapper && obj.wrapper.children.length > 0 &&\n            obj.wrapper.children[0] instanceof GridPanel) {\n            swimLaneMeasureAndArrange(obj);\n            arrangeChildNodesInSwimLane(this, obj);\n            this.updateDiagramElementQuad();\n        }\n        else {\n            canvas.measure(new Size(obj.width, obj.height), obj.id, this.onLoadImageSize.bind(this));\n            if (canvas instanceof GridPanel) {\n                canvas.arrange(canvas.desiredSize, true);\n            }\n            else {\n                canvas.arrange(canvas.desiredSize);\n            }\n        }\n        if (obj.wrapper.flip !== 'None' && obj.wrapper.elementActions & ElementAction.ElementIsGroup) {\n            alignElement(obj.wrapper, obj.wrapper.offsetX, obj.wrapper.offsetY, this, obj.wrapper.flip);\n        }\n        if (obj instanceof Node && obj.container && (obj.width < canvas.outerBounds.width || obj.height < canvas.outerBounds.height) &&\n            canvas.bounds.x <= canvas.outerBounds.x && canvas.bounds.y <= canvas.outerBounds.y) {\n            obj.width = canvas.width = canvas.outerBounds.width;\n            obj.height = canvas.height = canvas.outerBounds.height;\n            canvas.measure(new Size(obj.width, obj.height));\n            canvas.arrange(canvas.desiredSize);\n        }\n        if (obj.container && obj.container.type === 'Grid' && obj.children && obj.children.length > 0) {\n            this.updateChildPosition(obj);\n        }\n    };\n    /* eslint-enable */\n    /**\n     * updateDiagramElementQuad method \\\n     *\n     * @returns { void }     updateDiagramElementQuad method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramElementQuad = function () {\n        for (var i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].wrapper && (this.nodes[i].wrapper instanceof Container)) {\n                this.updateQuad(this.nodes[i]);\n            }\n        }\n    };\n    Diagram.prototype.onLoadImageSize = function (id, size) {\n        var obj = this.getObject(id);\n        var image = document.getElementById(id + 'sf-imageNode');\n        if (image) {\n            image.parentNode.removeChild(image);\n        }\n        this.nodePropertyChange(obj, {}, { width: size.width, height: size.height });\n        var args = { element: cloneObject(obj), size: size };\n        this.triggerEvent(DiagramEvent.onImageLoad, args);\n    };\n    Diagram.prototype.updateChildPosition = function (obj) {\n        for (var i = 0; i < obj.children.length; i++) {\n            var child = this.getObject(obj.children[i]);\n            child.offsetX = child.wrapper.offsetX;\n            child.offsetY = child.wrapper.offsetY;\n            if (child.children && child.children.length > 0) {\n                this.updateChildPosition(child);\n            }\n        }\n    };\n    Diagram.prototype.canExecute = function () {\n        return true;\n    };\n    Diagram.prototype.updateStackProperty = function (obj, child, index) {\n        if (obj.container && obj.container.type === 'Stack') {\n            if (!child.width) {\n                child.wrapper.horizontalAlignment = 'Stretch';\n                child.horizontalAlignment = 'Stretch';\n            }\n            if (!child.height) {\n                child.verticalAlignment = 'Stretch';\n                child.wrapper.verticalAlignment = 'Stretch';\n            }\n            if (index && obj.shape.type === 'UmlClassifier') {\n                child.umlIndex = index;\n            }\n        }\n    };\n    Diagram.prototype.initViews = function () {\n        if (!this.isLoading) {\n            this.views.push(this.element.id);\n            this.views[this.element.id] = this;\n        }\n    };\n    Diagram.prototype.initCommands = function () {\n        var i;\n        var newCommands = this.commandManager.commands;\n        var commands = {\n            'copy': {\n                execute: this.copyCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.C, keyModifiers: KeyModifiers.Control }\n            },\n            'paste': {\n                execute: this.pasteCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.V, keyModifiers: KeyModifiers.Control }\n            },\n            'cut': {\n                execute: this.cutCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.X, keyModifiers: KeyModifiers.Control }\n            },\n            'delete': {\n                execute: this.removeCommand.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Delete }\n            },\n            'selectAll': {\n                execute: this.selectAll.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.A, keyModifiers: KeyModifiers.Control }\n            },\n            'undo': {\n                execute: this.undo.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Z, keyModifiers: KeyModifiers.Control }\n            },\n            'redo': {\n                execute: this.redo.bind(this), canExecute: this.canExecute.bind(this),\n                gesture: { key: Keys.Y, keyModifiers: KeyModifiers.Control }\n            },\n            'nudgeUp': {\n                execute: this.nudgeCommand.bind(this, 'Up'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Up },\n                parameter: 'up'\n            },\n            'nudgeRight': {\n                execute: this.nudgeCommand.bind(this, 'Right'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Right },\n                parameter: 'right'\n            },\n            'nudgeDown': {\n                execute: this.nudgeCommand.bind(this, 'Down'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Down },\n                parameter: 'down'\n            },\n            'nudgeLeft': {\n                execute: this.nudgeCommand.bind(this, 'Left'),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Left },\n                parameter: 'left'\n            },\n            'startEdit': {\n                execute: this.startEditCommad.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.F2 }\n            },\n            'endEdit': {\n                execute: this.endEditCommand.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Escape }\n            },\n            'focusToNextItem': {\n                // execute: this.focusToItem.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Tab }\n            },\n            'focusToPreviousItem': {\n                // execute: this.focusToItem.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Tab, keyModifiers: KeyModifiers.Control }\n            },\n            'selectFocusedItem': {\n                execute: this.startEditCommad.bind(this),\n                canExecute: this.canExecute.bind(this), gesture: { key: Keys.Enter }\n            }\n        };\n        this.initCommandManager(newCommands, commands);\n    };\n    Diagram.prototype.overrideCommands = function (newCommand, commands) {\n        var command;\n        for (var _i = 0, _a = Object.keys(commands); _i < _a.length; _i++) {\n            var key = _a[_i];\n            command = commands[key];\n            if (newCommand.gesture.key === command.gesture.key && newCommand.gesture.keyModifiers === command.gesture.keyModifiers) {\n                delete commands[key];\n                break;\n            }\n        }\n    };\n    Diagram.prototype.initCommandManager = function (newCommands, commands) {\n        var i = 0;\n        if (newCommands) {\n            for (i = 0; i < newCommands.length; i++) {\n                if (commands[newCommands[i].name] && newCommands[i]) {\n                    if (newCommands[i].canExecute) {\n                        commands[newCommands[i].name].canExecute = newCommands[i].canExecute;\n                    }\n                    if (newCommands[i].execute) {\n                        commands[newCommands[i].name].execute = newCommands[i].execute;\n                    }\n                    if (newCommands[i].gesture.key || newCommands[i].gesture.keyModifiers) {\n                        commands[newCommands[i].name].gesture = newCommands[i].gesture;\n                    }\n                    if (newCommands[i].parameter !== '') {\n                        commands[newCommands[i].name].parameter = newCommands[i].parameter;\n                    }\n                }\n                else {\n                    this.overrideCommands(newCommands[i], commands);\n                    commands[newCommands[i].name] = {\n                        execute: newCommands[i].execute, canExecute: newCommands[i].canExecute, gesture: newCommands[i].gesture,\n                        parameter: newCommands[i].parameter\n                    };\n                }\n            }\n        }\n        this.commands = commands;\n    };\n    /**\n     * updateNodeEdges method \\\n     *\n     * @returns { void }     updateNodeEdges method .\\\n     * @param {Node} node - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodeEdges = function (node) {\n        for (var _i = 0, _a = node.inEdges; _i < _a.length; _i++) {\n            var edge = _a[_i];\n            if (this.nameTable[edge]) {\n                this.nameTable[edge].targetID = '';\n            }\n        }\n        for (var _b = 0, _c = node.outEdges; _b < _c.length; _b++) {\n            var edge = _c[_b];\n            if (this.nameTable[edge]) {\n                this.nameTable[edge].sourceID = '';\n            }\n        }\n        node.inEdges = [];\n        node.outEdges = [];\n    };\n    /**\n     * updateIconVisibility method \\\n     *\n     * @returns { void }     updateIconVisibility method .\\\n     * @param {Node} node - provide the source value.\n     * @param {boolean} visibility - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateIconVisibility = function (node, visibility) {\n        for (var i = 0; i < node.wrapper.children.length; i++) {\n            var child = node.wrapper.children[i];\n            if (child.id) {\n                var id = child.id.split(node.id)[1];\n                if (id && id.match('^_icon')) {\n                    child.visible = visibility;\n                    this.updateDiagramContainerVisibility(child, visibility);\n                }\n            }\n        }\n    };\n    /**\n     * updateEdges method \\\n     *\n     * @returns { void }     updateEdges method .\\\n     * @param {Connector} obj - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateEdges = function (obj) {\n        if (obj.sourceID !== undefined && obj.sourceID !== '') {\n            var node = this.nameTable[obj.sourceID];\n            if (node && node.outEdges && node.outEdges.length === 0) {\n                node.outEdges = [];\n            }\n            if (node && node.outEdges && node.outEdges.indexOf(obj.id) === -1) {\n                node.outEdges.push(obj.id);\n            }\n            this.updatePortEdges(node, obj, false);\n        }\n        if (obj.targetID !== undefined && obj.targetID !== '') {\n            var node = this.nameTable[obj.targetID];\n            if (node && node.inEdges && node.inEdges.length === 0) {\n                node.inEdges = [];\n            }\n            if (node && node.inEdges && node.inEdges.indexOf(obj.id) === -1) {\n                node.inEdges.push(obj.id);\n            }\n            this.updatePortEdges(node, obj, true);\n            if (node && node.visible && node.outEdges) {\n                var value = node.outEdges.length === 0 ? false : true;\n                this.updateIconVisibility(node, value);\n            }\n        }\n    };\n    /**\n     * updatePortEdges method \\\n     *\n     * @returns { void }     updatePortEdges method .\\\n     * @param {NodeModel} node - provide the source value.\n     * @param {ConnectorModel} obj - provide the target value.\n     * @param {boolean} isInEdges - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePortEdges = function (node, obj, isInEdges) {\n        if (node) {\n            for (var i = 0; i < node.ports.length; i++) {\n                var port = node.ports[i];\n                var portId = (isInEdges) ? obj.targetPortID : obj.sourcePortID;\n                if (port.id === portId) {\n                    var portEdges = (isInEdges) ? port.inEdges : port.outEdges;\n                    if (portEdges.indexOf(obj.id) === -1) {\n                        portEdges.push(obj.id);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * refreshDiagram method \\\n     *\n     * @returns { void }     refreshDiagram method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.refreshDiagram = function () {\n        this.initLayerObjects();\n        this.doLayout();\n        this.updateBridging();\n        this.scroller.setSize();\n        this.addBlazorDiagramObjects();\n        if (isBlazor() && this.layout && this.layout.layoutInfo && this.layout.layoutInfo.isRootInverse && this.nodes.length > 2) {\n            var rootNode = this.nodes[0];\n            if (rootNode.outEdges.length > 1) {\n                var isProtectedChange = this.isProtectedOnChange;\n                for (var i = 1; i < rootNode.outEdges.length; i++) {\n                    var connector = this.nameTable[rootNode.outEdges[i]];\n                    var isAllowServerUpdate = this.allowServerDataBinding;\n                    this.protectPropertyChange(false);\n                    this.enableServerDataBinding(false);\n                    this.preventDiagramUpdate = true;\n                    var target = this.getObject(connector.targetID);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    if (target.data.Branch === 'Left') {\n                        connector.sourcePortID = rootNode.ports[1].id;\n                    }\n                    this.dataBind();\n                    this.preventDiagramUpdate = false;\n                    this.enableServerDataBinding(isAllowServerUpdate);\n                    this.protectPropertyChange(isProtectedChange);\n                }\n            }\n        }\n        if (isBlazor()) {\n            var view = void 0;\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                view = this.views[temp];\n                if (view.renderDocument) {\n                    view.renderDocument(view);\n                    view.diagramRenderer.setLayers();\n                    view.updateView(view);\n                    this.renderNodes(view);\n                }\n            }\n        }\n        this.updateFitToPage();\n    };\n    Diagram.prototype.updateCanupdateStyle = function (element, value) {\n        for (var j = 0; j < element.length; j++) {\n            if (element[j].children) {\n                this.updateCanupdateStyle(element[j].children, value);\n            }\n            element[j].canApplyStyle = value;\n        }\n    };\n    Diagram.prototype.getZindexPosition = function (obj, viewId) {\n        var objects = [];\n        var index = undefined;\n        objects = objects.concat(this.nodes);\n        objects = objects.concat(this.connectors);\n        var type;\n        if (obj.zIndex !== -1) {\n            for (var i = 0; i < objects.length; i++) {\n                if (objects[i].zIndex > obj.zIndex) {\n                    if (obj.shape.type === 'HTML' || obj.shape.type === 'Native') {\n                        type = obj.shape.type === 'HTML' ? 'html' : 'native';\n                    }\n                    index = getDomIndex(viewId, objects[i].id, type);\n                    break;\n                }\n            }\n        }\n        return index;\n    };\n    /**\n     *updateDiagramObject method \\\n     *\n     * @returns { void } updateDiagramObject method .\\\n     * @param { (NodeModel | ConnectorModel) } obj - provide the obj value.\n     * @param { boolean } canIgnoreIndex - provide the canIgnoreIndex value.\n     * @param { boolean } isUpdateObject - provide the isUpdateObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramObject = function (obj, canIgnoreIndex, isUpdateObject) {\n        var view;\n        var domTable = 'domTable';\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            if (this.diagramActions) {\n                if (view.mode === 'SVG') {\n                    var hasLayers = this.layers.length > 1;\n                    var layer = void 0;\n                    if (hasLayers) {\n                        layer = this.commandHandler.getObjectLayer(obj.id);\n                    }\n                    if ((layer === undefined || (layer && layer.visible)) || isUpdateObject) {\n                        var htmlLayer = getHTMLLayer(this.element.id);\n                        if (!window[domTable][view.element.id + '_diagramLayer']) {\n                            window[domTable][view.element.id + '_diagramLayer'] =\n                                document.getElementById(view.element.id + '_diagramLayer');\n                        }\n                        var diagramElementsLayer = window[domTable][view.element.id + '_diagramLayer'];\n                        if (this.diagramActions & DiagramAction.Interactions) {\n                            this.updateCanupdateStyle(obj.wrapper.children, true);\n                        }\n                        this.diagramRenderer.updateNode(obj.wrapper, diagramElementsLayer, htmlLayer, undefined, canIgnoreIndex ? undefined : this.getZindexPosition(obj, view.element.id));\n                        this.updateCanupdateStyle(obj.wrapper.children, true);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *updateGridContainer method \\\n     *\n     * @returns { void } updateGridContainer method .\\\n     * @param { GridPanel } grid - provide the objectArray value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGridContainer = function (grid) {\n        var view;\n        var htmlLayer = getHTMLLayer(this.element.id);\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            if (view.mode === 'SVG' && this.diagramActions) {\n                var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n                this.diagramRenderer.updateNode(grid, diagramElementsLayer, htmlLayer, undefined);\n            }\n            else {\n                this.refreshCanvasDiagramLayer(view);\n            }\n        }\n    };\n    /**\n     *getObjectsOfLayer method \\\n     *\n     * @returns { (NodeModel | ConnectorModel)[] } getObjectsOfLayer method .\\\n     * @param { string[] } objectArray - provide the objectArray value.\n     *\n     * @private\n     */\n    Diagram.prototype.getObjectsOfLayer = function (objectArray) {\n        var nodeArray = [];\n        for (var _i = 0, objectArray_1 = objectArray; _i < objectArray_1.length; _i++) {\n            var obj = objectArray_1[_i];\n            if (this.nameTable[obj]) {\n                nodeArray.push(this.nameTable[obj]);\n            }\n        }\n        return nodeArray;\n    };\n    /**\n     *refreshDiagramLayer method \\\n     *\n     * @returns { void } refreshDiagramLayer method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.refreshDiagramLayer = function () {\n        var view;\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var temp = _a[_i];\n            view = this.views[temp];\n            switch (view.mode) {\n                case 'SVG':\n                    this.refreshSvgDiagramLayer(view);\n                    break;\n                case 'Canvas':\n                    this.refreshCanvasLayers(view);\n                    break;\n            }\n        }\n    };\n    /**\n     *refreshCanvasLayers method \\\n     *\n     * @returns { void } refreshCanvasLayers method .\\\n     * @param { View } view - provide the view value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshCanvasLayers = function (view) {\n        if (!view) {\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                var view_1 = this.views[temp];\n                this.refreshCanvasDiagramLayer(view_1);\n            }\n        }\n        else {\n            this.refreshCanvasDiagramLayer(view);\n        }\n    };\n    Diagram.prototype.renderBasicElement = function (view) {\n        var htmlLayer = getHTMLLayer(view.element.id);\n        for (var i = 0; i < this.basicElements.length; i++) {\n            var element = this.basicElements[i];\n            if (element instanceof Container) {\n                element.prevRotateAngle = 0;\n            }\n            element.measure(new Size(element.width, element.height));\n            element.arrange(element.desiredSize);\n            view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n        }\n    };\n    Diagram.prototype.refreshElements = function (view) {\n        if (!this.isDestroyed) {\n            this.clearCanvas(view);\n            if (view instanceof Diagram) {\n                view.diagramLayer.getContext('2d').setTransform(view.scroller.currentZoom, 0, 0, view.scroller.currentZoom, 0, 0);\n                view.diagramLayer.getContext('2d').scale(1.5, 1.5);\n            }\n            else {\n                var element = document.getElementById(view.element.id + '_nativeLayer');\n                if (element.children.length > 0) {\n                    view.updateView(view);\n                }\n            }\n            var htmlLayer = getHTMLLayer(view.element.id);\n            //const bounds: Rect = this.spatialSearch.getPageBounds();\n            this.renderDiagramElements(view.diagramLayer, view.diagramRenderer, htmlLayer);\n            for (var i = 0; i < this.basicElements.length; i++) {\n                var element = this.basicElements[i];\n                element.measure(new Size(element.width, element.height));\n                element.arrange(element.desiredSize);\n                view.diagramRenderer.renderElement(element, view.diagramLayer, htmlLayer);\n            }\n            if (view instanceof Diagram) {\n                view.diagramLayer.style.transform = 'scale(' + (2 / 3) + ')';\n                view.diagramLayer.style.transformOrigin = '0 0';\n            }\n            this.renderTimer = null;\n        }\n    };\n    /**\n     *refreshCanvasDiagramLayer method \\\n     *\n     * @returns { void } refreshCanvasDiagramLayer method .\\\n     * @param { View } view - provide the view value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshCanvasDiagramLayer = function (view) {\n        var _this = this;\n        if (view.mode !== 'SVG' && !this.isDestroyed) {\n            if (this.basicElements.length > 0) {\n                this.renderBasicElement(view);\n            }\n            if ((!this.diagramActions || (this.diagramActions & DiagramAction.Render) === 0)\n                || (DiagramAction.ToolAction & this.diagramActions) || canVitualize(this) || (this.scroller.currentZoom !== 1)) {\n                this.refreshElements(view);\n            }\n            else if (!this.renderTimer) {\n                this.renderTimer = setTimeout(function () {\n                    _this.refreshElements(view);\n                }, 40);\n            }\n        }\n    };\n    /**\n     *updatePortVisibility method \\\n     *\n     * @returns { void } updatePortVisibility method .\\\n     * @param { Node } node - provide the node value.\n     * @param { PortVisibility } portVisibility - provide the portVisibility value.\n     * @param { Boolean } inverse - provide the inverse value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePortVisibility = function (node, portVisibility, inverse) {\n        var portElement;\n        var drawingObject = !(this.drawingObject && this.drawingObject.shape) ? true : false;\n        if (node instanceof Node && drawingObject && canMove(node)) {\n            var ports = node.ports;\n            var changed = false;\n            for (var i = 0; i < ports.length; i++) {\n                portElement = this.getWrapper(node.wrapper, ports[i].id);\n                if ((portVisibility & PortVisibility.Hover || portVisibility & PortVisibility.Connect)) {\n                    if (checkPortRestriction(ports[i], portVisibility)) {\n                        portElement.visible = !inverse;\n                        changed = true;\n                    }\n                }\n            }\n            if (changed) {\n                this.updateDiagramObject(node);\n            }\n        }\n    };\n    /**\n     *refreshSvgDiagramLayer method \\\n     *\n     * @returns { void } refreshSvgDiagramLayer method .\\\n     * @param { View } view - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.refreshSvgDiagramLayer = function (view) {\n        var element;\n        var diagramElementsLayer = document.getElementById(view.element.id + '_diagramLayer');\n        var htmlLayer = getHTMLLayer(view.element.id);\n        if (!canVitualize(this)) {\n            for (var i = 0; i < this.basicElements.length; i++) {\n                element = this.basicElements[i];\n                element.measure(new Size(element.width, element.height));\n                element.arrange(element.desiredSize, (!(this.diagramActions & DiagramAction.Render) ? true : false));\n                this.diagramRenderer.renderElement(element, diagramElementsLayer, htmlLayer);\n            }\n            this.renderDiagramElements(diagramElementsLayer, this.diagramRenderer, htmlLayer);\n        }\n        else {\n            this.scroller.virtualizeElements();\n        }\n    };\n    /**\n     *removeVirtualObjects method \\\n     *\n     * @returns { void } removeVirtualObjects method .\\\n     * @param { Object } clearIntervalVal - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeVirtualObjects = function (clearIntervalVal) {\n        if (this.deleteVirtualObject) {\n            for (var i = 0; i < this.scroller.removeCollection.length; i++) {\n                var obj = this.nameTable[this.scroller.removeCollection[i]];\n                this.removeElements(obj);\n            }\n            this.deleteVirtualObject = false;\n        }\n        clearInterval(clearIntervalVal);\n    };\n    /**\n     *updateTextElementValue method \\\n     *\n     * @returns { void } updateTextElementValue method .\\\n     * @param {  NodeModel | ConnectorModel } object - provide the object value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateTextElementValue = function (object) {\n        for (var j = 0; j < object.wrapper.children.length; j++) {\n            var element = object.wrapper.children[j];\n            if (element instanceof TextElement) {\n                element.canMeasure = true;\n                element.measure(new Size(object.width, object.height));\n                element.arrange(element.desiredSize);\n            }\n        }\n    };\n    /**\n     *updateVirtualObjects method \\\n     *\n     * @returns { void } updateVirtualObjects method .\\\n     * @param { string[] } collection - provide the collection value.\n     * @param { boolean } remove - provide the remove value.\n     * @param { string[] } tCollection - provide the htmlLayer value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateVirtualObjects = function (collection, remove, tCollection) {\n        var diagramElementsLayer = document.getElementById(this.element.id + '_diagramLayer');\n        var htmlLayer = getHTMLLayer(this.element.id);\n        if (this.mode === 'SVG') {\n            for (var i = 0; i < collection.length; i++) {\n                var index = this.scroller.removeCollection.indexOf(collection[i]);\n                if (index >= 0) {\n                    this.scroller.removeCollection.splice(index, 1);\n                }\n                var object = this.nameTable[collection[i]];\n                this.updateTextElementValue(object);\n                this.diagramRenderer.renderElement(object.wrapper, diagramElementsLayer, htmlLayer, undefined, undefined, undefined, undefined, object.zIndex);\n            }\n            for (var k = 0; k < tCollection.length; k++) {\n                this.scroller.removeCollection.push(tCollection[k]);\n            }\n            if (this.scroller.currentZoom !== 1) {\n                this.eventHandler.updateVirtualization();\n            }\n        }\n        else if (this.diagramActions) {\n            this.refreshDiagramLayer();\n        }\n    };\n    /**\n     *renderDiagramElements method \\\n     *\n     * @returns { void } renderDiagramElements method .\\\n     * @param { HTMLCanvasElement | SVGElement} canvas - provide the canvas value.\n     * @param { DiagramRenderer } renderer - provide the renderer value.\n     * @param { HTMLElement } htmlLayer - provide the htmlLayer value.\n     * @param {boolean } transform - provide the transform value.\n     * @param {boolean } fromExport - provide the fromExport value.\n     * @param { boolean } isOverView - provide the isOverView value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderDiagramElements = function (canvas, renderer, htmlLayer, transform, fromExport, isOverView) {\n        if (transform === void 0) { transform = true; }\n        var pageBounds = this.scroller.getPageBounds();\n        pageBounds.x *= this.scroller.currentZoom;\n        pageBounds.y *= this.scroller.currentZoom;\n        pageBounds.width *= this.scroller.currentZoom;\n        pageBounds.height *= this.scroller.currentZoom;\n        var difX = -this.scroller.horizontalOffset - pageBounds.x;\n        var difY = -this.scroller.verticalOffset - pageBounds.y;\n        for (var _i = 0, _a = Object.keys(this.layerZIndexTable); _i < _a.length; _i++) {\n            var layerId = _a[_i];\n            var layer = this.commandHandler.getLayer(this.layerZIndexTable[layerId]);\n            var left = void 0;\n            var top_1 = void 0;\n            if (this.mode === 'Canvas' && canVitualize(this) && !this.diagramActions) {\n                this.scroller.virtualizeElements();\n            }\n            var id = (this.mode === 'Canvas' && canVitualize(this) &&\n                this.scroller.oldCollectionObjects.length > 0) ?\n                this.scroller.oldCollectionObjects : undefined;\n            for (var _b = 0, _c = Object.keys(id || layer.zIndexTable); _b < _c.length; _b++) {\n                var node = _c[_b];\n                var renderNode = id ? this.nameTable[id[node]] : this.nameTable[layer.zIndexTable[node]];\n                if (renderNode && !(renderNode.parentId) && layer.visible &&\n                    (!(renderNode.processId) || this.refreshing)) {\n                    var transformValue = {\n                        tx: this.scroller.transform.tx,\n                        ty: this.scroller.transform.ty,\n                        scale: this.scroller.transform.scale\n                    };\n                    if (canVitualize(this)) {\n                        if (this.scroller.currentZoom < 1) {\n                            if (pageBounds.x < 0 || this.scroller.horizontalOffset < 0) {\n                                var verticalValue = this.scroller.verticalOffset < 0 ? this.scroller.verticalOffset : 0;\n                                left = (difX > 0 ? difX : 0) + 'px';\n                                top_1 = ((this.realActions & RealAction.vScrollbarMoved) ? 0 : -verticalValue) + 'px';\n                            }\n                            else {\n                                left = 0 + 'px';\n                                top_1 = 0 + 'px';\n                            }\n                            if (this.realActions & RealAction.hScrollbarMoved) {\n                                this.realActions = this.realActions & ~RealAction.hScrollbarMoved;\n                            }\n                            if (this.realActions & RealAction.vScrollbarMoved) {\n                                this.realActions = this.realActions & ~RealAction.vScrollbarMoved;\n                            }\n                        }\n                        else {\n                            left = (pageBounds.x < 0 ? difX : -this.scroller.horizontalOffset) + 'px';\n                            top_1 = (pageBounds.y < 0 ? difY : -this.scroller.verticalOffset) + 'px';\n                        }\n                        this.diagramLayer.style.left = left;\n                        this.diagramLayer.style.top = top_1;\n                        transformValue.tx = this.scroller.horizontalOffset / transformValue.scale;\n                        transformValue.ty = this.scroller.verticalOffset / transformValue.scale;\n                    }\n                    var status_1 = true;\n                    if (fromExport) {\n                        status_1 = false;\n                    }\n                    this.updateTextElementValue(renderNode);\n                    if (this.refreshing) {\n                        if (renderNode.shape.activity && renderNode.shape.activity.subProcess\n                            && renderNode.shape.activity.subProcess.processes) {\n                            for (var i = 0; i < renderNode.shape.activity.subProcess.processes.length; i++) {\n                                var process = renderNode.shape.activity.subProcess.processes[i];\n                                renderNode.wrapper.children.push(this.nameTable[process].wrapper);\n                            }\n                            renderNode.wrapper.measure(new Size(renderNode.wrapper.bounds.width, renderNode.wrapper.bounds.height));\n                            renderNode.wrapper.arrange(renderNode.wrapper.desiredSize);\n                        }\n                    }\n                    renderer.renderElement(renderNode.wrapper, canvas, htmlLayer, (!renderer.isSvgMode && transform) ? transformValue : undefined, undefined, undefined, status_1 && (!this.diagramActions || isOverView));\n                }\n            }\n        }\n    };\n    /**\n     *updateBridging method \\\n     *\n     * @returns { void } updateBridging method .\\\n     * @param {string} isLoad - provide the isLoad value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateBridging = function (isLoad) {\n        if (this.bridgingModule) {\n            for (var i = 0; i < this.connectors.length; i++) {\n                var connector = this.connectors[i];\n                this.bridgingModule.updateBridging(connector, this);\n                var canvas = this.connectors[i].wrapper;\n                if (canvas) {\n                    var pathSegment = canvas.children[0];\n                    var data = pathSegment.data;\n                    connector.getSegmentElement(connector, pathSegment, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ?\n                        this.layout.orientation : undefined);\n                    if (pathSegment.data !== data) {\n                        canvas.measure(new Size());\n                        canvas.arrange(canvas.desiredSize);\n                        if (this.mode === 'SVG' && !isLoad) {\n                            this.updateDiagramObject(connector);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *setCursor method \\\n     *\n     * @returns { void } setCursor method .\\\n     * @param {string} cursor - provide the width value.\n     *\n     * @private\n     */\n    Diagram.prototype.setCursor = function (cursor) {\n        this.diagramRenderer.setCursor(this.diagramCanvas, cursor);\n    };\n    /**\n     *clearCanvas method \\\n     *\n     * @returns { void } clearCanvas method .\\\n     * @param {View} view - provide the width value.\n     *\n     * @private\n     */\n    Diagram.prototype.clearCanvas = function (view) {\n        //let width: number;\n        //let height: number;\n        var width = view.contentWidth || view.diagramLayer.width / this.scroller.currentZoom;\n        var height = view.contentHeight || view.diagramLayer.height / this.scroller.currentZoom;\n        if (view.mode !== 'SVG') {\n            var ctx = CanvasRenderer.getContext(view.diagramLayer);\n            ctx.clearRect(0, 0, width, height);\n        }\n    };\n    /**\n     *updateScrollOffset method \\\n     *\n     * @returns { void } updateScrollOffset method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateScrollOffset = function () {\n        this.scroller.setScrollOffset(this.diagramCanvas.scrollLeft, this.diagramCanvas.scrollTop);\n        updateRuler(this);\n        if (canVitualize(this)) {\n            this.scroller.virtualizeElements();\n        }\n    };\n    /**\n     *setOffset method \\\n     *\n     * @returns { void } setOffset method .\\\n     * @param {number} offsetX - provide the width value.\n     * @param {number} offsetY - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.setOffset = function (offsetX, offsetY) {\n        var domTable = 'domTable';\n        if (!window[domTable][this.element.id + 'content']) {\n            window[domTable][this.element.id + 'content'] = document.getElementById(this.element.id + 'content');\n        }\n        var container = window[domTable][this.element.id + 'content'];\n        if (container) {\n            container.scrollLeft = offsetX;\n            container.scrollTop = offsetY;\n        }\n    };\n    /**\n     *setSize method \\\n     *\n     * @returns { void } setSize method .\\\n     * @param {number} width - provide the width value.\n     * @param {number} height - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.setSize = function (width, height) {\n        if (this.diagramLayer && !this.preventDiagramUpdate) {\n            var position = getRulerSize(this);\n            width -= position.width;\n            height -= position.height;\n            var bounds = this.spatialSearch.getPageBounds();\n            bounds.x *= this.scroller.currentZoom;\n            bounds.y *= this.scroller.currentZoom;\n            bounds.width *= this.scroller.currentZoom;\n            bounds.height *= this.scroller.currentZoom;\n            var factor = this.mode === 'SVG' ? 1 : 1.5;\n            var diagramLayer = this.mode === 'SVG' ?\n                getDiagramLayerSvg(this.element.id) : this.diagramLayer;\n            var w = (this.mode === 'Canvas' &&\n                (this.constraints & DiagramConstraints.Virtualization)) ? this.scroller.viewPortWidth : width;\n            var h = (this.mode === 'Canvas' &&\n                (this.constraints & DiagramConstraints.Virtualization)) ? this.scroller.viewPortHeight : height;\n            diagramLayer.setAttribute('width', (factor * w).toString());\n            diagramLayer.setAttribute('height', (factor * h).toString());\n            var hiddenUserHandleTemplate = document.getElementById(this.element.id + '_diagramUserHandleLayer');\n            if (hiddenUserHandleTemplate) {\n                hiddenUserHandleTemplate.style.width = width + 'px';\n                hiddenUserHandleTemplate.style.height = height + 'px';\n            }\n            var attr = { 'width': width.toString(), 'height': height.toString() };\n            this.diagramLayerDiv.style.width = width + 'px';\n            this.diagramLayerDiv.style.height = height + 'px';\n            setAttributeSvg(getNativeLayerSvg(this.element.id), attr);\n            setAttributeSvg(getPortLayerSvg(this.element.id), attr);\n            var adornerSVG = getAdornerLayerSvg(this.element.id);\n            setAttributeSvg(adornerSVG, attr);\n            adornerSVG.parentNode.style.width = width + 'px';\n            adornerSVG.parentNode.style.height = height + 'px';\n            var gridLayer = getGridLayerSvg(this.element.id);\n            setAttributeSvg(gridLayer, attr);\n            this.diagramRenderer.updateGrid(this.snapSettings, gridLayer, this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n            setAttributeSvg(getBackgroundLayerSvg(this.element.id), attr);\n            this.htmlLayer.style.width = width + 'px';\n            this.htmlLayer.style.height = height + 'px';\n            if (this.mode !== 'SVG' && !(canVitualize(this))) {\n                this.refreshDiagramLayer();\n            }\n            if (this.mode === 'SVG' && canVitualize(this)) {\n                this.scroller.virtualizeElements();\n            }\n        }\n    };\n    /**\n     *transformLayers method \\\n     *\n     * @returns { void } Defines how to remove the Page breaks .\\\n     *\n     * @private\n     */\n    Diagram.prototype.transformLayers = function () {\n        var bounds = this.spatialSearch.getPageBounds();\n        bounds.x *= this.scroller.currentZoom;\n        bounds.y *= this.scroller.currentZoom;\n        bounds.width *= this.scroller.currentZoom;\n        bounds.height *= this.scroller.currentZoom;\n        this.diagramRenderer.updateGrid(this.snapSettings, getGridLayerSvg(this.element.id), this.scroller.transform, this.rulerSettings, this.hRuler, this.vRuler);\n        this.diagramRenderer.transformLayers(this.scroller.transform, this.mode === 'SVG');\n        if (!(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.updateSelector();\n        }\n        this.renderPageBreaks(bounds);\n    };\n    /**\n     *Defines how to remove the Page breaks \\\n     *\n     * @returns { void } Defines how to remove the Page breaks .\\\n     *\n     * @private\n     */\n    Diagram.prototype.removePageBreaks = function () {\n        if (this.diagramLayer) {\n            var line = getBackgroundLayer(this.element.id);\n            if (line && line.childNodes) {\n                var length_1 = line.childNodes.length;\n                for (var i = 0; i < length_1; i++) {\n                    line.removeChild(line.childNodes[0]);\n                }\n            }\n        }\n    };\n    /**\n     * Defines how the page breaks has been rendered \\\n     *\n     * @returns { void } Defines how the page breaks has been rendered .\\\n     * @param {Rect} bounds - provide the overview value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderPageBreaks = function (bounds) {\n        this.removePageBreaks();\n        var backgroundLayer = getBackgroundLayer(this.element.id);\n        if (backgroundLayer) {\n            var i = 0;\n            bounds = this.scroller.getPageBounds(true);\n            var x = (this.scroller.transform.tx + bounds.x) * this.scroller.currentZoom;\n            var y = (this.scroller.transform.ty + bounds.y) * this.scroller.currentZoom;\n            var height = bounds.height * this.scroller.currentZoom;\n            var width = bounds.width * this.scroller.currentZoom;\n            DiagramRenderer.renderSvgBackGroundImage(this.pageSettings.background, this.element, x, y, width, height);\n            var options = {\n                id: backgroundLayer.id + 'rect', x: x,\n                y: y,\n                height: height,\n                width: width, angle: 0, stroke: '', strokeWidth: 1,\n                fill: this.pageSettings.background.color, opacity: 1,\n                pivotX: 0, pivotY: 0, visible: true, dashArray: '0'\n            };\n            this.diagramRenderer.drawRect(backgroundLayer, options);\n            if (this.pageSettings.showPageBreaks) {\n                var collection = this.scroller.getPageBreak(bounds);\n                for (i = 0; i < collection.length; i++) {\n                    this.diagramRenderer.drawLine(backgroundLayer, {\n                        class: 'e-diagram-page-break',\n                        fill: 'none', stroke: '#aaaaaa', strokeWidth: 1, dashArray: '10 10',\n                        opacity: 2, x: 0, y: 0, width: 0, height: 0, angle: 0, pivotX: 0, pivotY: 0, visible: true,\n                        startPoint: {\n                            x: (collection[i].x1 + this.scroller.transform.tx) * this.scroller.currentZoom,\n                            y: (collection[i].y1 + this.scroller.transform.ty) * this.scroller.currentZoom\n                        },\n                        endPoint: {\n                            x: (collection[i].x2 + this.scroller.transform.tx) * this.scroller.currentZoom,\n                            y: (collection[i].y2 + this.scroller.transform.ty) * this.scroller.currentZoom\n                        }, id: collection[i].y1 === collection[i].y2 ? 'HorizontalLines' : 'VerticalLines'\n                    });\n                }\n            }\n        }\n    };\n    Diagram.prototype.validatePageSize = function () {\n        var temp = 0;\n        if (this.pageSettings.orientation === 'Portrait') {\n            if (this.pageSettings.width > this.pageSettings.height) {\n                temp = this.pageSettings.height;\n                this.pageSettings.height = this.pageSettings.width;\n                this.pageSettings.width = temp;\n            }\n        }\n        else {\n            if (this.pageSettings.height > this.pageSettings.width) {\n                temp = this.pageSettings.width;\n                this.pageSettings.width = this.pageSettings.height;\n                this.pageSettings.height = temp;\n            }\n        }\n    };\n    /**\n     * setOverview method \\\n     *\n     * @returns { void }     setOverview method .\\\n     * @param {View} overview - provide the overview value.\n     * @param {string} id - provide the boolean value.\n     *\n     * @private\n     */\n    Diagram.prototype.setOverview = function (overview, id) {\n        if (overview) {\n            if (overview) {\n                this.views.push(overview.id);\n                this.views[overview.id] = overview;\n                overview.renderDocument(overview);\n                overview.diagramRenderer.setLayers();\n                overview.updateView(overview);\n                this.renderNodes(overview);\n            }\n        }\n        else {\n            for (var i = 0; i < this.views.length; i++) {\n                if (this.views[i] === id) {\n                    overview = (this.views[id]);\n                }\n            }\n            this.views[id] = undefined;\n            var index = this.views.indexOf(id);\n            this.views.splice(index, 1);\n        }\n    };\n    Diagram.prototype.renderNodes = function (overview) {\n        if (overview) {\n            var renderer = new DiagramRenderer(overview.id, new SvgRenderer(), false);\n            var g = document.getElementById(overview.element.id + '_diagramLayer');\n            var htmlLayer = getHTMLLayer(overview.element.id);\n            this.renderDiagramElements(g, overview.diagramRenderer || renderer, htmlLayer, undefined, undefined, true);\n        }\n    };\n    Diagram.prototype.updateThumbConstraints = function (node, selectorModel, canInitialize) {\n        var state = 0;\n        var length = node.length;\n        for (var i = 0; i < length; i++) {\n            var obj = node[i];\n            var hideRotate = false;\n            var hideResize = false;\n            var thumbConstraints = selectorModel.thumbsConstraints;\n            if (obj instanceof Node) {\n                hideRotate = (obj.shape.type === 'Bpmn' && (obj.shape.shape === 'Activity' &&\n                    (obj.shape.activity.subProcess.collapsed === false)) ||\n                    obj.shape.shape === 'TextAnnotation');\n                hideResize = (obj.shape.type === 'Bpmn' && obj.shape.shape === 'TextAnnotation');\n                if (!canRotate(obj) || !(thumbConstraints & ThumbsConstraints.Rotate) || hideRotate) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n                }\n                if (!canResize(obj, 'SouthEast') || !(thumbConstraints & ThumbsConstraints.ResizeSouthEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthEast;\n                }\n                if (!canResize(obj, 'NorthWest') || !(thumbConstraints & ThumbsConstraints.ResizeNorthWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthWest;\n                }\n                if (!canResize(obj, 'East') || !(thumbConstraints & ThumbsConstraints.ResizeEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeEast;\n                }\n                if (!canResize(obj, 'West') || !(thumbConstraints & ThumbsConstraints.ResizeWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeWest;\n                }\n                if (!canResize(obj, 'North') || !(thumbConstraints & ThumbsConstraints.ResizeNorth) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorth;\n                }\n                if (!canResize(obj, 'South') || !(thumbConstraints & ThumbsConstraints.ResizeSouth) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouth;\n                }\n                if (!canResize(obj, 'NorthEast') || !(thumbConstraints & ThumbsConstraints.ResizeNorthEast) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeNorthEast;\n                }\n                if (!canResize(obj, 'SouthWest') || !(thumbConstraints & ThumbsConstraints.ResizeSouthWest) || hideResize) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ResizeSouthWest;\n                }\n            }\n            else if (obj instanceof Connector) {\n                if (!canInitialize) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n                }\n                if (canDragSourceEnd(obj)) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorSource;\n                }\n                else {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorSource;\n                }\n                if (canDragTargetEnd(obj)) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.ConnectorTarget;\n                }\n                else {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.ConnectorTarget;\n                }\n            }\n            else {\n                if (!canInitialize) {\n                    thumbConstraints = thumbConstraints | ThumbsConstraints.Default;\n                }\n                if (!canResize(obj)) {\n                    thumbConstraints = thumbConstraints & ~(ThumbsConstraints.ResizeSouthEast | ThumbsConstraints.ResizeSouthWest |\n                        ThumbsConstraints.ResizeSouth | ThumbsConstraints.ResizeEast | ThumbsConstraints.ResizeWest |\n                        ThumbsConstraints.ResizeNorth | ThumbsConstraints.ResizeNorthEast | ThumbsConstraints.ResizeNorthWest);\n                }\n                if (!canRotate(obj)) {\n                    thumbConstraints = thumbConstraints & ~ThumbsConstraints.Rotate;\n                }\n            }\n            selectorModel.thumbsConstraints = thumbConstraints;\n        }\n    };\n    /**\n     * renderSelector method \\\n     *\n     * @returns { void }     renderSelector method .\\\n     * @param {boolean} multipleSelection - provide the multipleSelection value.\n     * @param {boolean} isSwimLane - provide the boolean value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderSelector = function (multipleSelection, isSwimLane) {\n        var isProtectedOnChangeValue = this.isProtectedOnChange;\n        if (isBlazor()) {\n            this.isProtectedOnChange = true;\n        }\n        var size = new Size();\n        var selectorModel = this.selectedItems;\n        var selectorConstraints = selectorModel.constraints;\n        var rendererActions = this.diagramRenderer.rendererActions;\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        this.diagramRenderer.rendererActions = this.currentSymbol ?\n            this.addConstraints(rendererActions, RendererAction.DrawSelectorBorder) :\n            this.removeConstraints(rendererActions, RendererAction.DrawSelectorBorder);\n        this.clearSelectorLayer();\n        if (this.commandHandler.hasSelection()) {\n            if (selectorModel.nodes.length === 1 && selectorModel.connectors.length === 0) {\n                selectorModel.rotateAngle = selectorModel.nodes[0].rotateAngle;\n                selectorModel.pivot = selectorModel.nodes[0].pivot;\n            }\n            selectorModel.wrapper.measure(size);\n            selectorModel.wrapper.arrange(selectorModel.wrapper.desiredSize);\n            selectorModel.width = selectorModel.wrapper.actualSize.width;\n            selectorModel.height = selectorModel.wrapper.actualSize.height;\n            selectorModel.offsetX = selectorModel.wrapper.offsetX;\n            selectorModel.offsetY = selectorModel.wrapper.offsetY;\n            if (selectorModel.rotateAngle !== 0) {\n                for (var _i = 0, _a = selectorModel.nodes; _i < _a.length; _i++) {\n                    var obj = _a[_i];\n                    obj.offsetX = obj.wrapper.offsetX;\n                    obj.offsetY = obj.wrapper.offsetY;\n                }\n                for (var _b = 0, _c = selectorModel.connectors; _b < _c.length; _b++) {\n                    var conn = _c[_b];\n                    //update connections\n                }\n            }\n            var bounds = this.spatialSearch.getPageBounds();\n            //let selectorElement: (SVGElement | HTMLCanvasElement);\n            var selectorElement = getSelectorElement(this.element.id);\n            //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n            var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n            selectorModel.thumbsConstraints = ThumbsConstraints.Default;\n            if (selectorModel.annotation) {\n                this.updateThumbConstraints([selectorModel.annotation], selectorModel);\n            }\n            else {\n                this.updateThumbConstraints(selectorModel.nodes, selectorModel);\n                this.updateThumbConstraints(selectorModel.connectors, selectorModel, true);\n            }\n            if (selectorModel.annotation) {\n                this.renderSelectorForAnnotation(selectorModel, selectorElement);\n            }\n            else if (selectorModel.nodes.length + selectorModel.connectors.length === 1 || this.nameTable[\"helper\"]) {\n                if (selectorModel.nodes[0] instanceof Node) {\n                    var node = selectorModel.nodes[0];\n                    if (checkParentAsContainer(this, node)) {\n                        if (!isSwimLane && (node.shape.type !== 'UmlClassifier' && !(node.parentId &&\n                            this.nameTable[node.parentId]\n                            && this.nameTable[node.parentId].shape.type === 'UmlClassifier'))) {\n                            if (!(node.container && (node.container.type === 'Canvas' || node.container.type === 'Grid'))) {\n                                selectorModel.nodes[0].constraints &= ~(NodeConstraints.Rotate | NodeConstraints.HideThumbs);\n                            }\n                            selectorModel.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n                        }\n                    }\n                    var constraints = isSwimLane ? true : ((node.constraints & NodeConstraints.HideThumbs) ? true : false);\n                    var swimlane = (node.shape.type === 'SwimLane' || node.isLane || node.isPhase || isSwimLane) ? true : false;\n                    this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(node), constraints, swimlane);\n                }\n                else if (selectorModel.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n                    var connector = selectorModel.connectors[0];\n                    this.diagramRenderer.renderEndPointHandle(connector, selectorElement, selectorModel.thumbsConstraints, selectorModel.constraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, (this.connectorEditingToolModule && canDragSegmentThumb(connector)) ? true : false);\n                }\n            }\n            else {\n                this.diagramRenderer.renderResizeHandle(selectorModel.wrapper, selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel));\n            }\n            if (!(selectorModel.annotation) && !this.currentSymbol) {\n                this.diagramRenderer.renderUserHandler(selectorModel, selectorElement, this.scroller.transform, diagramUserHandlelayer);\n                if (isBlazor() && innertemplate.length > 0) {\n                    for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                        var userHandle = this.selectedItems.userHandles[i];\n                        div = document.getElementById(userHandle.name + '_html_element');\n                        div.style.display = 'block';\n                    }\n                }\n            }\n        }\n        this.isProtectedOnChange = isProtectedOnChangeValue;\n    };\n    /**\n     * updateSelector method \\\n     *\n     * @returns { void }     updateSelector method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.updateSelector = function () {\n        var severDataBind = this.allowServerDataBinding;\n        this.enableServerDataBinding(false);\n        var size = new Size();\n        var selector = this.selectedItems;\n        var selectorConstraints = selector.constraints;\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        if (!(this.diagramActions & DiagramAction.ToolAction) && this.selectedItems.nodes.length === 1) {\n            this.selectedItems.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n            this.selectedItems.wrapper.rotateAngle = this.selectedItems.nodes[0].rotateAngle;\n        }\n        if (this.selectedItems !== undefined) {\n            this.clearSelectorLayer();\n            if (selector.wrapper !== null && selector.wrapper.children && selector.wrapper.children.length) {\n                selector.wrapper.measure(size);\n                selector.wrapper.arrange(selector.wrapper.desiredSize);\n                if (selector.rotateAngle !== 0 || selector.rotateAngle !== selector.wrapper.prevRotateAngle) {\n                    for (var _i = 0, _a = selector.nodes; _i < _a.length; _i++) {\n                        var obj = _a[_i];\n                        obj.offsetX = obj.wrapper.offsetX;\n                        obj.offsetY = obj.wrapper.offsetY;\n                    }\n                }\n                selector.width = selector.wrapper.actualSize.width;\n                selector.height = selector.wrapper.actualSize.height;\n                selector.offsetX = selector.wrapper.offsetX;\n                selector.offsetY = selector.wrapper.offsetY;\n                //let selectorEle: (SVGElement | HTMLCanvasElement);\n                var selectorEle = getSelectorElement(this.element.id);\n                //let diagramUserHandlelayer: (SVGElement | HTMLElement);\n                var diagramUserHandlelayer = getUserHandleLayer(this.element.id);\n                var canHideResizers = this.eventHandler.canHideResizers();\n                selector.thumbsConstraints = ThumbsConstraints.Default;\n                if (selector.annotation) {\n                    this.updateThumbConstraints([selector.annotation], selector);\n                }\n                else {\n                    this.updateThumbConstraints(selector.nodes, selector);\n                    this.updateThumbConstraints(selector.connectors, selector, true);\n                }\n                if ((this.selectedItems.constraints & SelectorConstraints.UserHandle) && (!(selector.annotation)) && !this.currentSymbol) {\n                    this.diagramRenderer.renderUserHandler(selector, selectorEle, this.scroller.transform, diagramUserHandlelayer);\n                    if (isBlazor() && innertemplate.length > 0) {\n                        for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                            var userHandletemplate = this.selectedItems.userHandles[i];\n                            div = document.getElementById(userHandletemplate.name + '_html_element');\n                            div.style.display = 'block';\n                        }\n                    }\n                }\n                if (selector.annotation) {\n                    this.renderSelectorForAnnotation(selector, selectorEle);\n                }\n                else if (selector.nodes.length + selector.connectors.length === 1) {\n                    if (selector.connectors[0] instanceof Connector && canDrawThumbs(this.diagramRenderer.rendererActions)) {\n                        var connector = selector.connectors[0];\n                        this.diagramRenderer.renderEndPointHandle(connector, selectorEle, selector.thumbsConstraints, selectorConstraints, this.scroller.transform, connector.sourceWrapper !== undefined, connector.targetWrapper !== undefined, (this.connectorEditingToolModule && canDragSegmentThumb(connector)) ? true : false);\n                    }\n                    else if (selector.nodes[0] instanceof Node) {\n                        var stackPanel = selector.nodes[0];\n                        if (checkParentAsContainer(this, selector.nodes[0])) {\n                            if (stackPanel.shape.type !== 'UmlClassifier' && !(stackPanel.parentId &&\n                                this.nameTable[stackPanel.parentId]\n                                && this.nameTable[stackPanel.parentId].shape.type === 'UmlClassifier')) {\n                                if (!(stackPanel.container && (stackPanel.container.type === 'Canvas'\n                                    || stackPanel.container.type === 'Grid'))) {\n                                    selector.nodes[0].constraints &= ~(NodeConstraints.HideThumbs | NodeConstraints.Rotate);\n                                }\n                                selector.thumbsConstraints &= ~ThumbsConstraints.Rotate;\n                            }\n                        }\n                        var swimlane = (stackPanel.shape.type === 'SwimLane' || stackPanel.isLane ||\n                            stackPanel.isPhase) ? true : false;\n                        this.diagramRenderer.renderResizeHandle(selector.wrapper.children[0], selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector.nodes[0]), (selector.nodes[0].constraints & NodeConstraints.HideThumbs) ? true : false, swimlane);\n                    }\n                }\n                else {\n                    if (this.diagramActions & DiagramAction.Interactions) {\n                        this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions | RendererAction.PreventRenderSelector;\n                    }\n                    this.diagramRenderer.renderResizeHandle(selector.wrapper, selectorEle, selector.thumbsConstraints, this.scroller.currentZoom, selector.constraints, this.scroller.transform, canHideResizers, canMove(selector));\n                    this.diagramRenderer.rendererActions = this.diagramRenderer.rendererActions & ~RendererAction.PreventRenderSelector;\n                }\n            }\n        }\n        this.enableServerDataBinding(severDataBind);\n    };\n    /**\n     * renderSelectorForAnnotation method \\\n     *\n     * @returns { void }     renderSelectorForAnnotation method .\\\n     * @param {Selector} selectorModel - provide the x value.\n     * @param {(SVGElement | HTMLCanvasElement)} selectorElement - provide the y value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderSelectorForAnnotation = function (selectorModel, selectorElement) {\n        this.diagramRenderer.renderResizeHandle(selectorModel.wrapper.children[0], selectorElement, selectorModel.thumbsConstraints, this.scroller.currentZoom, selectorModel.constraints, this.scroller.transform, undefined, canMove(selectorModel.annotation));\n    };\n    /**\n     * drawSelectionRectangle method \\\n     *\n     * @returns { void }     drawSelectionRectangle method .\\\n     * @param {number} x - provide the x value.\n     * @param {number} y - provide the y value.\n     * @param {number} width - provide the width value.\n     * @param {number} height - provide the height value.\n     *\n     * @private\n     */\n    Diagram.prototype.drawSelectionRectangle = function (x, y, width, height) {\n        this.clearSelectorLayer();\n        this.diagramRenderer.drawSelectionRectangle(x, y, width, height, this.adornerLayer, this.scroller.transform);\n    };\n    /**\n     * renderHighlighter method \\\n     *\n     * @returns { void }     renderHighlighter method .\\\n     * @param {DiagramElement} element - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.renderHighlighter = function (element) {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        this.diagramRenderer.renderHighlighter(element, adornerSvg, this.scroller.transform);\n    };\n    /**\n     * clearHighlighter method \\\n     *\n     * @returns { void }     clearHighlighter method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.clearHighlighter = function () {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        var highlighter = adornerSvg.getElementById(adornerSvg.id + '_highlighter');\n        if (highlighter) {\n            highlighter.parentNode.removeChild(highlighter);\n        }\n    };\n    /**\n     * getNodesConnectors method \\\n     *\n     * @returns { (NodeModel | ConnectorModel)[] }     getNodesConnectors method .\\\n     * @param {(NodeModel | ConnectorModel)[]} selectedItems - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.getNodesConnectors = function (selectedItems) {\n        for (var i = 0; i < this.nodes.length; i++) {\n            var node = this.nodes[i];\n            selectedItems.push(node);\n        }\n        for (var i = 0; i < this.connectors.length; i++) {\n            var conn = this.connectors[i];\n            selectedItems.push(conn);\n        }\n        return selectedItems;\n    };\n    /**\n     * clearSelectorLayer method \\\n     *\n     * @returns { void }     clearSelectorLayer method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.clearSelectorLayer = function () {\n        var adornerSvg = getAdornerLayerSvg(this.element.id);\n        var innertemplate = document.getElementsByClassName('blazor-inner-template');\n        var i;\n        var div;\n        var j;\n        if (!this.currentSymbol) {\n            var selectionRect = adornerSvg.getElementById(this.adornerLayer.id + '_selected_region');\n            if (selectionRect) {\n                selectionRect.parentNode.removeChild(selectionRect);\n            }\n            this.clearHighlighter();\n            var childNodes = getSelectorElement(this.element.id).childNodes;\n            var child = void 0;\n            for (var i_3 = childNodes.length; i_3 > 0; i_3--) {\n                child = childNodes[i_3 - 1];\n                child.parentNode.removeChild(child);\n            }\n            if (isBlazor() && !(this.diagramActions & DiagramAction.DragUsingMouse) && innertemplate.length > 0) {\n                for (i = 0; i < this.selectedItems.userHandles.length; i++) {\n                    var template = this.selectedItems.userHandles[i];\n                    div = document.getElementById(template.name + '_html_element');\n                    div.style.display = 'none';\n                }\n            }\n            else {\n                if (!isBlazor()) {\n                    var templates = getUserHandleLayer(this.element.id).childNodes;\n                    for (i = templates.length; i > 0; i--) {\n                        templates[i - 1].parentNode.removeChild(templates[i - 1]);\n                    }\n                }\n            }\n        }\n        else {\n            var symbolBorder = adornerSvg.getElementById('borderRect_symbol');\n            if (symbolBorder) {\n                symbolBorder.parentNode.removeChild(symbolBorder);\n            }\n        }\n    };\n    /**\n     * getWrapper method \\\n     *\n     * @returns { void }     getWrapper method .\\\n     * @param {Container} nodes - provide the node value.\n     * @param {string} id - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getWrapper = function (nodes, id) {\n        var wrapper;\n        id = nodes.id + '_' + id;\n        var container = nodes instanceof Canvas ? nodes : this.getPortContainer(this.nameTable[nodes.id]);\n        for (var i = 0; i < container.children.length; i++) {\n            if (id === container.children[i].id) {\n                wrapper = container.children[i];\n            }\n        }\n        return wrapper;\n    };\n    /**\n     * DiagramElement method \\\n     *\n     * @returns { void }     getEndNodeWrapper method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     * @param {ConnectorModel} connector - provide the childernCollection value.\n     * @param {boolean} source - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getEndNodeWrapper = function (node, connector, source) {\n        if (node.shape.type === 'Bpmn' && node.wrapper.children[0] instanceof Canvas) {\n            if ((!isBlazor() && node.shape.shape === 'Activity') ||\n                (isBlazor() && node.shadow.bpmnShape === 'Activity')) {\n                if (source && node.shape.activity.subProcess.type === 'Transaction'\n                    && connector.sourcePortID) {\n                    var portId = connector.sourcePortID;\n                    var parent_3 = node.wrapper.children[0].children[0].children[2];\n                    if (parent_3.children) {\n                        for (var _i = 0, _a = parent_3.children; _i < _a.length; _i++) {\n                            var child = _a[_i];\n                            if (child.visible && child.id === node.id + '_' + portId) {\n                                return child.children[0];\n                            }\n                        }\n                    }\n                }\n                return node.wrapper.children[0].children[0].children[0];\n            }\n            return node.wrapper.children[0].children[0];\n        }\n        if (!this.containsMargin(node.wrapper.children[0])) {\n            if (!node.children) {\n                return node.wrapper.children[0];\n            }\n        }\n        return node.wrapper;\n    };\n    Diagram.prototype.containsMargin = function (node) {\n        return node.margin && (node.margin.left !== 0 || node.margin.top !== 0 || node.margin.right !== 0 || node.margin.bottom !== 0);\n    };\n    Diagram.prototype.focusOutEdit = function () {\n        this.endEdit();\n    };\n    Diagram.prototype.endEditCommand = function () {\n        this.endEdit();\n        this.textEditing = false;\n    };\n    /**\n     * @private\n     */\n    /* tslint:disable */\n    Diagram.prototype.endEdit = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var blazor, blazorInterop, oldValues, changedvalues, annotations, textArea, text, element, node, annotation, args, bpmnAnnotation, textWrapper, eventObj, annotation_1, index, deleteNode, eventObj, index, changesAnnotation, nodeIndex, oldnodes, newnodes, clonedObject, selectedNode, swimLaneNode, laneHeader, phaseHeader, collection, j;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.diagramActions & DiagramAction.TextEdit)) return [3 /*break*/, 11];\n                        blazor = 'Blazor';\n                        blazorInterop = 'sfBlazor';\n                        oldValues = void 0;\n                        changedvalues = void 0;\n                        annotations = {};\n                        this.enableServerDataBinding(false);\n                        if (isBlazor()) {\n                            this.canEnableBlazorObject = true;\n                        }\n                        textArea = document.getElementById(this.element.id + '_editBox');\n                        if (!((isBlazor() && textArea) || !isBlazor())) return [3 /*break*/, 11];\n                        text = textArea.value;\n                        EventHandler.remove(textArea, 'input', this.eventHandler.inputChange);\n                        EventHandler.remove(textArea, 'focusout', this.focusOutEdit);\n                        element = document.getElementById(this.element.id + '_editTextBoxDiv');\n                        node = void 0;\n                        node = this.nameTable[this.activeLabel.parentId];\n                        annotation = findAnnotation(node, this.activeLabel.id);\n                        args = { oldValue: this.activeLabel.text, newValue: text, cancel: false, element: node, annotation: annotation };\n                        if (isBlazor() && this.textEdit) {\n                            args = this.getBlazorTextEditArgs(args);\n                        }\n                        bpmnAnnotation = false;\n                        element.parentNode.removeChild(element);\n                        textWrapper = void 0;\n                        if (!this.bpmnModule) return [3 /*break*/, 5];\n                        node = this.bpmnModule.isBpmnTextAnnotation(this.activeLabel, this);\n                        textWrapper = this.bpmnModule.getTextAnnotationWrapper(node, this.activeLabel.id);\n                        bpmnAnnotation = node ? true : false;\n                        if (!bpmnAnnotation) return [3 /*break*/, 5];\n                        if (!(element.textContent !== text || text !== this.activeLabel.text)) return [3 /*break*/, 5];\n                        if (!isBlazor()) return [3 /*break*/, 3];\n                        if (!(this.textEdit && window && window[blazor])) return [3 /*break*/, 2];\n                        eventObj = { 'EventName': 'textEdit', args: JSON.stringify(args) };\n                        return [4 /*yield*/, window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n                    case 1:\n                        args = (_a.sent()) || args;\n                        _a.label = 2;\n                    case 2: return [3 /*break*/, 4];\n                    case 3:\n                        this.triggerEvent(DiagramEvent.textEdit, args);\n                        _a.label = 4;\n                    case 4:\n                        if (!args.cancel) {\n                            this.bpmnModule.updateTextAnnotationContent(node, this.activeLabel, text, this);\n                        }\n                        _a.label = 5;\n                    case 5:\n                        if (!!bpmnAnnotation) return [3 /*break*/, 10];\n                        node = this.nameTable[this.activeLabel.parentId];\n                        annotation_1 = findAnnotation(node, this.activeLabel.id);\n                        if (annotation_1 && !(annotation_1 instanceof Text)) {\n                            index = findObjectIndex(node, annotation_1.id, true);\n                            annotations[index] = { content: annotation_1.content };\n                            oldValues = { annotations: annotations };\n                        }\n                        else {\n                            if (isBlazor() && (node.shape).type === 'Text') {\n                                oldValues = { shape: { textContent: node.shape.content } };\n                            }\n                            else {\n                                oldValues = { shape: { content: node.shape.content } };\n                            }\n                        }\n                        deleteNode = this.eventHandler.isAddTextNode(node, true);\n                        if (!(!deleteNode && (element.textContent !== text || text !== this.activeLabel.text))) return [3 /*break*/, 9];\n                        if (!isBlazor()) return [3 /*break*/, 8];\n                        if (!(window && window[blazor] && this.textEdit)) return [3 /*break*/, 7];\n                        eventObj = { 'EventName': 'textEdit', args: JSON.stringify(args) };\n                        return [4 /*yield*/, window[blazorInterop].updateBlazorDiagramEvents(eventObj, this)];\n                    case 6:\n                        args = (_a.sent()) || args;\n                        _a.label = 7;\n                    case 7: return [3 /*break*/, 9];\n                    case 8:\n                        this.triggerEvent(DiagramEvent.textEdit, args);\n                        _a.label = 9;\n                    case 9:\n                        if (!textWrapper) {\n                            textWrapper = this.getWrapper(node.wrapper, this.activeLabel.id);\n                        }\n                        if (annotation_1.content !== text && !args.cancel) {\n                            if (node.parentId && this.nameTable[node.parentId].shape.type === 'UmlClassifier'\n                                && text.indexOf('+') === -1 && text.indexOf('-') === -1 && text.indexOf('#') === -1\n                                && text.indexOf('~') === -1 && node.id.indexOf('_umlClass_header') === -1) {\n                                text = ' + ' + text;\n                            }\n                            if (node.isLane || node.isPhase) {\n                                this.protectPropertyChange(true);\n                            }\n                            if (!(annotation_1 instanceof Text)) {\n                                index = findObjectIndex(node, annotation_1.id, true);\n                                changesAnnotation = {};\n                                changesAnnotation[index] = { content: text };\n                                changedvalues = { annotations: changesAnnotation };\n                            }\n                            else {\n                                if (isBlazor() && (node.shape).type === 'Text') {\n                                    changedvalues = { shape: { textContent: text } };\n                                }\n                                else {\n                                    changedvalues = { shape: { content: text } };\n                                }\n                            }\n                            nodeIndex = this.getIndex(node, node.id);\n                            if (nodeIndex) {\n                                oldnodes = {};\n                                oldnodes[nodeIndex] = oldValues;\n                                newnodes = {};\n                                newnodes[nodeIndex] = changedvalues;\n                                if (getObjectType(node) === Node) {\n                                    this.onPropertyChanged({ nodes: newnodes }, { nodes: oldnodes });\n                                }\n                                else {\n                                    this.onPropertyChanged({ connectors: newnodes }, { connectors: oldnodes });\n                                }\n                            }\n                            this.protectPropertyChange(true);\n                            if (isBlazor() && (node.shape).type === 'Text') {\n                                node.shape.textContent = text;\n                            }\n                            else {\n                                annotation_1.content = text;\n                            }\n                            this.protectPropertyChange(false);\n                            this.updateSelector();\n                            if (node.isLane || node.isPhase) {\n                                this.protectPropertyChange(false);\n                            }\n                        }\n                        if (deleteNode) {\n                            this.removeObjectsFromLayer(node);\n                            this.removeFromAQuad(node);\n                            delete this.nameTable[this.activeLabel.parentId];\n                            if (text !== '') {\n                                this.clearSelection();\n                                clonedObject = cloneObject(node);\n                                node = this.add(clonedObject);\n                                this.updateDiagramObject(node);\n                                this.commandHandler.oldSelectedObjects = cloneSelectedObjects(this);\n                                this.commandHandler.select(this.nameTable[node.id]);\n                                this.commandHandler.updateBlazorSelector();\n                            }\n                        }\n                        _a.label = 10;\n                    case 10:\n                        if (this.selectedItems.nodes.length) {\n                            selectedNode = this.nameTable[this.activeLabel.parentId];\n                            swimLaneNode = this.nameTable[selectedNode.parentId];\n                            if ((swimLaneNode && swimLaneNode.shape.type === 'SwimLane') || (selectedNode.shape.type === 'SwimLane')) {\n                                laneHeader = 'LaneHeaderParent';\n                                phaseHeader = 'PhaseHeaderParent';\n                                if ((selectedNode.shape.type === 'SwimLane')) {\n                                    swimLaneNode = this.nameTable[this.activeLabel.parentId];\n                                    selectedNode = node;\n                                }\n                                if ((selectedNode.isLane || selectedNode.isPhase)) {\n                                    collection = selectedNode.isLane ?\n                                        swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n                                    for (j = 0; j < collection.length; j++) {\n                                        if (collection[j].id === (selectedNode[laneHeader] || selectedNode[phaseHeader])) {\n                                            collection[j].header.annotation.content = selectedNode.annotations[0].content;\n                                        }\n                                    }\n                                }\n                                else if (selectedNode.isHeader && swimLaneNode.shape.hasHeader) {\n                                    swimLaneNode.shape.header.annotation.content = selectedNode.annotations[0].content;\n                                }\n                            }\n                            this.dataBind();\n                        }\n                        textWrapper.visible = true;\n                        this.updateDiagramObject(node);\n                        this.diagramActions = this.diagramActions & ~DiagramAction.TextEdit;\n                        if (this.activeLabel.isGroup) {\n                            this.endGroupAction();\n                        }\n                        this.activeLabel = { id: '', parentId: '', isGroup: false, text: undefined };\n                        this.commandHandler.getBlazorOldValues();\n                        if (isBlazor()) {\n                            this.canEnableBlazorObject = false;\n                        }\n                        this.enableServerDataBinding(true);\n                        _a.label = 11;\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * getIndex method \\\n     *\n     * @returns { void }     getIndex method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     * @param {string} id - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.getIndex = function (node, id) {\n        //let index: number;\n        var collection = (getObjectType(node) === Node) ? this.nodes : this.connectors;\n        for (var i = 0; i < collection.length; i++) {\n            if (collection[i].id.toString() === id.toString()) {\n                return i.toString();\n            }\n        }\n        return null;\n    };\n    /* tslint:enable */\n    Diagram.prototype.getBlazorTextEditArgs = function (args) {\n        var element = getObjectType(args.element) === Connector ? { connectorId: args.element.id }\n            : { nodeId: args.element.id };\n        var annotation = {};\n        if (getObjectType(args.element) === Node) {\n            if (args.element.shape.type === 'Text') {\n                annotation.textNode = args.element.shape;\n            }\n            else {\n                annotation.annotationId = args.element.annotations[0].id;\n            }\n        }\n        else {\n            annotation.annotationId = args.element.annotations[0].id;\n        }\n        args = {\n            oldValue: args.oldValue,\n            newValue: args.newValue,\n            cancel: args.cancel,\n            element: element,\n            annotation: annotation\n        };\n        return args;\n    };\n    /**\n     * canLogChange method \\\n     *\n     * @returns { void }     canLogChange method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.canLogChange = function () {\n        if ((this.diagramActions & DiagramAction.Render) && (!(this.diagramActions & DiagramAction.ToolAction)) &&\n            (!(this.diagramActions & DiagramAction.UndoRedo)) && (!(this.diagramActions & DiagramAction.PublicMethod))) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Diagram.prototype.modelChanged = function (newProp, oldProp) {\n        if (newProp.connectors || oldProp.connectors || newProp.nodes || oldProp.connectors\n            || newProp.pageSettings || oldProp.pageSettings || newProp.bridgeDirection || oldProp.bridgeDirection) {\n            return true;\n        }\n        return false;\n    };\n    Diagram.prototype.resetDiagramActions = function (action) {\n        var isAction = action ? true : false;\n        if (this.diagramActions & DiagramAction.UndoRedo && (!isAction || (action === DiagramAction.UndoRedo))) {\n            this.diagramActions = this.diagramActions & ~DiagramAction.UndoRedo;\n        }\n        if (this.diagramActions & DiagramAction.PublicMethod && (!isAction || action === DiagramAction.PublicMethod)) {\n            this.diagramActions = this.diagramActions & ~DiagramAction.PublicMethod;\n        }\n    };\n    /**\n     * removeNode method \\\n     *\n     * @returns { void }     removeNode method .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {NodeModel} childernCollection - provide the childernCollection value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeNode = function (node, childernCollection) {\n        this.removeObjectsFromLayer(node);\n        this.removeFromAQuad(this.nameTable[node.id]);\n        var groupElement = document.getElementById(node.id + '_groupElement');\n        delete this.nameTable[node.id];\n        if (node.children) {\n            delete this.groupTable[node.id];\n        }\n        if (isBlazor()) {\n            for (var i = 0; i < this.nodes.length; i++) {\n                if (node.id === this.nodes[i].id) {\n                    this.UpdateBlazorDiagramModel(node, 'Node', i);\n                }\n            }\n        }\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n        if (groupElement.children && groupElement.children.length > 0) {\n            var beforeElement = undefined;\n            for (var j = groupElement.children.length - 1; j >= 0; j--) {\n                var childElement = groupElement.children[j];\n                if (childernCollection.length > 0 && childernCollection.indexOf(childElement.id.split('_')[0]) !== -1) {\n                    if (!beforeElement) {\n                        groupElement.parentNode.insertBefore(childElement, groupElement);\n                    }\n                    else {\n                        groupElement.parentNode.insertBefore(childElement, beforeElement);\n                    }\n                    beforeElement = childElement;\n                }\n            }\n        }\n        if (groupElement) {\n            groupElement.parentNode.removeChild(groupElement);\n        }\n    };\n    /**\n     * deleteGroup method \\\n     *\n     * @returns { void }     deleteGroup method .\\\n     * @param {NodeModel} node - provide the source value.\n     *\n     * @private\n     */\n    Diagram.prototype.deleteGroup = function (node) {\n        var elements = [];\n        var tempNode = [];\n        if (node.children) {\n            tempNode = this.commandHandler.getChildren(node, elements);\n        }\n        this.UpdateBlazorDiagramModelCollection(node);\n        for (var _i = 0, tempNode_1 = tempNode; _i < tempNode_1.length; _i++) {\n            var nodes = tempNode_1[_i];\n            if (this.nameTable[nodes.id]) {\n                this.remove(nodes);\n            }\n        }\n    };\n    //helper methods - end region\n    //property changes - start region\n    /** @private */\n    /**\n     * updateObject method \\\n     *\n     * @returns { void }     updateObject method .\\\n     * @param {Node | Connector} actualObject - provide the source value.\n     * @param {Node | Connector} oldObject - provide the target value.\n     * @param {Node | Connector} changedProp - provide the layoutOrientation value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateObject = function (actualObject, oldObject, changedProp) {\n        if (!(this.diagramActions & DiagramAction.ToolAction)) {\n            var bound = actualObject.wrapper.children[0].bounds;\n            var checkBoundaryConstraints = this.commandHandler.checkBoundaryConstraints(undefined, undefined, bound);\n            if (!checkBoundaryConstraints) {\n                if (actualObject instanceof Node) {\n                    var oldNode = oldObject;\n                    for (var _i = 0, _a = Object.keys(changedProp); _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        switch (key) {\n                            case 'width':\n                                actualObject.width = oldNode.width;\n                                break;\n                            case 'height':\n                                actualObject.height = oldNode.height;\n                                break;\n                            case 'offsetX':\n                                actualObject.offsetX = oldNode.offsetX;\n                                break;\n                            case 'offsetY':\n                                actualObject.offsetY = oldNode.offsetY;\n                                break;\n                            case 'rotateAngle':\n                                actualObject.rotateAngle = oldNode.rotateAngle;\n                                break;\n                        }\n                    }\n                    this.nodePropertyChange(actualObject, changedProp, oldObject);\n                }\n                else {\n                    for (var _b = 0, _c = Object.keys(changedProp); _b < _c.length; _b++) {\n                        var key = _c[_b];\n                        var oldConnector = oldObject;\n                        var actualSourcePoint = actualObject.sourcePoint;\n                        var actualTargetPoint = actualObject.targetPoint;\n                        switch (key) {\n                            case 'sourcePoint':\n                                actualSourcePoint.x = oldConnector.sourcePoint.x || actualSourcePoint.x;\n                                actualSourcePoint.y = oldConnector.sourcePoint.y || actualSourcePoint.y;\n                                break;\n                            case 'targetPoint':\n                                actualTargetPoint.x = oldConnector.targetPoint.x || actualTargetPoint.x;\n                                actualTargetPoint.y = oldConnector.targetPoint.y || actualTargetPoint.y;\n                        }\n                    }\n                    this.connectorPropertyChange(actualObject, changedProp, oldObject);\n                }\n            }\n        }\n    };\n    Diagram.prototype.nodePropertyChangeExtend = function (actualObject, oldObject, node, update) {\n        if (node.style !== undefined && actualObject.shape.type !== 'Bpmn') {\n            updateStyle(node.style, actualObject.wrapper.children[0]);\n            update = true;\n        }\n        if (node.shadow !== undefined) {\n            this.updateShadow(actualObject.shadow, node.shadow);\n            update = true;\n        }\n        if (node.constraints !== undefined) {\n            if ((oldObject.constraints & NodeConstraints.Select) &&\n                (!(node.constraints & NodeConstraints.Select)) && isSelected(this, actualObject)) {\n                this.clearSelection();\n            }\n            else {\n                this.updateThumbConstraints(this.selectedItems.nodes, this.selectedItems);\n                this.updateSelector();\n                update = true;\n            }\n        }\n        this.swimLaneNodePropertyChange(actualObject, oldObject, node, update);\n        return update;\n    };\n    /* tslint:disable */\n    Diagram.prototype.swimLaneNodePropertyChange = function (actualObject, oldObject, node, update) {\n        if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol) {\n            if (oldObject.shape) {\n                var shape = node.shape;\n                var actualShape = actualObject.shape;\n                var orientation_1 = (actualShape.orientation === 'Horizontal') ? true : false;\n                var padding = actualShape.padding;\n                var oldShape = oldObject.shape;\n                var grid = actualObject.wrapper.children[0];\n                var oldObjects = void 0;\n                var newObjects = void 0;\n                var id = void 0;\n                if (oldShape.lanes || oldShape.phases) {\n                    if (oldShape.lanes) {\n                        for (var _i = 0, _a = Object.keys(shape.lanes); _i < _a.length; _i++) {\n                            var count = _a[_i];\n                            var indexValue = Number(count);\n                            var lane = oldShape.lanes[indexValue];\n                            var laneIndex = void 0;\n                            var newLane = shape.lanes[indexValue];\n                            if (newLane && newLane.header) {\n                                id = actualShape.lanes[indexValue].header.id;\n                                oldObjects = lane.header;\n                                newObjects = newLane.header;\n                                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n                            }\n                            if (lane.children) {\n                                for (var _b = 0, _c = Object.keys(lane.children); _b < _c.length; _b++) {\n                                    var childNodeIndex = _c[_b];\n                                    id = actualShape.lanes[indexValue].children[Number(childNodeIndex)].id;\n                                    var node_1 = this.nameTable[id];\n                                    oldObjects = lane.children[Number(childNodeIndex)];\n                                    newObjects = newLane.children[Number(childNodeIndex)];\n                                    this.nodePropertyChange(node_1, oldObjects, newObjects);\n                                }\n                            }\n                            if (lane.width && !orientation_1) {\n                                laneIndex = (actualShape.phases && actualShape.phaseSize) ? indexValue + 1 : indexValue;\n                                grid.updateColumnWidth(laneIndex, newLane.width, true, padding);\n                                this.updateDiagramElementQuad();\n                            }\n                            if (lane.height && orientation_1) {\n                                laneIndex = (actualShape.header && actualShape.hasHeader) ? indexValue + 1 : indexValue;\n                                laneIndex += (actualShape.phases && actualShape.phaseSize) ? 1 : 0;\n                                grid.updateRowHeight(laneIndex, newLane.height, true, padding);\n                                this.updateDiagramElementQuad();\n                            }\n                        }\n                    }\n                    if (shape.phases) {\n                        for (var _d = 0, _e = Object.keys(shape.phases); _d < _e.length; _d++) {\n                            var key = _e[_d];\n                            var indexValue = Number(key);\n                            var phase = shape.phases[indexValue];\n                            var size = void 0;\n                            var rowIndex = (actualShape.header && actualShape.hasHeader) ? 1 : 0;\n                            if (phase && phase.header) {\n                                id = actualShape.phases[indexValue].header.id;\n                                oldObjects = oldShape.phases[indexValue].header;\n                                newObjects = phase.header;\n                                this.nodePropertyChange(this.nameTable[id], oldObjects, newObjects);\n                            }\n                            if (phase.offset) {\n                                if (indexValue === 0) {\n                                    size = phase.offset;\n                                }\n                                else {\n                                    var previousPhase = actualShape.phases[indexValue - 1];\n                                    size = phase.offset - previousPhase.offset;\n                                    if (size <= 0) {\n                                        size = phase.offset;\n                                    }\n                                }\n                                if (orientation_1) {\n                                    grid.updateColumnWidth(indexValue, size, true, padding);\n                                    updatePhaseMaxWidth(actualObject, this, grid.rows[rowIndex].cells[indexValue], indexValue);\n                                }\n                                else {\n                                    grid.updateRowHeight(rowIndex + indexValue, size, true, padding);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (shape.phaseSize !== undefined && actualShape.phases.length) {\n                    if (shape.phaseSize === 0 || oldShape.phaseSize === 0) {\n                        if (oldShape.phaseSize) {\n                            if (orientation_1) {\n                                grid.removeRow((actualShape.header && actualShape.hasHeader) ? 1 : 0);\n                                actualObject.height = actualObject.wrapper.height = grid.height;\n                            }\n                            else {\n                                if (actualShape.header && actualShape.hasHeader) {\n                                    grid.rows[0].cells[1].children = grid.rows[0].cells[0].children;\n                                    grid.rows[0].cells[1].columnSpan = grid.rows[0].cells[0].columnSpan - 1;\n                                    grid.rows[0].cells[0].children = [];\n                                }\n                                grid.removeColumn(0);\n                            }\n                        }\n                        else {\n                            if (orientation_1) {\n                                var rowDef = new RowDefinition();\n                                rowDef.height = shape.phaseSize;\n                                grid.addRow((actualShape.header && actualShape.hasHeader) ? 1 : 0, rowDef, true);\n                                actualObject.height = actualObject.wrapper.height += shape.phaseSize;\n                            }\n                            else {\n                                var colDef = new ColumnDefinition();\n                                colDef.width = shape.phaseSize;\n                                grid.addColumn(0, colDef, true);\n                                if (actualShape.header && actualShape.hasHeader) {\n                                    grid.rows[0].cells[0].children = grid.rows[0].cells[1].children;\n                                    grid.rows[0].cells[1].children = [];\n                                    grid.rows[0].cells[1].columnSpan = 1;\n                                    grid.rows[0].cells[1].minWidth = undefined;\n                                    grid.rows[0].cells[0].columnSpan = actualShape.lanes.length + 1;\n                                }\n                            }\n                            for (var k = 0; k < actualShape.phases.length; k++) {\n                                if (actualShape.phases[k].id === '') {\n                                    actualShape.phases[k].id = randomId();\n                                }\n                                phaseDefine(grid, this, actualObject, (actualShape.header && actualShape.hasHeader) ? 1 : 0, orientation_1, k);\n                            }\n                        }\n                    }\n                    else {\n                        if (orientation_1) {\n                            grid.updateRowHeight((actualShape.header && actualShape.hasHeader) ? 1 : 0, shape.phaseSize, false);\n                        }\n                        else {\n                            grid.updateColumnWidth(0, shape.phaseSize, false);\n                        }\n                    }\n                }\n                if (actualShape.header && actualShape.hasHeader && oldShape.header) {\n                    var id_1 = grid.rows[0].cells[0].children[0].id;\n                    var headerNode = this.nameTable[id_1];\n                    this.nodePropertyChange(headerNode, (oldShape.header), shape.header);\n                }\n                actualObject.height = actualObject.wrapper.height = grid.height;\n                actualObject.width = actualObject.wrapper.width = grid.width;\n            }\n            else if (oldObject.constraints) {\n                var oldSelectConstraints = (oldObject.constraints & NodeConstraints.Select);\n                var newSelectConstraints = (node.constraints & NodeConstraints.Select);\n                if (oldSelectConstraints !== newSelectConstraints) {\n                    var shape = actualObject.shape;\n                    // Header - constraints\n                    var headerNode = this.nameTable[actualObject.id + shape.header.id];\n                    headerNode.constraints = (!newSelectConstraints) ? headerNode.constraints & ~NodeConstraints.Select :\n                        headerNode.constraints | NodeConstraints.Select;\n                    // Phase - Constraints\n                    var phaseNode = void 0;\n                    if (shape.phaseSize > 0) {\n                        for (var i = 0; i < shape.phases.length; i++) {\n                            phaseNode = this.nameTable[actualObject.id + shape.phases[i].id + '_header'];\n                            phaseNode.constraints = (!newSelectConstraints) ? phaseNode.constraints & ~NodeConstraints.Select :\n                                phaseNode.constraints | NodeConstraints.Select;\n                        }\n                    }\n                    // Header - Constraints\n                    var laneNode = void 0;\n                    var laneHeader = void 0;\n                    var value = shape.phases.length || 1;\n                    for (var i = 0; i < shape.lanes.length; i++) {\n                        for (var l = 0; l < value; l++) {\n                            laneNode = this.nameTable[actualObject.id + shape.lanes[i].id + l];\n                            laneNode.constraints = (!newSelectConstraints) ? laneNode.constraints & ~NodeConstraints.Select :\n                                laneNode.constraints | NodeConstraints.Select;\n                            if (l === 0) {\n                                laneHeader = this.nameTable[actualObject.id + shape.lanes[i].id + '_' + l + '_header'];\n                                laneHeader.constraints = (!newSelectConstraints) ? laneHeader.constraints & ~NodeConstraints.Select :\n                                    laneHeader.constraints | NodeConstraints.Select;\n                            }\n                        }\n                    }\n                }\n            }\n            update = true;\n        }\n        return update;\n    };\n    /** @private */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Diagram.prototype.insertValue = function (oldNodeObject, isNode) {\n        if (!(this.blazorActions & BlazorAction.GroupClipboardInProcess)) {\n            var value = void 0;\n            var oldObjects = isNode ? this.oldNodeObjects : this.oldConnectorObjects;\n            for (var i = 0; i < oldObjects.length; i++) {\n                if (oldObjects[i].id === oldNodeObject.id) {\n                    value = true;\n                }\n            }\n            if (!value) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                isNode ? (this.oldNodeObjects.push(oldNodeObject)) : this.oldConnectorObjects.push(oldNodeObject);\n            }\n        }\n    };\n    /* tslint:disable */\n    /** @private */\n    // eslint-disable-next-line max-len\n    Diagram.prototype.nodePropertyChange = function (actualObject, oldObject, node, isLayout, rotate, propertyChange) {\n        if (this.canEnableBlazorObject && actualObject.id !== 'helper') {\n            var node_2 = cloneObject(actualObject);\n            this.insertValue(node_2, true);\n        }\n        var existingBounds = actualObject.wrapper.outerBounds;\n        var existingInnerBounds = actualObject.wrapper.bounds;\n        var updateConnector = false;\n        var i;\n        var j;\n        var offsetX;\n        var offsetY;\n        var update;\n        var tx;\n        var ty;\n        if (node.width !== undefined) {\n            if (!actualObject.children) {\n                actualObject.wrapper.children[0].width = node.width;\n                update = true;\n                updateConnector = true;\n            }\n            else if (!actualObject.container) {\n                this.scaleObject(actualObject, node.width, true);\n            }\n            else {\n                actualObject.wrapper.width = node.width;\n            }\n        }\n        if (node.height !== undefined) {\n            if (!actualObject.children) {\n                actualObject.wrapper.children[0].height = node.height;\n                update = true;\n                updateConnector = true;\n            }\n            else if (!actualObject.container) {\n                this.scaleObject(actualObject, node.height, false);\n            }\n            else {\n                actualObject.wrapper.height = node.height;\n            }\n        }\n        update = this.nodePropertyChangeExtend(actualObject, oldObject, node, update);\n        if (node.constraints !== undefined && canShadow(oldObject) !== canShadow(node)) {\n            actualObject.wrapper.children[0].shadow = canShadow(actualObject) ? actualObject.shadow : null;\n        }\n        if (node.offsetX !== undefined) {\n            if (actualObject.wrapper.flip !== 'None') {\n                if (actualObject.offsetX !== actualObject.wrapper.offsetX && oldObject.offsetX !== undefined) {\n                    var offsetX_1 = node.offsetX - oldObject.offsetX;\n                    actualObject.wrapper.offsetX = actualObject.wrapper.offsetX + offsetX_1;\n                    this.updateFlipOffset(actualObject.wrapper, offsetX_1, 0, actualObject.wrapper.flip);\n                }\n            }\n            else {\n                actualObject.wrapper.offsetX = node.offsetX;\n            }\n            update = true;\n            updateConnector = true;\n        }\n        if (node.offsetY !== undefined) {\n            if (actualObject.wrapper.flip !== 'None') {\n                if (actualObject.offsetY !== actualObject.wrapper.offsetY && oldObject.offsetY !== undefined) {\n                    var offsetY_1 = node.offsetY - oldObject.offsetY;\n                    actualObject.wrapper.offsetY = actualObject.wrapper.offsetY + offsetY_1;\n                    this.updateFlipOffset(actualObject.wrapper, 0, offsetY_1, actualObject.wrapper.flip);\n                }\n            }\n            else {\n                actualObject.wrapper.offsetY = node.offsetY;\n            }\n            update = true;\n            updateConnector = true;\n        }\n        if (node.pivot !== undefined) {\n            actualObject.wrapper.pivot = node.pivot;\n            update = true;\n        }\n        if (node.minWidth !== undefined) {\n            actualObject.wrapper.minWidth = actualObject.wrapper.children[0].minWidth = node.minWidth;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.minHeight !== undefined) {\n            actualObject.wrapper.minHeight = actualObject.wrapper.children[0].minHeight = node.minHeight;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.maxWidth !== undefined) {\n            actualObject.wrapper.maxWidth = node.maxWidth;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.maxHeight !== undefined) {\n            actualObject.wrapper.maxHeight = node.maxHeight;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.flip !== undefined) {\n            actualObject.wrapper.flip = node.flip;\n            update = true;\n            updateConnector = true;\n            if (actualObject.wrapper.elementActions & ElementAction.ElementIsGroup) {\n                alignElement(actualObject.wrapper, actualObject.offsetX, actualObject.offsetY, this, node.flip);\n                if (actualObject && actualObject.children) {\n                    for (var _i = 0, _a = actualObject.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        var updateNode = this.nameTable[child];\n                        updateNode.wrapper.flip = node.flip;\n                        this.updatePorts(updateNode, node.flip);\n                    }\n                }\n            }\n            else {\n                actualObject.wrapper.children[0].flip = node.flip;\n                this.updatePorts(actualObject, node.flip);\n            }\n        }\n        if (node.rotateAngle !== undefined && (actualObject.constraints & NodeConstraints.Rotate)) {\n            if (actualObject.children && rotate) {\n                // eslint-disable-next-line max-len\n                this.commandHandler.rotateObjects(actualObject, [actualObject], actualObject.rotateAngle - actualObject.wrapper.rotateAngle, { x: actualObject.offsetX, y: actualObject.offsetY }, false);\n            }\n            actualObject.wrapper.rotateAngle = node.rotateAngle;\n            update = true;\n            updateConnector = true;\n        }\n        if (node.backgroundColor !== undefined) {\n            actualObject.wrapper.style.fill = node.backgroundColor;\n        }\n        if (node.visible !== undefined) {\n            this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n        }\n        if (node.shape !== undefined && actualObject.shape.type !== 'Bpmn') {\n            update = true;\n            updateShape(node, actualObject, oldObject, this);\n            updateConnector = true;\n        }\n        if (node.margin) {\n            update = true;\n            this.updateMargin(actualObject, node);\n            updateConnector = true;\n        }\n        if ((((node.shape !== undefined && (node.shape.type === undefined)) || node.width !== undefined\n            || node.height !== undefined || node.style !== undefined) && actualObject.shape.type === 'Bpmn' && this.bpmnModule)\n            || (isBlazor() && node && node.shape && node.shape.type === 'Bpmn')) {\n            update = true;\n            updateConnector = true;\n            this.bpmnModule.updateBPMN(node, oldObject, actualObject, this);\n        }\n        if (actualObject.shape.type === 'UmlActivity' && ((!isBlazor() && actualObject.shape.shape === 'FinalNode') ||\n            (isBlazor() && actualObject.shape.umlActivityShape === 'FinalNode'))) {\n            update = true;\n            updateConnector = true;\n            this.updateUMLActivity(node, oldObject, actualObject, this);\n        }\n        if ((actualObject.shape && actualObject.shape.type === 'UmlClassifier') || (actualObject.parentId &&\n            this.nameTable[actualObject.parentId] && this.nameTable[actualObject.parentId].shape.type === 'UmlClassifier')) {\n            update = true;\n            updateConnector = true;\n        }\n        if (node.ports !== undefined) {\n            for (var _b = 0, _c = Object.keys(node.ports); _b < _c.length; _b++) {\n                var key = _c[_b];\n                var index = Number(key);\n                update = true;\n                var changedObject = node.ports[key];\n                var actualPort = actualObject.ports[index];\n                this.updatePort(changedObject, actualPort, actualObject.wrapper);\n                updateConnector = true;\n            }\n        }\n        if (node.annotation !== undefined || node.annotations !== undefined || node.width !== undefined) {\n            for (var _d = 0, _e = Object.keys(node.annotations || actualObject.annotations); _d < _e.length; _d++) {\n                var key = _e[_d];\n                var index = Number(key);\n                update = true;\n                var changedObject = void 0;\n                if (node.annotation) {\n                    changedObject = node.annotation;\n                }\n                else {\n                    changedObject = node.annotations ? node.annotations[key] : actualObject.annotations;\n                }\n                var actualAnnotation = actualObject.annotations[index];\n                if (actualAnnotation) {\n                    var updateSize = actualObject.width ? true : false;\n                    this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject, updateSize);\n                    var swimLaneNode = this.nameTable[actualObject.parentId];\n                    if ((swimLaneNode && swimLaneNode.shape.type === 'SwimLane')) {\n                        var laneHeader = 'LaneHeaderParent';\n                        var phaseHeader = 'PhaseHeaderParent';\n                        if ((actualObject.isLane || actualObject.isPhase)) {\n                            var collection = actualObject.isLane ?\n                                swimLaneNode.shape.lanes : swimLaneNode.shape.phases;\n                            for (var j_2 = 0; j_2 < collection.length; j_2++) {\n                                if (collection[j_2].id === (actualObject[laneHeader] || actualObject[phaseHeader])) {\n                                    collection[j_2].header.annotation.content = actualObject.annotations[0].content;\n                                    collection[j_2].header.annotation.style = actualObject.annotations[0].style;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (node.expandIcon !== undefined || node.collapseIcon !== undefined || node.isExpanded !== undefined) {\n            this.updateIcon(actualObject);\n            this.updateDefaultLayoutIcons(actualObject);\n            if (node.isExpanded !== undefined) {\n                this.commandHandler.expandNode(actualObject, this);\n            }\n            update = true;\n        }\n        if (node.fixedUserHandles !== undefined) {\n            var index = void 0;\n            var changedObject = void 0;\n            var actualfixedUserHandle = void 0;\n            for (var _f = 0, _g = Object.keys(node.fixedUserHandles); _f < _g.length; _f++) {\n                var key = _g[_f];\n                index = Number(key);\n                update = true;\n                if (node.fixedUserHandles[index]) {\n                    changedObject = node.fixedUserHandles[index];\n                }\n                actualfixedUserHandle = actualObject.fixedUserHandles[index];\n                if (actualfixedUserHandle) {\n                    this.updateNodefixedUserHandle(changedObject, actualfixedUserHandle, actualObject.wrapper, actualObject);\n                }\n            }\n        }\n        if (node.tooltip !== undefined) {\n            this.updateTooltip(actualObject, node);\n        }\n        if (update) {\n            if (this.bpmnModule !== undefined) {\n                // eslint-disable-next-line max-len\n                this.bpmnModule.updateTextAnnotationProp(actualObject, { offsetX: (oldObject.offsetX || actualObject.offsetX), offsetY: (oldObject.offsetY || actualObject.offsetY) }, this);\n            }\n            if (this.checkSelectedItem(actualObject) && actualObject.wrapper.children[0] instanceof TextElement) {\n                actualObject.wrapper.children[0].refreshTextElement();\n            }\n            actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height), actualObject.id, this.onLoadImageSize.bind(this));\n            actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n            this.updateObject(actualObject, oldObject, node);\n            if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && !(this.diagramActions & DiagramAction.ToolAction)) {\n                updateHeaderMaxWidth(this, actualObject);\n                var grid = actualObject.wrapper.children[0];\n                var shape = actualObject.shape;\n                var column = grid.columnDefinitions().length;\n                if (shape.orientation === 'Horizontal') {\n                    var index = (shape.header && shape.hasHeader) ? 1 : 0;\n                    updatePhaseMaxWidth(actualObject, this, grid.rows[index].cells[column - 1], column - 1);\n                }\n                actualObject.wrapper.measure(new Size(actualObject.wrapper.bounds.width, actualObject.wrapper.bounds.height));\n                actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n            }\n            if ((!(this.diagramActions & DiagramAction.ToolAction)) || (this.diagramActions & DiagramAction.UndoRedo)) {\n                if (this.checkSelectedItem(actualObject)) {\n                    this.updateSelector();\n                }\n            }\n            if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) {\n                this.updateQuad(actualObject);\n            }\n            if (!isLayout) {\n                // eslint-disable-next-line max-len\n                this.commandHandler.connectorSegmentChange(actualObject, existingInnerBounds, (node.rotateAngle !== undefined) ? true : false);\n                // if (updateConnector) {\n                //     this.updateConnectorEdges(actualObject);\n                // }\n            }\n            else {\n                if (actualObject && actualObject.visible && actualObject.outEdges) {\n                    this.updateIconVisibility(actualObject, (actualObject.outEdges.length === 0 ? false : true));\n                }\n            }\n            if (this.bpmnModule !== undefined) {\n                this.bpmnModule.updateDocks(actualObject, this);\n            }\n            if (!node.annotations || !actualObject.processId) {\n                this.updateGroupOffset(actualObject);\n            }\n            // if (existingBounds.equals(existingBounds, actualObject.wrapper.outerBounds) === false) { this.updateQuad(actualObject); }\n            // EJ2-42005 - The parent of the actualObject is not measured and arranged when a node or connector is selected.\n            // The condition restricts the measure and arrange of the actualObject whenever a node or connector is selected.\n            // Commented @Dheepshiva\n            // let objects: (NodeModel | ConnectorModel)[] = [];\n            // objects = objects.concat(this.selectedItems.nodes, this.selectedItems.connectors);\n            // if (objects.length === 0) {\n            if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n                var parent_4 = this.nameTable[actualObject.parentId];\n                parent_4.wrapper.measure(new Size(parent_4.wrapper.width, actualObject.wrapper.height));\n                parent_4.wrapper.arrange(parent_4.wrapper.desiredSize);\n                parent_4.offsetX = parent_4.wrapper.offsetX;\n                parent_4.offsetY = parent_4.wrapper.offsetY;\n            }\n            // }\n            if (existingInnerBounds.equals(existingInnerBounds, actualObject.wrapper.bounds) === false) {\n                this.updateGroupSize(actualObject);\n                if (actualObject.children) {\n                    this.updateGroupOffset(actualObject);\n                }\n            }\n            if (actualObject.shape.type === 'SwimLane' && !this.currentSymbol && (this.diagramActions & DiagramAction.Render)) {\n                var connectors = getConnectors(this, actualObject.wrapper.children[0], undefined, true);\n                updateConnectorsProperties(connectors, this);\n            }\n            if (!this.preventNodesUpdate) {\n                if (!canVitualize(this) || (canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1)) {\n                    if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n                        this.updateDiagramObject(actualObject, true);\n                    }\n                    else {\n                        this.updateDiagramObject(actualObject);\n                    }\n                }\n                if (!isLayout && updateConnector) {\n                    if (this.lineRoutingModule && this.diagramActions && (this.constraints & DiagramConstraints.LineRouting) && actualObject.id !== 'helper') {\n                        if (!(this.diagramActions & DiagramAction.ToolAction)) {\n                            this.lineRoutingModule.renderVirtualRegion(this, true);\n                        }\n                    }\n                    this.updateConnectorEdges(actualObject);\n                    if (actualObject.id !== 'helper' && !(this.diagramActions & DiagramAction.ToolAction)) {\n                        var objects = this.spatialSearch.findObjects(actualObject.wrapper.outerBounds);\n                        for (var i_4 = 0; i_4 < objects.length; i_4++) {\n                            var object = objects[i_4];\n                            if (object instanceof Connector) {\n                                this.connectorPropertyChange(objects[i_4], {}, {\n                                    sourceID: object.sourceID,\n                                    targetID: object.targetID,\n                                    sourcePortID: object.sourcePortID,\n                                    targetPortID: object.targetPortID,\n                                    sourcePoint: object.sourcePoint,\n                                    targetPoint: object.targetPoint\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            if (actualObject.status !== 'New' && this.diagramActions) {\n                actualObject.status = 'Update';\n            }\n        }\n        if (!propertyChange) {\n            var element = actualObject;\n            var args = {\n                element: element, cause: this.diagramActions,\n                oldValue: oldObject, newValue: node\n            };\n            if (isBlazor() && this.propertyChange) {\n                args.element = { node: cloneBlazorObject(element) };\n                args.oldValue = { node: cloneBlazorObject(oldObject) };\n                args.newValue = { node: cloneBlazorObject(node) };\n            }\n            this.triggerEvent(DiagramEvent.propertyChange, args);\n        }\n    };\n    Diagram.prototype.updatePorts = function (actualObject, flip) {\n        if (actualObject && actualObject.ports.length > 0) {\n            for (var _i = 0, _a = Object.keys(actualObject.ports); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var index = Number(key);\n                var actualPort = actualObject.ports[index];\n                var portWrapper = this.getWrapper(actualObject.wrapper, actualPort.id);\n                portWrapper = updatePortEdges(portWrapper, flip, actualPort);\n                portWrapper.relativeMode = 'Point';\n                portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n                portWrapper.arrange(portWrapper.desiredSize);\n            }\n        }\n    };\n    Diagram.prototype.updateFlipOffset = function (element, diffX, diffY, flip) {\n        if (element.hasChildren()) {\n            for (var _i = 0, _a = element.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (flip === 'Horizontal' || flip === 'Both') {\n                    child.flipOffset.x = child.flipOffset.x + diffX;\n                }\n                if (flip === 'Vertical' || flip === 'Both') {\n                    child.flipOffset.y = child.flipOffset.y + diffY;\n                }\n                if (child instanceof Canvas || child instanceof Container) {\n                    this.updateFlipOffset(child, diffX, diffY, flip);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateUMLActivity = function (changedProp, oldObject, actualObject, diagram) {\n        var sizeChanged = changedProp.width !== undefined || changedProp.height !== undefined;\n        if (sizeChanged) {\n            var innerFinalNode = actualObject.wrapper.children[0].children[0];\n            innerFinalNode.width = changedProp.width;\n            innerFinalNode.height = changedProp.height;\n            var outerFinalNode = actualObject.wrapper.children[0].children[1];\n            outerFinalNode.width = changedProp.width / 1.5;\n            outerFinalNode.height = changedProp.height / 1.5;\n        }\n    };\n    Diagram.prototype.updateConnectorProperties = function (connector) {\n        if (this.preventConnectorsUpdate) {\n            var index = this.selectionConnectorsList.indexOf(connector);\n            if (index === -1) {\n                this.selectionConnectorsList.push(connector);\n            }\n        }\n        else {\n            var conn = {\n                sourcePoint: connector.sourcePoint, targetPoint: connector.targetPoint, sourceID: connector.sourceID,\n                targetID: connector.targetID, sourcePortID: connector.sourcePortID, targetPortID: connector.targetPortID\n            };\n            this.connectorPropertyChange(connector, {}, conn, undefined, true);\n        }\n    };\n    /**\n     * updateConnectorEdges method \\\n     *\n     * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n     * @param {Node} actualObject - provide the actualObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateConnectorEdges = function (actualObject) {\n        if (actualObject.inEdges.length > 0) {\n            for (var j = 0; j < actualObject.inEdges.length; j++) {\n                this.updateConnectorProperties(this.nameTable[actualObject.inEdges[j]]);\n            }\n        }\n        if (actualObject.outEdges.length > 0) {\n            for (var k = 0; k < actualObject.outEdges.length; k++) {\n                this.updateConnectorProperties(this.nameTable[actualObject.outEdges[k]]);\n            }\n        }\n        if (actualObject.parentId && this.nameTable[actualObject.parentId]) {\n            this.updateConnectorEdges(this.nameTable[actualObject.parentId]);\n        }\n    };\n    /* tslint:enable */\n    Diagram.prototype.connectorProprtyChangeExtend = function (actualObject, oldProp, newProp, updateSelector) {\n        if (newProp.type !== undefined && newProp.type !== oldProp.type) {\n            if (actualObject.segments.length > 0 && newProp.segments === undefined) {\n                actualObject.segments = [];\n            }\n        }\n        if ((newProp.shape !== undefined) && actualObject.shape !== undefined &&\n            actualObject.shape && actualObject.shape.type === 'Bpmn' && this.bpmnModule) {\n            this.bpmnModule.updateBPMNConnector(actualObject, oldProp, newProp, this);\n        }\n        if (actualObject.constraints !== undefined) {\n            this.updateThumbConstraints(this.selectedItems.connectors, this.selectedItems);\n            return updateSelector = true;\n        }\n        return updateSelector;\n    };\n    /* tslint:disable */\n    /**\n     * Updates the connectorPropertyChange of the diagram container \\\n     *\n     * @returns { void }     Updates the connectorPropertyChange of the diagram container .\\\n     * @param {DiagramElement} actualObject - provide the actualObject value.\n     * @param {boolean} oldProp - provide the oldProp value.\n     * @param {boolean} newProp - provide the newProp value.\n     * @param {boolean} disableBridging - provide the disableBridging value.\n     * @param {boolean} propertyChange - provide the propertyChange value.\n     *\n     * @private\n     */\n    Diagram.prototype.connectorPropertyChange = function (actualObject, oldProp, newProp, disableBridging, propertyChange) {\n        if (this.canEnableBlazorObject) {\n            var node = cloneObject(actualObject);\n            this.insertValue(node, false);\n        }\n        var existingBounds = actualObject.wrapper.bounds;\n        var updateSelector = false;\n        var points = [];\n        updateSelector = this.connectorProprtyChangeExtend(actualObject, oldProp, newProp, updateSelector);\n        var inPort;\n        var outPort;\n        var source;\n        var target;\n        if (newProp.visible !== undefined) {\n            this.updateElementVisibility(actualObject.wrapper, actualObject, actualObject.visible);\n        }\n        if (newProp.sourcePoint !== undefined || newProp.targetPoint !== undefined\n            || newProp.sourceID !== undefined || newProp.targetID !== undefined || newProp.targetPadding !== undefined ||\n            newProp.sourcePortID !== undefined || newProp.targetPortID !== undefined || newProp.sourcePadding !== undefined ||\n            newProp.type !== undefined || newProp.segments !== undefined || newProp.flip !== undefined) {\n            if ((newProp.sourceID !== undefined && newProp.sourceID !== oldProp.sourceID) || newProp.sourcePortID) {\n                var sourceNode = this.nameTable[actualObject.sourceID];\n                outPort = this.findInOutConnectPorts(sourceNode, false);\n                if (!sourceNode || (canOutConnect(sourceNode) || (actualObject.sourcePortID !== '' && canPortOutConnect(outPort)))) {\n                    actualObject.sourceWrapper = sourceNode ? this.getEndNodeWrapper(sourceNode, actualObject, true) : undefined;\n                    if (actualObject.sourcePortID && newProp.sourcePortID === undefined) {\n                        actualObject.sourcePortWrapper = sourceNode ? this.getWrapper(sourceNode.wrapper, actualObject.sourcePortID) : undefined;\n                    }\n                    this.removePortEdges(this.nameTable[oldProp.sourceID] || sourceNode, oldProp.sourcePortID || actualObject.sourcePortID, actualObject.id, false);\n                }\n                if (newProp.sourceID !== undefined && oldProp.sourceID !== undefined && oldProp.sourceID !== '') {\n                    var oldSource = this.nameTable[oldProp.sourceID];\n                    if (oldSource !== undefined && oldSource.outEdges && oldSource.outEdges.indexOf(actualObject.id) !== -1) {\n                        removeItem(oldSource.outEdges, actualObject.id);\n                    }\n                }\n                this.updateEdges(actualObject);\n            }\n            if (newProp.targetID !== undefined && newProp.targetID !== oldProp.targetID) {\n                var targetNode = this.nameTable[newProp.targetID];\n                inPort = this.findInOutConnectPorts(targetNode, true);\n                if (!targetNode || (canInConnect(targetNode) || (actualObject.targetPortID !== '' && canPortInConnect(inPort)))) {\n                    actualObject.targetWrapper = targetNode ? this.getEndNodeWrapper(targetNode, actualObject, false) : undefined;\n                    if (actualObject.targetPortID && newProp.targetPortID === undefined) {\n                        actualObject.targetPortWrapper = targetNode ? this.getWrapper(targetNode.wrapper, actualObject.targetPortID) : undefined;\n                    }\n                    this.removePortEdges(this.nameTable[oldProp.targetID] || targetNode, oldProp.targetPortID || actualObject.targetPortID, actualObject.id, true);\n                }\n                if (oldProp !== undefined && oldProp.targetID !== undefined && oldProp.targetID !== '') {\n                    var oldTarget = this.nameTable[oldProp.targetID];\n                    if (oldTarget !== undefined && oldTarget.inEdges && oldTarget.inEdges.indexOf(actualObject.id) !== -1) {\n                        removeItem(oldTarget.inEdges, actualObject.id);\n                    }\n                }\n                this.updateEdges(actualObject);\n            }\n            if (newProp.sourcePortID !== undefined && newProp.sourcePortID !== oldProp.sourcePortID) {\n                if (actualObject.sourceID && this.nameTable[actualObject.sourceID]) {\n                    source = this.nameTable[actualObject.sourceID].wrapper;\n                }\n                var sourceNode = this.nameTable[actualObject.sourceID];\n                if (!sourceNode || (canOutConnect(sourceNode) || (actualObject.sourcePortID !== '' && canPortOutConnect(outPort)))) {\n                    actualObject.sourcePortWrapper = source ? this.getWrapper(source, newProp.sourcePortID) : undefined;\n                }\n                else if (actualObject.sourcePortID === '' && !canOutConnect(sourceNode)) {\n                    actualObject.sourcePortWrapper = undefined;\n                }\n            }\n            if (newProp.targetPortID !== undefined && newProp.targetPortID !== oldProp.targetPortID) {\n                var targetNode = this.nameTable[actualObject.targetID];\n                if (actualObject.targetID && this.nameTable[actualObject.targetID]) {\n                    target = this.nameTable[actualObject.targetID].wrapper;\n                }\n                if (!targetNode || (canInConnect(targetNode) || (actualObject.targetPortID !== '' && canPortInConnect(inPort)))) {\n                    actualObject.targetPortWrapper = target ? this.getWrapper(target, newProp.targetPortID) : undefined;\n                }\n                else if (actualObject.targetPortID === '' && !canInConnect(targetNode)) {\n                    actualObject.targetPortWrapper = undefined;\n                }\n            }\n            if (newProp.flip !== undefined) {\n                actualObject.flip = newProp.flip;\n                flipConnector(actualObject);\n            }\n            if (actualObject.type === 'Orthogonal' && this.lineRoutingModule && this.diagramActions &&\n                (this.constraints & DiagramConstraints.LineRouting) && !(this.diagramActions & DiagramAction.ToolAction)) {\n                this.lineRoutingModule.renderVirtualRegion(this, true);\n                this.lineRoutingModule.refreshConnectorSegments(this, actualObject, false);\n            }\n            points = this.getPoints(actualObject);\n        } //Add prop change for zindex, alignments and margin\n        if (newProp.style !== undefined) {\n            updateStyle(newProp.style, actualObject.wrapper.children[0]);\n        }\n        if (points.length > 0 || newProp.sourceDecorator !== undefined || (newProp.targetDecorator !== undefined\n            && (canMeasureDecoratorPath(Object.keys(newProp.targetDecorator)))) || newProp.cornerRadius !== undefined) {\n            updateConnector(actualObject, points.length > 0 ? points : actualObject.intermediatePoints, this.diagramActions);\n            if (newProp.type !== undefined) {\n                updateSelector = true;\n            }\n            if (points.length > 0) {\n                actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n                actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n                // eslint-disable-next-line max-len\n                this.updateConnectorAnnotation(actualObject);\n                this.updateConnectorfixedUserHandles(actualObject);\n                this.updateObject(actualObject, oldProp, newProp);\n            } //work-around to update intersected connector bridging\n        }\n        if ((newProp.sourcePoint || newProp.targetPoint || newProp.segments)\n            && this.diagramActions === DiagramAction.Render) {\n            updateSelector = true;\n        }\n        if (actualObject.shape.type === 'Bpmn' && actualObject.shape.sequence === 'Default') {\n            this.commandHandler.updatePathElementOffset(actualObject);\n        }\n        // eslint-disable-next-line max-len\n        if (!disableBridging) {\n            this.updateBridging();\n        }\n        this.updateAnnotations(newProp, actualObject);\n        this.updatefixedUserHandle(newProp, actualObject);\n        actualObject.wrapper.measure(new Size(actualObject.wrapper.width, actualObject.wrapper.height));\n        actualObject.wrapper.arrange(actualObject.wrapper.desiredSize);\n        if (existingBounds.equals(existingBounds, actualObject.wrapper.bounds) === false) {\n            this.updateQuad(actualObject);\n            this.updateGroupSize(actualObject);\n        }\n        if (updateSelector === true && this.checkSelectedItem(actualObject) && (!(this.diagramActions & DiagramAction.ToolAction)\n            || (this.diagramActions & DiagramAction.UndoRedo))) {\n            this.updateSelector();\n        }\n        if (!this.preventConnectorsUpdate) {\n            if (!canVitualize(this) || (canVitualize(this) && this.scroller.oldCollectionObjects.indexOf(actualObject.id) > -1)) {\n                if (this.diagramActions & DiagramAction.PreventZIndexOnDragging) {\n                    this.updateDiagramObject(actualObject, true);\n                }\n                else {\n                    this.updateDiagramObject(actualObject);\n                }\n            }\n        }\n        if (this.diagramActions && actualObject.status !== 'New') {\n            actualObject.status = 'Update';\n        }\n        this.triggerPropertyChange(propertyChange, actualObject, oldProp, newProp);\n    };\n    /* tslint:enable */\n    /**\n     * getDirection methods \\\n     *\n     * @returns { void }  getDirection methods .\\\n     * @param {NodeModel} node - provide the node value.\n     * @param {string} portId - provide the portId value.\n     * @param {string} item - provide the item value.\n     * @param {number} isInEdges - provide the isInEdges value.\n     *\n     * @private\n     */\n    Diagram.prototype.removePortEdges = function (node, portId, item, isInEdges) {\n        if (node) {\n            for (var i = 0; i < node.ports.length; i++) {\n                var port = node.ports[i];\n                if (port.id === portId) {\n                    var portEdge = (isInEdges) ? port.inEdges : port.outEdges;\n                    removeItem(portEdge, item);\n                }\n            }\n        }\n    };\n    Diagram.prototype.getpropertyChangeArgs = function (element, oldProp, newProp, args) {\n        args.element = { connector: cloneBlazorObject(element) };\n        args.oldValue = { connector: cloneBlazorObject(oldProp) };\n        args.newValue = { connector: cloneBlazorObject(newProp) };\n        return args;\n    };\n    Diagram.prototype.triggerPropertyChange = function (propertyChange, actualObject, oldProp, newProp) {\n        if (!propertyChange) {\n            var element = actualObject;\n            var args = {\n                element: cloneBlazorObject(element), cause: this.diagramActions,\n                oldValue: cloneBlazorObject(oldProp), newValue: cloneBlazorObject(newProp)\n            };\n            if (isBlazor()) {\n                args = this.getpropertyChangeArgs(element, oldProp, newProp, args);\n            }\n            this.triggerEvent(DiagramEvent.propertyChange, args);\n        }\n    };\n    Diagram.prototype.findInOutConnectPorts = function (node, isInconnect) {\n        var port = {};\n        if (node) {\n            port = getInOutConnectPorts(node, isInconnect);\n        }\n        return port;\n    };\n    Diagram.prototype.getPoints = function (actualObject, points) {\n        //let pts: PointModel[];\n        var lineDistributionModule = this.lineDistributionModule ? true : false;\n        var pts = actualObject.getConnectorPoints(actualObject.type, points, this.layout.type === 'ComplexHierarchicalTree' || this.layout.type === 'HierarchicalTree' ?\n            this.layout.orientation : undefined, lineDistributionModule);\n        return pts;\n    };\n    /**\n     * update the  opacity  and visibility for the node  once the layout animation starts \\\n     *\n     * @returns { void }  update the  opacity  and visibility for the node  once the layout animation starts .\\\n     * @param {Container} element - provide the element value.\n     * @param {boolean} visible - provide the visible value.\n     * @param {number} opacity - provide the opacity value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodeProperty = function (element, visible, opacity) {\n        if (visible === undefined) {\n            this.updateElementVisibility(element, this.nameTable[element.id], visible);\n        }\n        else {\n            element.style.opacity = opacity;\n            for (var i = 0; i < element.children.length; i++) {\n                if (element.children[i] instanceof Container) {\n                    this.updateNodeProperty(element.children[i], undefined, opacity);\n                }\n                element.children[i].style.opacity = opacity;\n            }\n        }\n    };\n    /**\n     * checkSelected Item for Connector \\\n     *\n     * @returns { void }  checkSelected Item for Connector .\\\n     * @param {Connector | Node} actualObject - provide the element value.\n     *\n     * @private\n     */\n    Diagram.prototype.checkSelectedItem = function (actualObject) {\n        var selectorModel = this.selectedItems;\n        var isSelected = false;\n        var selItems = [];\n        selItems = selItems.concat(selectorModel.nodes, selectorModel.connectors);\n        if (selItems.length > 0) {\n            if (actualObject.id === selItems[selItems.length - 1].id) {\n                isSelected = true;\n            }\n        }\n        return isSelected;\n    };\n    /**\n     * Updates the visibility of the diagram container \\\n     *\n     * @returns { void }     Updates the visibility of the diagram container .\\\n     * @param {DiagramElement} element - provide the element value.\n     * @param {boolean} visible - provide the target value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateDiagramContainerVisibility = function (element, visible) {\n        if (element instanceof Container) {\n            for (var i = 0; i < element.children.length; i++) {\n                this.updateDiagramContainerVisibility(element.children[i], visible);\n            }\n        }\n        element.visible = visible;\n    };\n    /**\n     * Updates the visibility of the node/connector \\\n     *\n     * @returns { void }  Updates the visibility of the node/connector .\\\n     * @param {Container} element - provide the element value.\n     * @param {Connector | Node} obj - provide the obj value.\n     * @param {boolean} visible - provide the visible value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateElementVisibility = function (element, obj, visible) {\n        if (visible !== undefined) {\n            element.visible = visible;\n            if (obj instanceof Node) {\n                //content\n                if (!obj.children) {\n                    element.children[0].visible = visible;\n                    this.updateDiagramContainerVisibility(element.children[0], visible);\n                    if (obj.shape.type === 'Bpmn' && this.bpmnModule) {\n                        this.bpmnModule.updateElementVisibility(obj, visible, this);\n                    }\n                }\n                else {\n                    for (var _i = 0, _a = obj.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        this.updateElementVisibility(this.nameTable[child].wrapper, this.nameTable[child], visible);\n                    }\n                }\n                //ports\n                if (obj.ports) {\n                    for (var _b = 0, _c = obj.ports; _b < _c.length; _b++) {\n                        var port = _c[_b];\n                        if (port.visibility & PortVisibility.Visible) {\n                            var wrapper = this.getWrapper(element, port.id);\n                            wrapper.visible = visible;\n                        }\n                    }\n                }\n                if (obj.annotations) {\n                    for (var _d = 0, _e = obj.annotations; _d < _e.length; _d++) {\n                        var annotation = _e[_d];\n                        var wrapper = this.getWrapper(element, annotation.id);\n                        wrapper.visible = visible;\n                    }\n                }\n            }\n            else {\n                //path and decorators\n                for (var i = 0; i < 3; i++) {\n                    element.children[i].visible = visible;\n                }\n            }\n            if (obj.annotations) {\n                //annotations\n                for (var _f = 0, _g = obj.annotations; _f < _g.length; _f++) {\n                    var annotation = _g[_f];\n                    var wrapper = this.getWrapper(element, annotation.id);\n                    wrapper.visible = visible;\n                }\n            }\n            if (obj.expandIcon || obj.collapseIcon) {\n                var wrapper = this.getWrapper(element, 'icon_content');\n                if (wrapper) {\n                    for (var i = 0; i < wrapper.children.length; i++) {\n                        wrapper.children[i].visible = visible;\n                    }\n                    wrapper.visible = visible;\n                }\n                if (obj && obj.visible && obj.outEdges) {\n                    this.updateIconVisibility(obj, (obj.outEdges.length === 0 ? false : true));\n                }\n            }\n            if (visible === false) {\n                this.unSelect(this.nameTable[element.id]);\n            }\n            if ((obj instanceof Node && !this.preventNodesUpdate) || (obj instanceof Connector && !this.preventConnectorsUpdate)) {\n                //Avoid calling updateDiagramObject method during rendering\n                if (this.diagramActions) {\n                    this.updateDiagramObject(this.nameTable[element.id], undefined, true);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updateAnnotations = function (newProp, actualObject) {\n        if (newProp.annotations !== undefined) {\n            for (var _i = 0, _a = Object.keys(newProp.annotations); _i < _a.length; _i++) {\n                var key = _a[_i];\n                var index = Number(key);\n                var changedObject = newProp.annotations[key];\n                var actualAnnotation = actualObject.annotations[index];\n                this.updateAnnotation(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n            }\n        }\n    };\n    Diagram.prototype.updatefixedUserHandle = function (newProp, actualObject) {\n        if (newProp.fixedUserHandles !== undefined) {\n            var index = void 0;\n            var changedObject = void 0;\n            var actualAnnotation = void 0;\n            for (var _i = 0, _a = Object.keys(newProp.fixedUserHandles); _i < _a.length; _i++) {\n                var key = _a[_i];\n                index = Number(key);\n                changedObject = newProp.fixedUserHandles[key];\n                actualAnnotation = actualObject.fixedUserHandles[index];\n                this.updateConnectorfixedUserHandle(changedObject, actualAnnotation, actualObject.wrapper, actualObject);\n            }\n        }\n    };\n    /**\n     * updateConnectorfixedUserHandle method \\\n     *\n     * @returns { void }  updateConnectorfixedUserHandle method .\\\n     * @param {ConnectorFixedUserHandleModel} changedObject - provide the changedObject value.\n     * @param {ConnectorFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n     * @param {Container} nodes - provide the nodes value.\n     * @param {Object} actualObject - provide the actualObject value.\n     * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateConnectorfixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject, canUpdateSize) {\n        var isMeasure = false;\n        var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n        if (fixedUserHandleWrapper !== undefined) {\n            if (changedObject.width !== undefined) {\n                fixedUserHandleWrapper.width = changedObject.width;\n                isMeasure = true;\n            }\n            if (changedObject.height !== undefined) {\n                fixedUserHandleWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (actualfixedUserHandle instanceof ConnectorFixedUserHandle &&\n                (changedObject.offset !== undefined)) {\n                actualObject.updateAnnotation(actualfixedUserHandle, actualObject.intermediatePoints, actualObject.wrapper.bounds, fixedUserHandleWrapper);\n            }\n            if ((actualfixedUserHandle instanceof ConnectorFixedUserHandle) && changedObject.displacement) {\n                if (changedObject.displacement.x !== undefined ||\n                    changedObject.displacement.y !== undefined) {\n                    isMeasure = true;\n                }\n            }\n            if (changedObject.fill !== undefined) {\n                fixedUserHandleWrapper.style.fill = changedObject.fill;\n            }\n            if (changedObject.handleStrokeColor !== undefined) {\n                fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n            }\n            if (changedObject.handleStrokeWidth !== undefined) {\n                fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n            }\n            if (changedObject.visibility !== undefined) {\n                fixedUserHandleWrapper.visible = changedObject.visibility;\n            }\n            if (changedObject.cornerRadius !== undefined) {\n                fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n            }\n            this.updatefixedUserHandleContent(changedObject, isMeasure, fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n            if (isMeasure === true) {\n                fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n                fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n            }\n        }\n    };\n    /**\n     * updateAnnotation method \\\n     *\n     * @returns { void }  updateAnnotation method .\\\n     * @param {AnnotationModel} changedObject - provide the changedObject value.\n     * @param {ShapeAnnotationModel} actualAnnotation - provide the actualAnnotation value.\n     * @param {Container} nodes - provide the nodes value.\n     * @param {Object} actualObject - provide the actualObject value.\n     * @param {boolean} canUpdateSize - provide the canUpdateSize value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateAnnotation = function (changedObject, actualAnnotation, nodes, actualObject, canUpdateSize) {\n        var isMeasure = false;\n        // eslint-disable-next-line max-len\n        var annotationWrapper = this.getWrapper(nodes, actualAnnotation.id);\n        if (annotationWrapper !== undefined) {\n            if (changedObject.width !== undefined && changedObject.height !== undefined) {\n                annotationWrapper.width = changedObject.width;\n                annotationWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (changedObject.rotateAngle !== undefined) {\n                annotationWrapper.rotateAngle = changedObject.rotateAngle;\n            }\n            if (canUpdateSize && !(annotationWrapper instanceof DiagramHtmlElement)) {\n                annotationWrapper.refreshTextElement();\n            }\n            if (actualAnnotation instanceof PathAnnotation && changedObject.segmentAngle !== undefined) {\n                annotationWrapper.rotateAngle = actualAnnotation.rotateAngle;\n            }\n            if (actualAnnotation instanceof ShapeAnnotation &&\n                changedObject.offset !== undefined) {\n                var offset = changedObject.offset;\n                isMeasure = true;\n                var offsetX = offset.x !== undefined ? offset.x :\n                    actualAnnotation.offset.x;\n                var offsetY = offset.y !== undefined ? offset.y :\n                    actualAnnotation.offset.y;\n                annotationWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                annotationWrapper.relativeMode = 'Point';\n            }\n            else if (actualAnnotation instanceof PathAnnotation &&\n                (changedObject.offset !== undefined ||\n                    changedObject.segmentAngle !== undefined)) {\n                actualObject.updateAnnotation(actualAnnotation, actualObject.intermediatePoints, actualObject.wrapper.bounds, annotationWrapper);\n            }\n            if ((actualAnnotation instanceof PathAnnotation) && changedObject.displacement) {\n                if (changedObject.displacement.x !== undefined ||\n                    changedObject.displacement.y !== undefined) {\n                    isMeasure = true;\n                }\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    annotationWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    annotationWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    annotationWrapper.margin.left = changedObject.margin.left;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    annotationWrapper.margin.right = changedObject.margin.right;\n                }\n            }\n            if (isMeasure || canUpdateSize) {\n                annotationWrapper.width = (actualAnnotation.width || actualObject.width);\n                if (actualAnnotation.template) {\n                    annotationWrapper.width = (annotationWrapper.width || annotationWrapper.actualSize.width);\n                    annotationWrapper.height = (actualAnnotation.height || actualObject.height ||\n                        annotationWrapper.actualSize.height);\n                }\n            }\n            if (changedObject.horizontalAlignment !== undefined) {\n                annotationWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n                isMeasure = true;\n            }\n            if (changedObject.verticalAlignment !== undefined) {\n                annotationWrapper.verticalAlignment = changedObject.verticalAlignment;\n                isMeasure = true;\n            }\n            if (changedObject.visibility !== undefined) {\n                annotationWrapper.visible = (nodes.visible && changedObject.visibility) ? true : false;\n            }\n            if (changedObject.constraints !== undefined) {\n                var updateSelector = false;\n                if ((annotationWrapper.constraints & AnnotationConstraints.Select) &&\n                    (!(changedObject.constraints & AnnotationConstraints.Select)) &&\n                    isSelected(this, actualObject, false, annotationWrapper)) {\n                    //updateSelector = true;\n                }\n                annotationWrapper.constraints = changedObject.constraints;\n                if (updateSelector) {\n                    this.clearSelection();\n                }\n            }\n            if (changedObject.style !== undefined) {\n                updateStyle(changedObject.style, annotationWrapper);\n            }\n            if (changedObject.hyperlink !== undefined) {\n                updateHyperlink(changedObject.hyperlink, annotationWrapper, actualAnnotation);\n            }\n            this.updateAnnotationContent(changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes);\n            if (isMeasure === true) {\n                annotationWrapper.measure(new Size(annotationWrapper.width, annotationWrapper.height));\n                annotationWrapper.arrange(annotationWrapper.desiredSize);\n            }\n            if (!(annotationWrapper instanceof DiagramHtmlElement)) {\n                annotationWrapper.refreshTextElement();\n            }\n            // this.refresh(); this.refreshDiagramLayer();\n        }\n    };\n    Diagram.prototype.updatefixedUserHandleContent = function (changedObject, isMeasure, fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes) {\n        if (changedObject !== undefined) {\n            this.updateConnectorfixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, fixedUserHandleAnnotation, nodes);\n        }\n    };\n    Diagram.prototype.updateConnectorfixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n            removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Connector) {\n            var canvas = actualObject.wrapper;\n            var segment = canvas.children[0];\n            var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n            fixedUserHandleWrapper =\n                actualObject.getfixedUserHandle(actualObject.fixedUserHandles[actualObject.fixedUserHandles.length - 1], actualObject.intermediatePoints, bounds);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, fixedUserHandleWrapper);\n            }\n        }\n    };\n    Diagram.prototype.updateAnnotationContent = function (changedObject, isMeasure, annotationWrapper, actualObject, actualAnnotation, nodes) {\n        if (changedObject.content !== undefined) {\n            if (annotationWrapper) {\n                isMeasure = true;\n                if (actualObject.shape.type === 'UmlActivity' &&\n                    ((isBlazor() && actualObject.shape.umlActivityShape === 'StructuredNode') ||\n                        (!isBlazor() && actualObject.shape.shape === 'StructuredNode'))) {\n                    annotationWrapper.content = '<<' + changedObject.content + '>>';\n                }\n                else {\n                    annotationWrapper.content = changedObject.content;\n                }\n            }\n            if (annotationWrapper instanceof DiagramHtmlElement) {\n                this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n            }\n        }\n        if (changedObject.template !== undefined) {\n            annotationWrapper.content = changedObject.template;\n            this.updateAnnotationWrapper(annotationWrapper, actualObject, actualAnnotation, nodes);\n        }\n    };\n    Diagram.prototype.updateAnnotationWrapper = function (annotationWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(annotationWrapper.id + '_groupElement', elementId);\n            removeElement(annotationWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Node) {\n            annotationWrapper =\n                actualObject.initAnnotationWrapper(actualAnnotation, this.element.id);\n        }\n        else if (actualObject instanceof Connector) {\n            var canvas = actualObject.wrapper;\n            var segment = canvas.children[0];\n            var bounds = new Rect(segment.offsetX - segment.width / 2, segment.offsetY - segment.height / 2, segment.width, segment.height);\n            annotationWrapper =\n                actualObject.getAnnotationElement(actualObject.annotations[actualObject.annotations.length - 1], actualObject.intermediatePoints, bounds, this.getDescription, this.element.id);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (annotationWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, annotationWrapper);\n            }\n        }\n    };\n    /**\n     * updateNodefixedUserHandle method \\\n     *\n     * @returns { void }  updateNodefixedUserHandle method .\\\n     * @param {NodeFixedUserHandleModel} changedObject - provide the changedObject value.\n     * @param {NodeFixedUserHandleModel} actualfixedUserHandle - provide the actualfixedUserHandle value.\n     * @param {Container} nodes - provide the changedObject value.\n     * @param {Object} actualObject - provide the changedObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateNodefixedUserHandle = function (changedObject, actualfixedUserHandle, nodes, actualObject) {\n        //let fixedUserHandleWrapper: Canvas;\n        var isMeasure = false;\n        var fixedUserHandleWrapper = this.getWrapper(nodes, actualfixedUserHandle.id);\n        if (fixedUserHandleWrapper !== undefined) {\n            if (changedObject.width !== undefined) {\n                fixedUserHandleWrapper.actualSize.width = changedObject.width;\n                isMeasure = true;\n            }\n            if (changedObject.height !== undefined) {\n                fixedUserHandleWrapper.height = changedObject.height;\n                isMeasure = true;\n            }\n            if (actualfixedUserHandle instanceof NodeFixedUserHandle &&\n                changedObject.offset !== undefined) {\n                var offset = changedObject.offset;\n                isMeasure = true;\n                var offsetX = offset.x !== undefined ? offset.x :\n                    actualfixedUserHandle.offset.x;\n                var offsetY = offset.y !== undefined ? offset.y :\n                    actualfixedUserHandle.offset.y;\n                fixedUserHandleWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                fixedUserHandleWrapper.relativeMode = 'Point';\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    fixedUserHandleWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    fixedUserHandleWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    fixedUserHandleWrapper.margin.left = changedObject.margin.left;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    fixedUserHandleWrapper.margin.right = changedObject.margin.right;\n                }\n            }\n            if (changedObject.visibility !== undefined) {\n                fixedUserHandleWrapper.visible = changedObject.visibility;\n            }\n            if (changedObject.fill !== undefined) {\n                fixedUserHandleWrapper.style.fill = changedObject.fill;\n            }\n            if (changedObject.handleStrokeColor !== undefined) {\n                fixedUserHandleWrapper.style.strokeColor = changedObject.handleStrokeColor;\n            }\n            if (changedObject.handleStrokeWidth !== undefined) {\n                fixedUserHandleWrapper.style.strokeWidth = changedObject.handleStrokeWidth;\n            }\n            if (changedObject.cornerRadius !== undefined) {\n                fixedUserHandleWrapper.cornerRadius = changedObject.cornerRadius;\n            }\n            this.updatefixedUserHandleWrapper(fixedUserHandleWrapper, actualObject, actualfixedUserHandle, nodes);\n            if (isMeasure === true) {\n                fixedUserHandleWrapper.measure(new Size(fixedUserHandleWrapper.width, fixedUserHandleWrapper.height));\n                fixedUserHandleWrapper.arrange(fixedUserHandleWrapper.desiredSize);\n            }\n        }\n    };\n    Diagram.prototype.updatefixedUserHandleWrapper = function (fixedUserHandleWrapper, actualObject, actualAnnotation, nodes) {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var elementId = _a[_i];\n            removeElement(fixedUserHandleWrapper.id + '_groupElement', elementId);\n            removeElement(fixedUserHandleWrapper.id + '_html_element', elementId);\n        }\n        if (actualObject instanceof Node) {\n            fixedUserHandleWrapper = actualObject.initfixedUserHandles(actualAnnotation);\n        }\n        for (var i = 0; i < nodes.children.length; i++) {\n            if (fixedUserHandleWrapper.id === nodes.children[i].id) {\n                nodes.children.splice(i, 1, fixedUserHandleWrapper);\n            }\n        }\n    };\n    /**\n     * updatePort method \\\n     *\n     * @returns { void }  updatePort method .\\\n     * @param {PointPortModel} changedObject - provide the changedObject value.\n     * @param {PointPortModel} actualPort - provide the changedObject value.\n     * @param {Container} nodes - provide the changedObject value.\n     *\n     * @private\n     */\n    Diagram.prototype.updatePort = function (changedObject, actualPort, nodes) {\n        var isMeasure = false;\n        var portWrapper = this.getWrapper(nodes, actualPort.id);\n        if (portWrapper !== undefined) {\n            if (changedObject.offset !== undefined) {\n                isMeasure = true;\n                var offsetX = changedObject.offset.x !== undefined ? changedObject.offset.x :\n                    actualPort.offset.x;\n                var offsetY = changedObject.offset.y !== undefined ? changedObject.offset.y :\n                    actualPort.offset.y;\n                portWrapper.setOffsetWithRespectToBounds(offsetX, offsetY, 'Fraction');\n                portWrapper.relativeMode = 'Point';\n            }\n            if (changedObject.width !== undefined) {\n                isMeasure = true;\n                portWrapper.width = changedObject.width;\n            }\n            if (changedObject.height !== undefined) {\n                isMeasure = true;\n                portWrapper.height = changedObject.height;\n            }\n            if (changedObject.visibility !== undefined) {\n                portWrapper.visible = (nodes.visible && checkPortRestriction(actualPort, PortVisibility.Visible)) ? true : false;\n            }\n            if (changedObject.margin !== undefined) {\n                isMeasure = true;\n                if (changedObject.margin.bottom !== undefined) {\n                    portWrapper.margin.bottom = changedObject.margin.bottom;\n                }\n                if (changedObject.margin.top !== undefined) {\n                    portWrapper.margin.top = changedObject.margin.top;\n                }\n                if (changedObject.margin.right !== undefined) {\n                    portWrapper.margin.right = changedObject.margin.right;\n                }\n                if (changedObject.margin.left !== undefined) {\n                    portWrapper.margin.left = changedObject.margin.left;\n                }\n            }\n            if (changedObject.horizontalAlignment !== undefined) {\n                isMeasure = true;\n                portWrapper.horizontalAlignment = changedObject.horizontalAlignment;\n            }\n            if (changedObject.verticalAlignment !== undefined) {\n                isMeasure = true;\n                portWrapper.verticalAlignment = changedObject.verticalAlignment;\n            }\n            if (changedObject.style !== undefined) {\n                if (changedObject.style.fill !== undefined) {\n                    portWrapper.style.fill = changedObject.style.fill;\n                }\n                if (changedObject.style.opacity !== undefined) {\n                    portWrapper.style.opacity = changedObject.style.opacity;\n                }\n                if (changedObject.style.strokeColor !== undefined) {\n                    portWrapper.style.strokeColor = changedObject.style.strokeColor;\n                }\n                if (changedObject.style.strokeWidth !== undefined) {\n                    portWrapper.style.strokeWidth = changedObject.style.strokeWidth;\n                }\n                if (changedObject.style.strokeDashArray !== undefined) {\n                    portWrapper.style.strokeDashArray = changedObject.style.strokeDashArray;\n                }\n            }\n            if (changedObject.shape !== undefined) {\n                if (portWrapper) {\n                    var pathdata = getPortShape(changedObject.shape);\n                    portWrapper.data = pathdata;\n                    portWrapper.canMeasurePath = true;\n                }\n            }\n            if (changedObject.pathData !== undefined) {\n                portWrapper.data = String(changedObject.pathData);\n                isMeasure = true;\n            }\n            if (isMeasure === true) {\n                portWrapper.measure(new Size(portWrapper.width, portWrapper.height));\n                portWrapper.arrange(portWrapper.desiredSize);\n            }\n            //this.refresh(); this.refreshDiagramLayer();\n        }\n    };\n    /**\n     * updateIcon method \\\n     *\n     * @returns { void }  updateIcon method .\\\n     * @param {Node} actualObject - provide the obj value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateIcon = function (actualObject) {\n        var iconContainer = this.getWrapper(actualObject.wrapper, 'icon_content');\n        var diagramId = (this.diagramActions & DiagramAction.Render) ? this.element.id : undefined;\n        if (iconContainer) {\n            if (this.mode === 'SVG') {\n                var icon = getDiagramElement(actualObject.wrapper.id + '_icon_content', diagramId);\n                if (icon) {\n                    var iconRect = getDiagramElement(icon.id + '_rect', diagramId);\n                    var iconShape = getDiagramElement(icon.id + '_shape', diagramId);\n                    var nativeContent = getDiagramElement(iconShape.id + '_native_element', diagramId);\n                    if (nativeContent) {\n                        nativeContent.parentNode.removeChild(nativeContent);\n                    }\n                    iconShape.parentNode.removeChild(iconShape);\n                    iconRect.parentNode.removeChild(iconRect);\n                    icon.parentNode.removeChild(icon);\n                }\n            }\n            var index = actualObject.wrapper.children.indexOf(iconContainer);\n            actualObject.wrapper.children.splice(index, 1);\n        }\n        var portContainer = this.getPortContainer(actualObject);\n        actualObject.initIcons(this.getDescription, this.layout, portContainer, this.element.id);\n    };\n    Diagram.prototype.getPortContainer = function (actualObject) {\n        if (actualObject.children) {\n            for (var i = 0; i < actualObject.wrapper.children.length; i++) {\n                if (actualObject.wrapper.children[i].id === actualObject.id + 'group_container') {\n                    return actualObject.wrapper.children[i];\n                }\n            }\n        }\n        return actualObject.wrapper;\n    };\n    Diagram.prototype.updateTooltip = function (actualObject, node) {\n        if (node.tooltip.content !== undefined) {\n            actualObject.tooltip.content = node.tooltip.content;\n        }\n        if (node.tooltip.position !== undefined) {\n            actualObject.tooltip.position = node.tooltip.position;\n        }\n        if (node.tooltip.height !== undefined) {\n            actualObject.tooltip.height = node.tooltip.height;\n        }\n        if (node.tooltip.width !== undefined) {\n            actualObject.tooltip.width = node.tooltip.width;\n        }\n        if (node.tooltip.showTipPointer !== undefined) {\n            actualObject.tooltip.showTipPointer = node.tooltip.showTipPointer;\n        }\n        if (node.tooltip.relativeMode !== undefined) {\n            actualObject.tooltip.relativeMode = node.tooltip.relativeMode;\n        }\n    };\n    /**\n     * updateQuad method \\\n     *\n     * @returns { void }  updateQuad method .\\\n     * @param {IElement} obj - provide the obj value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateQuad = function (obj) {\n        var modified = this.spatialSearch.updateQuad(obj.wrapper);\n        if (modified && !this.preventDiagramUpdate) {\n            this.updatePage();\n        }\n    };\n    /**\n     * removeFromAQuad method \\\n     *\n     * @returns { void }  removeFromAQuad method .\\\n     * @param {IElement} obj - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.removeFromAQuad = function (obj) {\n        if (obj.children) {\n            var child = void 0;\n            var children = obj.children;\n            for (var i = 0; i < children.length; i++) {\n                child = this.nameTable[children[i]];\n                if (child) {\n                    this.removeFromAQuad(child);\n                }\n            }\n        }\n        this.spatialSearch.removeFromAQuad(obj.wrapper);\n        var modified = this.spatialSearch.updateBounds(obj.wrapper);\n        if (modified && !this.preventDiagramUpdate) {\n            this.updatePage();\n        }\n    };\n    /**\n     * updateGroupSize method \\\n     *\n     * @returns { void }  updateGroupSize method .\\\n     * @param {NodeModel | ConnectorModel} node - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateGroupSize = function (node) {\n        var tempNode;\n        if (node.parentId) {\n            tempNode = this.nameTable[node.parentId];\n            if (tempNode) {\n                if (tempNode.parentId) {\n                    this.updateGroupSize(tempNode);\n                }\n                else {\n                    tempNode.wrapper.measure(new Size());\n                    tempNode.wrapper.arrange(tempNode.wrapper.desiredSize);\n                    this.updateGroupOffset(tempNode);\n                    this.updateDiagramObject(tempNode);\n                }\n            }\n        }\n    };\n    Diagram.prototype.updatePage = function () {\n        if ((this.diagramActions & DiagramAction.Render) &&\n            !(this.diagramActions & DiagramAction.DragUsingMouse)) {\n            this.scroller.updateScrollOffsets();\n            this.scroller.setSize();\n            //updating overview\n            for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n                var temp = _a[_i];\n                var view = this.views[temp];\n                if (!(view instanceof Diagram)) {\n                    view.updateView(view);\n                }\n            }\n        }\n        if (this.diagramActions & DiagramAction.DragUsingMouse) {\n            this.renderPageBreaks();\n        }\n    };\n    /**\n     * protectPropertyChange method \\\n     *\n     * @returns { void }  protectPropertyChange method .\\\n     * @param {boolean} enable - provide the enable value.\n     *\n     * @private\n     */\n    Diagram.prototype.protectPropertyChange = function (enable) {\n        this.isProtectedOnChange = enable;\n    };\n    /**\n     * getProtectPropertyChangeValue method \\\n     *\n     * @returns { boolean }  getProtectPropertyChangeValue method .\\\n     *\n     * @private\n     */\n    Diagram.prototype.getProtectPropertyChangeValue = function () {\n        return this.isProtectedOnChange;\n    };\n    /**\n     * enableServerDataBinding method \\\n     *\n     * @returns { void }  enableServerDataBinding method .\\\n     * @param {boolean} enable - provide the node value.\n     *\n     * @private\n     */\n    Diagram.prototype.enableServerDataBinding = function (enable) {\n        if (isBlazor()) {\n            this.allowServerDataBinding = enable;\n            if (enable) {\n                this.bulkChanges = {};\n            }\n        }\n    };\n    /**\n     * updateShadow method \\\n     *\n     * @returns { void }  updateShadow method .\\\n     * @param {ShadowModel} nodeShadow - provide the node value.\n     * @param {ShadowModel} changedShadow - provide the Node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateShadow = function (nodeShadow, changedShadow) {\n        if (changedShadow.angle !== undefined) {\n            nodeShadow.angle = changedShadow.angle;\n        }\n        if (changedShadow.color !== undefined) {\n            nodeShadow.color = changedShadow.color;\n        }\n        if (changedShadow.distance !== undefined) {\n            nodeShadow.distance = changedShadow.distance;\n        }\n        if (changedShadow.opacity !== undefined) {\n            nodeShadow.opacity = changedShadow.opacity;\n        }\n    };\n    /**\n     * updateMargin method \\\n     *\n     * @returns { void }  updateMargin method .\\\n     * @param {Node} node - provide the node value.\n     * @param {Node} changes - provide the Node value.\n     *\n     * @private\n     */\n    Diagram.prototype.updateMargin = function (node, changes) {\n        if (changes.margin.top !== undefined) {\n            node.margin.top = changes.margin.top;\n        }\n        if (changes.margin.bottom !== undefined) {\n            node.margin.bottom = changes.margin.bottom;\n        }\n        if (changes.margin.left !== undefined) {\n            node.margin.left = changes.margin.left;\n        }\n        if (changes.margin.right !== undefined) {\n            node.margin.right = changes.margin.right;\n        }\n    };\n    Diagram.prototype.removePreviewChildren = function (preview) {\n        if (preview.children && preview.children.length &&\n            preview.shape && preview.shape.type === 'SwimLane') {\n            for (var z = 0; z < preview.children.length; z++) {\n                var previewChildId = preview.children[z];\n                var previewIndex_1 = this.nodes.indexOf(this.nameTable[previewChildId]);\n                if (previewIndex_1 >= 0) {\n                    this.nodes.splice(previewIndex_1, 1);\n                }\n                delete this.nameTable[previewChildId];\n            }\n            var previewIndex = this.nodes.indexOf(this.nameTable[this.currentSymbol.id]);\n            if (previewIndex >= 0) {\n                this.nodes.splice(previewIndex, 1);\n            }\n        }\n    };\n    //property changes - end region\n    /* tslint:disable */\n    Diagram.prototype.initDroppables = function () {\n        var _this = this;\n        // initiates droppable event\n        var childTable = {};\n        var entryTable = {};\n        var header;\n        var lane;\n        this.droppable = new Droppable(this.element);\n        // this.droppable.accept = '.e-dragclone';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.droppable.over = function (args) {\n            if (!_this.currentSymbol) {\n                var dragDataHelper = null;\n                if (!args.dragData && args.name === 'drag') {\n                    var helper = document.getElementsByClassName('e-dragclone')[0];\n                    if (helper) {\n                        dragDataHelper = helper;\n                    }\n                }\n                if (args.dragData || dragDataHelper) {\n                    var newObj = void 0;\n                    var isHorizontal = void 0;\n                    document.getElementById(_this.element.id + 'content').focus();\n                    var position = _this.eventHandler.getMousePosition(args.event);\n                    var clonedObject = void 0;\n                    var selectedSymbol = dragDataHelper || args.dragData.helper;\n                    var paletteId = selectedSymbol.getAttribute('paletteId');\n                    var nodeDragSize = void 0;\n                    var nodePreviewSize = void 0;\n                    var paletteDragSize = void 0;\n                    var preview = void 0;\n                    if (paletteId) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        var sourceElement = document.getElementById(paletteId).ej2_instances[0];\n                        var source = 'sourceElement';\n                        _this.droppable[source] = sourceElement;\n                        var selectedSymbols = 'selectedSymbols';\n                        var childtable = 'childTable';\n                        if (sourceElement) {\n                            var obj = sourceElement[selectedSymbols];\n                            _this.allowServerDataBinding = false;\n                            clonedObject = cloneObject(sourceElement[selectedSymbols]);\n                            childTable = sourceElement[childtable];\n                            var wrapper = obj.wrapper.children[0].children[0];\n                            preview = getPreviewSize(sourceElement, clonedObject, wrapper);\n                            if (sourceElement[selectedSymbols] instanceof Node) {\n                                if (obj.shape.shape === 'TextAnnotation') {\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetX = position.x + 11 + (preview.width) * clonedObject.pivot.x;\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetY = position.y + 11 + (preview.height) * clonedObject.pivot.y;\n                                }\n                                else {\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetX = position.x + 5 + (preview.width) * clonedObject.pivot.x;\n                                    // eslint-disable-next-line max-len\n                                    clonedObject.offsetY = position.y + (preview.height) * clonedObject.pivot.y;\n                                }\n                                var newNode = new Node(_this, 'nodes', clonedObject, true);\n                                if (newNode.shape.type === 'Bpmn' && newNode.shape.activity.subProcess.processes\n                                    && newNode.shape.activity.subProcess.processes.length) {\n                                    newNode.shape.activity.subProcess.processes = [];\n                                }\n                                nodeDragSize = newNode.dragSize;\n                                nodePreviewSize = newNode.previewSize;\n                                paletteDragSize = sourceElement['symbolDragSize'];\n                                var palettePreview = sourceElement['symbolPreview'];\n                                // eslint-disable-next-line max-len\n                                newNode.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || palettePreview.width || newNode.width;\n                                // eslint-disable-next-line max-len\n                                newNode.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || palettePreview.height || newNode.height;\n                                if (newNode.shape.type === 'SwimLane') {\n                                    _this.diagramActions |= DiagramAction.PreventHistory;\n                                    if (newNode.shape.isLane) {\n                                        newNode.children = [];\n                                        header = {\n                                            id: 'header' + randomId()\n                                        };\n                                        if (newNode.shape.orientation === 'Horizontal') {\n                                            header.width = newNode.shape.lanes[0].header.width;\n                                            header.height = newNode.shape.lanes[0].height;\n                                        }\n                                        else {\n                                            header.width = newNode.shape.lanes[0].width;\n                                            header.height = newNode.shape.lanes[0].header.height;\n                                        }\n                                        header.style = newNode.shape.lanes[0].header.style;\n                                        header.offsetX = position.x + 5 + header.width / 2;\n                                        header.offsetY = position.y + header.height / 2;\n                                        _this.diagramActions |= DiagramAction.PreventCollectionChangeOnDragOver;\n                                        header = _this.add(header);\n                                        lane = {\n                                            id: 'body' + randomId()\n                                        };\n                                        if (newNode.shape.orientation === 'Horizontal') {\n                                            lane.width = newNode.shape.lanes[0].width - header.width;\n                                            lane.height = newNode.shape.lanes[0].height;\n                                            // eslint-disable-next-line max-len\n                                            lane.offsetX = position.x + 5 + (newNode.shape.lanes[0].header.width + (lane.width / 2));\n                                            lane.offsetY = position.y + lane.height / 2;\n                                        }\n                                        else {\n                                            lane.width = newNode.shape.lanes[0].width;\n                                            lane.height = newNode.shape.lanes[0].height - header.height;\n                                            lane.offsetX = position.x + 5 + lane.width / 2;\n                                            // eslint-disable-next-line max-len\n                                            lane.offsetY = position.y + (newNode.shape.lanes[0].header.height + (lane.height / 2));\n                                        }\n                                        lane.style = newNode.shape.lanes[0].style;\n                                        lane = _this.add(lane);\n                                        var group = {\n                                            id: 'group' + randomId(),\n                                            children: [header.id, lane.id]\n                                        };\n                                        group.shape = newNode.shape;\n                                        group.width = newNode.shape.lanes[0].width;\n                                        group.height = newNode.shape.lanes[0].height;\n                                        group.previewSize = newNode.previewSize;\n                                        group.dragSize = newNode.dragSize;\n                                        group.addInfo = newNode.addInfo;\n                                        newNode = _this.add(group);\n                                        _this.diagramActions &= ~DiagramAction.PreventCollectionChangeOnDragOver;\n                                    }\n                                    _this.diagramActions &= ~DiagramAction.PreventHistory;\n                                }\n                                if (newNode.shape.isPhase) {\n                                    isHorizontal = (newNode.shape.orientation === 'Horizontal') ? true : false;\n                                    if (isHorizontal) {\n                                        newNode.offsetX = position.x + 5 + (newNode.width || wrapper.actualSize.width) / 2;\n                                        newNode.offsetY = position.y;\n                                        newNode.shape.data =\n                                            'M' + 20 + ',' + (newNode.height / 2) + ' L' + (newNode.width - 20) + ',' +\n                                                (newNode.height / 2) + 'z';\n                                        newNode.height = 1;\n                                    }\n                                    else {\n                                        newNode.offsetX = position.x + 5;\n                                        newNode.offsetY = position.y + (newNode.height || wrapper.actualSize.height) / 2;\n                                        newNode.shape.data =\n                                            'M' + (newNode.width / 2) + ',' + 20 + ' L' + (newNode.width / 2) +\n                                                ',' + (newNode.height - 20) + 'z';\n                                        newNode.width = 1;\n                                    }\n                                }\n                                newObj = newNode;\n                                if (clonedObject.children) {\n                                    var parentNode = clonedObject;\n                                    var tempTable = {};\n                                    entryTable = _this.getChildren(parentNode, tempTable, childTable);\n                                    arrangeChild(parentNode, -parentNode.offsetX, -parentNode.offsetY, entryTable, true, _this);\n                                }\n                            }\n                            else if (sourceElement[selectedSymbols] instanceof Connector) {\n                                newObj = new Connector(_this, 'connectors', clonedObject, true);\n                                var bounds = Rect.toBounds([newObj.sourcePoint, newObj.targetPoint]);\n                                var tx = position.x - bounds.left;\n                                var ty = position.y - bounds.top;\n                                newObj.sourcePoint.x += tx;\n                                newObj.sourcePoint.y += ty;\n                                newObj.targetPoint.x += tx;\n                                newObj.targetPoint.y += ty;\n                            }\n                            if (!newObj.shape.isLane) {\n                                newObj.id += randomId();\n                            }\n                            var arg = {\n                                source: sourceElement, element: newObj, cancel: false,\n                                diagram: _this\n                            };\n                            if (isBlazor()) {\n                                arg = _this.getBlazorDragEventArgs(arg);\n                            }\n                            _this['enterObject'] = newObj;\n                            _this['enterTable'] = entryTable;\n                            _this.triggerEvent(DiagramEvent.dragEnter, arg);\n                            if ((newObj instanceof Node) && newObj.shape.type === 'SwimLane' && newObj.shape.isLane) {\n                                var swimLaneObj = arg.element;\n                                var laneObj = swimLaneObj.shape.lanes[0];\n                                //let child1: NodeModel; let child2: NodeModel;\n                                isHorizontal = (swimLaneObj.shape.orientation === 'Horizontal') ? true : false;\n                                var child1 = _this.nameTable[newObj.children[0]];\n                                var child2 = _this.nameTable[newObj.children[1]];\n                                nodeDragSize = newObj.dragSize;\n                                nodePreviewSize = newObj.previewSize;\n                                paletteDragSize = sourceElement['symbolDragSize'];\n                                laneObj.width = nodeDragSize.width || paletteDragSize.width || nodePreviewSize.width || laneObj.width;\n                                laneObj.height = nodeDragSize.height || paletteDragSize.height || nodePreviewSize.height || laneObj.height;\n                                if (isHorizontal) {\n                                    header.width = laneObj.header.width;\n                                    header.height = laneObj.height;\n                                    lane.width = laneObj.width - header.width;\n                                    lane.height = laneObj.height;\n                                    lane.offsetX = position.x + 5 + (laneObj.header.width + (child2.width / 2));\n                                    lane.offsetY = position.y + child2.height / 2;\n                                }\n                                else {\n                                    header.width = laneObj.width;\n                                    header.height = laneObj.header.height;\n                                    lane.width = laneObj.width;\n                                    lane.height = laneObj.height - header.height;\n                                    lane.offsetX = position.x + 5 + child2.width / 2;\n                                    lane.offsetY = position.y + (laneObj.header.height + (child2.height / 2));\n                                }\n                                header.offsetX = position.x + 5 + child1.width / 2;\n                                header.offsetY = position.y + child1.height / 2;\n                                newObj.width = laneObj.width;\n                                newObj.height = laneObj.height;\n                            }\n                            if ((newObj instanceof Node) && newObj.shape.isPhase) {\n                                if (isHorizontal) {\n                                    newObj.height = 1;\n                                }\n                                else {\n                                    newObj.width = 1;\n                                }\n                            }\n                            if (!_this.activeLayer.lock && !arg.cancel) {\n                                _this.preventDiagramUpdate = true;\n                                if (newObj.children) {\n                                    _this.findChild(newObj, entryTable);\n                                }\n                                _this.preventDiagramUpdate = true;\n                                if (newObj.zIndex !== -1) {\n                                    newObj.zIndex = -1;\n                                }\n                                _this.initObject(newObj, undefined, undefined, true);\n                                _this.currentSymbol = newObj;\n                                if (_this.mode !== 'SVG') {\n                                    _this.refreshDiagramLayer();\n                                }\n                                _this.commandHandler.oldSelectedObjects = cloneSelectedObjects(_this);\n                                _this.commandHandler.select(newObj);\n                                _this.commandHandler.updateBlazorSelector();\n                                _this.eventHandler.mouseDown(args.event);\n                                _this.eventHandler.mouseMove(args.event, args);\n                                _this.preventDiagramUpdate = false;\n                                _this.updatePage();\n                                selectedSymbol.style.opacity = '0';\n                            }\n                            delete _this['enterObject'];\n                            delete _this['enterTable'];\n                        }\n                        _this.droppable[selectedSymbols] = selectedSymbol;\n                        _this.allowServerDataBinding = true;\n                    }\n                }\n            }\n            else {\n                if (args.event.touches && args.event.touches.length) {\n                    _this.eventHandler.mouseMove(args.event, args.event.touches);\n                }\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.droppable.drop = function (args) { return __awaiter(_this, void 0, void 0, function () {\n            var source, value, isPhase, orientation_2, isConnector, arg, id, clonedObject, nodeId, newObj, arg, clonedObject, id, selectedSymbols, draggableElement, i;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.allowServerDataBinding = false;\n                        source = 'sourceElement';\n                        if (!this.currentSymbol) return [3 /*break*/, 4];\n                        isPhase = false;\n                        isConnector = (this.currentSymbol instanceof Connector) ? true : false;\n                        if (args.event.touches) {\n                            this.eventHandler.mouseUp(args.event);\n                        }\n                        arg = void 0;\n                        arg = {\n                            source: this.droppable[source],\n                            element: this.currentSymbol,\n                            target: this.eventHandler['hoverNode'] || this.eventHandler['lastObjectUnderMouse'] || this, cancel: false,\n                            position: { x: this.currentSymbol.wrapper.offsetX, y: this.currentSymbol.wrapper.offsetY }\n                        };\n                        if (!isBlazor()) return [3 /*break*/, 2];\n                        arg = {\n                            source: cloneBlazorObject(this.droppable[source]),\n                            // eslint-disable-next-line max-len\n                            element: getObjectType(this.currentSymbol) === Connector ? { connector: cloneBlazorObject(this.currentSymbol) } : { node: cloneBlazorObject(this.currentSymbol) },\n                            cancel: false, target: {},\n                            position: { x: this.currentSymbol.wrapper.offsetX, y: this.currentSymbol.wrapper.offsetY }\n                        };\n                        // eslint-disable-next-line max-len\n                        this.getDropEventArgs(arg);\n                        return [4 /*yield*/, this.triggerEvent(DiagramEvent.drop, arg)];\n                    case 1:\n                        arg = (_a.sent()) || arg;\n                        return [3 /*break*/, 3];\n                    case 2:\n                        this.triggerEvent(DiagramEvent.drop, arg);\n                        _a.label = 3;\n                    case 3:\n                        id = 'id';\n                        clonedObject = cloneObject(this.currentSymbol);\n                        clonedObject['hasTarget'] = this.currentSymbol['hasTarget'];\n                        this.removeFromAQuad(this.currentSymbol);\n                        this.removeObjectsFromLayer(this.nameTable[this.currentSymbol.id]);\n                        this.removeElements(this.currentSymbol);\n                        if (this.currentSymbol.shape.isLane ||\n                            this.currentSymbol.shape.isPhase) {\n                            this.removeChildInNodes(this.currentSymbol);\n                        }\n                        if (arg.cancel) {\n                            removeChildNodes(this.currentSymbol, this);\n                        }\n                        if (this.currentSymbol.shape.isPhase) {\n                            isPhase = true;\n                            orientation_2 = this.currentSymbol.shape.orientation;\n                        }\n                        this.removePreviewChildren(this.currentSymbol);\n                        delete this.nameTable[this.currentSymbol.id];\n                        this.currentSymbol = null;\n                        this.protectPropertyChange(true);\n                        if (!arg.cancel) {\n                            this.startGroupAction();\n                            if (clonedObject && (clonedObject.shape.isLane || isPhase)) {\n                                if (isPhase) {\n                                    clonedObject.shape.isPhase = isPhase;\n                                    clonedObject.shape.orientation = orientation_2;\n                                }\n                                this.eventHandler.addSwimLaneObject(clonedObject);\n                            }\n                            if (clonedObject.shape.type === 'Bpmn' && clonedObject.shape.annotation\n                                && clonedObject['hasTarget']) {\n                                nodeId = clonedObject.shape.annotation.nodeId;\n                                clonedObject.shape.annotation.id = clonedObject.id;\n                                this.addTextAnnotation(clonedObject.shape.annotation, this.nameTable[nodeId]);\n                                clonedObject.nodeId = '';\n                            }\n                            if (!clonedObject.shape.isLane && !isPhase) {\n                                if (clonedObject.children) {\n                                    this.addChildNodes(clonedObject);\n                                }\n                                if (arg.target && (arg.target instanceof Node) && !isConnector && checkParentAsContainer(this, arg.target)\n                                    && canAllowDrop(arg.target)) {\n                                    addChildToContainer(this, arg.target, clonedObject);\n                                }\n                                else {\n                                    value = this.add(clonedObject, true);\n                                }\n                                if ((clonedObject || value) && canSingleSelect(this)) {\n                                    this.select([this.nameTable[clonedObject[id]]]);\n                                }\n                            }\n                        }\n                        else {\n                            this.clearSelectorLayer();\n                        }\n                        this.protectPropertyChange(false);\n                        newObj = this.nameTable[clonedObject[id]];\n                        if (clonedObject['hasTarget']) {\n                            clonedObject.nodeId = clonedObject['hasTarget'];\n                            this.remove(clonedObject);\n                        }\n                        if (this.bpmnModule && newObj instanceof Node && clonedObject.processId) {\n                            newObj.processId = clonedObject.processId;\n                            this.bpmnModule.dropBPMNchild(this.nameTable[newObj.processId], newObj, this);\n                        }\n                        if (!arg.cancel) {\n                            this.endGroupAction();\n                        }\n                        if (this.mode !== 'SVG') {\n                            this.refreshDiagramLayer();\n                        }\n                        delete this.droppable[source];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        arg = {\n                            source: cloneBlazorObject(args.droppedElement),\n                            element: undefined,\n                            target: cloneBlazorObject(this.eventHandler['hoverNode'] || (this.eventHandler['lastObjectUnderMouse']) || this), cancel: false,\n                            position: undefined\n                        };\n                        if (isBlazor()) {\n                            arg = {\n                                source: cloneBlazorObject(args.droppedElement),\n                                element: undefined,\n                                cancel: false,\n                                position: undefined,\n                                target: {}\n                            };\n                            this.getDropEventArgs(arg);\n                        }\n                        this.triggerEvent(DiagramEvent.drop, arg);\n                        clonedObject = void 0;\n                        id = 'id';\n                        _a.label = 5;\n                    case 5:\n                        selectedSymbols = 'selectedSymbols';\n                        // eslint-disable-next-line max-len\n                        if (this.droppable[selectedSymbols] && this.droppable[selectedSymbols].parentNode) {\n                            remove(this.droppable[selectedSymbols]);\n                        }\n                        else {\n                            draggableElement = document.getElementsByClassName('e-dragclone');\n                            for (i = 0; i < draggableElement.length; i++) {\n                                draggableElement[i].remove();\n                            }\n                        }\n                        this.allowServerDataBinding = true;\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        this.droppable.out = function (args) {\n            if (_this.currentSymbol && !_this.eventHandler.focus) {\n                _this.unSelect(_this.currentSymbol);\n                _this.removeFromAQuad(_this.currentSymbol);\n                if (_this.mode !== 'SVG' && _this.currentSymbol.shape.type === 'Native') {\n                    _this.removeElements(_this.currentSymbol);\n                }\n                _this.removeObjectsFromLayer(_this.nameTable[_this.currentSymbol.id]);\n                _this.removePreviewChildren(_this.currentSymbol);\n                delete _this.nameTable[_this.currentSymbol.id];\n                var args_1 = {\n                    element: cloneBlazorObject(_this.currentSymbol),\n                    diagram: _this\n                };\n                if (isBlazor()) {\n                    args_1 = _this.getBlazorDragLeaveEventArgs(args_1);\n                }\n                _this.triggerEvent(DiagramEvent.dragLeave, args_1);\n                if (_this.mode !== 'SVG') {\n                    _this.refreshDiagramLayer();\n                }\n                else {\n                    _this.removeElements(_this.currentSymbol);\n                }\n                _this.currentSymbol = null;\n                var selectedSymbols = 'selectedSymbols';\n                _this.droppable[selectedSymbols].style.opacity = '1';\n                var source = 'sourceElement';\n                delete _this.droppable[source];\n                _this.diagramRenderer.rendererActions =\n                    _this.removeConstraints(_this.diagramRenderer.rendererActions, RendererAction.DrawSelectorBorder);\n                if (_this.previousSelectedObject) {\n                    _this.select(_this.previousSelectedObject, _this.previousSelectedObject.length > 1 ? true : false);\n                }\n                _this.previousSelectedObject = null;\n            }\n        };\n    };\n    Diagram.prototype.getBlazorDragLeaveEventArgs = function (args) {\n        args = {\n            diagramId: this.element.id,\n            element: getObjectType(args.element) === Connector ? { connector: cloneBlazorObject(args.element) }\n                : { node: cloneBlazorObject(args.element) }\n        };\n        return args;\n    };\n    Diagram.prototype.getDropEventArgs = function (arg) {\n        if ((this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode'])) {\n            var object = this.eventHandler['lastObjectUnderMouse'] || this.eventHandler['hoverNode'];\n            // eslint-disable-next-line max-len\n            arg.target = getObjectType(object) === Connector ? { connector: cloneBlazorObject(object) } : { node: cloneBlazorObject(object) };\n        }\n        else {\n            arg.target.diagramId = this.element.id;\n        }\n    };\n    Diagram.prototype.removeChildInNodes = function (node) {\n        if (node) {\n            if (node.children) {\n                for (var i = 0; i < node.children.length; i++) {\n                    this.removeChildInNodes(this.nameTable[node.children[i]]);\n                }\n            }\n            var index = this.nodes.indexOf(node);\n            if (index !== -1) {\n                this.nodes.splice(index, 1);\n            }\n        }\n    };\n    Diagram.prototype.getBlazorDragEventArgs = function (args) {\n        args = {\n            // eslint-disable-next-line max-len\n            source: cloneBlazorObject(args.source), element: getObjectType(args.element) === Connector ? { connector: cloneBlazorObject(args.element) }\n                : { node: cloneBlazorObject(args.element) },\n            cancel: args.cancel, diagramId: this.element.id\n        };\n        return args;\n    };\n    Diagram.prototype.findChild = function (node, childTable) {\n        var group;\n        var newNode;\n        for (var i = 0; i < node.children.length; i++) {\n            group = childTable[node.children[i]];\n            if (group) {\n                if (group.children) {\n                    this.findChild(group, childTable);\n                }\n                group.id = group.id + randomId();\n                childTable[group.id] = group;\n                node.children[i] = group.id;\n                newNode = new Node(this, 'nodes', group, true);\n                this.initObject(newNode, undefined, undefined, true);\n                //this.add(group, true);\n            }\n        }\n    };\n    Diagram.prototype.getChildren = function (node, entryTable, childTable) {\n        var temp;\n        for (var i = 0; i < node.children.length; i++) {\n            temp = (childTable[node.children[i]]);\n            if (temp) {\n                if (temp.children) {\n                    entryTable = this.getChildren(temp, entryTable, childTable);\n                }\n                entryTable[temp.id] = cloneObject(temp);\n            }\n        }\n        return entryTable;\n    };\n    Diagram.prototype.addChildNodes = function (node) {\n        var temp;\n        for (var i = 0; i < node.children.length; i++) {\n            temp = (this.nameTable[node.children[i]]);\n            if (temp) {\n                if (temp.children) {\n                    this.addChildNodes(temp);\n                }\n                this.add(temp, true);\n            }\n        }\n    };\n    Diagram.prototype.moveNode = function (node) {\n        var currentLayer = this.commandHandler.getObjectLayer(node.id);\n        var index = currentLayer.zIndex;\n        var length = currentLayer.objects.length;\n        var targetLayer;\n        for (var i = 0; i < this.layers.length; i++) {\n            if (index === this.layers[i].zIndex) {\n                targetLayer = this.layers[i + 1];\n            }\n        }\n        if (length > 1) {\n            this.commandHandler.moveSvgNode(node.id, currentLayer.objects[length - 2]);\n            this.commandHandler.moveSvgNode(currentLayer.objects[length - 2], node.id);\n        }\n        else {\n            if (targetLayer) {\n                var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[0];\n                if (targetObject) {\n                    this.commandHandler.moveSvgNode(node.id, targetObject);\n                    this.commandHandler.updateNativeNodeIndex(node.id, targetObject);\n                }\n                else {\n                    this.moveObjectsUp(node, currentLayer);\n                }\n            }\n            else {\n                this.moveObjectsUp(node, currentLayer);\n            }\n        }\n    };\n    /**\n     * moves the node or connector forward within given layer \\\n     *\n     * @returns { void }  moves the node or connector forward within given layer .\\\n     * @param {Node | Connector} node - provide the source value.\n     * @param {LayerModel} currentLayer - provide the source value.\n     *\n     */\n    Diagram.prototype.moveObjectsUp = function (node, currentLayer) {\n        var targetLayer;\n        for (var i = this.layers.length - 1; i >= 0; i--) {\n            targetLayer = this.layers[i];\n            if (currentLayer.id !== targetLayer.id) {\n                // eslint-disable-next-line max-len\n                var targetObject = this.commandHandler.getLayer(this.layerZIndexTable[targetLayer.zIndex]).objects[targetLayer.objects.length - 1];\n                if (targetObject) {\n                    this.commandHandler.moveSvgNode(node.id, targetObject);\n                    this.commandHandler.moveSvgNode(targetObject, node.id);\n                    break;\n                }\n            }\n        }\n    };\n    /**\n     * Inserts newly added element into the database \\\n     *\n     * @returns { void }  Inserts newly added element into the database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.insertData = function (node) {\n        return this.crudOperation(node, 'create', this.getNewUpdateNodes('New'));\n    };\n    /**\n     * updates the user defined element properties into the existing database \\\n     *\n     * @returns { void }     Removes the user deleted element from the existing database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.updateData = function (node) {\n        return this.crudOperation(node, 'update', this.getNewUpdateNodes('Update'));\n    };\n    /**\n     * Removes the user deleted element from the existing database \\\n     *\n     * @returns { void }     Removes the user deleted element from the existing database .\\\n     * @param {Node | Connector} node - provide the source value.\n     *\n     */\n    Diagram.prototype.removeData = function (node) {\n        return this.crudOperation(node, 'destroy', this.getDeletedNodes());\n    };\n    Diagram.prototype.crudOperation = function (node, crud, getNodesCollection) {\n        if (node) {\n            var data = this.parameterMap(node, node instanceof Connector ? false : true);\n            if (data) {\n                // eslint-disable-next-line max-len\n                var url = node instanceof Connector ? this.dataSourceSettings.connectionDataSource.crudAction[crud] : this.dataSourceSettings.crudAction[crud];\n                this.raiseAjaxPost(JSON.stringify(data), url);\n            }\n            return data;\n        }\n        else {\n            var newObjects = getNodesCollection;\n            // eslint-disable-next-line max-len\n            this.processCrudCollection(newObjects, this.dataSourceSettings.crudAction[crud], this.dataSourceSettings.connectionDataSource.crudAction[crud]);\n            return newObjects;\n        }\n    };\n    Diagram.prototype.processCrudCollection = function (newObjects, nodeCrudAction, connectorCrudAction) {\n        if (newObjects.nodes) {\n            var data = [];\n            var i = void 0;\n            for (i = 0; i < newObjects.nodes.length; i++) {\n                data.push(this.parameterMap(newObjects.nodes[i], true));\n            }\n            if (data && data.length > 0) {\n                this.raiseAjaxPost(JSON.stringify(data), nodeCrudAction);\n            }\n        }\n        if (newObjects.connectors) {\n            var data = [];\n            var i = void 0;\n            for (i = 0; i < newObjects.connectors.length; i++) {\n                data.push(this.parameterMap(newObjects.connectors[i], false));\n            }\n            if (data && data.length > 0) {\n                this.raiseAjaxPost(JSON.stringify(data), connectorCrudAction);\n            }\n        }\n    };\n    Diagram.prototype.parameterMap = function (object, isNode) {\n        var mappingObj = {};\n        var i;\n        var fields = isNode ? this.dataSourceSettings : this.dataSourceSettings.connectionDataSource;\n        if (fields.id) {\n            mappingObj[fields.id] = object.id;\n        }\n        if (fields.sourcePointX && fields.sourcePointY) {\n            mappingObj[fields.sourcePointX] = object.sourcePoint.x;\n            mappingObj[fields.sourcePointY] = object.sourcePoint.y;\n        }\n        if (fields.targetPointX && fields.targetPointY) {\n            mappingObj[fields.targetPointX] = object.targetPoint.x;\n            mappingObj[fields.targetPointY] = object.targetPoint.y;\n        }\n        if (fields.sourceID) {\n            mappingObj[fields.sourceID] = object.sourceID;\n        }\n        if (fields.targetID) {\n            mappingObj[fields.targetID] = object.targetID;\n        }\n        if (fields.crudAction && fields.crudAction.customFields && fields.crudAction.customFields.length > 0) {\n            for (i = 0; i < fields.crudAction.customFields.length; i++) {\n                mappingObj[fields.crudAction.customFields[i]] = object[fields.crudAction.customFields[i]];\n            }\n        }\n        return mappingObj;\n    };\n    Diagram.prototype.getNewUpdateNodes = function (status) {\n        var nodes = [];\n        var connectors = [];\n        // eslint-disable-next-line guard-for-in\n        for (var name_1 in this.nameTable) {\n            var node = this.nameTable[name_1];\n            if (node.status === status) {\n                if (node && node instanceof Connector) {\n                    node.status = 'None';\n                    connectors.push(node);\n                }\n                else {\n                    node.status = 'None';\n                    nodes.push(node);\n                }\n            }\n        }\n        return { nodes: nodes, connectors: connectors };\n    };\n    Diagram.prototype.getDeletedNodes = function () {\n        var nodes = [];\n        var connectors = [];\n        var i;\n        for (i = 0; i < this.crudDeleteNodes.length; i++) {\n            var node = this.crudDeleteNodes[i];\n            if (node && node.segments) {\n                connectors.push(node);\n            }\n            else if (node) {\n                nodes.push(node);\n            }\n        }\n        this.crudDeleteNodes = [];\n        return { nodes: nodes, connectors: connectors };\n    };\n    Diagram.prototype.raiseAjaxPost = function (value, url) {\n        var callback = new Ajax(url, 'POST', true, 'application/json');\n        var data = JSON.stringify(JSON.parse(value));\n        callback.send(data).then();\n        /* eslint-disable */\n        callback.onSuccess = function (data) {\n        };\n        /* eslint-enable */\n    };\n    Diagram.prototype.getHiddenItems = function (args) {\n        var hiddenItems = [];\n        if (this.contextMenuModule) {\n            this.contextMenuModule.hiddenItems = [];\n            for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n                var item = _a[_i];\n                this.contextMenuModule.ensureItems(item, args.event);\n                if (item.items && item.items.length) {\n                    for (var _b = 0, _c = item.items; _b < _c.length; _b++) {\n                        var newItem = _c[_b];\n                        this.contextMenuModule.ensureItems(newItem, args.event);\n                    }\n                }\n            }\n            return this.contextMenuModule.hiddenItems;\n        }\n        return hiddenItems;\n    };\n    __decorate([\n        Property('100%')\n    ], Diagram.prototype, \"width\", void 0);\n    __decorate([\n        Property('SVG')\n    ], Diagram.prototype, \"mode\", void 0);\n    __decorate([\n        Property('100%')\n    ], Diagram.prototype, \"height\", void 0);\n    __decorate([\n        Complex({}, ContextMenuSettings)\n    ], Diagram.prototype, \"contextMenuSettings\", void 0);\n    __decorate([\n        Property(DiagramConstraints.Default)\n    ], Diagram.prototype, \"constraints\", void 0);\n    __decorate([\n        Property(DiagramTools.Default)\n    ], Diagram.prototype, \"tool\", void 0);\n    __decorate([\n        Property('Top')\n    ], Diagram.prototype, \"bridgeDirection\", void 0);\n    __decorate([\n        Property('transparent')\n    ], Diagram.prototype, \"backgroundColor\", void 0);\n    __decorate([\n        Complex({}, SnapSettings)\n    ], Diagram.prototype, \"snapSettings\", void 0);\n    __decorate([\n        Complex({}, RulerSettings)\n    ], Diagram.prototype, \"rulerSettings\", void 0);\n    __decorate([\n        Complex({}, PageSettings)\n    ], Diagram.prototype, \"pageSettings\", void 0);\n    __decorate([\n        Complex({}, SerializationSettings)\n    ], Diagram.prototype, \"serializationSettings\", void 0);\n    __decorate([\n        Collection([], Node)\n    ], Diagram.prototype, \"nodes\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"drawingObject\", void 0);\n    __decorate([\n        Collection([], Connector)\n    ], Diagram.prototype, \"connectors\", void 0);\n    __decorate([\n        Property([])\n    ], Diagram.prototype, \"basicElements\", void 0);\n    __decorate([\n        Complex({}, DiagramTooltip)\n    ], Diagram.prototype, \"tooltip\", void 0);\n    __decorate([\n        Complex({}, DataSource)\n    ], Diagram.prototype, \"dataSourceSettings\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"addInfo\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"historyManager\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"annotationTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"userHandleTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getNodeDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"nodeDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getConnectorDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"connectorDefaults\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"setNodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getDescription\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomProperty\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomTool\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"getCustomCursor\", void 0);\n    __decorate([\n        Collection([], CustomCursorAction)\n    ], Diagram.prototype, \"customCursor\", void 0);\n    __decorate([\n        Property()\n    ], Diagram.prototype, \"updateSelection\", void 0);\n    __decorate([\n        Complex({}, DiagramSettings)\n    ], Diagram.prototype, \"diagramSettings\", void 0);\n    __decorate([\n        Complex({}, Selector)\n    ], Diagram.prototype, \"selectedItems\", void 0);\n    __decorate([\n        Complex({}, ScrollSettings)\n    ], Diagram.prototype, \"scrollSettings\", void 0);\n    __decorate([\n        Complex({}, Layout)\n    ], Diagram.prototype, \"layout\", void 0);\n    __decorate([\n        Complex({}, CommandManager)\n    ], Diagram.prototype, \"commandManager\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dataLoaded\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"dragOver\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"click\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"historyChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"historyStateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"doubleClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"textEdit\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"scrollChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"selectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"sizeChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"connectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"sourcePointChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"targetPointChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"propertyChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"positionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"keyUp\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"keyDown\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"animationComplete\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"rotateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"collectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"fixedUserHandleClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseDown\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseUp\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onUserHandleMouseLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"segmentCollectionChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"onImageLoad\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"expandStateChange\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseEnter\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseLeave\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"mouseOver\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuBeforeItemRender\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"commandExecute\", void 0);\n    __decorate([\n        Collection([], Layer)\n    ], Diagram.prototype, \"layers\", void 0);\n    __decorate([\n        Event()\n    ], Diagram.prototype, \"drop\", void 0);\n    return Diagram;\n}(Component));\nexport { Diagram };\n"]},"metadata":{},"sourceType":"module"}