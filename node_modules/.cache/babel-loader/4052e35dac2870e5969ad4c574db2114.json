{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/ChatItem.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'ws://192.168.0.2:5001/wsItem';\n\nconst ChatItem = () => {\n  _s();\n\n  const [user, setUser] = useState('Tarzan');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const socket = useRef(null);\n  const [isPaused, setPause] = useState(false);\n  const [reconnect, setRecconect] = useState(false);\n  useEffect(() => {\n    console.log(\"Set socket after = \", socket.current);\n\n    if (!socket.current || reconnect === false) {\n      console.log(\"Set socket = \", socket.current);\n      socket.current = new WebSocket(URL);\n\n      socket.current.onmessage = e => {\n        if (isPaused) return;\n        const message = JSON.parse(e.data);\n        console.log(\"e\", message);\n        setMessages([...messages]); //message, \n      };\n\n      socket.current.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected');\n        socket.current.send(JSON.parse({\n          id: '1'\n        }));\n      };\n\n      socket.current.onerror = e => {\n        console.log(\"eror\", e.data);\n      };\n\n      socket.current.onclose = e => {\n        console.log(\"CONNECTION CLOSED\", e.data);\n        socket.current.close(1000, \"\");\n        setRecconect(true);\n      };\n    }\n\n    return () => {\n      if (socket.current) {\n        socket.current.close(1000, \"\");\n      }\n    };\n  }, [socket, reconnect]);\n  console.log(\"rerender ITEM\");\n  /*\n     useEffect(() => {\n         if (!socket.current) return;\n            socket.current.onmessage = e => {\n             if (isPaused) return;\n             const message = JSON.parse(e.data);\n             console.log(\"e\", message);\n             setMessages([message, ...messages]);\n         };\n     }, [isPaused]);*/\n\n  if (reconnect) {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setRecconect(!reconnect),\n      children: \"reconnect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"user\",\n      children: [\"Name :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user\",\n        placeholder: \"User\",\n        value: user,\n        onChange: e => setUser(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.reverse().map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: message.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 16\n        }, this), \": \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: message.tActual\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 39\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 6\n  }, this);\n};\n\n_s(ChatItem, \"lUF34QG07a0ZTWkdVlZJJhFG6oA=\");\n\n_c = ChatItem;\nexport default ChatItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatItem\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/ChatItem.tsx"],"names":["React","useState","useEffect","useRef","URL","ChatItem","user","setUser","message","setMessage","messages","setMessages","socket","isPaused","setPause","reconnect","setRecconect","console","log","current","WebSocket","onmessage","e","JSON","parse","data","onopen","send","id","onerror","onclose","close","target","value","reverse","map","index","name","tActual"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport IDataOrder from \"./Component/Data/IDataOrder\"\n\nconst URL = 'ws://192.168.0.2:5001/wsItem';\n\nconst ChatItem =() => {\n\tconst [user, setUser] = useState('Tarzan');\n  \tconst [message, setMessage] = useState([]);\n  \tconst [messages, setMessages] = useState([]);\n\n\t  const socket = useRef(null)  as any;\n\t \n\n      const [isPaused, setPause] = useState(false);\n\n\t  const [reconnect, setRecconect] = useState(false);\n  \n      useEffect(() => {\n\t\tconsole.log(\"Set socket after = \", socket.current);\n\t\tif (!socket.current || reconnect === false) {\n\t\t\tconsole.log(\"Set socket = \", socket.current);\n\t\t\tsocket.current = new WebSocket(URL) ;\n\t\t\tsocket.current.onmessage = (e: any) => {\n\t\t\t\tif (isPaused) return;\n\t\t\t\tconst message = JSON.parse(e.data)  as any;\n\t\t\t\tconsole.log(\"e\", message);\n\t\t\t\tsetMessages([...messages]); //message, \n\t\t\t};\n\n\t\t\tsocket.current.onopen = () => {\n\t\t\t\t// on connecting, do nothing but log it to the console\n\t\t\t\tconsole.log('connected')\n\t\t\t\tsocket.current.send(JSON.parse({ id: '1'}));\n\t\t\t}\n\n\t\t\t\n\n\t\t\tsocket.current.onerror = (e : any) => {\n\t\t\t\tconsole.log(\"eror\", e.data);\n\t\t\t};\n\n\t\t\tsocket.current.onclose = (e : any)=>{\n\t\t\t\tconsole.log(\"CONNECTION CLOSED\", e.data);\n\t\t\t\tsocket.current.close(1000, \"\");\n\n\t\t\t\tsetRecconect(true);\n\t\t\t}\n\t\t}\n\t\treturn () => {\n\t\t  if (socket.current) {\n\t\t\tsocket.current.close(1000, \"\");\n\t\t\t\n\t\t  }\n\t\t};\n\t  }, [socket,reconnect]);\n\n\n\t  console.log(\"rerender ITEM\")\n  \n\t  /*\n      useEffect(() => {\n          if (!socket.current) return;\n  \n          socket.current.onmessage = e => {\n              if (isPaused) return;\n              const message = JSON.parse(e.data);\n              console.log(\"e\", message);\n              setMessages([message, ...messages]);\n          };\n      }, [isPaused]);*/\n\n\t  if(reconnect)\n\t  {\n\t\t  return (\n\t\t\t<button onClick={() => setRecconect(!reconnect)}>\n\t\t\t reconnect\n\t\t\t</button>\n\t\t  )\n\t  }\n\n  \treturn (\n\t    <div>\n\t        <label htmlFor=\"user\">\n\t          Name :\n\t          <input\n\t            type=\"text\"\n\t            id=\"user\"\n\t            placeholder=\"User\"\n\t            value={user}\n\t            onChange={e => setUser(e.target.value)}\n\t          />\n\t        </label>\n\n\t        <ul>\n\t          {messages.reverse().map((message: IDataOrder, index) =>\n\t            <li key={index}>\n\t              <b>{message.name}</b>: <em>{message.tActual}</em>\n\t            </li>\n\t          )}\n\t        </ul>\n\n\t    </div>\n  \t)\n}\n\nexport default ChatItem;"]},"metadata":{},"sourceType":"module"}