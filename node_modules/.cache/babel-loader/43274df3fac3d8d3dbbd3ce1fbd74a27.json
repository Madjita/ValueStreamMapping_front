{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/AllCardsView/ViewCard_all_newAlgoritm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ViewCard from '../ViewCard';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { useActionCardVSM } from '../../../hooks/useActionCardVSM';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ViewCard_all_newAlgoritm = props => {\n  _s();\n\n  const [BDitems, setBDItem] = useState();\n  const {\n    cardVSMs,\n    loading\n  } = useTypedSelector(state => state.cardVSM);\n  const {\n    cardVSMLoading\n  } = useActionCardVSM();\n  const [card, setCard] = useState(cardVSMs);\n  let cardSections = new Array();\n  let etapSection = new Array();\n  console.log(\"props.sectionLogic_views: \", props.sectionLogic_views);\n\n  for (let index = 0; index < props.sectionLogic_views.sectionEtap_views.length; index++) {\n    const element = props.sectionsCard.sections[index];\n\n    if (index === 0) {\n      etapSection.push(element);\n    } else {\n      if (element.etapNumeric === etapSection[0].etapNumeric) {\n        etapSection.push(element);\n      } else {\n        let cardSection = new Object();\n        cardSection.sections = etapSection.slice();\n        cardSections.push(cardSection);\n        etapSection = new Array();\n        etapSection.push(element);\n      }\n    }\n  }\n\n  let cardSection = new Object();\n  cardSection.sections = etapSection.slice();\n  cardSections.push(cardSection);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        marginBottom: '150px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        action: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"settings\",\n          children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this),\n        title: '\\\"' + props.sectionsCard.name + '\\\"',\n        sx: {\n          fontWeight: 'bold',\n          color: 'white',\n          backgroundColor: '#575757'\n        },\n        style: {\n          color: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        sx: {\n          backgroundColor: 'rgba(0, 0, 0, .03)'\n        },\n        children: /*#__PURE__*/_jsxDEV(ViewCard, {\n          sections: cardSections\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ViewCard_all_newAlgoritm, \"o5F3S6OzNKhEPEneNJdzXvPG1yg=\", false, function () {\n  return [useTypedSelector, useActionCardVSM];\n});\n\n_c = ViewCard_all_newAlgoritm;\nexport default ViewCard_all_newAlgoritm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewCard_all_newAlgoritm\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/AllCardsView/ViewCard_all_newAlgoritm.tsx"],"names":["React","useState","ViewCard","Card","CardHeader","CardContent","IconButton","SettingsIcon","useActionCardVSM","useTypedSelector","ViewCard_all_newAlgoritm","props","BDitems","setBDItem","cardVSMs","loading","state","cardVSM","cardVSMLoading","card","setCard","cardSections","Array","etapSection","console","log","sectionLogic_views","index","sectionEtap_views","length","element","sectionsCard","sections","push","etapNumeric","cardSection","Object","slice","marginBottom","name","fontWeight","color","backgroundColor"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\n\nimport IDataCardSection from '../../Data/IDataCardSection'\nimport IDataOrderItem from '../../Data/IDataOrderItem'\nimport Divider from '@material-ui/core/Divider';\nimport ViewCard from '../ViewCard'\n\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { Box } from '@material-ui/system';\n\n\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardContent from '@material-ui/core/CardContent'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\nimport IDataVSM from '../../Data/IDataVSM'\nimport IDataProduction from '../../Data/IDataProduction';\nimport IDataCardVSM from '../../Data/IDataCardVSM';\nimport { useCardVSMActionType, useProductionCardVSM } from '../../../type/useCardVSMType';\n\nimport { useActionCardVSM } from '../../../hooks/useActionCardVSM';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\nimport IDataOrder from '../../Data/IDataOrder';\nimport { MyCards, OrderMy } from '../../../type/useOrdersType';\nimport { SectionLogic_view } from '../../Data/IDataOrder/IDataOrder';\n\n\n\nconst ViewCard_all_newAlgoritm =  (props: {sectionLogic_views: SectionLogic_view}) => {\n\n    const [BDitems, setBDItem] = useState<IDataOrderItem[]>();\n\n    const {cardVSMs, loading} = useTypedSelector(state => state.cardVSM);\n    const {cardVSMLoading} = useActionCardVSM()\n\n    const [card, setCard] = useState(cardVSMs);\n\n    \n    let cardSections = new Array as IDataCardSection[];\n    let etapSection = new Array as IDataCardVSM[];\n\n    console.log(\"props.sectionLogic_views: \", props.sectionLogic_views)\n\n    for (let index = 0; index < props.sectionLogic_views.sectionEtap_views.length; index++) \n    {\n        const element = props.sectionsCard.sections[index];\n\n        if(index === 0)\n        {\n            etapSection.push(element);\n        }\n        else\n        {\n            if(element.etapNumeric === etapSection[0].etapNumeric)\n            {\n                etapSection.push(element);\n            }\n            else\n            {\n                let cardSection = new Object as IDataCardSection;\n                cardSection.sections = etapSection.slice()\n                cardSections.push(cardSection);\n\n                etapSection = new Array as IDataCardVSM[];\n\n                etapSection.push(element);\n            }\n        }\n    }\n\n    let cardSection = new Object as IDataCardSection;\n    cardSection.sections = etapSection.slice()\n    cardSections.push(cardSection);\n\n\n    return(\n        <div>\n        <Card sx={{marginBottom: '150px'}}>\n            <CardHeader\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <SettingsIcon />\n                    </IconButton>\n                }\n                title={'\\\"'+props.sectionsCard.name + '\\\"'}\n                sx={{fontWeight: 'bold',color: 'white', backgroundColor: '#575757'}}\n                style={{color: 'white'}}\n            >\n                \n            </CardHeader>\n            <CardContent sx={{backgroundColor: 'rgba(0, 0, 0, .03)'}}>\n                <ViewCard sections={cardSections} /> \n           </CardContent>\n        </Card>\n        </div>\n\n    )\n\n\n    \n}\n\n\nexport default ViewCard_all_newAlgoritm;"]},"metadata":{},"sourceType":"module"}