{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/SVG/Triangle/Triangle.js\";\nimport React from \"react\"; //import styled from 'styled-components'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Triangle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.findPoint = (percent, x, y) => {\n      let H_pointPx = y * percent / 100; // Нашли сколько же пикселей занимает по высоте наши проценты\n\n      let pointPx = H_pointPx; // находим точку по высоте если считать снизу\n\n      return this.findPointSin(pointPx, x / 2, y); // находим длину по X\n    };\n\n    this.findPointSin = (b, a1, b1) => {\n      return b * a1 / b1;\n    };\n\n    this.returnStr = () => {\n      let x = this.state.width;\n      let y = this.state.height;\n      let percent = this.state.percent;\n      let point_Y = y - y * percent / 100;\n      let point_X = this.findPoint(percent, x, y);\n      let percentByze = 10;\n      let percentByze_new = percentByze * percent / 100;\n      percentByze -= percentByze_new;\n      let byze = point_Y + y * percentByze / 100; // плюс 10%\n\n      let point_Y_2 = point_Y;\n      let point_X_2 = x - point_X;\n      return \"M0,\" + y + \" \" + point_X + \",\" + point_Y + \" Q \" + x / 2 + \",\" + byze + \" \" + point_X_2 + \",\" + point_Y_2 + \" \" + point_X_2 + \",\" + point_Y_2 + \" \" + x + \",\" + y;\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      width: this.props.width,\n      height: this.props.height,\n      percent: this.props.percent,\n      min: this.props.min,\n      max: this.props.max,\n      value: this.props.value\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      let newValue = this.state.percent + 1;\n\n      if (newValue > 100) {\n        newValue = 0;\n      }\n\n      this.setState({\n        percent: newValue\n      }); //Math.floor(Math.random() * this.state.height)\n    }, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    let {\n      width,\n      height\n    } = this.state;\n    let viewBox = \"0 0 \" + width + \" \" + height;\n    let pointsPolygon = \"0,\" + height + \" \" + width / 2 + \",0 \" + width + \" \" + height;\n    let D = this.returnStr();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.percent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: width,\n        height: height,\n        viewBox: viewBox,\n        fill: \"none\",\n        stroke: \"#000000\",\n        strokeWidth: \"0.5\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: pointsPolygon,\n          fill: \"lightgray\",\n          stroke: \"lightgray\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: D,\n            fill: \"green\",\n            stroke: \"green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 10\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Triangle;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/SVG/Triangle/Triangle.js"],"names":["React","Triangle","Component","constructor","props","findPoint","percent","x","y","H_pointPx","pointPx","findPointSin","b","a1","b1","returnStr","state","width","height","point_Y","point_X","percentByze","percentByze_new","byze","point_Y_2","point_X_2","error","isLoaded","min","max","value","componentDidMount","interval","setInterval","newValue","setState","componentWillUnmount","clearInterval","render","viewBox","pointsPolygon","D"],"mappings":"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","sourcesContent":["import React from \"react\";\n//import styled from 'styled-components'\n\n\nclass Triangle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n\t\t  width: this.props.width,\n\t\t  height: this.props.height,\n\t\t  percent: this.props.percent,\n\n\t\t  min: this.props.min,\n\t\t  max: this.props.max,\n\t\t  value: this.props.value\n        };\n      }\n\n\t   findPoint =(percent,x,y)=>\n\t\t{\n\t\t\tlet H_pointPx = (y*percent)/100 // Нашли сколько же пикселей занимает по высоте наши проценты\n\t\t\tlet pointPx = H_pointPx // находим точку по высоте если считать снизу\n\n\t\t\treturn this.findPointSin(pointPx,x/2,y) // находим длину по X\n\t\t}\n\n\t\tfindPointSin = (b,a1,b1) =>\n\t\t{\n\t\t\treturn (b*a1)/b1\n\t\t}\n\n\t\treturnStr=()=>\n\t\t{\n\t\t\tlet x = this.state.width;\n\t\t\tlet y = this.state.height;\n\t\t\tlet percent = this.state.percent\n\t\t\tlet point_Y = y - (y*percent)/100;\n\t\t\tlet point_X = this.findPoint(percent,x,y)\n\t\t\tlet percentByze = 10;\n\n\t\t\tlet percentByze_new = percentByze*percent/100\n\t\t\t\n\t\t\tpercentByze -=percentByze_new;\t\n\n\t\t\tlet byze = point_Y+((y*percentByze)/100) // плюс 10%\n\t\t\t\n\n\t\t\tlet point_Y_2 = point_Y\n\t\t\tlet point_X_2 = x - point_X\n\n\t\t\treturn (\"M0,\"+y+\" \"+point_X+\",\"+point_Y+\" Q \"+x/2+\",\"+byze+\" \"+point_X_2+\",\"+point_Y_2+\" \"+point_X_2+\",\"+point_Y_2+\" \"+x+\",\"+y)\n\t\t}\n\n\t\tcomponentDidMount() {\n\t\t\tthis.interval = setInterval(() => {\n\t\t\t\tlet newValue = this.state.percent+1;\n\t\t\t\tif(newValue > 100)\n\t\t\t\t{\n\t\t\t\t\tnewValue = 0;\n\t\t\t\t}\n\t\t\t\tthis.setState({percent: newValue}) //Math.floor(Math.random() * this.state.height)\n\t\t\t},100)\n\t\t}\n\n\t\tcomponentWillUnmount() {\n\t\t\tclearInterval(this.interval);\n\t\t  }\n\n      render() {\n\t\tlet {width,height} = this.state\n\t\tlet viewBox = \"0 0 \"+width+\" \"+height;\n\t\tlet pointsPolygon = \"0,\"+height+\" \"+width/2+\",0 \"+width+\" \"+height;\n\t\tlet D = this.returnStr()\n        return (\n\t\t\t<div>\n\t\t\t\t<p>{this.state.percent}</p>\n\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" width={width} height={height} viewBox={viewBox} fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n\t\t\t\t  <polygon points={pointsPolygon} fill=\"lightgray\" stroke=\"lightgray\" strokeWidth=\"1\"></polygon>\n\t\t\t\t  <g><path d={D} fill=\"green\" stroke=\"green\"></path></g>\n\t\t\t\t</svg>\n\t\t\t\t\n\t\t\t</div>\n        )\n      }\n}\n\n\nexport default Triangle;"]},"metadata":{},"sourceType":"module"}