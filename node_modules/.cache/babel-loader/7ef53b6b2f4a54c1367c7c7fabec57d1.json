{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js\";\nimport React from \"react\";\nimport { DiagramComponent, HierarchicalTree, MindMap, RadialTree, ComplexHierarchicalTree, DataBinding, Snapping, PrintAndExport, BpmnDiagrams, SymmetricLayout, ConnectorBridging, UndoRedo, LayoutAnimation, DiagramContextMenu, ConnectorEditing, Inject, SnapConstraints, DiagramTools } from \"@syncfusion/ej2-react-diagrams\"; //import { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationDataLabel, PieSeries, AccumulationLegend, AccumulationTooltip } from '@syncfusion/ej2-react-charts';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet diagramInstance = DiagramComponent;\nvar template = diagramTemplate;\n\nfunction findGIP(a, b) {\n  return Math.sqrt(a * a + b * b);\n}\n\nfunction findPixelProsent(need, heigh) {\n  return need * heigh / 100;\n}\n\nfunction sin(b, a) {\n  return b / a; //  прилижайщий катит к другому катиту\n}\n\nfunction findPoint(percent, x, y) {\n  let H_pointPx = y * percent / 100; // Нашли сколько же пикселей занимает по высоте наши проценты\n\n  let pointPx = H_pointPx; // находим точку по высоте если считать снизу\n\n  return findPointSin(pointPx, x / 2, y); // находим длину по X\n}\n\nfunction findPointSin(b, a1, b1) {\n  console.log(\"b= \", b, \"a1= \", a1, \"b1 = \", b1);\n  return b * a1 / b1;\n}\n\nfunction findA(c1, b) {\n  return Math.sqrt(c1 * c1 - b * b);\n}\n\nfunction diagramTemplate(props) {\n  let point = findPoint(100, 100, 100);\n  console.log(\"point= \", point); //let points = \"0,100 \"+find+\",\"+point+\" \"+find+\",0 100,100\"\n\n  if (props.id === \"pie\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"80\",\n        height: \"80\",\n        viewBox: \"0 0 100 100\",\n        fill: \"none\",\n        stroke: \"#000000\",\n        strokeWidth: \"0.5\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className: \"feather feather-database\",\n        children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0,100 50,0 100,100\",\n          fill: \"violet\",\n          stroke: \"purple\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 50,0 100,100\",\n            fill: \"gray\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 40,20 60,20 100,100\",\n            fill: \"red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 30,40 70,40 100,100\",\n            fill: \"yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 20,60 80,60 100,100\",\n            fill: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 10,80 90,80 100,100\",\n            fill: \"green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this);\n  }\n\n  if (props.id === \"pieCircl\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"80\",\n        height: \"80\",\n        viewBox: \"0 0 100 100\",\n        fill: \"none\",\n        stroke: \"#000000\",\n        strokeWidth: \"0.5\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className: \"feather feather-database\",\n        children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0,100 50,0 100,100\",\n          fill: \"lightgray\",\n          stroke: \"lightgray\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 10,80 Q 50,90 90,80 90,80 100,100\",\n            fill: \"green\",\n            stroke: \"green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (props.id === \"datastore\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: \"80\",\n        height: \"80\",\n        viewBox: \"0 0 100 100\",\n        fill: \"none\",\n        stroke: \"#000000\",\n        strokeWidth: \"0.5\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className: \"feather feather-database\",\n        children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: \"0,100 50,0 100,100\",\n          fill: \"violet\",\n          stroke: \"purple\",\n          strokeWidth: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 50,0 100,100\",\n            fill: \"gray\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 40,20 C 90,80  60,20 100,100\",\n            fill: \"red\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 30,40 C 90,100  70,40 100,100\",\n            fill: \"yellow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 20,60 C 100,100  80,60 100,100\",\n            fill: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M0,100 10,80 C 90,100  90,80 100,100\",\n            fill: \"green\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n}\n\nclass Diagram extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.diagramInstance = diagramInstance;\n    this.state = {\n      myStyle: this.props.myStyle,\n      diagram: this.props.diagram,\n      connectors: this.props.connectors,\n      update: true\n    };\n  }\n\n  // A node is created and stored in nodes array.\n  async api(ip, port, command) {\n    // GET request using fetch with async/await\n    const response = await fetch(\"http://\" + ip + \":\" + port + command);\n    const data = await response.json();\n    return data;\n  }\n\n  async create_customer(element) {\n    //let http = \"http://\"+window.ip+\":\"+window.port\n    console.log(\"element\", element.oldProperties.id);\n\n    switch (element.oldProperties.id) {\n      case \"Customer\":\n        {\n          //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n          //const response = await fetch(http+\"/api/reason_customer/insert/\"+element.properties.id+\"/\"+element.properties.offsetX+\"/\"+element.properties.offsetY)\n          //const data = await response;\n          //return data\n          break;\n        }\n\n      case \"Process\":\n        {\n          break;\n        }\n\n      case \"External_Shipment\":\n        {\n          break;\n        }\n\n      case \"Inventory_customer_supplier\":\n        {\n          break;\n        }\n\n      case \"Production_control\":\n        {\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n\n  update_position(element) {\n    var myData = [];\n    element.forEach(item => {\n      myData.push({\n        id: item.properties.id,\n        offsetX: item.properties.offsetX,\n        offsetY: item.properties.offsetY\n      });\n    }); //console.log(JSON.stringify(myData))\n    //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n    //let http = \"http://\"+window.ip+\":\"+window.port\n    //fetch(http+\"/api/vsm/update_position/\")\n    //.then(response => response.json());\n  }\n\n  componentDidMount() {\n    console.log(\"DiagramViewBox componentDidMount\");\n    this.interval = setInterval(() => {\n      let rand = Math.floor(Math.random() * 60);\n      diagramInstance.nodes[1].annotations[0].content = rand.toString();\n      console.log(diagramInstance.nodes[1].annotations[0]);\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    console.log(\"DiagramViewBox componentWillUnmount\");\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      myStyle,\n      diagram\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(DiagramComponent, {\n      id: \"diagram\",\n      ref: diagram => diagramInstance = diagram,\n      width: '100%',\n      height: '100%',\n      snapSettings: {\n        constraints: SnapConstraints.None\n      } // Add node\n      ,\n      nodes: diagram,\n      connectors: this.state.connectors,\n      drop: e => {\n        //console.log(\"drop\",e)\n        //console.log(\"drop length\",e.element.annotations.length)\n        this.create_customer(e.element); //e.element.annotations[0].content = \"#1\"\n        //e.newValue[0].annotations[0].content = \"#1\"\n      },\n      positionChange: e => {\n        switch (e.state) {\n          case \"Completed\":\n            {\n              console.log(\"position\", e.source.nodes);\n              if (e.source.nodes !== undefined) this.update_position(e.source.nodes);\n              break;\n            }\n\n          case \"Progress\":\n            {\n              break;\n            }\n\n          case \"Start\":\n            {\n              break;\n            }\n\n          default:\n            break;\n        }\n      },\n      dragTargetEnd: e => {\n        console.log(\"dragTargetEnd\", e);\n      },\n      tool: DiagramTools.ZoomPan\n      /* selectionChange={(e)=>{\n       \n         console.log(\"SELECT\",e.newValue)\n       }}*/\n      ,\n      created: () => {\n        console.log(\"render Diagram = \", this.children); //console.log(diagramInstance.getActiveLayer())\n        //this.diagramInstance.getActiveLayer();\n        // diagramInstance.tool = DiagramTools.ZoomPan;\n        //diagramInstance.dataBind();\n\n        diagramInstance.scrollChange = args => {//Obtains the pan status\n          //let panStatus = args.panState;\n        }; //diagramInstance.tool = DiagramTools.ZoomPan;\n        //diagramInstance.dataBind();\n\n        /*diagramInstance.scrollChange = { args: IScrollChangeEventArgs => {\n        //Obtains the pan status\n        console.log(IScrollChangeEventArgs)\n        let panStatus = IScrollChangeEventArgs.panState;}}\n        }*/\n\n      } //Disables mouse over tooltip at runtime\n      ,\n      tooltip: null,\n      style: myStyle,\n      nodeTemplate: template.bind(this),\n      children: /*#__PURE__*/_jsxDEV(Inject, {\n        width: '200px',\n        height: '200px',\n        services: [HierarchicalTree, MindMap, RadialTree, ComplexHierarchicalTree, DataBinding, Snapping, PrintAndExport, BpmnDiagrams, SymmetricLayout, ConnectorBridging, UndoRedo, LayoutAnimation, DiagramContextMenu, ConnectorEditing]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Diagram;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/Diagram.js"],"names":["React","DiagramComponent","HierarchicalTree","MindMap","RadialTree","ComplexHierarchicalTree","DataBinding","Snapping","PrintAndExport","BpmnDiagrams","SymmetricLayout","ConnectorBridging","UndoRedo","LayoutAnimation","DiagramContextMenu","ConnectorEditing","Inject","SnapConstraints","DiagramTools","diagramInstance","template","diagramTemplate","findGIP","a","b","Math","sqrt","findPixelProsent","need","heigh","sin","findPoint","percent","x","y","H_pointPx","pointPx","findPointSin","a1","b1","console","log","findA","c1","props","point","id","Diagram","PureComponent","constructor","state","myStyle","diagram","connectors","update","api","ip","port","command","response","fetch","data","json","create_customer","element","oldProperties","update_position","myData","forEach","item","push","properties","offsetX","offsetY","componentDidMount","interval","setInterval","rand","floor","random","nodes","annotations","content","toString","componentWillUnmount","clearInterval","render","constraints","None","e","source","undefined","ZoomPan","children","scrollChange","args","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,uBALF,EAMEC,WANF,EAOEC,QAPF,EAQEC,cARF,EASEC,YATF,EAUEC,eAVF,EAWEC,iBAXF,EAYEC,QAZF,EAaEC,eAbF,EAcEC,kBAdF,EAeEC,gBAfF,EAgBEC,MAhBF,EAiBEC,eAjBF,EAkBEC,YAlBF,QAmBO,gCAnBP,C,CAqBA;;;AAIA,IAAIC,eAAe,GAAGlB,gBAAtB;AAIA,IAAImB,QAAQ,GAAGC,eAAf;;AAGA,SAASC,OAAT,CAAiBC,CAAjB,EAAmBC,CAAnB,EACA;AACE,SAAOC,IAAI,CAACC,IAAL,CAAUH,CAAC,GAACA,CAAF,GAAIC,CAAC,GAACA,CAAhB,CAAP;AACD;;AAED,SAASG,gBAAT,CAA0BC,IAA1B,EAA+BC,KAA/B,EACA;AACE,SAAQD,IAAI,GAACC,KAAN,GAAa,GAApB;AACD;;AAED,SAASC,GAAT,CAAaN,CAAb,EAAeD,CAAf,EACA;AACE,SAAOC,CAAC,GAACD,CAAT,CADF,CACa;AACZ;;AAGD,SAASQ,SAAT,CAAmBC,OAAnB,EAA2BC,CAA3B,EAA6BC,CAA7B,EACA;AACG,MAAIC,SAAS,GAAID,CAAC,GAACF,OAAH,GAAY,GAA5B,CADH,CACmC;;AAChC,MAAII,OAAO,GAAGD,SAAd,CAFH,CAE2B;;AAExB,SAAOE,YAAY,CAACD,OAAD,EAASH,CAAC,GAAC,CAAX,EAAaC,CAAb,CAAnB,CAJH,CAIsC;AACrC;;AAED,SAASG,YAAT,CAAsBb,CAAtB,EAAwBc,EAAxB,EAA2BC,EAA3B,EACA;AACGC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBjB,CAAlB,EAAoB,MAApB,EAA2Bc,EAA3B,EAA8B,OAA9B,EAAsCC,EAAtC;AACA,SAAQf,CAAC,GAACc,EAAH,GAAOC,EAAd;AACF;;AAGD,SAASG,KAAT,CAAeC,EAAf,EAAkBnB,CAAlB,EACA;AACE,SAAOC,IAAI,CAACC,IAAL,CAAUiB,EAAE,GAACA,EAAH,GAAMnB,CAAC,GAACA,CAAlB,CAAP;AACD;;AAED,SAASH,eAAT,CAAyBuB,KAAzB,EAA+B;AAC7B,MAAIC,KAAK,GAAGd,SAAS,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAArB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBI,KAAtB,EAF6B,CAI7B;;AACA,MAAID,KAAK,CAACE,EAAN,KAAa,KAAjB,EAAwB;AACpB,wBACE;AAAA,6BACA;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,KAAK,EAAC,IAA9C;AAAmD,QAAA,MAAM,EAAC,IAA1D;AAA+D,QAAA,OAAO,EAAC,aAAvE;AAAqF,QAAA,IAAI,EAAC,MAA1F;AAAiG,QAAA,MAAM,EAAC,SAAxG;AAAkH,QAAA,WAAW,EAAC,KAA9H;AAAoI,QAAA,aAAa,EAAC,OAAlJ;AAA0J,QAAA,cAAc,EAAC,OAAzK;AAAiL,QAAA,SAAS,EAAC,0BAA3L;AAAA,gCAEE;AAAS,UAAA,MAAM,EAAC,oBAAhB;AAAqC,UAAA,IAAI,EAAC,QAA1C;AAAmD,UAAA,MAAM,EAAC,QAA1D;AAAmE,UAAA,WAAW,EAAC;AAA/E;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,qBAAR;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,4BAAR;AAAqC,YAAA,IAAI,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,4BAAR;AAAqC,YAAA,IAAI,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,4BAAR;AAAqC,YAAA,IAAI,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,4BAAR;AAAqC,YAAA,IAAI,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBH;;AAED,MAAIF,KAAK,CAACE,EAAN,KAAa,UAAjB,EAA6B;AAC3B,wBACE;AAAA,6BACA;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,KAAK,EAAC,IAA9C;AAAmD,QAAA,MAAM,EAAC,IAA1D;AAA+D,QAAA,OAAO,EAAC,aAAvE;AAAqF,QAAA,IAAI,EAAC,MAA1F;AAAiG,QAAA,MAAM,EAAC,SAAxG;AAAkH,QAAA,WAAW,EAAC,KAA9H;AAAoI,QAAA,aAAa,EAAC,OAAlJ;AAA0J,QAAA,cAAc,EAAC,OAAzK;AAAiL,QAAA,SAAS,EAAC,0BAA3L;AAAA,gCAEE;AAAS,UAAA,MAAM,EAAC,oBAAhB;AAAqC,UAAA,IAAI,EAAC,WAA1C;AAAsD,UAAA,MAAM,EAAC,WAA7D;AAAyE,UAAA,WAAW,EAAC;AAArF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAOE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,0CAAR;AAAmD,YAAA,IAAI,EAAC,OAAxD;AAAgE,YAAA,MAAM,EAAC;AAAvE;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBH;;AAEC,MAAGF,KAAK,CAACE,EAAN,KAAa,WAAhB,EACA;AACE,wBACE;AAAA,6BACE;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,KAAK,EAAC,IAA9C;AAAmD,QAAA,MAAM,EAAC,IAA1D;AAA+D,QAAA,OAAO,EAAC,aAAvE;AAAqF,QAAA,IAAI,EAAC,MAA1F;AAAiG,QAAA,MAAM,EAAC,SAAxG;AAAkH,QAAA,WAAW,EAAC,KAA9H;AAAoI,QAAA,aAAa,EAAC,OAAlJ;AAA0J,QAAA,cAAc,EAAC,OAAzK;AAAiL,QAAA,SAAS,EAAC,0BAA3L;AAAA,gCAEE;AAAS,UAAA,MAAM,EAAC,oBAAhB;AAAqC,UAAA,IAAI,EAAC,QAA1C;AAAmD,UAAA,MAAM,EAAC,QAA1D;AAAmE,UAAA,WAAW,EAAC;AAA/E;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,qBAAR;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,qCAAR;AAA8C,YAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,sCAAR;AAA+C,YAAA,IAAI,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,uCAAR;AAAgD,YAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAA,iCAAG;AAAM,YAAA,CAAC,EAAC,sCAAR;AAA+C,YAAA,IAAI,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;AACF;;AAED,MAAMC,OAAN,SAAsB/C,KAAK,CAACgD,aAA5B,CAA0C;AACtCC,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAWjBzB,eAXiB,GAWEA,eAXF;AAEf,SAAK+B,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWO,OADT;AAEXC,MAAAA,OAAO,EAAE,KAAKR,KAAL,CAAWQ,OAFT;AAGXC,MAAAA,UAAU,EAAE,KAAKT,KAAL,CAAWS,UAHZ;AAIXC,MAAAA,MAAM,EAAE;AAJG,KAAb;AAQD;;AAED;AAGS,QAAHC,GAAG,CAACC,EAAD,EAAIC,IAAJ,EAASC,OAAT,EAAkB;AACzB;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAUJ,EAAV,GAAa,GAAb,GAAiBC,IAAjB,GAAsBC,OAAvB,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,WAAOD,IAAP;AACD;;AAGoB,QAAfE,eAAe,CAACC,OAAD,EACrB;AACE;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBuB,OAAO,CAACC,aAAR,CAAsBnB,EAA5C;;AAEA,YAAOkB,OAAO,CAACC,aAAR,CAAsBnB,EAA7B;AAEE,WAAK,UAAL;AAAgB;AACd;AAEA;AACA;AACA;AACA;AACD;;AACD,WAAK,SAAL;AAAe;AACb;AACD;;AACD,WAAK,mBAAL;AAAyB;AACvB;AACD;;AACD,WAAK,6BAAL;AACA;AACI;AACH;;AACD,WAAK,oBAAL;AACA;AACI;AACH;;AACD;AACE;AAzBJ;AA8BD;;AAEFoB,EAAAA,eAAe,CAACF,OAAD,EACd;AACE,QAAIG,MAAM,GAAG,EAAb;AACAH,IAAAA,OAAO,CAACI,OAAR,CAAgBC,IAAI,IAAG;AACrBF,MAAAA,MAAM,CAACG,IAAP,CAAY;AACVxB,QAAAA,EAAE,EAAEuB,IAAI,CAACE,UAAL,CAAgBzB,EADV;AAEV0B,QAAAA,OAAO,EAAEH,IAAI,CAACE,UAAL,CAAgBC,OAFf;AAGVC,QAAAA,OAAO,EAAEJ,IAAI,CAACE,UAAL,CAAgBE;AAHf,OAAZ;AAKD,KAND,EAFF,CAUE;AACA;AACA;AACA;AACA;AACD;;AAGDC,EAAAA,iBAAiB,GAAG;AAClBlC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,SAAKkC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,UAAIC,IAAI,GAAGpD,IAAI,CAACqD,KAAL,CAAWrD,IAAI,CAACsD,MAAL,KAAgB,EAA3B,CAAX;AACA5D,MAAAA,eAAe,CAAC6D,KAAhB,CAAsB,CAAtB,EAAyBC,WAAzB,CAAqC,CAArC,EAAwCC,OAAxC,GAAkDL,IAAI,CAACM,QAAL,EAAlD;AACA3C,MAAAA,OAAO,CAACC,GAAR,CAAYtB,eAAe,CAAC6D,KAAhB,CAAsB,CAAtB,EAAyBC,WAAzB,CAAqC,CAArC,CAAZ;AACD,KAJ0B,EAIxB,IAJwB,CAA3B;AAKD;;AAEDG,EAAAA,oBAAoB,GAAG;AACrB5C,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA4C,IAAAA,aAAa,CAAC,KAAKV,QAAN,CAAb;AACD;;AAIDW,EAAAA,MAAM,GAAG;AAEP,UAAM;AAACnC,MAAAA,OAAD;AAASC,MAAAA;AAAT,QAAoB,KAAKF,KAA/B;AAGA,wBACA,QAAC,gBAAD;AAAmB,MAAA,EAAE,EAAC,SAAtB;AAAgC,MAAA,GAAG,EAAEE,OAAO,IAAKjC,eAAe,GAAGiC,OAAnE;AACA,MAAA,KAAK,EAAI,MADT;AAEA,MAAA,MAAM,EAAI,MAFV;AAGA,MAAA,YAAY,EAAE;AAAEmC,QAAAA,WAAW,EAAEtE,eAAe,CAACuE;AAA/B,OAHd,CAIA;AAJA;AAKA,MAAA,KAAK,EACHpC,OANF;AAQA,MAAA,UAAU,EACR,KAAKF,KAAL,CAAWG,UATb;AAYA,MAAA,IAAI,EAAGoC,CAAD,IAAK;AACT;AACA;AACA,aAAK1B,eAAL,CAAqB0B,CAAC,CAACzB,OAAvB,EAHS,CAIT;AAEA;AACD,OAnBD;AAqBA,MAAA,cAAc,EAAGyB,CAAD,IAAK;AAEnB,gBAAOA,CAAC,CAACvC,KAAT;AAEE,eAAK,WAAL;AAAiB;AACfV,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBgD,CAAC,CAACC,MAAF,CAASV,KAAhC;AACA,kBAAGS,CAAC,CAACC,MAAF,CAASV,KAAT,KAAmBW,SAAtB,EACE,KAAKzB,eAAL,CAAqBuB,CAAC,CAACC,MAAF,CAASV,KAA9B;AAEJ;AAAS;;AACT,eAAK,UAAL;AAAgB;AAAC;AAAO;;AACxB,eAAK,OAAL;AAAa;AAAC;AAAO;;AACrB;AAAU;AAVZ;AAeD,OAtCD;AAwCA,MAAA,aAAa,EAAGS,CAAD,IAAK;AAClBjD,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BgD,CAA5B;AACD,OA1CD;AA6CA,MAAA,IAAI,EACFvE,YAAY,CAAC0E;AAIhB;AACP;AACA;AACA;AArDQ;AAsDA,MAAA,OAAO,EACL,MAAM;AACJpD,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,KAAKoD,QAArC,EADI,CAEJ;AACA;AAGD;AACC;;AACA1E,QAAAA,eAAe,CAAC2E,YAAhB,GAA+BC,IAAI,IAAI,CACvC;AACA;AACA,SAHA,CARI,CAcJ;AACA;;AACA;AACZ;AACA;AACA;AACA;;AACW,OA5EH,CA+EI;AA/EJ;AAgFI,MAAA,OAAO,EACL,IAjFN;AAqFE,MAAA,KAAK,EAAI5C,OArFX;AAsFE,MAAA,YAAY,EAAE/B,QAAQ,CAAC4E,IAAT,CAAc,IAAd,CAtFhB;AAAA,6BA0FC,QAAC,MAAD;AAAS,QAAA,KAAK,EAAI,OAAlB;AACD,QAAA,MAAM,EAAI,OADT;AAEP,QAAA,QAAQ,EAAE,CACR9F,gBADQ,EAERC,OAFQ,EAGRC,UAHQ,EAIRC,uBAJQ,EAKRC,WALQ,EAMRC,QANQ,EAORC,cAPQ,EAQRC,YARQ,EASRC,eATQ,EAURC,iBAVQ,EAWRC,QAXQ,EAYRC,eAZQ,EAaRC,kBAbQ,EAcRC,gBAdQ;AAFH;AAAA;AAAA;AAAA;AAAA;AA1FD;AAAA;AAAA;AAAA;AAAA,YADA;AA+GD;;AApNmC;;AAwN1C,eAAegC,OAAf","sourcesContent":["import React from \"react\";\nimport { \n  DiagramComponent,\n  HierarchicalTree,\n  MindMap,\n  RadialTree,\n  ComplexHierarchicalTree,\n  DataBinding,\n  Snapping,\n  PrintAndExport,\n  BpmnDiagrams,\n  SymmetricLayout,\n  ConnectorBridging,\n  UndoRedo,\n  LayoutAnimation,\n  DiagramContextMenu,\n  ConnectorEditing,\n  Inject,\n  SnapConstraints,\n  DiagramTools,\n} from \"@syncfusion/ej2-react-diagrams\";\n\n//import { AccumulationChartComponent, AccumulationSeriesCollectionDirective, AccumulationSeriesDirective, AccumulationDataLabel, PieSeries, AccumulationLegend, AccumulationTooltip } from '@syncfusion/ej2-react-charts';\n\n\n\nlet diagramInstance = DiagramComponent;\n\n\n\nvar template = diagramTemplate;\n\n\nfunction findGIP(a,b)\n{\n  return Math.sqrt(a*a+b*b)\n}\n\nfunction findPixelProsent(need,heigh)\n{\n  return (need*heigh)/100\n}\n\nfunction sin(b,a)\n{\n  return b/a //  прилижайщий катит к другому катиту\n}\n\n\nfunction findPoint(percent,x,y)\n{\n   let H_pointPx = (y*percent)/100 // Нашли сколько же пикселей занимает по высоте наши проценты\n   let pointPx = H_pointPx // находим точку по высоте если считать снизу\n\n   return findPointSin(pointPx,x/2,y) // находим длину по X\n}\n\nfunction findPointSin(b,a1,b1)\n{\n   console.log(\"b= \",b,\"a1= \",a1,\"b1 = \",b1)\n   return (b*a1)/b1\n}\n\n\nfunction findA(c1,b)\n{\n  return Math.sqrt(c1*c1-b*b)\n}\n\nfunction diagramTemplate(props){\n  let point = findPoint(100,100,100)\n  console.log(\"point= \",point)\n\n  //let points = \"0,100 \"+find+\",\"+point+\" \"+find+\",0 100,100\"\n  if (props.id === \"pie\") {\n      return (\n        <div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-database\">\n          {/*<path d=\"M 0 0 0 100 100 100 100 0 0 0 L\"></path>*/}\n          <polygon points=\"0,100 50,0 100,100\" fill=\"violet\" stroke=\"purple\" strokeWidth=\"1\"></polygon>\n          <g><path d=\"M0,100 50,0 100,100\" fill=\"gray\" ></path></g>\n          <g><path d=\"M0,100 40,20 60,20 100,100\" fill=\"red\" ></path></g>\n          <g><path d=\"M0,100 30,40 70,40 100,100\" fill=\"yellow\" ></path></g>\n          <g><path d=\"M0,100 20,60 80,60 100,100\" fill=\"blue\"></path></g>\n          <g><path d=\"M0,100 10,80 90,80 100,100\" fill=\"green\" ></path></g>\n          \n          \n         \n          {/*<polyline points=\"0,100 10,80 90,80 100,100\" fill=\"green\" stroke=\"purple\" stroke-width=\"1\"></polyline>\n          <polyline points=\"10,80 20,60 80,60 90,80\" fill=\"blue\" stroke=\"purple\" stroke-width=\"2\"></polyline>\n    <polyline points=\"20,60 30,40 70,40 80,60\" fill=\"yellow\" stroke=\"purple\" stroke-width=\"2\"></polyline>*/}\n\n          \n        </svg>\n      </div>\n      );\n  }\n\n  if (props.id === \"pieCircl\") {\n    return (\n      <div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-database\">\n        {/*<path d=\"M 0 0 0 100 100 100 100 0 0 0 L\"></path>*/}\n        <polygon points=\"0,100 50,0 100,100\" fill=\"lightgray\" stroke=\"lightgray\" strokeWidth=\"1\"></polygon>\n        {/*<g><path d=\"M0,100 50,0 100,100\" fill=\"gray\" ></path></g>\n        <g><path d=\"M0,100 40,20 Q 50,25 60,20 60,20 100,100\" fill=\"red\" ></path></g>\n        <g><path d=\"M0,100 30,40 Q 50,50 70,40 70,40 100,100\" fill=\"yellow\" stroke=\"yellow\"></path></g>\n        <g><path d=\"M0,100 20,60 Q 50,70 80,60 80,60 100,100\" fill=\"blue\" stroke=\"blue\"></path></g>*/}\n        <g><path d=\"M0,100 10,80 Q 50,90 90,80 90,80 100,100\" fill=\"green\" stroke=\"green\"></path></g>\n        \n        \n       \n        {/*<polyline points=\"0,100 10,80 90,80 100,100\" fill=\"green\" stroke=\"purple\" stroke-width=\"1\"></polyline>\n        <polyline points=\"10,80 20,60 80,60 90,80\" fill=\"blue\" stroke=\"purple\" stroke-width=\"2\"></polyline>\n  <polyline points=\"20,60 30,40 70,40 80,60\" fill=\"yellow\" stroke=\"purple\" stroke-width=\"2\"></polyline>*/}\n\n        \n      </svg>\n    </div>\n    );\n}\n\n  if(props.id === \"datastore\")\n  {\n    return (\n      <div>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 100 100\" fill=\"none\" stroke=\"#000000\" strokeWidth=\"0.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-database\">\n          {/*<path d=\"M 0 0 0 100 100 100 100 0 0 0 L\"></path>*/}\n          <polygon points=\"0,100 50,0 100,100\" fill=\"violet\" stroke=\"purple\" strokeWidth=\"1\"></polygon>\n          <g><path d=\"M0,100 50,0 100,100\" fill=\"gray\" ></path></g>\n          <g><path d=\"M0,100 40,20 C 90,80  60,20 100,100\" fill=\"red\" ></path></g>\n          <g><path d=\"M0,100 30,40 C 90,100  70,40 100,100\" fill=\"yellow\" ></path></g>\n          <g><path d=\"M0,100 20,60 C 100,100  80,60 100,100\" fill=\"blue\"></path></g>\n          <g><path d=\"M0,100 10,80 C 90,100  90,80 100,100\" fill=\"green\" ></path></g>\n          \n         \n          {/*<polyline points=\"0,100 10,80 90,80 100,100\" fill=\"green\" stroke=\"purple\" stroke-width=\"1\"></polyline>\n          <polyline points=\"10,80 20,60 80,60 90,80\" fill=\"blue\" stroke=\"purple\" stroke-width=\"2\"></polyline>\n    <polyline points=\"20,60 30,40 70,40 80,60\" fill=\"yellow\" stroke=\"purple\" stroke-width=\"2\"></polyline>*/}\n\n          \n        </svg>\n      </div>\n      )\n  }\n}\n\nclass Diagram extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          myStyle: this.props.myStyle,\n          diagram: this.props.diagram,\n          connectors: this.props.connectors,\n          update: true,\n        };\n\n       \n      }\n      diagramInstance =  diagramInstance;\n      // A node is created and stored in nodes array.\n\n\n      async api(ip,port,command) {\n        // GET request using fetch with async/await\n        const response = await fetch(\"http://\"+ip+\":\"+port+command);\n        const data = await response.json();\n        return data\n      }\n\n\n      async create_customer(element)\n      {\n        //let http = \"http://\"+window.ip+\":\"+window.port\n        console.log(\"element\",element.oldProperties.id);\n\n        switch(element.oldProperties.id)\n        {\n          case \"Customer\":{\n            //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        \n            //const response = await fetch(http+\"/api/reason_customer/insert/\"+element.properties.id+\"/\"+element.properties.offsetX+\"/\"+element.properties.offsetY)\n            //const data = await response;\n            //return data\n            break;\n          }\n          case \"Process\":{\n            break;\n          }\n          case \"External_Shipment\":{\n            break;\n          }\n          case \"Inventory_customer_supplier\":\n          {\n              break;\n          }\n          case \"Production_control\":\n          {\n              break;\n          }\n          default:\n            break;\n        }\n\n        \n        \n      }\n\n     update_position(element)\n      {\n        var myData = []\n        element.forEach(item =>{\n          myData.push({\n            id: item.properties.id,\n            offsetX: item.properties.offsetX,\n            offsetY: item.properties.offsetY\n          })\n        })\n\n        //console.log(JSON.stringify(myData))\n        //api/reason_customer/insert/:Node_name_id/:offsetX/:offsetY\"\n        //let http = \"http://\"+window.ip+\":\"+window.port\n        //fetch(http+\"/api/vsm/update_position/\")\n        //.then(response => response.json());\n      }\n\n     \n      componentDidMount() {\n        console.log(\"DiagramViewBox componentDidMount\")\n        this.interval = setInterval(() => {\n          let rand = Math.floor(Math.random() * 60);\n          diagramInstance.nodes[1].annotations[0].content = rand.toString()\n          console.log(diagramInstance.nodes[1].annotations[0])\n        }, 1000);\n      }\n      \n      componentWillUnmount() {\n        console.log(\"DiagramViewBox componentWillUnmount\")\n        clearInterval(this.interval);\n      }\n\n      \n\n      render() {\n\n        const {myStyle,diagram} = this.state\n     \n\n        return (\n        <DiagramComponent  id=\"diagram\" ref={diagram => (diagramInstance = diagram)}\n        width = {'100%'}\n        height = {'100%'}\n        snapSettings={{ constraints: SnapConstraints.None }}\n        // Add node\n        nodes = {\n          diagram\n        }\n        connectors = {\n          this.state.connectors\n        }\n\n        drop={(e)=>{\n          //console.log(\"drop\",e)\n          //console.log(\"drop length\",e.element.annotations.length)\n          this.create_customer(e.element)\n          //e.element.annotations[0].content = \"#1\"\n        \n          //e.newValue[0].annotations[0].content = \"#1\"\n        }}\n\n        positionChange={(e)=>{\n\n          switch(e.state)\n          {\n            case \"Completed\":{\n              console.log(\"position\",e.source.nodes)\n              if(e.source.nodes !== undefined)\n                this.update_position(e.source.nodes)\n            \n            break;  }\n            case \"Progress\":{break;}\n            case \"Start\":{break;}\n            default:  break;\n          }\n          \n\n          \n        }}\n\n        dragTargetEnd={(e)=>{\n          console.log(\"dragTargetEnd\",e)\n        }}\n\n        \n        tool = {\n          DiagramTools.ZoomPan\n      }\n\n        \n       /* selectionChange={(e)=>{\n        \n          console.log(\"SELECT\",e.newValue)\n        }}*/\n        created = {\n          () => {\n            console.log(\"render Diagram = \",this.children)\n            //console.log(diagramInstance.getActiveLayer())\n            //this.diagramInstance.getActiveLayer();\n\n\n           // diagramInstance.tool = DiagramTools.ZoomPan;\n            //diagramInstance.dataBind();\n            diagramInstance.scrollChange = args => {\n            //Obtains the pan status\n            //let panStatus = args.panState;\n           }\n\n \n            //diagramInstance.tool = DiagramTools.ZoomPan;\n            //diagramInstance.dataBind();\n            /*diagramInstance.scrollChange = { args: IScrollChangeEventArgs => {\n            //Obtains the pan status\n            console.log(IScrollChangeEventArgs)\n            let panStatus = IScrollChangeEventArgs.panState;}}\n            }*/\n          }\n        }\n\n            //Disables mouse over tooltip at runtime\n            tooltip = {\n              null\n          }\n\n\n          style = {myStyle}\n          nodeTemplate={template.bind(this)}\n        \n\n       >\n         <Inject  width = {'200px'}\n        height = {'200px'}\n  services={[\n    HierarchicalTree,\n    MindMap,\n    RadialTree,\n    ComplexHierarchicalTree,\n    DataBinding,\n    Snapping,\n    PrintAndExport,\n    BpmnDiagrams,\n    SymmetricLayout,\n    ConnectorBridging,\n    UndoRedo,\n    LayoutAnimation,\n    DiagramContextMenu,\n    ConnectorEditing\n  ]}\n/>\n       </DiagramComponent>);\n      }\n}\n\n\nexport default Diagram;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}