{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInNewAlgoritmDefault.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\nimport { IDataColorOrderInDefault } from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault';\nimport { useHistory } from 'react-router';\nimport axios from 'axios';\nimport ip, { port } from '../../../global';\nimport moment from 'moment';\nimport OrderRole from '../../Data/OrderRole';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar simulationEnum;\n\n(function (simulationEnum) {\n  simulationEnum[\"Start\"] = \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n  simulationEnum[\"Stop\"] = \"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n})(simulationEnum || (simulationEnum = {}));\n\nconst CardOrderInNewAlgoritmDefault = props => {\n  _s();\n\n  const {\n    Start,\n    Stop\n  } = simulationEnum;\n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  }); //const [simulation, setSimulation] = useState(false)\n\n  const [order, setOrder] = useState(props.data);\n\n  if (props.data.name != order.name) {\n    setOrder(props.data);\n    setSimulation({\n      text: simulationEnum.Start,\n      color: IDataColorOrderInDefault.NotWork,\n      work: false\n    });\n  } //const {startSimulation, updateInfoOrder} = useActionOrders()\n\n\n  const startSimulation = async (name, sim) => {\n    let copyObjet = {\n      name: name,\n      simulation: sim\n    };\n    const response = await axios.post('http://' + ip + ':' + port + '/api/cardVSM/addorderinwork', JSON.stringify(copyObjet), {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status === 200) {\n      console.log(\"Add Ok\");\n    }\n  };\n\n  const onSimulation = () => {\n    console.log(\"order = \", order);\n\n    if (simulation.work) {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Stop,\n        color: IDataColorOrderInDefault.Stoped\n      });\n      startSimulation(order.name, sim);\n    } else {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Start,\n        color: IDataColorOrderInDefault.InWork\n      });\n      startSimulation(order.name, sim);\n    } // let newObj = {...order, simulation: !simulation};\n    //setSimulation(newObj.simulation);\n    //setOrder(newObj);\n    //startSimulation(newObj);\n\n  }; //let flag = (simulation.text === simulationEnum.Stop && simulation.work)\n\n\n  const timer = useRef(null);\n\n  const GetInformation = async () => {\n    let copyObjet = {\n      name: order.name,\n      simulation: order.simulation\n    };\n    const response = await axios.post('http://' + ip + ':' + port + '/api/cardVSM/updateInfoOrder', JSON.stringify(copyObjet), {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status === 200) {\n      let responseData = JSON.parse(JSON.stringify(response.data));\n\n      if (responseData.simulation === false && responseData.orderRole === OrderRole.Archive) {\n        setSimulation({ ...simulation,\n          work: false,\n          text: Stop,\n          color: IDataColorOrderInDefault.Done\n        });\n      }\n\n      setOrder(responseData);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => GetInformation(), 500);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [order]);\n  const history = useHistory();\n\n  const openInfo = () => {\n    history.push('/orderInfo', {\n      data: props.data\n    });\n  }; // Helper\n\n\n  const StringIsNumber = (value, index) => {\n    if (index === (order === null || order === void 0 ? void 0 : order.orderRole) - 1) return true;\n  }; // Turn enum into array\n\n\n  function ToArray(enumme) {\n    return Object.keys(enumme).filter(StringIsNumber).map(key => enumme[key]).at(0);\n  }\n\n  let listRole = ToArray(IDataColorOrderInDefault);\n  let timeTActual = moment.unix(order === null || order === void 0 ? void 0 : order.tActual).utc().format('H:m:s');\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      minWidth: 200,\n      color: simulation.work ? 'white' : 'black',\n      backgroundColor: simulation.color\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      titleTypographyProps: {\n        variant: \"h6\"\n      },\n      action: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"settings\",\n          onClick: openInfo,\n          children: /*#__PURE__*/_jsxDEV(SettingsIcon, {\n            style: {\n              color: ''\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 10\n      }, this),\n      title: \"Заказ номер: \" + (order === null || order === void 0 ? void 0 : order.name),\n      subheader: /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          color: simulation.work ? 'white' : 'black'\n        },\n        children: [\"\\u0410\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044F: \", order.orderRole === OrderRole.Archive || order.orderRole === OrderRole.Work ? timeTActual : '', /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-around'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0410\\u043A\\u0442\\u0443\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0432\\u0440\\u0435\\u043C\\u044F: \", moment(Date.now()).format('MM/DD/YYYY H:m:s')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u0421\\u0440\\u043E\\u043A \\u0434\\u043E: \", moment(order === null || order === void 0 ? void 0 : order.limitation).format('MM/DD/YYYY H:m:s')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          borderColor: simulation.work ? '' : 'white',\n          backgroundColor: simulation.work ? '#12824C' : '',\n          color: '#FFFFFF'\n        },\n        size: \"small\",\n        variant: simulation.work ? \"contained\" : \"outlined\",\n        onClick: onSimulation,\n        children: simulation.work ? \"Остановить симуляцию\" : \"Запустить симуляцию\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardOrderInNewAlgoritmDefault, \"f1PXCfKVQW+LYVHD7o2wzdyX7OU=\", false, function () {\n  return [useHistory];\n});\n\n_c = CardOrderInNewAlgoritmDefault;\nexport default CardOrderInNewAlgoritmDefault;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardOrderInNewAlgoritmDefault\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInNewAlgoritmDefault.tsx"],"names":["React","useEffect","useState","useRef","Card","CardActions","Button","Typography","CardHeader","IconButton","SettingsIcon","Divider","IDataColorOrderInDefault","useHistory","axios","ip","port","moment","OrderRole","simulationEnum","CardOrderInNewAlgoritmDefault","props","Start","Stop","simulation","setSimulation","text","color","NotWork","work","order","setOrder","data","name","startSimulation","sim","copyObjet","response","post","JSON","stringify","headers","status","console","log","onSimulation","Stoped","InWork","timer","GetInformation","responseData","parse","orderRole","Archive","Done","setTimeout","clearTimeout","history","openInfo","push","StringIsNumber","value","index","ToArray","enumme","Object","keys","filter","map","key","at","listRole","timeTActual","unix","tActual","utc","format","minWidth","backgroundColor","variant","Work","display","justifyContent","Date","now","limitation","borderColor"],"mappings":"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","sourcesContent":["import React,{useEffect, useState,useRef} from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\n\nimport {IDataColorOrderInDefault} from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault'\nimport IDataOrder from '../../Data/IDataOrder';\nimport { Redirect,useHistory, useLocation } from 'react-router'\nimport { useActionOrders } from '../../../hooks/useActionOrders';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\n\nimport axios from 'axios'\nimport ip, {port} from '../../../global'\n\nimport moment from 'moment';\nimport Order_view from '../../Data/IDataOrder/IDataOrder';\nimport OrderRole from '../../Data/OrderRole';\n\nenum simulationEnum{\n  Start = 'Запустить симуляцию',\n  Stop = 'Остановить симуляцию'\n}\nconst CardOrderInNewAlgoritmDefault = (props:{OrderColor: IDataColorOrderInDefault, data: Order_view}) => {\n\n  const {Start,Stop} = simulationEnum;\n\n\n  \n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  });\n\n\n  //const [simulation, setSimulation] = useState(false)\n\n  const[order, setOrder] = useState<Order_view>(props.data);\n\n\n  if(props.data.name != order.name)\n  {\n    setOrder(props.data);\n    setSimulation({\n      text: simulationEnum.Start,\n      color: IDataColorOrderInDefault.NotWork,\n      work: false\n    });\n  }\n\n  //const {startSimulation, updateInfoOrder} = useActionOrders()\n\n\n  const startSimulation = async (name: string, sim: boolean) => {\n\n    let copyObjet = {\n      name: name,\n      simulation: sim\n    }\n            const response = await axios.post('http://'+ip+':'+port+'/api/cardVSM/addorderinwork',JSON.stringify(copyObjet),\n            {\n                headers: {\n                   \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n                console.log(\"Add Ok\")\n            }\n  }\n\n  const onSimulation = () => {\n\n    console.log(\"order = \",order)\n    if(simulation.work)\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Stop , color: IDataColorOrderInDefault.Stoped  })\n      startSimulation(order.name, sim);\n    }\n    else\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Start, color: IDataColorOrderInDefault.InWork })\n      startSimulation(order.name, sim);\n    }\n   // let newObj = {...order, simulation: !simulation};\n\n    //setSimulation(newObj.simulation);\n    //setOrder(newObj);\n    //startSimulation(newObj);\n  }\n\n  //let flag = (simulation.text === simulationEnum.Stop && simulation.work)\n\n  const timer = useRef(null);\n  const GetInformation = async() => {\n\n    let copyObjet = {\n      name: order.name,\n      simulation: order.simulation\n    }\n\n    const response = await axios.post('http://'+ip+':'+port+'/api/cardVSM/updateInfoOrder',JSON.stringify(copyObjet),\n    {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n    })\n\n    if(response.status === 200)\n    {\n       let responseData =  JSON.parse(JSON.stringify(response.data)) as Order_view;\n\n       if(responseData.simulation === false && responseData.orderRole === OrderRole.Archive)\n       {\n        setSimulation({...simulation, work: false, text: Stop, color: IDataColorOrderInDefault.Done  })\n       }\n       setOrder(responseData);\n    }\n  }\n\n   \n  useEffect(() => {\n    const timer = setTimeout(() => GetInformation(), 500); \n    return () => {\n      clearTimeout(timer);\n    };\n  },[order]);\n \n  const history = useHistory();\n\n  const openInfo = () => {\n    history.push('/orderInfo', { data: props.data});\n  }\n\n\n    // Helper\nconst StringIsNumber = (value: any,index: any) => {if(index === order?.orderRole-1) return true};\n\n// Turn enum into array\nfunction ToArray(enumme: any) {\n    return Object.keys(enumme)\n        .filter(StringIsNumber)\n        .map(key => enumme[key])\n        .at(0);\n}\n\nlet listRole = ToArray(IDataColorOrderInDefault);\n\n\n\n\n\n\nlet timeTActual = moment.unix(order?.tActual).utc().format('H:m:s')\n\n  return (\n    <Card sx={{ minWidth: 200,color: simulation.work ? 'white':'black',  backgroundColor: simulation.color }}>\n      <CardHeader\n        titleTypographyProps={{ variant: \"h6\" }}\n        action={\n         <div>\n          <IconButton \n          aria-label=\"settings\"\n          onClick={openInfo}>\n            <SettingsIcon style={{color: ''}}/>\n          </IconButton>\n         </div>\n        }\n        title={\"Заказ номер: \"+order?.name}\n        subheader={\n        <Typography style={{color: simulation.work ? 'white':'black'}}>\n          \n          Актуальное время выполнения: { order.orderRole === OrderRole.Archive || order.orderRole === OrderRole.Work ? timeTActual : ''}   \n                   <Divider/>\n                   <div style={{display: 'flex', justifyContent:'space-around'}} >\n                    <p>Актуальное время: {moment(Date.now()).format('MM/DD/YYYY H:m:s')}</p>\n                    <p>Срок до: {moment(order?.limitation).format('MM/DD/YYYY H:m:s')}</p>\n                  </div>\n        </Typography>\n      }\n      />\n      <Divider/>\n      <CardActions>\n        <Button style={{borderColor: simulation.work ? '':'white',backgroundColor: simulation.work ? '#12824C':'', color: '#FFFFFF'}} size=\"small\" variant={simulation.work ? \"contained\":\"outlined\"} onClick={onSimulation}>\n          {simulation.work ? \"Остановить симуляцию\":\"Запустить симуляцию\"}\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default CardOrderInNewAlgoritmDefault;"]},"metadata":{},"sourceType":"module"}