{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/SymbolPalette.js\";\nimport React from \"react\";\nimport { SymbolPaletteComponent } from \"@syncfusion/ej2-react-diagrams\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass SymbolPalette extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myStyle: props.myStyle,\n      handlerGetBasicShapes: props.handlerGetBasicShapes,\n      customer: props.customer,\n      process: props.process,\n      external_shipment: props.external_shipment,\n      inventory: props.inventory,\n      production_control: props.production_control\n    };\n  } // A node is created and stored in nodes array.\n\n\n  getSvgShapes() {\n    let basicShapes = [];\n    basicShapes.push(this.state.customer);\n    basicShapes.push(this.state.process);\n    basicShapes.push(this.state.external_shipment);\n    basicShapes.push(this.state.inventory);\n    basicShapes.push(this.state.production_control);\n    return basicShapes;\n  }\n\n  render() {\n    const {\n      myStyle,\n      handlerGetBasicShapes\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(SymbolPaletteComponent, {\n      id: \"pallete\" //Defines how many palettes can be at expanded mode at a time\n      ,\n      expandMode: \"Multiple\" //onClick={(e,item)=>{console.log(\"onClick\",e,item)}}\n      //DragEnter={()=>console.log}\n      ,\n      palettes: [{\n        //Sets the id of the palette\n        id: 'flow',\n        //Sets whether the palette expands/collapse its children\n        expanded: true,\n        //Adds the palette items to palette\n        symbols: this.getSvgShapes(),\n        //Sets the header text of the palette\n        title: 'Flow Shapes',\n        iconCss: 'e-ddb-icons e-flow'\n      }],\n      width: '100%',\n      height: '100%',\n      style: myStyle //Specifies the default size to render symbols\n      ,\n      symbolHeight: 80,\n      symbolWidth: 80 //Sets the size, appearance and description of a symbol\n      ,\n      getSymbolInfo: symbol => {\n        if (symbol['text'] !== undefined) {\n          return {\n            //Add or Remove the Text for Symbol palette item.\n            description: {\n              //Defines the symbol description\n              text: symbol['text'],\n              //Defines how to handle the text when its size exceeds the given symbol size\n              overflow: 'Wrap'\n            }\n          };\n        }\n\n        return {\n          description: {\n            text: symbol.shape['shape']\n          }\n        };\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default SymbolPalette;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Diagrams/SymbolPalette.js"],"names":["React","SymbolPaletteComponent","SymbolPalette","PureComponent","constructor","props","state","myStyle","handlerGetBasicShapes","customer","process","external_shipment","inventory","production_control","getSvgShapes","basicShapes","push","render","id","expanded","symbols","title","iconCss","symbol","undefined","description","text","overflow","shape"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,sBADJ,QAEO,gCAFP;;;AAKA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,aAAlC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAEF,KAAK,CAACE,OADN;AAETC,MAAAA,qBAAqB,EAAEH,KAAK,CAACG,qBAFpB;AAGTC,MAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAHP;AAITC,MAAAA,OAAO,EAAEL,KAAK,CAACK,OAJN;AAKTC,MAAAA,iBAAiB,EAAEN,KAAK,CAACM,iBALhB;AAMTC,MAAAA,SAAS,EAACP,KAAK,CAACO,SANP;AAOTC,MAAAA,kBAAkB,EAAER,KAAK,CAACQ;AAPjB,KAAb;AASD,GAZyC,CAc1C;;;AAEAC,EAAAA,YAAY,GACZ;AACE,QAAIC,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKV,KAAL,CAAWG,QAA5B;AACAM,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKV,KAAL,CAAWI,OAA5B;AACAK,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKV,KAAL,CAAWK,iBAA5B;AACAI,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKV,KAAL,CAAWM,SAA5B;AACAG,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKV,KAAL,CAAWO,kBAA5B;AACA,WAAOE,WAAP;AACD;;AAIDE,EAAAA,MAAM,GAAG;AAEP,UAAM;AAACV,MAAAA,OAAD;AAASC,MAAAA;AAAT,QAAkC,KAAKF,KAA7C;AAGA,wBAAQ,QAAE,sBAAF;AAAyB,MAAA,EAAE,EAAG,SAA9B,CAEP;AAFO;AAGP,MAAA,UAAU,EACP,UAJI,CAMR;AACA;AAPQ;AASR,MAAA,QAAQ,EACJ,CAAC;AACO;AACAY,QAAAA,EAAE,EAAE,MAFX;AAGO;AACAC,QAAAA,QAAQ,EAAE,IAJjB;AAKO;AACAC,QAAAA,OAAO,EAAE,KAAKN,YAAL,EANhB;AAOO;AACAO,QAAAA,KAAK,EAAE,aARd;AASOC,QAAAA,OAAO,EAAE;AAThB,OAAD,CAVI;AAsBR,MAAA,KAAK,EACD,MAvBI;AAyBR,MAAA,MAAM,EACF,MA1BI;AA4BR,MAAA,KAAK,EACDf,OA7BI,CAiCP;AAjCO;AAkCP,MAAA,YAAY,EACT,EAnCI;AAqCR,MAAA,WAAW,EACP,EAtCI,CAyCR;AAzCQ;AA0CR,MAAA,aAAa,EACRgB,MAAD,IAA0C;AACtC,YAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBC,SAAvB,EAAkC;AAC9B,iBAAO;AACH;AACAC,YAAAA,WAAW,EAAE;AACT;AACAC,cAAAA,IAAI,EAAEH,MAAM,CAAC,MAAD,CAFH;AAGT;AACAI,cAAAA,QAAQ,EAAE;AAJD;AAFV,WAAP;AASH;;AACD,eAAO;AACHF,UAAAA,WAAW,EAAE;AACTC,YAAAA,IAAI,EAAEH,MAAM,CAACK,KAAP,CAAa,OAAb;AADG;AADV,SAAP;AAKH;AA5DG;AAAA;AAAA;AAAA;AAAA,YAAR;AA+DD;;AAjGyC;;AAsGhD,eAAe1B,aAAf","sourcesContent":["import React from \"react\";\nimport {\n    SymbolPaletteComponent\n} from \"@syncfusion/ej2-react-diagrams\";\n\n\nclass SymbolPalette extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            myStyle: props.myStyle,\n            handlerGetBasicShapes: props.handlerGetBasicShapes,\n            customer: props.customer,\n            process: props.process,\n            external_shipment: props.external_shipment,\n            inventory:props.inventory,\n            production_control: props.production_control,\n        };\n      }\n\n      // A node is created and stored in nodes array.\n\n      getSvgShapes()\n      {\n        let basicShapes = []\n        basicShapes.push(this.state.customer)\n        basicShapes.push(this.state.process)\n        basicShapes.push(this.state.external_shipment)\n        basicShapes.push(this.state.inventory)\n        basicShapes.push(this.state.production_control)\n        return basicShapes;\n      }\n\n      \n\n      render() {\n\n        const {myStyle,handlerGetBasicShapes} = this.state\n\n\n        return (< SymbolPaletteComponent id = \"pallete\" \n\n         //Defines how many palettes can be at expanded mode at a time\n         expandMode = {\n            \"Multiple\"\n        }\n        //onClick={(e,item)=>{console.log(\"onClick\",e,item)}}\n        //DragEnter={()=>console.log}\n    \n        palettes = {\n            [{\n                    //Sets the id of the palette\n                    id: 'flow',\n                    //Sets whether the palette expands/collapse its children\n                    expanded: true,\n                    //Adds the palette items to palette\n                    symbols: this.getSvgShapes(),\n                    //Sets the header text of the palette\n                    title: 'Flow Shapes',\n                    iconCss: 'e-ddb-icons e-flow'\n                }]\n            }\n        width = {\n            '100%'\n        }\n        height = {\n            '100%'\n        }\n        style = {\n            myStyle\n        }\n        \n\n         //Specifies the default size to render symbols\n         symbolHeight = {\n            80\n        }\n        symbolWidth = {\n            80\n        }\n\n        //Sets the size, appearance and description of a symbol\n        getSymbolInfo = {\n            (symbol: Node | Connector): SymbolInfo => {\n                if (symbol['text'] !== undefined) {\n                    return {\n                        //Add or Remove the Text for Symbol palette item.\n                        description: {\n                            //Defines the symbol description\n                            text: symbol['text'],\n                            //Defines how to handle the text when its size exceeds the given symbol size\n                            overflow: 'Wrap'\n                        }\n                    };\n                }\n                return {\n                    description: {\n                        text: symbol.shape['shape']\n                    }\n                };\n            }\n        }\n        />);\n      }\n}\n\n        \n\nexport default SymbolPalette;\n\n"]},"metadata":{},"sourceType":"module"}