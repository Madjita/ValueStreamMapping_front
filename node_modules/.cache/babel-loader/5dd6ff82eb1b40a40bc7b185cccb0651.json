{"ast":null,"code":"import axios from \"axios\";\nimport { fetch_orders, fetch_orders_success, fetch_orders_error, fetch_orders_add, fetch_orders_update } from '../reducers/useOrdersReducer';\nexport const ordersLoading = () => {\n  return async dispatch => {\n    console.log(\"Loading\");\n\n    try {\n      dispatch(fetch_orders()); //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n      let objSend = {\n        baseURL: \"https://localhost:5001/api/manufacture/orders\",\n        withCredentials: false,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS'\n        }\n      };\n      const response = await axios.create(objSend);\n      let data = response.data;\n      console.log(\"Loading finish\");\n      console.log(data);\n      setTimeout(() => {\n        dispatch(fetch_orders_success(data));\n      }, 0);\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderAdd = newOrder => {\n  return async dispatch => {\n    console.log(\"Add\");\n    console.log(newOrder);\n    console.log(JSON.stringify(newOrder));\n\n    try {\n      //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n      const response = await axios.post('https://localhost:5001/api/manufacture/addOrder', JSON.stringify(newOrder), {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_add(newOrder));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderUpdate = (updateOrder, oldOrder) => {\n  return async dispatch => {\n    let obj = {\n      newOrder: updateOrder,\n      oldOrder: oldOrder\n    };\n\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateOrder', JSON.stringify(obj), {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const startSimulation = item => {\n  return async dispatch => {\n    let copyObjet = { ...item\n    };\n\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/startSimulationOrder', JSON.stringify(copyObjet), {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        //dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const updateInfoOrder = item => {\n  return async dispatch => {\n    //let copyObjet = {...item}\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder', JSON.stringify(item), {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        console.log(\"Update\");\n        let data = JSON.parse(response.data);\n        item = data;\n        dispatch(fetch_orders_update(data));\n        console.log(\"Update Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/action-creator/useActionOrders.tsx"],"names":["axios","fetch_orders","fetch_orders_success","fetch_orders_error","fetch_orders_add","fetch_orders_update","ordersLoading","dispatch","console","log","objSend","baseURL","withCredentials","headers","response","create","data","setTimeout","e","orderAdd","newOrder","JSON","stringify","post","status","orderUpdate","updateOrder","oldOrder","obj","startSimulation","item","copyObjet","updateInfoOrder","parse"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { Dispatch } from \"react\"\nimport IDataOrder from \"../../Component/Data/IDataOrder\"\nimport { useOrdersActionType,useLeftMenuAction } from \"../../type/useOrdersType\"\n\nimport { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } from '../reducers/useOrdersReducer'\n\n\nimport IDialogAddOrder from '../../Component/Data/Dialog/IDialogAddOrder'\n\nexport const ordersLoading = () => {\n    return async (dispatch: any) => {\n\n        console.log(\"Loading\")\n        try{\n            dispatch(fetch_orders());\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            let objSend= {\n                baseURL: \"https://localhost:5001/api/manufacture/orders\",\n                withCredentials: false,\n                headers: {\n                  'Access-Control-Allow-Origin' : '*',\n                  'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS',\n                  }\n              }\n\n            const response = await axios.create(objSend)\n\n            \n            let data = response.data as IDataOrder[];\n            console.log(\"Loading finish\")\n            console.log(data)\n            setTimeout(() => {\n                dispatch(fetch_orders_success(data));\n            }, 0)\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const orderAdd = (newOrder: IDialogAddOrder) => {\n    return async (dispatch: any) => {\n\n        console.log(\"Add\")\n        console.log(newOrder)\n        console.log(JSON.stringify(newOrder))\n        try{\n\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.post('https://localhost:5001/api/manufacture/addOrder',JSON.stringify(newOrder),{\n                headers: {\n                  // Overwrite Axios's automatically set Content-Type\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_add(newOrder));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\nexport const orderUpdate = (updateOrder: IDataOrder, oldOrder: IDataOrder) => {\n    return async (dispatch: any) => {\n        let obj = {newOrder: updateOrder , oldOrder: oldOrder}\n        try{\n            const response = await axios.post('https://localhost:5001/api/manufacture/updateOrder',JSON.stringify(obj),{\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const startSimulation = (item: IDataOrder) => {\n    return async (dispatch: any) => {\n\n        let copyObjet = {...item}\n        try\n        {\n            const response = await axios.post('https://localhost:5001/api/manufacture/startSimulationOrder',JSON.stringify(copyObjet),\n            {\n                headers: {\n                   \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n                //dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const updateInfoOrder = (item: IDataOrder) => {\n    return async (dispatch: any) => {\n\n        //let copyObjet = {...item}\n        try\n        {\n            const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder',JSON.stringify(item),\n            {\n                headers: {\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n\n                console.log(\"Update\")\n                let data =  JSON.parse(response.data) as IDataOrder;\n\n                item = data;\n                dispatch(fetch_orders_update(data));\n                console.log(\"Update Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}