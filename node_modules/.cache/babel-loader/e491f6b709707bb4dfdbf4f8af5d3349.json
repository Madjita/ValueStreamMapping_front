{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet initialState = {\n  orders: [],\n  loading: true,\n  changeList: false,\n  error: null\n};\nconst useOrdersReducer = createSlice({\n  name: 'orders',\n  initialState: {\n    orders: [],\n    loading: true,\n    changeList: false,\n    error: null\n  },\n  reducers: {\n    fetch_orders(state) {\n      state.loading = true;\n    },\n\n    fetch_orders_success(state, action) {\n      console.log(\"sdf2 =\", typeof state);\n\n      if (typeof state === 'object') {\n        console.log(\"sdf =\", initialState, state.orders);\n        state.orders = action.payload; //.slice();\n\n        state.loading = false;\n        console.log(\"sdf3 =\", initialState, state.orders);\n      }\n    },\n\n    fetch_orders_error(state, action) {\n      state.loading = false;\n      state.error = action.payload;\n    },\n\n    fetch_orders_add(state, action) {\n      console.log(\"fetch_orders_add =\", state, action);\n      state.orders.push(action.payload);\n    },\n\n    fetch_orders_update(state, action) {\n      let find = state.orders.find(o => o.id === o.id);\n      find = action.payload;\n    }\n\n  }\n  /*extraReducers:{\n   }*/\n\n});\nexport default useOrdersReducer.reducer;\nexport const {\n  fetch_orders,\n  fetch_orders_success,\n  fetch_orders_error,\n  fetch_orders_add,\n  fetch_orders_update\n} = useOrdersReducer.actions;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/reducers/useOrdersReducer.tsx"],"names":["createSlice","initialState","orders","loading","changeList","error","useOrdersReducer","name","reducers","fetch_orders","state","fetch_orders_success","action","console","log","payload","fetch_orders_error","fetch_orders_add","push","fetch_orders_update","find","o","id","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAKA,IAAIC,YAA2B,GAAE;AAC7BC,EAAAA,MAAM,EAAE,EADqB;AAE7BC,EAAAA,OAAO,EAAE,IAFoB;AAG7BC,EAAAA,UAAU,EAAE,KAHiB;AAI7BC,EAAAA,KAAK,EAAE;AAJsB,CAAjC;AAOA,MAAMC,gBAAgB,GAAGN,WAAW,CAAC;AACjCO,EAAAA,IAAI,EAAE,QAD2B;AAEjCN,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAE,EADE;AAEVC,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,UAAU,EAAE,KAHF;AAIVC,IAAAA,KAAK,EAAE;AAJG,GAFmB;AAQjCG,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINQ,IAAAA,oBAAoB,CAACD,KAAD,EAAOE,MAAP,EAAe;AAE/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB,OAAOJ,KAA5B;;AACA,UAAG,OAAOA,KAAP,KAAiB,QAApB,EACA;AACIG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBb,YAApB,EAAiCS,KAAK,CAACR,MAAvC;AACAQ,QAAAA,KAAK,CAACR,MAAN,GAAeU,MAAM,CAACG,OAAtB,CAFJ,CAEiC;;AAC7BL,QAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBb,YAArB,EAAkCS,KAAK,CAACR,MAAxC;AACH;AAEJ,KAfK;;AAgBNc,IAAAA,kBAAkB,CAACN,KAAD,EAAQE,MAAR,EAAgB;AAC9BF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACG,OAArB;AACH,KAnBK;;AAoBNE,IAAAA,gBAAgB,CAACP,KAAD,EAAQE,MAAR,EAAe;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCJ,KAAjC,EAAuCE,MAAvC;AACAF,MAAAA,KAAK,CAACR,MAAN,CAAagB,IAAb,CAAkBN,MAAM,CAACG,OAAzB;AACH,KAvBK;;AAwBNI,IAAAA,mBAAmB,CAACT,KAAD,EAAQE,MAAR,EAAe;AAC9B,UAAIQ,IAAI,GAAGV,KAAK,CAACR,MAAN,CAAakB,IAAb,CAAkBC,CAAC,IAAGA,CAAC,CAACC,EAAF,KAASD,CAAC,CAACC,EAAjC,CAAX;AACAF,MAAAA,IAAI,GAAGR,MAAM,CAACG,OAAd;AACH;;AA3BK;AA6BV;AACJ;;AAtCqC,CAAD,CAApC;AAyCA,eAAeT,gBAAgB,CAACiB,OAAhC;AACA,OAAO,MAAM;AAAEd,EAAAA,YAAF;AAAgBE,EAAAA,oBAAhB;AAAsCK,EAAAA,kBAAtC;AAAyDC,EAAAA,gBAAzD;AAA0EE,EAAAA;AAA1E,IAAkGb,gBAAgB,CAACkB,OAAzH","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport IDataOrder from '../../Component/Data/IDataOrder'\nimport { useOrdersType } from '../../type/useOrdersType'\n\n\nlet initialState: useOrdersType ={\n    orders: [],\n    loading: true,\n    changeList: false,\n    error: null\n}\n\nconst useOrdersReducer = createSlice({  \n    name: 'orders',  \n    initialState: {\n        orders: [],\n        loading: true,\n        changeList: false,\n        error: null\n    } as useOrdersType,  \n    reducers: {       \n        fetch_orders(state) {  \n            state.loading = true     \n        },\n        fetch_orders_success(state,action) {   \n\n            console.log(\"sdf2 =\",typeof state)\n            if(typeof state === 'object')\n            {\n                console.log(\"sdf =\",initialState,state.orders)\n                state.orders = action.payload//.slice();\n                state.loading = false; \n                console.log(\"sdf3 =\",initialState,state.orders)\n            }\n            \n        },     \n        fetch_orders_error(state, action) {     \n            state.loading = false    \n            state.error = action.payload    \n        },\n        fetch_orders_add(state, action){\n            console.log(\"fetch_orders_add =\",state,action)\n            state.orders.push(action.payload);\n        },\n        fetch_orders_update(state, action){\n            let find = state.orders.find(o=> o.id === o.id);\n            find = action.payload\n        }   \n    },\n    /*extraReducers:{\n\n    }*/\n})\nexport default useOrdersReducer.reducer\nexport const { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } = useOrdersReducer.actions"]},"metadata":{},"sourceType":"module"}