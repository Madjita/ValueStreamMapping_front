{"ast":null,"code":"import axios from \"axios\";\nimport { fetch_orders, fetch_orders_success, fetch_orders_error, fetch_orders_add } from '../reducers/useOrdersReducer';\nexport const ordersLoading = () => {\n  return async dispatch => {\n    console.log(\"Loading\");\n\n    try {\n      dispatch(fetch_orders()); //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n      const response = await axios.get('https://localhost:5001/api/manufacture/orders');\n      let data = response.data;\n      console.log(\"Loading finish\");\n      console.log(data);\n      setTimeout(() => {\n        dispatch(fetch_orders_success(data));\n      }, 500);\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderAdd = newOrder => {\n  return async dispatch => {\n    console.log(\"Add\");\n    console.log(newOrder);\n    console.log(JSON.stringify(newOrder));\n\n    try {\n      //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n      const response = await axios.post('https://localhost:5001/api/manufacture/addOrder', JSON.stringify(newOrder), {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_add(newOrder));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const getAllProducts = () => {\n  return async dispatch => {\n    console.log(\"getAllProducts\");\n\n    try {\n      //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n      const response = await axios.get('https://localhost:5001/api/manufacture/getAllProducts', {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_add(newOrder));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/action-creator/useActionOrders.tsx"],"names":["axios","fetch_orders","fetch_orders_success","fetch_orders_error","fetch_orders_add","ordersLoading","dispatch","console","log","response","get","data","setTimeout","e","orderAdd","newOrder","JSON","stringify","post","headers","status","getAllProducts"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,SAASC,YAAT,EAAuBC,oBAAvB,EAA6CC,kBAA7C,EAAgEC,gBAAhE,QAAwF,8BAAxF;AAKA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAO,MAAOC,QAAP,IAAyB;AAE5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,QAAG;AACCF,MAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR,CADD,CAEC;;AAEA,YAAMQ,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,+CAAV,CAAvB;AAGA,UAAIC,IAAI,GAAGF,QAAQ,CAACE,IAApB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAC,MAAAA,UAAU,CAAC,MAAM;AACbN,QAAAA,QAAQ,CAACJ,oBAAoB,CAACS,IAAD,CAArB,CAAR;AACH,OAFS,EAEP,GAFO,CAAV;AAGH,KAbD,CAaE,OAAME,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACH,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAnBD;AAoBH,CArBM;AAwBP,OAAO,MAAMW,QAAQ,GAAIC,QAAD,IAA+B;AACnD,SAAO,MAAOT,QAAP,IAAyB;AAE5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAZ;;AACA,QAAG;AAEC;AAEA,YAAMN,QAAQ,GAAG,MAAMT,KAAK,CAACkB,IAAN,CAAW,iDAAX,EAA6DF,IAAI,CAACC,SAAL,CAAeF,QAAf,CAA7D,EAAsF;AACzGI,QAAAA,OAAO,EAAE;AACP;AACA,0BAAgB;AAFT;AADgG,OAAtF,CAAvB;;AAOA,UAAGV,QAAQ,CAACW,MAAT,KAAoB,GAAvB,EACA;AACId,QAAAA,QAAQ,CAACF,gBAAgB,CAACW,QAAD,CAAjB,CAAR;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KAhBD,CAgBE,OAAMK,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACH,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAxBD;AAyBH,CA1BM;AA6BP,OAAO,MAAMkB,cAAc,GAAG,MAAK;AAC/B,SAAO,MAAOf,QAAP,IAAyB;AAE5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AACA,QAAG;AAEC;AAEA,YAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,uDAAV,EAAkE;AACrFS,QAAAA,OAAO,EAAE;AACP;AACA,0BAAgB;AAFT;AAD4E,OAAlE,CAAvB;;AAOA,UAAGV,QAAQ,CAACW,MAAT,KAAoB,GAAvB,EACA;AACId,QAAAA,QAAQ,CAACF,gBAAgB,CAACW,QAAD,CAAjB,CAAR;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACH;AACJ,KAhBD,CAgBE,OAAMK,CAAN,EAAS;AACPP,MAAAA,QAAQ,CAACH,kBAAkB,CAAC,OAAD,CAAnB,CAAR;AACH;AACJ,GAtBD;AAuBH,CAxBM","sourcesContent":["import axios from \"axios\"\nimport { Dispatch } from \"react\"\nimport IDataOrder from \"../../Component/Data/IDataOrder\"\nimport { useOrdersActionType,useLeftMenuAction } from \"../../type/useOrdersType\"\n\nimport { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add } from '../reducers/useOrdersReducer'\n\n\nimport IDialogAddOrder from '../../Component/Data/Dialog/IDialogAddOrder'\n\nexport const ordersLoading = () => {\n    return async (dispatch: any) => {\n\n        console.log(\"Loading\")\n        try{\n            dispatch(fetch_orders());\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.get('https://localhost:5001/api/manufacture/orders')\n\n            \n            let data = response.data as IDataOrder[];\n            console.log(\"Loading finish\")\n            console.log(data)\n            setTimeout(() => {\n                dispatch(fetch_orders_success(data));\n            }, 500)\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const orderAdd = (newOrder: IDialogAddOrder) => {\n    return async (dispatch: any) => {\n\n        console.log(\"Add\")\n        console.log(newOrder)\n        console.log(JSON.stringify(newOrder))\n        try{\n\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.post('https://localhost:5001/api/manufacture/addOrder',JSON.stringify(newOrder),{\n                headers: {\n                  // Overwrite Axios's automatically set Content-Type\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_add(newOrder));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const getAllProducts = () =>{\n    return async (dispatch: any) => {\n\n        console.log(\"getAllProducts\")\n        try{\n\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.get('https://localhost:5001/api/manufacture/getAllProducts',{\n                headers: {\n                  // Overwrite Axios's automatically set Content-Type\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_add(newOrder));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}