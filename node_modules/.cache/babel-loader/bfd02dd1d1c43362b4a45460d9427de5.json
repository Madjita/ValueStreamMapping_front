{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/PageExample/DemoArchive.tsx\";\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport moment from 'moment';\nimport OrderRole from '../Data/OrderRole';\nimport DoneIcon from '@mui/icons-material/Done';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DemoArchive = props => {\n  var _props$orders;\n\n  //const [tableData, setTableData] = React.useState<Order_view[]>(props.orders != undefined ? props.orders : [])\n  if (props.orders == undefined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (((_props$orders = props.orders) === null || _props$orders === void 0 ? void 0 : _props$orders.length) > 0) {\n    var _props$orders2;\n\n    (_props$orders2 = props.orders) === null || _props$orders2 === void 0 ? void 0 : _props$orders2.forEach((element, i) => {\n      element.id = i + 1;\n    });\n  }\n\n  const splitTime = time => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: time.split(' ').map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginBottom: '0',\n            marginTop: '0'\n          },\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  };\n\n  const GetOrderRole = item => {\n    let icon = null;\n\n    switch (item) {\n      case OrderRole.ArchiveBad:\n        icon = /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 18\n        }, this);\n        break;\n\n      case OrderRole.ArchiveGood:\n        icon = /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this);\n        break;\n\n      default:\n        break;\n    }\n\n    return icon;\n  };\n\n  const getGridDef = v => {\n    let columns = [];\n\n    switch (v) {\n      case 'archive':\n        columns = [{\n          field: 'id',\n          headerName: '№',\n          width: 90\n        }, {\n          field: 'name',\n          headerName: 'Заказ',\n          width: 120,\n          minWidth: 120,\n          maxWidth: 150,\n          editable: false\n        }, {\n          field: 'limitation',\n          headerName: 'Срок',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.value).format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tStart',\n          headerName: 'Добавлен',\n          type: 'number',\n          width: 120,\n          minWidth: 120,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tStart).format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tPlan',\n          headerName: 'План',\n          type: 'number',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tStart).add(params === null || params === void 0 ? void 0 : params.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tFuture',\n          headerName: 'Прогноз',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tStart).add(params === null || params === void 0 ? void 0 : params.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tStop',\n          headerName: 'Завершился',\n          width: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tStop).format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tActual',\n          headerName: 'Завершился за',\n          width: 150,\n          minWidth: 150,\n          maxWidth: 200,\n          editable: true,\n          renderCell: params => splitTime(moment.unix(params === null || params === void 0 ? void 0 : params.row.tActual).utc().format('HH:mm:ss'))\n        }, {\n          field: 'orderRole',\n          headerName: 'Статус',\n          width: 150,\n          minWidth: 150,\n          maxWidth: 200,\n          editable: true,\n          renderCell: params => GetOrderRole(params === null || params === void 0 ? void 0 : params.value)\n        }\n        /*\n        {\n          field: 'fullName',\n          headerName: 'Full name',\n          description: 'This column has a value getter and is not sortable.',\n          sortable: false,\n          width: 160,\n          valueGetter: (params: GridValueGetterParams) =>\n            `${params.getValue(params.id, 'orderName') || ''} ${\n              params.getValue(params.id, 'limitation') || ''\n            }`,\n        },*/\n        ];\n        break;\n\n      case 'prepair':\n        columns = [{\n          field: 'id',\n          headerName: '№',\n          width: 90\n        }, {\n          field: 'name',\n          headerName: 'Заказ',\n          width: 120,\n          minWidth: 120,\n          maxWidth: 150,\n          editable: false\n        }, {\n          field: 'limitation',\n          headerName: 'Срок',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.value).format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tAdd',\n          headerName: 'Добавлен',\n          type: 'number',\n          width: 120,\n          minWidth: 120,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.value).format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tPlan',\n          headerName: 'План',\n          type: 'number',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tAdd).add(params === null || params === void 0 ? void 0 : params.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tFuture',\n          headerName: 'Прогноз',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => splitTime(moment(params === null || params === void 0 ? void 0 : params.row.tAdd).add(params === null || params === void 0 ? void 0 : params.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n        }, {\n          field: 'tFuture2',\n          headerName: 'Прогноз в секундах',\n          width: 160,\n          minWidth: 160,\n          maxWidth: 200,\n          editable: true,\n          renderCell: params => splitTime(moment.unix(params === null || params === void 0 ? void 0 : params.row.tFuture).format('HH:mm:ss'))\n        }, {\n          field: 'orderRole',\n          headerName: 'Статус',\n          width: 100,\n          minWidth: 100,\n          maxWidth: 150,\n          editable: true,\n          renderCell: params => {\n            if (moment(params === null || params === void 0 ? void 0 : params.row.tAdd).add(params === null || params === void 0 ? void 0 : params.row.tFuture, 'seconds').isBefore(Date.now())) {\n              return /*#__PURE__*/_jsxDEV(DoneIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 24\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 24\n              }, this);\n            }\n          }\n        }, {\n          field: 'simulation',\n          headerName: 'Запустить симуляцию',\n          width: 200,\n          minWidth: 200,\n          maxWidth: 250,\n          editable: true,\n          renderCell: params => {\n            if (props.startSimulation != undefined) {\n              return /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                size: \"small\",\n                onClick: async () => {\n                  var _props$startSimulatio;\n\n                  await ((_props$startSimulatio = props.startSimulation) === null || _props$startSimulatio === void 0 ? void 0 : _props$startSimulatio.call(null, params === null || params === void 0 ? void 0 : params.row.name, true));\n                },\n                children: \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 27\n              }, this);\n            }\n          }\n        }];\n        break;\n    }\n\n    return columns;\n  };\n\n  const convertToTime = t => {\n    return moment.unix(t).utc().format('H:m:s');\n  };\n\n  const rows = [{\n    id: 1,\n    limitation: 'Snow',\n    orderName: 'Jon',\n    tPlan: convertToTime(35)\n  }, {\n    id: 2,\n    limitation: 'Lannister',\n    orderName: 'Cersei',\n    tPlan: convertToTime(42)\n  }, {\n    id: 3,\n    limitation: 'Lannister',\n    orderName: 'Jaime',\n    tPlan: convertToTime(45)\n  }, {\n    id: 4,\n    limitation: 'Stark',\n    orderName: 'Arya',\n    tPlan: convertToTime(16)\n  }, {\n    id: 5,\n    limitation: 'Targaryen',\n    orderName: 'Daenerys',\n    tPlan: null\n  }, {\n    id: 6,\n    limitation: 'Melisandre',\n    orderName: null,\n    tPlan: convertToTime(150)\n  }, {\n    id: 7,\n    limitation: 'Clifford',\n    orderName: 'Ferrara',\n    tPlan: convertToTime(44)\n  }, {\n    id: 8,\n    limitation: 'Frances',\n    orderName: 'Rossini',\n    tPlan: convertToTime(36)\n  }, {\n    id: 9,\n    limitation: 'Roxie',\n    orderName: 'Harvey',\n    tPlan: convertToTime(65)\n  }];\n  console.log(\"props.orders = \", props.orders);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '700px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      columns: getGridDef(props.view),\n      rows: props.orders,\n      pageSize: 50,\n      rowsPerPageOptions: [50] //checkboxSelection\n      ,\n      disableSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DemoArchive;\nexport default DemoArchive;\n\nvar _c;\n\n$RefreshReg$(_c, \"DemoArchive\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/PageExample/DemoArchive.tsx"],"names":["React","DataGrid","moment","OrderRole","DoneIcon","CloseIcon","Button","DemoArchive","props","orders","undefined","length","forEach","element","i","id","splitTime","time","split","map","item","index","marginBottom","marginTop","GetOrderRole","icon","ArchiveBad","ArchiveGood","getGridDef","v","columns","field","headerName","width","minWidth","maxWidth","editable","renderCell","params","value","format","type","row","tStart","add","tStop","unix","tActual","utc","tAdd","tFuture","isBefore","Date","now","startSimulation","call","name","convertToTime","t","rows","limitation","orderName","tPlan","console","log","height","view"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { DataGrid, GridColDef, GridValueGetterParams,GridRenderCellParams } from '@mui/x-data-grid';\nimport moment from 'moment';\nimport Order_view from '../Data/IDataOrder/IDataOrder';\n\nimport OrderRole from '../Data/OrderRole';\n\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\nimport ThumbDownAltIcon from '@mui/icons-material/ThumbDownAlt';\n\nimport DoneIcon from '@mui/icons-material/Done';\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport Button from '@mui/material/Button';\n\nimport axios from 'axios';\nimport ip,{port} from \"../../global\";\n\nconst DemoArchive = (props:{orders?: Order_view[], view: string, startSimulation?: (name: string, sim: boolean) => Promise<void> }) => {\n  \n  //const [tableData, setTableData] = React.useState<Order_view[]>(props.orders != undefined ? props.orders : [])\n\n  if(props.orders == undefined)\n  {\n    return <div></div>\n  }\n\n  if(props.orders?.length > 0 )\n  {\n    props.orders?.forEach((element, i) => {\n          element.id = i+1;\n    });\n  }\n\n\n  const splitTime = (time: string) => {\n\n    return (\n      <div>\n      {time.split(' ').map((item,index) => {\n         return <p key={index} style={{marginBottom: '0', marginTop: '0'}}>{item}</p>\n      })}\n      </div>\n    )\n  }\n\n  const  GetOrderRole = (item:OrderRole ) =>{\n\n    let icon = null;\n\n    switch(item)\n    {\n        case OrderRole.ArchiveBad:\n          icon = <CloseIcon/>\n            break;\n        case OrderRole.ArchiveGood:\n          icon = <DoneIcon/>\n            break;\n        default:\n            break;\n    }\n\n    return icon;\n\n  }\n\n\n\n\n\n  const getGridDef = (v : string ) => {\n   let columns: GridColDef[] = [];\n\n    switch(v)\n    {\n      case 'archive':\n        \n        columns = [\n          { field: 'id', headerName: '№', width: 90 },\n          {\n            field: 'name',\n            headerName: 'Заказ',\n            width: 120,\n            minWidth: 120, \n            maxWidth: 150,\n            editable: false,\n          },\n          {\n            field: 'limitation',\n            headerName: 'Срок',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.value).format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n          {\n            field: 'tStart',\n            headerName: 'Добавлен',\n            type: 'number',\n            width: 120,\n            minWidth: 120, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n                splitTime( moment(params?.row.tStart).format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n         \n          {\n            field: 'tPlan',\n            headerName: 'План',\n            type: 'number',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.row.tStart).add(params?.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n             )\n          },\n          \n          {\n            field: 'tFuture',\n            headerName: 'Прогноз',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.row.tStart).add(params?.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n          {\n            field: 'tStop',\n            headerName: 'Завершился',\n            width: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.row.tStop).format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n          {\n            field: 'tActual',\n            headerName: 'Завершился за',\n            width: 150,\n            minWidth: 150, \n            maxWidth: 200,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment.unix(params?.row.tActual).utc().format('HH:mm:ss'))\n              )\n          },\n          {\n            field: 'orderRole',\n            headerName: 'Статус',\n            width: 150,\n            minWidth: 150, \n            maxWidth: 200,\n            editable: true,\n            renderCell: (params) => (\n              GetOrderRole(params?.value)\n              )\n          },\n          \n          \n          /*\n          {\n            field: 'fullName',\n            headerName: 'Full name',\n            description: 'This column has a value getter and is not sortable.',\n            sortable: false,\n            width: 160,\n            valueGetter: (params: GridValueGetterParams) =>\n              `${params.getValue(params.id, 'orderName') || ''} ${\n                params.getValue(params.id, 'limitation') || ''\n              }`,\n          },*/\n        ];\n      \n\n        break;\n      case 'prepair':\n\n\n\n        columns = [\n          { field: 'id', headerName: '№', width: 90 },\n          {\n            field: 'name',\n            headerName: 'Заказ',\n            width: 120,\n            minWidth: 120, \n            maxWidth: 150,\n            editable: false,\n          },\n          {\n            field: 'limitation',\n            headerName: 'Срок',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.value).format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n          {\n            field: 'tAdd',\n            headerName: 'Добавлен',\n            type: 'number',\n            width: 120,\n            minWidth: 120, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n                splitTime( moment(params?.value).format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n         \n          {\n            field: 'tPlan',\n            headerName: 'План',\n            type: 'number',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.row.tAdd).add(params?.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n             )\n          },\n          {\n            field: 'tFuture',\n            headerName: 'Прогноз',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment(params?.row.tAdd).add(params?.value, 'seconds').format('MM/DD/YYYY HH:mm:ss'))\n              )\n          },\n          {\n            field: 'tFuture2',\n            headerName: 'Прогноз в секундах',\n            width: 160,\n            minWidth: 160, \n            maxWidth: 200,\n            editable: true,\n            renderCell: (params) => (\n              splitTime( moment.unix(params?.row.tFuture).format('HH:mm:ss'))\n              )\n          },\n          {\n            field: 'orderRole',\n            headerName: 'Статус',\n            width: 100,\n            minWidth: 100, \n            maxWidth: 150,\n            editable: true,\n            renderCell: (params) => {\n\n              if(moment(params?.row.tAdd).add(params?.row.tFuture, 'seconds').isBefore(Date.now()))\n              {\n                return <DoneIcon/>;\n              }\n              else\n              {\n                return <CloseIcon/>\n              }\n\n            }\n          },\n          {\n            field: 'simulation',\n            headerName: 'Запустить симуляцию',\n            width: 200,\n            minWidth: 200, \n            maxWidth: 250,\n            editable: true,\n            renderCell: (params) => {\n\n              if(props.startSimulation != undefined)\n                {\n                  return  <Button variant=\"outlined\" size=\"small\" onClick={  async () => {  await props.startSimulation?.call(null,params?.row.name, true); } }>\n                  Запустить симуляцию\n                </Button>\n                }\n\n            }\n          }\n          \n        ];\n      \n\n        break;\n    }\n\n    return columns;\n  }\n\n\n\n\n\n\n\n  const convertToTime = (t: number) =>\n  {\n    return moment.unix(t).utc().format('H:m:s')\n  }\n  \n  const rows = [\n    { id: 1, limitation: 'Snow', orderName: 'Jon', tPlan: convertToTime(35) },\n    { id: 2, limitation: 'Lannister', orderName: 'Cersei', tPlan: convertToTime(42) },\n    { id: 3, limitation: 'Lannister', orderName: 'Jaime', tPlan: convertToTime(45) },\n    { id: 4, limitation: 'Stark', orderName: 'Arya', tPlan: convertToTime(16) },\n    { id: 5, limitation: 'Targaryen', orderName: 'Daenerys', tPlan: null },\n    { id: 6, limitation: 'Melisandre', orderName: null, tPlan: convertToTime(150) },\n    { id: 7, limitation: 'Clifford', orderName: 'Ferrara', tPlan: convertToTime(44) },\n    { id: 8, limitation: 'Frances', orderName: 'Rossini', tPlan: convertToTime(36) },\n    { id: 9, limitation: 'Roxie', orderName: 'Harvey', tPlan: convertToTime(65) },\n  ];\n\n  console.log(\"props.orders = \",props.orders);\n    \n  return (\n    <div style={{ height: '700px', width: '100%' }}>\n      <DataGrid\n\n        columns={getGridDef(props.view)}\n        rows={props.orders}\n\n        pageSize={50}\n        rowsPerPageOptions={[50]}\n        //checkboxSelection\n        disableSelectionOnClick\n      />\n    </div>\n  );\n}\nexport default DemoArchive;"]},"metadata":{},"sourceType":"module"}