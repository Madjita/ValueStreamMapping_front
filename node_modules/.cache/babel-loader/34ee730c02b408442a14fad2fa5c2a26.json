{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Dialog/DialogAddOrderNewAlgoritm.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Transition from './Transition';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SimpleDialog(props) {\n  _s();\n\n  const {\n    onClose,\n    selectedValue,\n    open,\n    addOrder\n  } = props;\n  const [newOrder, setNewOrder] = React.useState();\n  const [order, setOrder] = React.useState();\n\n  const handleClose = () => {\n    onClose(selectedValue);\n    let update = { ...order,\n      products: newOrder\n    };\n    setOrder(update);\n    addOrder(update);\n  };\n\n  const handleChangeName = event => {\n    setOrder({ ...order,\n      name: event.target.value\n    });\n  };\n\n  const handleChangePriority = event => {\n    setOrder({ ...order,\n      priority: Number(event.target.value)\n    });\n  };\n\n  const handleChangeTime = event => {\n    setOrder({ ...order,\n      finishTime: event.target.value\n    });\n  };\n\n  const [value, setValue] = React.useState(new Date());\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"\\u0424\\u043E\\u0440\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"datetime-local\",\n      label: \"Next appointment\",\n      type: \"datetime-local\",\n      defaultValue: \"2017-05-24T10:30\",\n      sx: {\n        width: 250\n      },\n      InputLabelProps: {\n        shrink: true\n      },\n      onChange: handleChangeTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      onChange: handleChangeName,\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043A\\u0430\\u0437\\u0430\",\n      type: \"name\",\n      fullWidth: true,\n      variant: \"standard\",\n      inputProps: {\n        min: 0,\n        style: {\n          textAlign: 'center'\n        }\n      } // the change is here\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      onChange: handleChangePriority,\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"priority\",\n      label: \"\\u041F\\u0440\\u0438\\u043E\\u0440\\u0438\\u0442\\u0435\\u0442\",\n      type: \"priority\",\n      fullWidth: true,\n      variant: \"standard\",\n      inputProps: {\n        min: 0,\n        style: {\n          textAlign: 'center'\n        }\n      } // the change is here\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      setNewOrder: setNewOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleClose,\n        autoFocus: true,\n        children: \"\\u0421\\u0444\\u043E\\u0440\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SimpleDialog, \"yQV0pP4o8m0UStJnPBKWxL+9s8o=\");\n\n_c = SimpleDialog;\nexport default function DialogAddOrderNewAlgoritm(props) {\n  _s2();\n\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      onClick: handleClickOpen,\n      startIcon: /*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {\n        fontSize: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 18\n      }, this),\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u043A\\u0430\\u0437\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SimpleDialog, {\n      selectedValue: selectedValue,\n      open: open,\n      onClose: handleClose,\n      addOrder: props.addOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n/*\n\n    <div>\n      <Typography variant=\"subtitle1\" component=\"div\">\n        Selected: {selectedValue}\n      </Typography>\n      <br />\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <SimpleDialog\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n\n*/\n\n_s2(DialogAddOrderNewAlgoritm, \"kW7G0PaZYYr3+vhL3C2gYrDuVdU=\");\n\n_c2 = DialogAddOrderNewAlgoritm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SimpleDialog\");\n$RefreshReg$(_c2, \"DialogAddOrderNewAlgoritm\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Dialog/DialogAddOrderNewAlgoritm.tsx"],"names":["React","Button","DialogTitle","Dialog","Transition","DialogActions","AddCircleOutlineIcon","TextField","SimpleDialog","props","onClose","selectedValue","open","addOrder","newOrder","setNewOrder","useState","order","setOrder","handleClose","update","products","handleChangeName","event","name","target","value","handleChangePriority","priority","Number","handleChangeTime","finishTime","setValue","Date","width","shrink","min","style","textAlign","DialogAddOrderNewAlgoritm","setOpen","setSelectedValue","handleClickOpen"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAMA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AASA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AAKA,OAAOC,oBAAP,MAAiC,qCAAjC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAgBA,SAASC,YAAT,CAAsBC,KAAtB,EAAgD;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,aAAX;AAA0BC,IAAAA,IAA1B;AAA+BC,IAAAA;AAA/B,MAA4CJ,KAAlD;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0Bf,KAAK,CAACgB,QAAN,EAAhC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,KAAK,CAACgB,QAAN,EAA1B;;AAEA,QAAMG,WAAW,GAAG,MAAM;AACxBT,IAAAA,OAAO,CAACC,aAAD,CAAP;AAGA,QAAIS,MAAM,GAAG,EAAC,GAAGH,KAAJ;AAAWI,MAAAA,QAAQ,EAAEP;AAArB,KAAb;AACAI,IAAAA,QAAQ,CAACE,MAAD,CAAR;AAGAP,IAAAA,QAAQ,CAACO,MAAD,CAAR;AACD,GATD;;AAYA,QAAME,gBAAgB,GAAIC,KAAD,IAAgD;AACvEL,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWO,MAAAA,IAAI,EAAED,KAAK,CAACE,MAAN,CAAaC;AAA9B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAIJ,KAAD,IAAgD;AAC3EL,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWW,MAAAA,QAAQ,EAAEC,MAAM,CAACN,KAAK,CAACE,MAAN,CAAaC,KAAd;AAA3B,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,gBAAgB,GAAIP,KAAD,IAAgD;AACvEL,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWc,MAAAA,UAAU,EAAER,KAAK,CAACE,MAAN,CAAaC;AAApC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAM,CAACA,KAAD,EAAQM,QAAR,IAAoBhC,KAAK,CAACgB,QAAN,CAA4B,IAAIiB,IAAJ,EAA5B,CAA1B;AAGA,sBACE,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAErB,IAAd;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAgBE,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,gBADL;AAEE,MAAA,KAAK,EAAC,kBAFR;AAGE,MAAA,IAAI,EAAC,gBAHP;AAIE,MAAA,YAAY,EAAC,kBAJf;AAKE,MAAA,EAAE,EAAE;AAAEsB,QAAAA,KAAK,EAAE;AAAT,OALN;AAME,MAAA,eAAe,EAAE;AACfC,QAAAA,MAAM,EAAE;AADO,OANnB;AASE,MAAA,QAAQ,EAAEL;AATZ;AAAA;AAAA;AAAA;AAAA,YAhBF,eA4BE,QAAC,SAAD;AACM,MAAA,QAAQ,EAAER,gBADhB;AAEM,MAAA,SAAS,MAFf;AAGM,MAAA,MAAM,EAAC,OAHb;AAIM,MAAA,EAAE,EAAC,MAJT;AAKM,MAAA,KAAK,EAAC,uFALZ;AAMM,MAAA,IAAI,EAAC,MANX;AAOM,MAAA,SAAS,MAPf;AAQM,MAAA,OAAO,EAAC,UARd;AASM,MAAA,UAAU,EAAE;AAACc,QAAAA,GAAG,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAhB,OATlB,CAS4D;;AAT5D;AAAA;AAAA;AAAA;AAAA,YA5BF,eAuCE,QAAC,SAAD;AACM,MAAA,QAAQ,EAAEX,oBADhB;AAEM,MAAA,SAAS,MAFf;AAGM,MAAA,MAAM,EAAC,OAHb;AAIM,MAAA,EAAE,EAAC,UAJT;AAKM,MAAA,KAAK,EAAC,wDALZ;AAMM,MAAA,IAAI,EAAC,UANX;AAOM,MAAA,SAAS,MAPf;AAQM,MAAA,OAAO,EAAC,UARd;AASM,MAAA,UAAU,EAAE;AAACS,QAAAA,GAAG,EAAE,CAAN;AAASC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAAhB,OATlB,CAS4D;;AAT5D;AAAA;AAAA;AAAA;AAAA,YAvCF,eAiEE,QAAC,UAAD;AAAY,MAAA,WAAW,EAAEvB;AAAzB;AAAA;AAAA;AAAA;AAAA,YAjEF,eAkEE,QAAC,aAAD;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEI,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,WAAjB;AAA8B,QAAA,SAAS,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAlEF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2ED;;GA5GQX,Y;;KAAAA,Y;AA8GT,eAAe,SAAS+B,yBAAT,CAAmC9B,KAAnC,EAAuF;AAAA;;AACpG,QAAM,CAACG,IAAD,EAAO4B,OAAP,IAAkBxC,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAxB;AACA,QAAM,CAACL,aAAD,EAAgB8B,gBAAhB,IAAoCzC,KAAK,CAACgB,QAAN,EAA1C;;AAEA,QAAM0B,eAAe,GAAG,MAAM;AAC5BF,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAIA,QAAMrB,WAAW,GAAG,MAAM;AACxBqB,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAMA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACN,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAAA,4BACE,QAAC,MAAD;AACA,MAAA,OAAO,EAAC,WADR;AAEA,MAAA,IAAI,EAAC,OAFL;AAGA,MAAA,OAAO,EAAEQ,eAHT;AAIA,MAAA,SAAS,eAAE,QAAC,oBAAD;AAAuB,QAAA,QAAQ,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,cAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,YAAD;AACE,MAAA,aAAa,EAAE/B,aADjB;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,OAAO,EAAEO,WAHX;AAIE,MAAA,QAAQ,EAAEV,KAAK,CAACI;AAJlB;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAnDwB0B,yB;;MAAAA,yB","sourcesContent":["import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport { blue } from '@material-ui/core/colors';\n\n//import TextField from '@material-ui/core/TextField';\n\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Transition from './Transition'\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport IDialogAddOrder from '../Data/Dialog/IDialogAddOrder'\nimport IDialogAddOrderItem from '../Data/Dialog/IDialogAddOrderItem'\nimport IconButton from '@mui/material/IconButton';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n\nimport TextField from '@mui/material/TextField';\nimport AdapterMoment from '@mui/lab/AdapterMoment';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\n\nimport Divider from '@mui/material/Divider';\n\nexport interface SimpleDialogProps {\n  open: boolean;\n  selectedValue: IDialogAddOrder;\n  onClose: (value: IDialogAddOrder) => void;\n  addOrder: (value: IDialogAddOrder) => void\n}\n\n\n\nfunction SimpleDialog(props: SimpleDialogProps) {\n  const { onClose, selectedValue, open,addOrder } = props;\n\n  const [newOrder, setNewOrder] = React.useState<IDialogAddOrderItem[]>();\n  const [order, setOrder] = React.useState<IDialogAddOrder>();\n\n  const handleClose = () => {\n    onClose(selectedValue);\n\n\n    let update = {...order, products: newOrder as  IDialogAddOrderItem[]} as IDialogAddOrder\n    setOrder(update)\n\n\n    addOrder(update)\n  };\n\n  \n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOrder({...order, name: event.target.value} as IDialogAddOrder)\n  };\n\n  const handleChangePriority = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOrder({...order, priority: Number(event.target.value)} as IDialogAddOrder)\n  };\n\n  const handleChangeTime = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setOrder({...order, finishTime: event.target.value} as IDialogAddOrder)\n  };\n\n  const [value, setValue] = React.useState<Date | null>(new Date());\n\n\n  return (\n    <Dialog open={open}>\n      <DialogTitle>Формирование заказа\n      \n      </DialogTitle>\n\n      {/*<LocalizationProvider dateAdapter={AdapterMoment}>\n        <DateTimePicker\n          renderInput={(props) => <TextField {...props} />}\n          label=\"DateTimePicker\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n        />\n        </LocalizationProvider>*/}\n\n      <TextField\n        id=\"datetime-local\"\n        label=\"Next appointment\"\n        type=\"datetime-local\"\n        defaultValue=\"2017-05-24T10:30\"\n        sx={{ width: 250 }}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={handleChangeTime}\n      />\n\n      <TextField\n            onChange={handleChangeName}\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Название заказа\"\n            type=\"name\"\n            fullWidth\n            variant=\"standard\"\n            inputProps={{min: 0, style: { textAlign: 'center' }}} // the change is here\n      />\n      <TextField\n            onChange={handleChangePriority}\n            autoFocus\n            margin=\"dense\"\n            id=\"priority\"\n            label=\"Приоритет\"\n            type=\"priority\"\n            fullWidth\n            variant=\"standard\"\n            inputProps={{min: 0, style: { textAlign: 'center' }}} // the change is here\n      />\n\n      {/*<TextField\n            onChange={handleChangeTime}\n            autoFocus\n            margin=\"dense\"\n            id=\"time\"\n            label=\"Завершить заказ (м)\"\n            type=\"time\"\n            fullWidth\n            variant=\"standard\"\n            inputProps={{min: 0, style: { textAlign: 'center' }}} // the change is here\n      />*/}\n\n     \n\n      <Transition setNewOrder={setNewOrder}/>\n      <DialogActions>\n          <Button onClick={handleClose}>Отменить</Button>\n          <Button onClick={handleClose} autoFocus>\n            Сформировать\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default function DialogAddOrderNewAlgoritm(props:{addOrder: (value: IDialogAddOrder) => void}) {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState<IDialogAddOrder>();\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n\n  return (\n    <div style={{width: '100%'}}>\n      <Button \n      variant=\"contained\" \n      size=\"small\"\n      onClick={handleClickOpen}\n      startIcon={<AddCircleOutlineIcon  fontSize=\"small\"/>}>\n        Добавить заказ\n      </Button>\n\n      <SimpleDialog\n        selectedValue={selectedValue as IDialogAddOrder}\n        open={open}\n        onClose={handleClose}\n        addOrder={props.addOrder}\n      />\n    </div>\n  );\n}\n\n/*\n\n    <div>\n      <Typography variant=\"subtitle1\" component=\"div\">\n        Selected: {selectedValue}\n      </Typography>\n      <br />\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <SimpleDialog\n        selectedValue={selectedValue}\n        open={open}\n        onClose={handleClose}\n      />\n    </div>\n\n*/"]},"metadata":{},"sourceType":"module"}