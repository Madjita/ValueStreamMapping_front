{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  orders: [],\n  loading: true,\n  error: null\n};\nconst useOrdersReducer = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    fetch_orders(state) {\n      state.loading = true;\n    },\n\n    fetch_orders_success(state, action) {\n      console.log(initialState.orders.length < 0);\n\n      if (initialState.orders.length) {\n        state.orders = action.payload; //.slice();\n      }\n\n      state.loading = false;\n    },\n\n    fetch_orders_error(state, action) {\n      state.loading = false;\n      state.error = action.payload;\n    },\n\n    fetch_orders_add(state, action) {\n      console.log(\"fetch_orders_add =\", state, action);\n      state.orders.push(action.payload);\n    },\n\n    fetch_orders_update(state, action) {\n      let find = state.orders.find(o => o.id === o.id);\n      find = action.payload;\n    }\n\n  }\n});\nexport default useOrdersReducer.reducer;\nexport const {\n  fetch_orders,\n  fetch_orders_success,\n  fetch_orders_error,\n  fetch_orders_add,\n  fetch_orders_update\n} = useOrdersReducer.actions;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/reducers/useOrdersReducer.tsx"],"names":["createSlice","initialState","orders","loading","error","useOrdersReducer","name","reducers","fetch_orders","state","fetch_orders_success","action","console","log","length","payload","fetch_orders_error","fetch_orders_add","push","fetch_orders_update","find","o","id","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAKA,MAAMC,YAA2B,GAAE;AAC/BC,EAAAA,MAAM,EAAE,EADuB;AAE/BC,EAAAA,OAAO,EAAE,IAFsB;AAG/BC,EAAAA,KAAK,EAAE;AAHwB,CAAnC;AAMA,MAAMC,gBAAgB,GAAGL,WAAW,CAAC;AACjCM,EAAAA,IAAI,EAAE,QAD2B;AAEjCL,EAAAA,YAFiC;AAGjCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINO,IAAAA,oBAAoB,CAACD,KAAD,EAAOE,MAAP,EAAe;AAE/BC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,YAAY,CAACC,MAAb,CAAoBY,MAApB,GAA6B,CAAzC;;AACA,UAAGb,YAAY,CAACC,MAAb,CAAoBY,MAAvB,EACA;AACIL,QAAAA,KAAK,CAACP,MAAN,GAAeS,MAAM,CAACI,OAAtB,CADJ,CACiC;AAChC;;AAGDN,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACH,KAdK;;AAeNa,IAAAA,kBAAkB,CAACP,KAAD,EAAQE,MAAR,EAAgB;AAC9BF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACI,OAArB;AACH,KAlBK;;AAmBNE,IAAAA,gBAAgB,CAACR,KAAD,EAAQE,MAAR,EAAe;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCJ,KAAjC,EAAuCE,MAAvC;AACAF,MAAAA,KAAK,CAACP,MAAN,CAAagB,IAAb,CAAkBP,MAAM,CAACI,OAAzB;AACH,KAtBK;;AAuBNI,IAAAA,mBAAmB,CAACV,KAAD,EAAQE,MAAR,EAAe;AAC9B,UAAIS,IAAI,GAAGX,KAAK,CAACP,MAAN,CAAakB,IAAb,CAAkBC,CAAC,IAAGA,CAAC,CAACC,EAAF,KAASD,CAAC,CAACC,EAAjC,CAAX;AACAF,MAAAA,IAAI,GAAGT,MAAM,CAACI,OAAd;AACH;;AA1BK;AAHuB,CAAD,CAApC;AAgCA,eAAeV,gBAAgB,CAACkB,OAAhC;AACA,OAAO,MAAM;AAAEf,EAAAA,YAAF;AAAgBE,EAAAA,oBAAhB;AAAsCM,EAAAA,kBAAtC;AAAyDC,EAAAA,gBAAzD;AAA0EE,EAAAA;AAA1E,IAAkGd,gBAAgB,CAACmB,OAAzH","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport IDataOrder from '../../Component/Data/IDataOrder'\nimport { useOrdersType } from '../../type/useOrdersType'\n\n\nconst initialState: useOrdersType ={\n    orders: [],\n    loading: true,\n    error: null\n}\n\nconst useOrdersReducer = createSlice({  \n    name: 'orders',  \n    initialState,  \n    reducers: {       \n        fetch_orders(state) {  \n            state.loading = true     \n        },\n        fetch_orders_success(state,action) {   \n\n            console.log(initialState.orders.length < 0)\n            if(initialState.orders.length)\n            {\n                state.orders = action.payload//.slice();\n            }\n\n            \n            state.loading = false; \n        },     \n        fetch_orders_error(state, action) {     \n            state.loading = false    \n            state.error = action.payload    \n        },\n        fetch_orders_add(state, action){\n            console.log(\"fetch_orders_add =\",state,action)\n            state.orders.push(action.payload);\n        },\n        fetch_orders_update(state, action){\n            let find = state.orders.find(o=> o.id === o.id);\n            find = action.payload\n        }   \n    },\n})\nexport default useOrdersReducer.reducer\nexport const { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } = useOrdersReducer.actions"]},"metadata":{},"sourceType":"module"}