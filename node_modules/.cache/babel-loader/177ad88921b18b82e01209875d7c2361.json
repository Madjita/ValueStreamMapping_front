{"ast":null,"code":"import axios from \"axios\";\nimport { fetch_orders, fetch_orders_success, fetch_orders_error, fetch_orders_add, fetch_orders_update } from '../reducers/useOrdersReducer';\nexport const ordersLoading = () => {\n  return async dispatch => {\n    console.log(\"Loading\");\n\n    try {\n      dispatch(fetch_orders()); //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n      const response = await axios.get('https://localhost:5001/api/manufacture/orders');\n      let data = response.data;\n      console.log(\"Loading finish\");\n      console.log(data);\n      setTimeout(() => {\n        dispatch(fetch_orders_success(data));\n      }, 0);\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderAdd = newOrder => {\n  return async dispatch => {\n    console.log(\"Add\");\n    console.log(newOrder);\n    console.log(JSON.stringify(newOrder));\n\n    try {\n      //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n      const response = await axios.post('https://localhost:5001/api/manufacture/addOrder', JSON.stringify(newOrder), {\n        headers: {\n          // Overwrite Axios's automatically set Content-Type\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_add(newOrder));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const orderUpdate = (updateOrder, oldOrder) => {\n  return async dispatch => {\n    let obj = {\n      newOrder: updateOrder,\n      oldOrder: oldOrder\n    };\n\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateOrder', JSON.stringify(obj), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const startSimulation = (item, sim) => {\n  return async dispatch => {\n    let copyObjet = { ...item\n    };\n    copyObjet.simulation = sim;\n\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/startSimulationOrder', JSON.stringify(copyObjet), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        //dispatch(fetch_orders_update(obj));\n        console.log(\"Add Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};\nexport const updateInfoOrder = item => {\n  return async dispatch => {\n    let copyObjet = { ...item\n    };\n\n    try {\n      const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder', JSON.stringify(copyObjet), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 200) {\n        console.log(\"Update\");\n        let data = JSON.parse(response.data);\n        dispatch(fetch_orders_update(data));\n        console.log(\"Update Ok\");\n      }\n    } catch (e) {\n      dispatch(fetch_orders_error('Error'));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/action-creator/useActionOrders.tsx"],"names":["axios","fetch_orders","fetch_orders_success","fetch_orders_error","fetch_orders_add","fetch_orders_update","ordersLoading","dispatch","console","log","response","get","data","setTimeout","e","orderAdd","newOrder","JSON","stringify","post","headers","status","orderUpdate","updateOrder","oldOrder","obj","startSimulation","item","sim","copyObjet","simulation","updateInfoOrder","parse"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { Dispatch } from \"react\"\nimport IDataOrder from \"../../Component/Data/IDataOrder\"\nimport { useOrdersActionType,useLeftMenuAction } from \"../../type/useOrdersType\"\n\nimport { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } from '../reducers/useOrdersReducer'\n\n\nimport IDialogAddOrder from '../../Component/Data/Dialog/IDialogAddOrder'\n\nexport const ordersLoading = () => {\n    return async (dispatch: any) => {\n\n        console.log(\"Loading\")\n        try{\n            dispatch(fetch_orders());\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.get('https://localhost:5001/api/manufacture/orders')\n\n            \n            let data = response.data as IDataOrder[];\n            console.log(\"Loading finish\")\n            console.log(data)\n            setTimeout(() => {\n                dispatch(fetch_orders_success(data));\n            }, 0)\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const orderAdd = (newOrder: IDialogAddOrder) => {\n    return async (dispatch: any) => {\n\n        console.log(\"Add\")\n        console.log(newOrder)\n        console.log(JSON.stringify(newOrder))\n        try{\n\n            //const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n            const response = await axios.post('https://localhost:5001/api/manufacture/addOrder',JSON.stringify(newOrder),{\n                headers: {\n                  // Overwrite Axios's automatically set Content-Type\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_add(newOrder));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\nexport const orderUpdate = (updateOrder: IDataOrder, oldOrder: IDataOrder) => {\n    return async (dispatch: any) => {\n        let obj = {newOrder: updateOrder , oldOrder: oldOrder}\n        try{\n            const response = await axios.post('https://localhost:5001/api/manufacture/updateOrder',JSON.stringify(obj),{\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              })\n\n            if(response.status === 200)\n            {\n                dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const startSimulation = (item: IDataOrder, sim: boolean) => {\n    return async (dispatch: any) => {\n\n        let copyObjet = {...item}\n        copyObjet.simulation = sim;\n        try\n        {\n            const response = await axios.post('https://localhost:5001/api/manufacture/startSimulationOrder',JSON.stringify(copyObjet),\n            {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n                //dispatch(fetch_orders_update(obj));\n                console.log(\"Add Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\nexport const updateInfoOrder = (item: IDataOrder) => {\n    return async (dispatch: any) => {\n\n        let copyObjet = {...item}\n        try\n        {\n            const response = await axios.post('https://localhost:5001/api/manufacture/updateInfoOrder',JSON.stringify(copyObjet),\n            {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n            })\n\n            if(response.status === 200)\n            {\n\n                console.log(\"Update\")\n                let data =  JSON.parse(response.data) as IDataOrder;\n\n                dispatch(fetch_orders_update(data));\n                console.log(\"Update Ok\")\n            }\n        } catch(e) {\n            dispatch(fetch_orders_error('Error'));\n        }\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}