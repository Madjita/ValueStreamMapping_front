{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Header from './Component/Header/Header';\nimport LeftBar from './Component/LeftBar/LeftBar';\nimport Main from './Component/Main/Main';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport IDialogAddOrder from './Component/Data/Dialog/IDialogAddOrder';\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [newOrder, setOrder] = useState();\n\n  const addOrder = value => {\n    console.log(\"NEW = \", value);\n    setOrder(value);\n  };\n  /*\n  const [isPaused, setIsPaused] = useState(false);\n    const [data, setData] = useState(null); \n    const [status, setStatus] = useState(\"\");\n    const [socket, setSocket] = useState(new WebSocket(\"ws://192.168.0.2:5001/ws\"));\n    const ws = useRef(null)\n     const [chatHistory, setChatHistory] = useState([]);\n    const [isOnline, setIsOnline] = useState(false);\n    const [messages, setMessages] = useState({\n      messages: 'null'\n    });\n   \n  \n    const addMessages = (msg) => {\n      //setTextValue((prev) => [...prev, msg]);\n    };\n     useEffect(() => {\n        if (!isPaused) {\n            ws.current = new WebSocket(\"ws://192.168.0.2:5001/ws\"); // создаем ws соединение\n          \n              ws.current.onopen = () => setStatus(\"Соединение открыто\");\t// callback на ивент открытия соединения\n            ws.current.onclose = () => setStatus(\"Соединение закрыто\"); // callback на ивент закрытия соединения\n             ws.current.onmessage = (message) => {\n              const newMessage = `Message from WebSocket: ${message.data}`\n              this.setMessages({\n                messages: this.state.messages.concat([newMessage]) \n              })\n            }\n             setSocket(ws);\n            //setTextValue('sadas')\n            //gettingData();\n           \n        }\n        return () => ws.current.close(); // кода меняется isPaused - соединение закрывается\n    }, [ws, isPaused]);\n  \n  \n    const gettingData = useCallback(() => {\n        if (!ws.current) return;\n         ws.current.onmessage = e => {                //подписка на получение данных по вебсокету\n            if (isPaused) return;\n            console.log('da')\n            const message = JSON.parse(e.data);\n         \n            setData(message);\n        };\n    }, [isPaused]);\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      height: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"agxlRZJSXNw6ym6C4xkPqT20JJU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/App.js"],"names":["React","useState","useRef","useEffect","useCallback","Header","LeftBar","Main","Box","CssBaseline","IDialogAddOrder","Chat","App","newOrder","setOrder","addOrder","value","console","log","display","height"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,MAAzB,EAAgCC,SAAhC,EAA0CC,WAA1C,QAA6D,OAA7D;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAGA,OAAOC,eAAP,MAA4B,yCAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,GAAG,GAAC,MAAI;AAAA;;AAGZ,QAAM,CAACC,QAAD,EAAUC,QAAV,IAAsBb,QAAQ,EAApC;;AAEA,QAAMc,QAAQ,GAAEC,KAAD,IACf;AACEC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACAF,IAAAA,QAAQ,CAACE,KAAD,CAAR;AACD,GAJD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAkBE,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEG,MAAAA,OAAO,EAAE,MAAX;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAAT;AAAA,2BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAtFD;;GAAMR,G;;KAAAA,G;AAwFN,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState,useRef,useEffect,useCallback } from 'react';\n\nimport Header from './Component/Header/Header';\nimport LeftBar from './Component/LeftBar/LeftBar';\nimport Main from './Component/Main/Main';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\n\n\nimport IDialogAddOrder from './Component/Data/Dialog/IDialogAddOrder'\nimport Chat from './Chat';\n\nconst App=()=>{\n\n\n  const [newOrder,setOrder] = useState();\n\n  const addOrder=(value)=>\n  {\n    console.log(\"NEW = \", value)\n    setOrder(value)\n  }\n\n  /*\n  const [isPaused, setIsPaused] = useState(false);\n    const [data, setData] = useState(null); \n    const [status, setStatus] = useState(\"\");\n    const [socket, setSocket] = useState(new WebSocket(\"ws://192.168.0.2:5001/ws\"));\n    const ws = useRef(null)\n\n    const [chatHistory, setChatHistory] = useState([]);\n    const [isOnline, setIsOnline] = useState(false);\n    const [messages, setMessages] = useState({\n      messages: 'null'\n    });\n\n  \n\n\n\n    const addMessages = (msg) => {\n      //setTextValue((prev) => [...prev, msg]);\n    };\n\n    useEffect(() => {\n        if (!isPaused) {\n            ws.current = new WebSocket(\"ws://192.168.0.2:5001/ws\"); // создаем ws соединение\n          \n\n\n            ws.current.onopen = () => setStatus(\"Соединение открыто\");\t// callback на ивент открытия соединения\n            ws.current.onclose = () => setStatus(\"Соединение закрыто\"); // callback на ивент закрытия соединения\n\n            ws.current.onmessage = (message) => {\n              const newMessage = `Message from WebSocket: ${message.data}`\n              this.setMessages({\n                messages: this.state.messages.concat([newMessage]) \n              })\n            }\n\n            setSocket(ws);\n            //setTextValue('sadas')\n            //gettingData();\n           \n        }\n        return () => ws.current.close(); // кода меняется isPaused - соединение закрывается\n    }, [ws, isPaused]);\n\n\n\n  \n    const gettingData = useCallback(() => {\n        if (!ws.current) return;\n\n        ws.current.onmessage = e => {                //подписка на получение данных по вебсокету\n            if (isPaused) return;\n            console.log('da')\n            const message = JSON.parse(e.data);\n\n        \n            setData(message);\n        };\n    }, [isPaused]);\n*/\n   \n\n\n\n  return (\n    <Box sx={{ display: 'flex',height: '100%', }}>\n      <Chat/>\n       {/*\n        <CssBaseline />\n        <Header/>\n        <LeftBar addOrder={addOrder}/>\n       <Main newOrder={newOrder}/> */}\n    </Box>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}