{"ast":null,"code":"import { createSlice, current } from '@reduxjs/toolkit';\n\n/*let initialState: useOrdersType ={\n    orders: [],\n    loading: true,\n    changeList: false,\n    error: null\n}*/\nconst useOrdersReducer = createSlice({\n  name: 'orders',\n  initialState: {\n    orders: new Array(),\n    loading: true,\n    changeList: false,\n    error: null\n  },\n  reducers: {\n    fetch_orders(state) {\n      state.loading = true;\n    },\n\n    fetch_orders_success: (state, action) => {\n      console.log(\"sdf2 =\", typeof state);\n\n      if (typeof state === 'object') {\n        console.log(\"sdf =\", current(state)); // state.orders = action.payload//.slice();\n        // state.loading = false; \n\n        console.log(\"sdf3 =\");\n        return { ...state,\n          orders: action.payload,\n          loading: false\n        };\n      }\n    },\n\n    fetch_orders_error(state, action) {\n      state.loading = false;\n      state.error = action.payload;\n    },\n\n    fetch_orders_add(state, action) {\n      console.log(\"fetch_orders_add =\", state, action);\n      state.orders.push(action.payload);\n    },\n\n    fetch_orders_update(state, action) {\n      let find = state.orders.find(o => o.id === o.id);\n      find = action.payload;\n    }\n\n  }\n  /*extraReducers:{\n   }*/\n\n});\nexport default useOrdersReducer.reducer;\nexport const {\n  fetch_orders,\n  fetch_orders_success,\n  fetch_orders_error,\n  fetch_orders_add,\n  fetch_orders_update\n} = useOrdersReducer.actions;","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/store/reducers/useOrdersReducer.tsx"],"names":["createSlice","current","useOrdersReducer","name","initialState","orders","Array","loading","changeList","error","reducers","fetch_orders","state","fetch_orders_success","action","console","log","payload","fetch_orders_error","fetch_orders_add","push","fetch_orders_update","find","o","id","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,EAAoCC,OAApC,QAAmD,kBAAnD;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;AACjCG,EAAAA,IAAI,EAAE,QAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAE,IAAIC,KAAJ,EADE;AAEVC,IAAAA,OAAO,EAAE,IAFC;AAGVC,IAAAA,UAAU,EAAE,KAHF;AAIVC,IAAAA,KAAK,EAAE;AAJG,GAFmB;AAQjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACH,KAHK;;AAINM,IAAAA,oBAAoB,EAAE,CAACD,KAAD,EAAOE,MAAP,KAAkB;AAEpCC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqB,OAAOJ,KAA5B;;AAGA,UAAG,OAAOA,KAAP,KAAiB,QAApB,EACA;AACIG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBf,OAAO,CAACW,KAAD,CAA3B,EADJ,CAEG;AACA;;AACCG,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,eAAO,EAAC,GAAGJ,KAAJ;AAAWP,UAAAA,MAAM,EAAES,MAAM,CAACG,OAA1B;AAAmCV,UAAAA,OAAO,EAAE;AAA5C,SAAP;AACH;AAIJ,KArBK;;AAsBNW,IAAAA,kBAAkB,CAACN,KAAD,EAAQE,MAAR,EAAgB;AAC9BF,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACAK,MAAAA,KAAK,CAACH,KAAN,GAAcK,MAAM,CAACG,OAArB;AACH,KAzBK;;AA0BNE,IAAAA,gBAAgB,CAACP,KAAD,EAAQE,MAAR,EAAe;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCJ,KAAjC,EAAuCE,MAAvC;AACAF,MAAAA,KAAK,CAACP,MAAN,CAAae,IAAb,CAAkBN,MAAM,CAACG,OAAzB;AACH,KA7BK;;AA8BNI,IAAAA,mBAAmB,CAACT,KAAD,EAAQE,MAAR,EAAe;AAC9B,UAAIQ,IAAI,GAAGV,KAAK,CAACP,MAAN,CAAaiB,IAAb,CAAkBC,CAAC,IAAGA,CAAC,CAACC,EAAF,KAASD,CAAC,CAACC,EAAjC,CAAX;AACAF,MAAAA,IAAI,GAAGR,MAAM,CAACG,OAAd;AACH;;AAjCK;AAmCV;AACJ;;AA5CqC,CAAD,CAApC;AA+CA,eAAef,gBAAgB,CAACuB,OAAhC;AACA,OAAO,MAAM;AAAEd,EAAAA,YAAF;AAAgBE,EAAAA,oBAAhB;AAAsCK,EAAAA,kBAAtC;AAAyDC,EAAAA,gBAAzD;AAA0EE,EAAAA;AAA1E,IAAkGnB,gBAAgB,CAACwB,OAAzH","sourcesContent":["import { createSlice, PayloadAction,current } from '@reduxjs/toolkit'\nimport IDataOrder from '../../Component/Data/IDataOrder'\nimport { useOrdersType } from '../../type/useOrdersType'\n\n\n/*let initialState: useOrdersType ={\n    orders: [],\n    loading: true,\n    changeList: false,\n    error: null\n}*/\n\nconst useOrdersReducer = createSlice({  \n    name: 'orders',  \n    initialState: {\n        orders: new Array as IDataOrder[],\n        loading: true,\n        changeList: false,\n        error: null\n    } as useOrdersType,  \n    reducers: {       \n        fetch_orders(state) {  \n            state.loading = true     \n        },\n        fetch_orders_success: (state,action) => {   \n\n            console.log(\"sdf2 =\",typeof state)\n\n            \n            if(typeof state === 'object')\n            {\n                console.log(\"sdf =\",current(state))\n               // state.orders = action.payload//.slice();\n               // state.loading = false; \n                console.log(\"sdf3 =\",)\n\n                return {...state, orders: action.payload, loading: false }\n            }\n\n           \n            \n        },     \n        fetch_orders_error(state, action) {     \n            state.loading = false    \n            state.error = action.payload    \n        },\n        fetch_orders_add(state, action){\n            console.log(\"fetch_orders_add =\",state,action)\n            state.orders.push(action.payload);\n        },\n        fetch_orders_update(state, action){\n            let find = state.orders.find(o=> o.id === o.id);\n            find = action.payload\n        }   \n    },\n    /*extraReducers:{\n\n    }*/\n})\nexport default useOrdersReducer.reducer\nexport const { fetch_orders, fetch_orders_success, fetch_orders_error,fetch_orders_add,fetch_orders_update } = useOrdersReducer.actions"]},"metadata":{},"sourceType":"module"}