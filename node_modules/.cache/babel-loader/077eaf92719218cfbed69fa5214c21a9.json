{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = 'ws://192.168.0.2:5001/ws';\n\nconst Chat = () => {\n  _s();\n\n  const [user, setUser] = useState('Tarzan');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]); //const [ws, setWs] = useState(null);\n\n  const ws = useRef(null);\n\n  const submitMessage = (usr, msg) => {\n    const message = {\n      user: usr,\n      message: msg\n    };\n    ws.send(JSON.stringify(message));\n    setMessages([message, ...messages]);\n  };\n\n  const soket = useRef(null); //let ws = useRef(null);\n\n  /*\tuseEffect(() => {\n     soket.onopen = () => {\n       console.log('WebSocket Connected');\n     }\n      soket.onmessage = (e) => {\n          console.log('Read');\n       const message = JSON.parse(e.data);\n       setMessages([message, ...messages]);\n     }\n      return () => {\n            soket.onclose = () => {\n         console.log('WebSocket Disconnected');\n         setWs(new WebSocket(URL));\n       }\n     }\n  \t}, ); //[ws.onmessage, ws.onopen, ws.onclose, messages]\n  */\n\n  const [isPaused, setPause] = useState(false);\n  const clientRef = useRef(null);\n  const [waitingToReconnect, setWaitingToReconnect] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  function addMessage(message) {\n    setMessages([...messages, message]);\n  }\n\n  useEffect(() => {\n    if (waitingToReconnect) {\n      return;\n    } // Only set up the websocket once\n\n\n    if (!clientRef.current) {\n      const client = new WebSocket(URL);\n      clientRef.current = client;\n      window.client = client;\n\n      client.onerror = e => console.error(e);\n\n      client.onopen = () => {\n        setIsOpen(true);\n        console.log('ws opened');\n        client.send('ping');\n      };\n\n      client.onclose = () => {\n        if (clientRef.current) {\n          // Connection failed\n          console.log('ws closed by server');\n        } else {\n          // Cleanup initiated from app side, can return here, to not attempt a reconnect\n          console.log('ws closed by app component unmount');\n          return;\n        }\n\n        if (waitingToReconnect) {\n          return;\n        }\n\n        ; // Parse event code and log\n\n        setIsOpen(false);\n        console.log('ws closed'); // Setting this will trigger a re-run of the effect,\n        // cleaning up the current websocket, but not setting\n        // up a new one right away\n\n        setWaitingToReconnect(true); // This will trigger another re-run, and because it is false,\n        // the socket will be set up again\n\n        setTimeout(() => setWaitingToReconnect(null), 5000);\n      };\n\n      client.onmessage = message => {\n        console.log('received message', message);\n        addMessage(`received '${message.data}'`);\n      };\n\n      return () => {\n        console.log('Cleanup'); // Dereference, so it will set up next time\n\n        clientRef.current = null;\n        client.close();\n      };\n    }\n  }, [waitingToReconnect]);\n  useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onmessage = e => {\n      if (isPaused) return;\n      const message = JSON.parse(e.data);\n      console.log(\"e\", message);\n      setMessages([message, ...messages]);\n    };\n  }, [isPaused]);\n  console.log('rerender');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"user\",\n      children: [\"Name :\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user\",\n        placeholder: \"User\",\n        value: user,\n        onChange: e => setUser(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.reverse().map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: message.user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 16\n        }, this), \": \", /*#__PURE__*/_jsxDEV(\"em\", {\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 39\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 14\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      onSubmit: e => {\n        e.preventDefault();\n        submitMessage(user, message);\n        setMessage([]);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: 'Type a message ...',\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPause(!isPaused),\n      children: isPaused ? \"Resume\" : \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 6\n  }, this);\n};\n\n_s(Chat, \"QslITOndHc28PBY5l1WuVTP0W8c=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Chat.js"],"names":["React","useState","useEffect","useRef","URL","Chat","user","setUser","message","setMessage","messages","setMessages","ws","submitMessage","usr","msg","send","JSON","stringify","soket","isPaused","setPause","clientRef","waitingToReconnect","setWaitingToReconnect","isOpen","setIsOpen","addMessage","current","client","WebSocket","window","onerror","e","console","error","onopen","log","onclose","setTimeout","onmessage","data","close","parse","target","value","reverse","map","index","preventDefault"],"mappings":"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","sourcesContent":["\n\nimport React, { useState, useEffect, useRef } from \"react\";\n\nconst URL = 'ws://192.168.0.2:5001/ws';\n\n\nconst Chat =() => {\n\tconst [user, setUser] = useState('Tarzan');\n  \tconst [message, setMessage] = useState([]);\n  \tconst [messages, setMessages] = useState([]);\n  \t//const [ws, setWs] = useState(null);\n\n    const ws = useRef(null);\n\n  \tconst submitMessage = (usr, msg) => {\n  \t\tconst message = { user: usr, message: msg };\n  \t\tws.send(JSON.stringify(message));\n  \t\tsetMessages([message, ...messages]);\n  \t}\n\n    const soket = useRef(null)\n    //let ws = useRef(null);\n   \n  /*\tuseEffect(() => {\n\t    soket.onopen = () => {\n\t      console.log('WebSocket Connected');\n\t    }\n\n\t    soket.onmessage = (e) => {\n          console.log('Read');\n\t      const message = JSON.parse(e.data);\n\t      setMessages([message, ...messages]);\n\t    }\n\n\t    return () => {\n            soket.onclose = () => {\n\t        console.log('WebSocket Disconnected');\n\t        setWs(new WebSocket(URL));\n\t      }\n\t    }\n  \t}, ); //[ws.onmessage, ws.onopen, ws.onclose, messages]\n*/\n\n      const [isPaused, setPause] = useState(false);\n  \n\n       const clientRef = useRef(null);\n        const [waitingToReconnect, setWaitingToReconnect] = useState(null);\n        const [isOpen, setIsOpen] = useState(false);\n\n        function addMessage(message) {\n            setMessages([...messages, message]); \n        }\n\n      useEffect(() => {\n\n        if (waitingToReconnect) {\n          return;\n        }\n    \n        // Only set up the websocket once\n        if (!clientRef.current) {\n          const client = new WebSocket(URL);\n          clientRef.current = client;\n    \n          window.client = client;\n    \n          client.onerror = (e) => console.error(e);\n    \n          client.onopen = () => {\n            setIsOpen(true);\n            console.log('ws opened');\n            client.send('ping');\n          };\n    \n          client.onclose = () => {\n    \n            if (clientRef.current) {\n              // Connection failed\n              console.log('ws closed by server');\n            } else {\n              // Cleanup initiated from app side, can return here, to not attempt a reconnect\n              console.log('ws closed by app component unmount');\n              return;\n            }\n    \n            if (waitingToReconnect) {\n              return;\n            };\n    \n            // Parse event code and log\n            setIsOpen(false);\n            console.log('ws closed');\n    \n            // Setting this will trigger a re-run of the effect,\n            // cleaning up the current websocket, but not setting\n            // up a new one right away\n            setWaitingToReconnect(true);\n    \n            // This will trigger another re-run, and because it is false,\n            // the socket will be set up again\n            setTimeout(() => setWaitingToReconnect(null), 5000);\n          };\n    \n          client.onmessage = message => {\n            console.log('received message', message);\n            addMessage(`received '${message.data}'`);\n          };\n    \n    \n          return () => {\n    \n            console.log('Cleanup');\n            // Dereference, so it will set up next time\n            clientRef.current = null;\n    \n            client.close();\n          }\n        }\n    \n      }, [waitingToReconnect]);\n  \n      useEffect(() => {\n          if (!ws.current) return;\n  \n          ws.current.onmessage = e => {\n              if (isPaused) return;\n              const message = JSON.parse(e.data);\n              console.log(\"e\", message);\n              setMessages([message, ...messages]);\n          };\n      }, [isPaused]);\n\n      console.log('rerender')\n\n  \treturn (\n\t    <div>\n\t        <label htmlFor=\"user\">\n\t          Name :\n\t          <input\n\t            type=\"text\"\n\t            id=\"user\"\n\t            placeholder=\"User\"\n\t            value={user}\n\t            onChange={e => setUser(e.target.value)}\n\t          />\n\t        </label>\n\n\t        <ul>\n\t          {messages.reverse().map((message, index) =>\n\t            <li key={index}>\n\t              <b>{message.user}</b>: <em>{message.message}</em>\n\t            </li>\n\t          )}\n\t        </ul>\n\n\t        <form\n\t          action=\"\"\n\t          onSubmit={e => {\n\t            e.preventDefault();\n\t            submitMessage(user, message);\n\t            setMessage([]);\n\t          }}\n\t        >\n\t          <input\n\t            type=\"text\"\n\t            placeholder={'Type a message ...'}\n\t            value={message}\n\t            onChange={e => setMessage(e.target.value)}\n\t          />\n\t          <input type=\"submit\" value={'Send'} />\n\t        </form>\n            <button onClick={() => setPause(!isPaused)}>\n                {isPaused ? \"Resume\" : \"Pause\"}\n            </button>\n\t    </div>\n  \t)\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}