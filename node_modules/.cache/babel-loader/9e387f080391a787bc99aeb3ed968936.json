{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContent.js\";\nimport React from \"react\";\nimport MidleContentStyle from \"./MidleContentStyle\";\nimport DiagramViewBox from \"../../../Diagrams/DiagramViewBox\"; //import  {ListActiveConxtext} from \"../../../../ListActiveContextProvider\"\n\nimport Triangle from \"../../../SVG/Triangle/Triangle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MidleContent extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this._showCard = () => {\n      if (this.context.ListActive.length === 0) {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"MidleContent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 20\n        }, this);\n      }\n\n      let object = this.context.ListActive.find(item => item.isSelected === true);\n      console.log(\"this._showCard(context)\", this.context);\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: object.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 18\n      }, this);\n    };\n\n    this.getCoords = elem => {\n      let box = elem.getBoundingClientRect();\n      console.log(this.MidleContentStyle.pageYOffset);\n      return {\n        top: Math.round(box.top),\n        //pageYOffset\n        left: Math.round(box.left) //pageXOffset\n\n      };\n    };\n\n    this.handleOnWhell = e => {\n      let count = e.deltaY / 17;\n      console.log(\"sdf\");\n      let target = this.MidleContentStyle; //e.target.closest('....'); // Здесь что-то уникальное, что может указать на род. блок\n\n      let targetCoords = target.getBoundingClientRect();\n      console.log(\"targetCoords =\", targetCoords); //let xCoord = e.clientX - targetCoords.left;\n      //let yCoord = e.clientY - targetCoords.top;\n\n      console.log(\"e.clientX =\", e.clientX, \" e.clientY = \", e.clientY);\n      let xCoord = e.clientX - targetCoords.left;\n      let yCoord = e.clientY - targetCoords.top; //console.log(this.MidleContentStyle)\n      //console.log(\"xCoord = \",xCoord,\" yCoord = \",yCoord)\n\n      switch (e.deltaY > 0) {\n        case true:\n          console.log('positive', e.deltaY, count);\n          let plus = this.state.scale + 0.05;\n          this.setState({\n            scale: plus,\n            x: xCoord,\n            y: yCoord\n          }); //,x: xCoord, y: yCoord\n\n          break;\n\n        default:\n          console.log('negative', e.deltaY, count);\n          count *= -1;\n          let minus = this.state.scale - 0.05;\n\n          if (minus < 0) {\n            minus = 0;\n          }\n\n          this.setState({\n            scale: minus\n          });\n        //,x: e.screenX, y: e.screenY\n      }\n    };\n\n    this.handleOnMouseMove = e => {//console.log('Координаты по X: ' + xCoord,'Координаты по Y: ' + yCoord);\n      //this.setState({ x: e.screenX, y: e.screenY });\n    };\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      scale: 1,\n      x: 0,\n      y: 0\n    };\n  }\n\n  //translate(\"+this.state.x+\"px,\"+this.state.y+\"px)\n  render() {\n    return /*#__PURE__*/_jsxDEV(MidleContentStyle, {\n      ref: MidleContentStyle => {\n        this.MidleContentStyle = MidleContentStyle;\n      },\n      onWheel: this.handleOnWhell,\n      onMouseMove: this.handleOnMouseMove,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          position: \"relative\",\n          transformOrigin: this.state.x + \"px \" + this.state.y + \"px\",\n          transform: \"scale(\" + this.state.scale + \")\",\n          boxShadow: \"rgba(0,0,0,0.2) 0px 3px 5px -1px,rgba(0,0,0,0.14) 0px 6px 10px 0px,rgba(0,0,0,0.12) 0px 1px 14px 0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\",\n            height: \"100%\",\n            position: \"absolute\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Triangle, {\n            left: 0,\n            top: 0,\n            width: 100,\n            height: 100,\n            min: 50,\n            max: 100,\n            value: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Triangle, {\n            left: 200,\n            top: 0,\n            width: 100,\n            height: 100,\n            min: 50,\n            max: 100,\n            value: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"crosshair\",\n        src: \"../../media/examples/crosshair.svg\",\n        style: \"left: calc(38px); top: calc(38px); opacity: 1;\",\n        width: \"24px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MidleContent; //<h3>{context.activeObject.name ? context.activeObject.name : \"MidleContent\"}</h3>","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/Project_node/Diplom/react-diplom/react-diplom/src/components/Container/MidleContainer/MidleContent/MidleContent.js"],"names":["React","MidleContentStyle","DiagramViewBox","Triangle","MidleContent","PureComponent","constructor","props","_showCard","context","ListActive","length","object","find","item","isSelected","console","log","name","getCoords","elem","box","getBoundingClientRect","pageYOffset","top","Math","round","left","handleOnWhell","e","count","deltaY","target","targetCoords","clientX","clientY","xCoord","yCoord","plus","state","scale","setState","x","y","minus","handleOnMouseMove","error","isLoaded","render","width","height","position","transformOrigin","transform","boxShadow"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport MidleContentStyle from \"./MidleContentStyle\"\n\nimport DiagramViewBox from \"../../../Diagrams/DiagramViewBox\"\n\n//import  {ListActiveConxtext} from \"../../../../ListActiveContextProvider\"\n\nimport Triangle from \"../../../SVG/Triangle/Triangle\"\n\nclass MidleContent extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          scale: 1,\n          x: 0,\n          y: 0 \n        };\n      }\n\n      static MidleContentStyle;\n\n      //static contextType = ListActiveConxtext;\n\n      _showCard = () =>\n      {\n          if(this.context.ListActive.length === 0)\n          {\n            return <h3>MidleContent</h3>\n          }\n\n          let object = this.context.ListActive.find(item => item.isSelected === true)\n\n          console.log(\"this._showCard(context)\",this.context)\n\n     \n\n          return <h3>{object.name}</h3>\n      }\n\n      getCoords = (elem) => {\n        let box = elem.getBoundingClientRect();\n        console.log(this.MidleContentStyle.pageYOffset)\n        return {\n          top: Math.round(box.top), //pageYOffset\n          left: Math.round(box.left)//pageXOffset\n        };\n      }\n\n      handleOnWhell = (e) =>\n      {\n        let count = (e.deltaY/17)\n        console.log(\"sdf\")\n\n        let target = this.MidleContentStyle//e.target.closest('....'); // Здесь что-то уникальное, что может указать на род. блок\n\n\n        let targetCoords = target.getBoundingClientRect();\n        console.log(\"targetCoords =\",targetCoords)\n        //let xCoord = e.clientX - targetCoords.left;\n        //let yCoord = e.clientY - targetCoords.top;\n\n        console.log(\"e.clientX =\",e.clientX,\" e.clientY = \",e.clientY)\n        let xCoord = e.clientX - targetCoords.left;\n        let yCoord = e.clientY - targetCoords.top;\n\n\n\n        //console.log(this.MidleContentStyle)\n\n        //console.log(\"xCoord = \",xCoord,\" yCoord = \",yCoord)\n\n        switch (e.deltaY > 0) {\n            case true:\n              console.log('positive',e.deltaY,count);\n              let plus = this.state.scale+0.05\n\n              this.setState({scale: plus,x: xCoord, y: yCoord}) //,x: xCoord, y: yCoord\n              break;\n            default:\n              console.log('negative',e.deltaY,count);\n              count *=(-1)\n\n              let minus = this.state.scale-0.05\n              if(minus < 0 )\n              {\n                minus = 0\n              }\n              this.setState({scale: minus}) //,x: e.screenX, y: e.screenY\n          }\n      }\n\n      handleOnMouseMove = (e) =>\n      {\n      \n        //console.log('Координаты по X: ' + xCoord,'Координаты по Y: ' + yCoord);\n        //this.setState({ x: e.screenX, y: e.screenY });\n      }\n      //translate(\"+this.state.x+\"px,\"+this.state.y+\"px)\n\n      render() {\n        return (\n            <MidleContentStyle ref={(MidleContentStyle) => { this.MidleContentStyle = MidleContentStyle; }}  onWheel={this.handleOnWhell} onMouseMove={this.handleOnMouseMove}>\n                <div style={{width: \"100%\", height: \"100%\",position: \"relative\",transformOrigin:this.state.x+\"px \"+this.state.y+\"px\",transform:\"scale(\"+this.state.scale+\")\",boxShadow: \"rgba(0,0,0,0.2) 0px 3px 5px -1px,rgba(0,0,0,0.14) 0px 6px 10px 0px,rgba(0,0,0,0.12) 0px 1px 14px 0px\"}}>\n                  <div  style={{width: \"100%\", height: \"100%\",position: \"absolute\"}}>\n                    <Triangle   left={0} top={0} width={100} height={100} min={50} max={100} value={0}/>\n                    <Triangle   left={200} top={0}  width={100} height={100} min={50} max={100} value={50}/>\n                  </div>\n                </div>\n                <img id=\"crosshair\" src=\"../../media/examples/crosshair.svg\" style=\"left: calc(38px); top: calc(38px); opacity: 1;\" width=\"24px\"></img>\n               {/* <DiagramViewBox/>\n\n              <ListActiveConxtext.Consumer>\n                {value => (\n                  <h3>MidleContent {console.log(value.ListActive)}</h3>\n                )}\n                \n                </ListActiveConxtext.Consumer>*/} \n            </MidleContentStyle>\n\n        )\n      }\n}\n\n\n\nexport default MidleContent;\n\n//<h3>{context.activeObject.name ? context.activeObject.name : \"MidleContent\"}</h3>"]},"metadata":{},"sourceType":"module"}