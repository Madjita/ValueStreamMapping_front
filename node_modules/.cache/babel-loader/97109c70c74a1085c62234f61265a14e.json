{"ast":null,"code":"var _jsxFileName = \"/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInDefault.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\nimport { IDataColorOrderInDefault } from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault';\nimport { useHistory, useLocation } from 'react-router';\nimport { useActionOrders } from '../../../hooks/useActionOrders';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar simulationEnum;\n\n(function (simulationEnum) {\n  simulationEnum[\"Start\"] = \"\\u0417\\u0430\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n  simulationEnum[\"Stop\"] = \"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u044E\";\n})(simulationEnum || (simulationEnum = {}));\n\nconst CardOrderInDefault = props => {\n  _s();\n\n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  });\n  const [order, setOrder] = useState();\n\n  if (order === undefined) {\n    setOrder(props.data);\n  }\n\n  const {\n    Start,\n    Stop\n  } = simulationEnum;\n  const {\n    orders,\n    loading\n  } = useTypedSelector(state => state.orders);\n  const {\n    startSimulation,\n    updateInfoOrder\n  } = useActionOrders();\n\n  const onSimulation = () => {\n    if (simulation.work) {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Start\n      });\n      startSimulation(props.data, sim);\n    } else {\n      let sim = !simulation.work;\n      setSimulation({ ...simulation,\n        work: sim,\n        text: Stop\n      });\n      startSimulation(props.data, sim);\n    }\n  };\n\n  let flag = simulation.text === simulationEnum.Stop && simulation.work;\n  useEffect(() => {\n    updateInfoOrder(order); // Обновляем название докуммента, используя API браузера\n  }, [order]);\n  const history = useHistory();\n  const location = useLocation();\n\n  const openInfo = () => {\n    history.push('/orderInfo', {\n      data: props.data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      minWidth: 200,\n      color: flag ? 'white' : 'black',\n      backgroundColor: props.OrderColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      titleTypographyProps: {\n        variant: \"h6\"\n      },\n      action: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"settings\",\n          onClick: openInfo,\n          children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 10\n      }, this),\n      title: \"Заказ номер: \" + props.data.name,\n      subheader: /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          color: flag ? 'white' : 'black'\n        },\n        children: props.data.tActual\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: simulation.work ? \"success\" : \"info\",\n        variant: simulation.work ? \"contained\" : \"outlined\",\n        onClick: onSimulation,\n        children: simulation.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardOrderInDefault, \"BNrMg5b1HFGRCZkVnxFXQiKuhgY=\", false, function () {\n  return [useTypedSelector, useActionOrders, useHistory, useLocation];\n});\n\n_c = CardOrderInDefault;\nexport default CardOrderInDefault;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardOrderInDefault\");","map":{"version":3,"sources":["/Users/sergeismogliuk/Documents/Project/My_experience/New_project_diplom/front/src/Component/Card/Pages/CardOrderInDefault.tsx"],"names":["React","useEffect","useState","Card","CardActions","Button","Typography","CardHeader","IconButton","SettingsIcon","Divider","IDataColorOrderInDefault","useHistory","useLocation","useActionOrders","useTypedSelector","simulationEnum","CardOrderInDefault","props","simulation","setSimulation","text","Start","color","NotWork","work","order","setOrder","undefined","data","Stop","orders","loading","state","startSimulation","updateInfoOrder","onSimulation","sim","flag","history","location","openInfo","push","minWidth","backgroundColor","OrderColor","variant","name","tActual"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CardHeader, IconButton } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Divider } from '@mui/material';\n\nimport {IDataColorOrderInDefault} from '../../Data/DataCardOrderInDefault/IDataColorOrderInDefault'\nimport IDataOrder from '../../Data/IDataOrder';\nimport { Redirect,useHistory, useLocation } from 'react-router'\nimport { useActionOrders } from '../../../hooks/useActionOrders';\nimport { useTypedSelector } from '../../../hooks/leftMenuSelector';\n\nenum simulationEnum{\n  Start = 'Запустить симуляцию',\n  Stop = 'Остановить симуляцию'\n}\nconst CardOrderInDefault = (props:{OrderColor: IDataColorOrderInDefault, data: IDataOrder}) => {\n\n  const [simulation, setSimulation] = useState({\n    text: simulationEnum.Start,\n    color: IDataColorOrderInDefault.NotWork,\n    work: false\n  });\n\n  const[order, setOrder] = useState<IDataOrder>();\n\n\n  if(order === undefined)\n  {\n    setOrder(props.data);\n  }\n\n  const {Start,Stop} = simulationEnum;\n\n\n  const {orders, loading} = useTypedSelector(state => state.orders);\n  const {startSimulation, updateInfoOrder} = useActionOrders()\n\n  const onSimulation = () => {\n\n    if(simulation.work)\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Start })\n      startSimulation(props.data as IDataOrder, sim);\n    }\n    else\n    {\n      let sim = !simulation.work;\n      setSimulation({...simulation, work:sim, text: Stop })\n      startSimulation(props.data as IDataOrder, sim);\n    }\n  }\n\n  let flag = (simulation.text === simulationEnum.Stop && simulation.work)\n\n\n  useEffect(() => {\n    updateInfoOrder(order)// Обновляем название докуммента, используя API браузера\n  },[order]);\n \n  const history = useHistory();\n  const location = useLocation();\n  \n  const openInfo = () => {\n    history.push('/orderInfo', { data: props.data});\n  }\n\n\n  return (\n    <Card sx={{ minWidth: 200,color: flag ? 'white':'black',  backgroundColor: props.OrderColor }}>\n      <CardHeader\n        titleTypographyProps={{ variant: \"h6\" }}\n        action={\n         <div>\n          <IconButton \n          aria-label=\"settings\"\n          onClick={openInfo}>\n            <SettingsIcon />\n          </IconButton>\n         </div>\n        }\n        title={\"Заказ номер: \"+props.data.name}\n        subheader={<Typography style={{color: flag ? 'white':'black'}}>{props.data.tActual}</Typography>}\n      />\n      <Divider/>\n      <CardActions>\n        <Button size=\"small\" color={simulation.work ? \"success\":\"info\"} variant={simulation.work ? \"contained\":\"outlined\"} onClick={onSimulation}>{simulation.text}</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default CardOrderInDefault;"]},"metadata":{},"sourceType":"module"}